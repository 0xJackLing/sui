
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

type {:datatype} Vec _;

function {:constructor} Vec<T>(v: [int]T, l: int): Vec T;

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := l#Vec(v);
    Vec(v#Vec(v)[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v#Vec(v)[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    l#Vec(v)
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    l#Vec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(v#Vec(v)[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v#Vec(v)[j] else v#Vec(v)[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := l#Vec(v1), v#Vec(v1), l#Vec(v2), v#Vec(v2);
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v);
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v#Vec(v)[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v#Vec(v)[i := elem], l#Vec(v))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(m[i := m[j]][j := m[i]], l#Vec(v)))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := l#Vec(v);
    (exists i: int :: InRangeVec(v, i) && v#Vec(v)[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

type {:datatype} Table _ _;

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
function {:constructor} Table<K, V>(v: [K]V, e: [K]bool, l: int): Table K V;

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    v#Table(t)[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    l#Table(t)
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    e#Table(t)[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(v#Table(t)[k := v], e#Table(t)[k := true], l#Table(t))
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(v#Table(t)[k := v], e#Table(t)[k := true], l#Table(t) + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(v#Table(t), e#Table(t)[k := false], l#Table(t) - 1)
}
// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native transfer// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `#0`


procedure {:inline 1} $2_transfer_transfer_internal'#0'(obj: #0, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'#0'(obj: #0);

procedure {:inline 1} $2_transfer_freeze_object'#0'(obj: #0);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_bag_Bag`


procedure {:inline 1} $2_transfer_transfer_internal'$2_bag_Bag'(obj: $2_bag_Bag, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_bag_Bag'(obj: $2_bag_Bag);

procedure {:inline 1} $2_transfer_freeze_object'$2_bag_Bag'(obj: $2_bag_Bag);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_bag_Item'#0'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_bag_Item'#0''(obj: $2_bag_Item'#0', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_bag_Item'#0''(obj: $2_bag_Item'#0');

procedure {:inline 1} $2_transfer_freeze_object'$2_bag_Item'#0''(obj: $2_bag_Item'#0');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_coin_Coin'#0'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_coin_Coin'#0''(obj: $2_coin_Coin'#0', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_coin_Coin'#0''(obj: $2_coin_Coin'#0');

procedure {:inline 1} $2_transfer_freeze_object'$2_coin_Coin'#0''(obj: $2_coin_Coin'#0');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_coin_Coin'$2_sui_SUI'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_coin_Coin'$2_sui_SUI''(obj: $2_coin_Coin'$2_sui_SUI', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_coin_Coin'$2_sui_SUI''(obj: $2_coin_Coin'$2_sui_SUI');

procedure {:inline 1} $2_transfer_freeze_object'$2_coin_Coin'$2_sui_SUI''(obj: $2_coin_Coin'$2_sui_SUI');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_coin_TreasuryCap'#0'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_coin_TreasuryCap'#0''(obj: $2_coin_TreasuryCap'#0', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_coin_TreasuryCap'#0''(obj: $2_coin_TreasuryCap'#0');

procedure {:inline 1} $2_transfer_freeze_object'$2_coin_TreasuryCap'#0''(obj: $2_coin_TreasuryCap'#0');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_collection_Collection'#0'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_collection_Collection'#0''(obj: $2_collection_Collection'#0', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_collection_Collection'#0''(obj: $2_collection_Collection'#0');

procedure {:inline 1} $2_transfer_freeze_object'$2_collection_Collection'#0''(obj: $2_collection_Collection'#0');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_collection_Item'#0'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_collection_Item'#0''(obj: $2_collection_Item'#0', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_collection_Item'#0''(obj: $2_collection_Item'#0');

procedure {:inline 1} $2_transfer_freeze_object'$2_collection_Item'#0''(obj: $2_collection_Item'#0');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_delegation_Delegation`


procedure {:inline 1} $2_transfer_transfer_internal'$2_delegation_Delegation'(obj: $2_delegation_Delegation, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_delegation_Delegation'(obj: $2_delegation_Delegation);

procedure {:inline 1} $2_transfer_freeze_object'$2_delegation_Delegation'(obj: $2_delegation_Delegation);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_devnet_nft_DevNetNFT`


procedure {:inline 1} $2_transfer_transfer_internal'$2_devnet_nft_DevNetNFT'(obj: $2_devnet_nft_DevNetNFT, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_devnet_nft_DevNetNFT'(obj: $2_devnet_nft_DevNetNFT);

procedure {:inline 1} $2_transfer_freeze_object'$2_devnet_nft_DevNetNFT'(obj: $2_devnet_nft_DevNetNFT);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_epoch_reward_record_EpochRewardRecord`


procedure {:inline 1} $2_transfer_transfer_internal'$2_epoch_reward_record_EpochRewardRecord'(obj: $2_epoch_reward_record_EpochRewardRecord, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_epoch_reward_record_EpochRewardRecord'(obj: $2_epoch_reward_record_EpochRewardRecord);

procedure {:inline 1} $2_transfer_freeze_object'$2_epoch_reward_record_EpochRewardRecord'(obj: $2_epoch_reward_record_EpochRewardRecord);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_locked_coin_LockedCoin'#0'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_locked_coin_LockedCoin'#0''(obj: $2_locked_coin_LockedCoin'#0', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_locked_coin_LockedCoin'#0''(obj: $2_locked_coin_LockedCoin'#0');

procedure {:inline 1} $2_transfer_freeze_object'$2_locked_coin_LockedCoin'#0''(obj: $2_locked_coin_LockedCoin'#0');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_locked_coin_LockedCoin'$2_sui_SUI'`


procedure {:inline 1} $2_transfer_transfer_internal'$2_locked_coin_LockedCoin'$2_sui_SUI''(obj: $2_locked_coin_LockedCoin'$2_sui_SUI', recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_locked_coin_LockedCoin'$2_sui_SUI''(obj: $2_locked_coin_LockedCoin'$2_sui_SUI');

procedure {:inline 1} $2_transfer_freeze_object'$2_locked_coin_LockedCoin'$2_sui_SUI''(obj: $2_locked_coin_LockedCoin'$2_sui_SUI');// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_object_basics_Object`


procedure {:inline 1} $2_transfer_transfer_internal'$2_object_basics_Object'(obj: $2_object_basics_Object, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_object_basics_Object'(obj: $2_object_basics_Object);

procedure {:inline 1} $2_transfer_freeze_object'$2_object_basics_Object'(obj: $2_object_basics_Object);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_object_basics_Wrapper`


procedure {:inline 1} $2_transfer_transfer_internal'$2_object_basics_Wrapper'(obj: $2_object_basics_Wrapper, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_object_basics_Wrapper'(obj: $2_object_basics_Wrapper);

procedure {:inline 1} $2_transfer_freeze_object'$2_object_basics_Wrapper'(obj: $2_object_basics_Wrapper);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_stake_Stake`


procedure {:inline 1} $2_transfer_transfer_internal'$2_stake_Stake'(obj: $2_stake_Stake, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_stake_Stake'(obj: $2_stake_Stake);

procedure {:inline 1} $2_transfer_freeze_object'$2_stake_Stake'(obj: $2_stake_Stake);// ----------------------------------------------------------------------------------
// Native transfer implementation for object type `$2_sui_system_SuiSystemState`


procedure {:inline 1} $2_transfer_transfer_internal'$2_sui_system_SuiSystemState'(obj: $2_sui_system_SuiSystemState, recipient: int, to_object: bool);

procedure {:inline 1} $2_transfer_share_object'$2_sui_system_SuiSystemState'(obj: $2_sui_system_SuiSystemState);

procedure {:inline 1} $2_transfer_freeze_object'$2_sui_system_SuiSystemState'(obj: $2_sui_system_SuiSystemState);

// ==================================================================================
// Native object

procedure {:inline 1} $2_object_bytes_to_address(bytes: Vec (int)) returns (res: int);// ----------------------------------------------------------------------------------
// Native id implementation for object type `#0`


procedure {:inline 1} $2_object_get_info'#0'(obj: #0) returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'#0'(info: #0);// ----------------------------------------------------------------------------------
// Native id implementation for object type `#1`


procedure {:inline 1} $2_object_get_info'#1'(obj: #1) returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'#1'(info: #1);// ----------------------------------------------------------------------------------
// Native id implementation for object type `$2_bag_Bag`


procedure {:inline 1} $2_object_get_info'$2_bag_Bag'(obj: $2_bag_Bag) returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'$2_bag_Bag'(info: $2_bag_Bag);// ----------------------------------------------------------------------------------
// Native id implementation for object type `$2_bag_Item'#0'`


procedure {:inline 1} $2_object_get_info'$2_bag_Item'#0''(obj: $2_bag_Item'#0') returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'$2_bag_Item'#0''(info: $2_bag_Item'#0');// ----------------------------------------------------------------------------------
// Native id implementation for object type `$2_collection_Collection'#0'`


procedure {:inline 1} $2_object_get_info'$2_collection_Collection'#0''(obj: $2_collection_Collection'#0') returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'$2_collection_Collection'#0''(info: $2_collection_Collection'#0');// ----------------------------------------------------------------------------------
// Native id implementation for object type `$2_collection_Item'#0'`


procedure {:inline 1} $2_object_get_info'$2_collection_Item'#0''(obj: $2_collection_Item'#0') returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'$2_collection_Item'#0''(info: $2_collection_Item'#0');// ----------------------------------------------------------------------------------
// Native id implementation for object type `$2_object_UID`


procedure {:inline 1} $2_object_get_info'$2_object_UID'(obj: $2_object_UID) returns (res: $2_object_Info);

procedure {:inline 1} $2_object_delete_impl'$2_object_UID'(info: $2_object_UID);

// ==================================================================================
// Native tx_context

procedure {:inline 1} $2_tx_context_derive_id(tx_hash: Vec (int), ids_created: int) returns (res: int);

// ==================================================================================
// Native event// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$2_devnet_nft_MintNFTEvent`

procedure {:inline 1} $2_event_emit'$2_devnet_nft_MintNFTEvent'(event: $2_devnet_nft_MintNFTEvent);// ----------------------------------------------------------------------------------
// Native Sui event implementation for object type `$2_object_basics_NewValueEvent`

procedure {:inline 1} $2_event_emit'$2_object_basics_NewValueEvent'(event: $2_object_basics_NewValueEvent);


// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/64/128
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shl(src1, src2) mod 256;
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shl(src1, src2) mod 18446744073709551616;
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shl(src1, src2) mod 340282366920938463463374607431768211456;
}

// We don't need to know the size of destination, so no $ShrU8, etc.
procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#1`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#1''(v1: Vec (#1), v2: Vec (#1)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#1'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'#1''(v: Vec (#1)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#1'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#1'(v: Vec (#1), e: #1): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#1'(ReadVec(v, i), e))
}

function $IndexOfVec'#1'(v: Vec (#1), e: #1): int;
axiom (forall v: Vec (#1), e: #1:: {$IndexOfVec'#1'(v, e)}
    (var i := $IndexOfVec'#1'(v, e);
     if (!$ContainsVec'#1'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#1'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#1'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#1'(v: Vec (#1)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#1'(): Vec (#1) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#1'() returns (v: Vec (#1)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#1'(): Vec (#1) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#1'(v: Vec (#1)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#1'(m: $Mutation (Vec (#1)), val: #1) returns (m': $Mutation (Vec (#1))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#1'(v: Vec (#1), val: #1): Vec (#1) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#1'(m: $Mutation (Vec (#1))) returns (e: #1, m': $Mutation (Vec (#1))) {
    var v: Vec (#1);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#1'(m: $Mutation (Vec (#1)), other: Vec (#1)) returns (m': $Mutation (Vec (#1))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#1'(m: $Mutation (Vec (#1))) returns (m': $Mutation (Vec (#1))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'#1'(v: Vec (#1)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#1'(v: Vec (#1)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#1'(v: Vec (#1), i: int) returns (dst: #1) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#1'(v: Vec (#1), i: int): #1 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#1'(m: $Mutation (Vec (#1)), index: int)
returns (dst: $Mutation (#1), m': $Mutation (Vec (#1)))
{
    var v: Vec (#1);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#1'(v: Vec (#1), i: int): #1 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#1'(v: Vec (#1)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#1'(m: $Mutation (Vec (#1)), i: int, j: int) returns (m': $Mutation (Vec (#1)))
{
    var v: Vec (#1);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#1'(v: Vec (#1), i: int, j: int): Vec (#1) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#1'(m: $Mutation (Vec (#1)), i: int) returns (e: #1, m': $Mutation (Vec (#1)))
{
    var v: Vec (#1);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#1'(m: $Mutation (Vec (#1)), i: int) returns (e: #1, m': $Mutation (Vec (#1)))
{
    var len: int;
    var v: Vec (#1);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#1'(v: Vec (#1), e: #1) returns (res: bool)  {
    res := $ContainsVec'#1'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#1'(v: Vec (#1), e: #1) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#1'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ascii_String`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_ascii_String''(v1: Vec ($1_ascii_String), v2: Vec ($1_ascii_String)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_ascii_String'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_ascii_String''(v: Vec ($1_ascii_String)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ascii_String'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ascii_String'(v: Vec ($1_ascii_String), e: $1_ascii_String): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ascii_String'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ascii_String'(v: Vec ($1_ascii_String), e: $1_ascii_String): int;
axiom (forall v: Vec ($1_ascii_String), e: $1_ascii_String:: {$IndexOfVec'$1_ascii_String'(v, e)}
    (var i := $IndexOfVec'$1_ascii_String'(v, e);
     if (!$ContainsVec'$1_ascii_String'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ascii_String'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ascii_String'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ascii_String'(v: Vec ($1_ascii_String)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ascii_String'(): Vec ($1_ascii_String) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_ascii_String'() returns (v: Vec ($1_ascii_String)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_ascii_String'(): Vec ($1_ascii_String) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_ascii_String'(v: Vec ($1_ascii_String)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String)), val: $1_ascii_String) returns (m': $Mutation (Vec ($1_ascii_String))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_ascii_String'(v: Vec ($1_ascii_String), val: $1_ascii_String): Vec ($1_ascii_String) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String))) returns (e: $1_ascii_String, m': $Mutation (Vec ($1_ascii_String))) {
    var v: Vec ($1_ascii_String);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String)), other: Vec ($1_ascii_String)) returns (m': $Mutation (Vec ($1_ascii_String))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String))) returns (m': $Mutation (Vec ($1_ascii_String))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$1_ascii_String'(v: Vec ($1_ascii_String)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_ascii_String'(v: Vec ($1_ascii_String)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_ascii_String'(v: Vec ($1_ascii_String), i: int) returns (dst: $1_ascii_String) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_ascii_String'(v: Vec ($1_ascii_String), i: int): $1_ascii_String {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String)), index: int)
returns (dst: $Mutation ($1_ascii_String), m': $Mutation (Vec ($1_ascii_String)))
{
    var v: Vec ($1_ascii_String);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_ascii_String'(v: Vec ($1_ascii_String), i: int): $1_ascii_String {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_ascii_String'(v: Vec ($1_ascii_String)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String)), i: int, j: int) returns (m': $Mutation (Vec ($1_ascii_String)))
{
    var v: Vec ($1_ascii_String);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_ascii_String'(v: Vec ($1_ascii_String), i: int, j: int): Vec ($1_ascii_String) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String)), i: int) returns (e: $1_ascii_String, m': $Mutation (Vec ($1_ascii_String)))
{
    var v: Vec ($1_ascii_String);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_ascii_String'(m: $Mutation (Vec ($1_ascii_String)), i: int) returns (e: $1_ascii_String, m': $Mutation (Vec ($1_ascii_String)))
{
    var len: int;
    var v: Vec ($1_ascii_String);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_ascii_String'(v: Vec ($1_ascii_String), e: $1_ascii_String) returns (res: bool)  {
    res := $ContainsVec'$1_ascii_String'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_ascii_String'(v: Vec ($1_ascii_String), e: $1_ascii_String) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ascii_String'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_balance_Balance'$2_sui_SUI'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_balance_Balance'$2_sui_SUI'''(v1: Vec ($2_balance_Balance'$2_sui_SUI'), v2: Vec ($2_balance_Balance'$2_sui_SUI')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_balance_Balance'$2_sui_SUI''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_balance_Balance'$2_sui_SUI'''(v: Vec ($2_balance_Balance'$2_sui_SUI')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_balance_Balance'$2_sui_SUI''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), e: $2_balance_Balance'$2_sui_SUI'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_balance_Balance'$2_sui_SUI''(ReadVec(v, i), e))
}

function $IndexOfVec'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), e: $2_balance_Balance'$2_sui_SUI'): int;
axiom (forall v: Vec ($2_balance_Balance'$2_sui_SUI'), e: $2_balance_Balance'$2_sui_SUI':: {$IndexOfVec'$2_balance_Balance'$2_sui_SUI''(v, e)}
    (var i := $IndexOfVec'$2_balance_Balance'$2_sui_SUI''(v, e);
     if (!$ContainsVec'$2_balance_Balance'$2_sui_SUI''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_balance_Balance'$2_sui_SUI''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_balance_Balance'$2_sui_SUI''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_balance_Balance'$2_sui_SUI''(): Vec ($2_balance_Balance'$2_sui_SUI') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_balance_Balance'$2_sui_SUI''() returns (v: Vec ($2_balance_Balance'$2_sui_SUI')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_balance_Balance'$2_sui_SUI''(): Vec ($2_balance_Balance'$2_sui_SUI') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')), val: $2_balance_Balance'$2_sui_SUI') returns (m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), val: $2_balance_Balance'$2_sui_SUI'): Vec ($2_balance_Balance'$2_sui_SUI') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI'))) returns (e: $2_balance_Balance'$2_sui_SUI', m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI'))) {
    var v: Vec ($2_balance_Balance'$2_sui_SUI');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')), other: Vec ($2_balance_Balance'$2_sui_SUI')) returns (m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI'))) returns (m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), i: int) returns (dst: $2_balance_Balance'$2_sui_SUI') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), i: int): $2_balance_Balance'$2_sui_SUI' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')), index: int)
returns (dst: $Mutation ($2_balance_Balance'$2_sui_SUI'), m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')))
{
    var v: Vec ($2_balance_Balance'$2_sui_SUI');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), i: int): $2_balance_Balance'$2_sui_SUI' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')), i: int, j: int) returns (m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')))
{
    var v: Vec ($2_balance_Balance'$2_sui_SUI');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), i: int, j: int): Vec ($2_balance_Balance'$2_sui_SUI') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')), i: int) returns (e: $2_balance_Balance'$2_sui_SUI', m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')))
{
    var v: Vec ($2_balance_Balance'$2_sui_SUI');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_balance_Balance'$2_sui_SUI''(m: $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')), i: int) returns (e: $2_balance_Balance'$2_sui_SUI', m': $Mutation (Vec ($2_balance_Balance'$2_sui_SUI')))
{
    var len: int;
    var v: Vec ($2_balance_Balance'$2_sui_SUI');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), e: $2_balance_Balance'$2_sui_SUI') returns (res: bool)  {
    res := $ContainsVec'$2_balance_Balance'$2_sui_SUI''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI'), e: $2_balance_Balance'$2_sui_SUI') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_balance_Balance'$2_sui_SUI''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_coin_Coin'#0'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_coin_Coin'#0'''(v1: Vec ($2_coin_Coin'#0'), v2: Vec ($2_coin_Coin'#0')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_coin_Coin'#0''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_coin_Coin'#0'''(v: Vec ($2_coin_Coin'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_coin_Coin'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), e: $2_coin_Coin'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_coin_Coin'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), e: $2_coin_Coin'#0'): int;
axiom (forall v: Vec ($2_coin_Coin'#0'), e: $2_coin_Coin'#0':: {$IndexOfVec'$2_coin_Coin'#0''(v, e)}
    (var i := $IndexOfVec'$2_coin_Coin'#0''(v, e);
     if (!$ContainsVec'$2_coin_Coin'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_coin_Coin'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_coin_Coin'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_coin_Coin'#0''(): Vec ($2_coin_Coin'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_coin_Coin'#0''() returns (v: Vec ($2_coin_Coin'#0')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_coin_Coin'#0''(): Vec ($2_coin_Coin'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0')), val: $2_coin_Coin'#0') returns (m': $Mutation (Vec ($2_coin_Coin'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), val: $2_coin_Coin'#0'): Vec ($2_coin_Coin'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0'))) returns (e: $2_coin_Coin'#0', m': $Mutation (Vec ($2_coin_Coin'#0'))) {
    var v: Vec ($2_coin_Coin'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0')), other: Vec ($2_coin_Coin'#0')) returns (m': $Mutation (Vec ($2_coin_Coin'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0'))) returns (m': $Mutation (Vec ($2_coin_Coin'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), i: int) returns (dst: $2_coin_Coin'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), i: int): $2_coin_Coin'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0')), index: int)
returns (dst: $Mutation ($2_coin_Coin'#0'), m': $Mutation (Vec ($2_coin_Coin'#0')))
{
    var v: Vec ($2_coin_Coin'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), i: int): $2_coin_Coin'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0')), i: int, j: int) returns (m': $Mutation (Vec ($2_coin_Coin'#0')))
{
    var v: Vec ($2_coin_Coin'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), i: int, j: int): Vec ($2_coin_Coin'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0')), i: int) returns (e: $2_coin_Coin'#0', m': $Mutation (Vec ($2_coin_Coin'#0')))
{
    var v: Vec ($2_coin_Coin'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_coin_Coin'#0''(m: $Mutation (Vec ($2_coin_Coin'#0')), i: int) returns (e: $2_coin_Coin'#0', m': $Mutation (Vec ($2_coin_Coin'#0')))
{
    var len: int;
    var v: Vec ($2_coin_Coin'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), e: $2_coin_Coin'#0') returns (res: bool)  {
    res := $ContainsVec'$2_coin_Coin'#0''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_coin_Coin'#0''(v: Vec ($2_coin_Coin'#0'), e: $2_coin_Coin'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_coin_Coin'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_epoch_time_lock_EpochTimeLock`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_epoch_time_lock_EpochTimeLock''(v1: Vec ($2_epoch_time_lock_EpochTimeLock), v2: Vec ($2_epoch_time_lock_EpochTimeLock)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_epoch_time_lock_EpochTimeLock'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_epoch_time_lock_EpochTimeLock''(v: Vec ($2_epoch_time_lock_EpochTimeLock)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_epoch_time_lock_EpochTimeLock'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), e: $2_epoch_time_lock_EpochTimeLock): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_epoch_time_lock_EpochTimeLock'(ReadVec(v, i), e))
}

function $IndexOfVec'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), e: $2_epoch_time_lock_EpochTimeLock): int;
axiom (forall v: Vec ($2_epoch_time_lock_EpochTimeLock), e: $2_epoch_time_lock_EpochTimeLock:: {$IndexOfVec'$2_epoch_time_lock_EpochTimeLock'(v, e)}
    (var i := $IndexOfVec'$2_epoch_time_lock_EpochTimeLock'(v, e);
     if (!$ContainsVec'$2_epoch_time_lock_EpochTimeLock'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_epoch_time_lock_EpochTimeLock'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_epoch_time_lock_EpochTimeLock'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_epoch_time_lock_EpochTimeLock'(): Vec ($2_epoch_time_lock_EpochTimeLock) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_epoch_time_lock_EpochTimeLock'() returns (v: Vec ($2_epoch_time_lock_EpochTimeLock)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_epoch_time_lock_EpochTimeLock'(): Vec ($2_epoch_time_lock_EpochTimeLock) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)), val: $2_epoch_time_lock_EpochTimeLock) returns (m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), val: $2_epoch_time_lock_EpochTimeLock): Vec ($2_epoch_time_lock_EpochTimeLock) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock))) returns (e: $2_epoch_time_lock_EpochTimeLock, m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock))) {
    var v: Vec ($2_epoch_time_lock_EpochTimeLock);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)), other: Vec ($2_epoch_time_lock_EpochTimeLock)) returns (m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock))) returns (m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), i: int) returns (dst: $2_epoch_time_lock_EpochTimeLock) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), i: int): $2_epoch_time_lock_EpochTimeLock {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)), index: int)
returns (dst: $Mutation ($2_epoch_time_lock_EpochTimeLock), m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)))
{
    var v: Vec ($2_epoch_time_lock_EpochTimeLock);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), i: int): $2_epoch_time_lock_EpochTimeLock {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)), i: int, j: int) returns (m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)))
{
    var v: Vec ($2_epoch_time_lock_EpochTimeLock);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), i: int, j: int): Vec ($2_epoch_time_lock_EpochTimeLock) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)), i: int) returns (e: $2_epoch_time_lock_EpochTimeLock, m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)))
{
    var v: Vec ($2_epoch_time_lock_EpochTimeLock);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_epoch_time_lock_EpochTimeLock'(m: $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)), i: int) returns (e: $2_epoch_time_lock_EpochTimeLock, m': $Mutation (Vec ($2_epoch_time_lock_EpochTimeLock)))
{
    var len: int;
    var v: Vec ($2_epoch_time_lock_EpochTimeLock);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), e: $2_epoch_time_lock_EpochTimeLock) returns (res: bool)  {
    res := $ContainsVec'$2_epoch_time_lock_EpochTimeLock'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock), e: $2_epoch_time_lock_EpochTimeLock) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_epoch_time_lock_EpochTimeLock'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_object_ID`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_object_ID''(v1: Vec ($2_object_ID), v2: Vec ($2_object_ID)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_object_ID'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_object_ID''(v: Vec ($2_object_ID)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_object_ID'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_object_ID'(v: Vec ($2_object_ID), e: $2_object_ID): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_object_ID'(ReadVec(v, i), e))
}

function $IndexOfVec'$2_object_ID'(v: Vec ($2_object_ID), e: $2_object_ID): int;
axiom (forall v: Vec ($2_object_ID), e: $2_object_ID:: {$IndexOfVec'$2_object_ID'(v, e)}
    (var i := $IndexOfVec'$2_object_ID'(v, e);
     if (!$ContainsVec'$2_object_ID'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_object_ID'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_object_ID'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_object_ID'(v: Vec ($2_object_ID)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_object_ID'(): Vec ($2_object_ID) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_object_ID'() returns (v: Vec ($2_object_ID)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_object_ID'(): Vec ($2_object_ID) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_object_ID'(v: Vec ($2_object_ID)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_object_ID'(m: $Mutation (Vec ($2_object_ID)), val: $2_object_ID) returns (m': $Mutation (Vec ($2_object_ID))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_object_ID'(v: Vec ($2_object_ID), val: $2_object_ID): Vec ($2_object_ID) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_object_ID'(m: $Mutation (Vec ($2_object_ID))) returns (e: $2_object_ID, m': $Mutation (Vec ($2_object_ID))) {
    var v: Vec ($2_object_ID);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_object_ID'(m: $Mutation (Vec ($2_object_ID)), other: Vec ($2_object_ID)) returns (m': $Mutation (Vec ($2_object_ID))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_object_ID'(m: $Mutation (Vec ($2_object_ID))) returns (m': $Mutation (Vec ($2_object_ID))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_object_ID'(v: Vec ($2_object_ID)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_object_ID'(v: Vec ($2_object_ID)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_object_ID'(v: Vec ($2_object_ID), i: int) returns (dst: $2_object_ID) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_object_ID'(v: Vec ($2_object_ID), i: int): $2_object_ID {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_object_ID'(m: $Mutation (Vec ($2_object_ID)), index: int)
returns (dst: $Mutation ($2_object_ID), m': $Mutation (Vec ($2_object_ID)))
{
    var v: Vec ($2_object_ID);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_object_ID'(v: Vec ($2_object_ID), i: int): $2_object_ID {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_object_ID'(v: Vec ($2_object_ID)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_object_ID'(m: $Mutation (Vec ($2_object_ID)), i: int, j: int) returns (m': $Mutation (Vec ($2_object_ID)))
{
    var v: Vec ($2_object_ID);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_object_ID'(v: Vec ($2_object_ID), i: int, j: int): Vec ($2_object_ID) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_object_ID'(m: $Mutation (Vec ($2_object_ID)), i: int) returns (e: $2_object_ID, m': $Mutation (Vec ($2_object_ID)))
{
    var v: Vec ($2_object_ID);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_object_ID'(m: $Mutation (Vec ($2_object_ID)), i: int) returns (e: $2_object_ID, m': $Mutation (Vec ($2_object_ID)))
{
    var len: int;
    var v: Vec ($2_object_ID);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_object_ID'(v: Vec ($2_object_ID), e: $2_object_ID) returns (res: bool)  {
    res := $ContainsVec'$2_object_ID'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_object_ID'(v: Vec ($2_object_ID), e: $2_object_ID) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_object_ID'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_validator_Validator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_validator_Validator''(v1: Vec ($2_validator_Validator), v2: Vec ($2_validator_Validator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_validator_Validator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_validator_Validator''(v: Vec ($2_validator_Validator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_validator_Validator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_validator_Validator'(v: Vec ($2_validator_Validator), e: $2_validator_Validator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_validator_Validator'(ReadVec(v, i), e))
}

function $IndexOfVec'$2_validator_Validator'(v: Vec ($2_validator_Validator), e: $2_validator_Validator): int;
axiom (forall v: Vec ($2_validator_Validator), e: $2_validator_Validator:: {$IndexOfVec'$2_validator_Validator'(v, e)}
    (var i := $IndexOfVec'$2_validator_Validator'(v, e);
     if (!$ContainsVec'$2_validator_Validator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_validator_Validator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_validator_Validator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_validator_Validator'(v: Vec ($2_validator_Validator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_validator_Validator'(): Vec ($2_validator_Validator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_validator_Validator'() returns (v: Vec ($2_validator_Validator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_validator_Validator'(): Vec ($2_validator_Validator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_validator_Validator'(v: Vec ($2_validator_Validator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator)), val: $2_validator_Validator) returns (m': $Mutation (Vec ($2_validator_Validator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_validator_Validator'(v: Vec ($2_validator_Validator), val: $2_validator_Validator): Vec ($2_validator_Validator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator))) returns (e: $2_validator_Validator, m': $Mutation (Vec ($2_validator_Validator))) {
    var v: Vec ($2_validator_Validator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator)), other: Vec ($2_validator_Validator)) returns (m': $Mutation (Vec ($2_validator_Validator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator))) returns (m': $Mutation (Vec ($2_validator_Validator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_validator_Validator'(v: Vec ($2_validator_Validator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_validator_Validator'(v: Vec ($2_validator_Validator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_validator_Validator'(v: Vec ($2_validator_Validator), i: int) returns (dst: $2_validator_Validator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_validator_Validator'(v: Vec ($2_validator_Validator), i: int): $2_validator_Validator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator)), index: int)
returns (dst: $Mutation ($2_validator_Validator), m': $Mutation (Vec ($2_validator_Validator)))
{
    var v: Vec ($2_validator_Validator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_validator_Validator'(v: Vec ($2_validator_Validator), i: int): $2_validator_Validator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_validator_Validator'(v: Vec ($2_validator_Validator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator)), i: int, j: int) returns (m': $Mutation (Vec ($2_validator_Validator)))
{
    var v: Vec ($2_validator_Validator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_validator_Validator'(v: Vec ($2_validator_Validator), i: int, j: int): Vec ($2_validator_Validator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator)), i: int) returns (e: $2_validator_Validator, m': $Mutation (Vec ($2_validator_Validator)))
{
    var v: Vec ($2_validator_Validator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_validator_Validator'(m: $Mutation (Vec ($2_validator_Validator)), i: int) returns (e: $2_validator_Validator, m': $Mutation (Vec ($2_validator_Validator)))
{
    var len: int;
    var v: Vec ($2_validator_Validator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_validator_Validator'(v: Vec ($2_validator_Validator), e: $2_validator_Validator) returns (res: bool)  {
    res := $ContainsVec'$2_validator_Validator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_validator_Validator'(v: Vec ($2_validator_Validator), e: $2_validator_Validator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_validator_Validator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_validator_ValidatorMetadata`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_validator_ValidatorMetadata''(v1: Vec ($2_validator_ValidatorMetadata), v2: Vec ($2_validator_ValidatorMetadata)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_validator_ValidatorMetadata'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_validator_ValidatorMetadata''(v: Vec ($2_validator_ValidatorMetadata)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_validator_ValidatorMetadata'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), e: $2_validator_ValidatorMetadata): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_validator_ValidatorMetadata'(ReadVec(v, i), e))
}

function $IndexOfVec'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), e: $2_validator_ValidatorMetadata): int;
axiom (forall v: Vec ($2_validator_ValidatorMetadata), e: $2_validator_ValidatorMetadata:: {$IndexOfVec'$2_validator_ValidatorMetadata'(v, e)}
    (var i := $IndexOfVec'$2_validator_ValidatorMetadata'(v, e);
     if (!$ContainsVec'$2_validator_ValidatorMetadata'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_validator_ValidatorMetadata'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_validator_ValidatorMetadata'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_validator_ValidatorMetadata'(): Vec ($2_validator_ValidatorMetadata) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_validator_ValidatorMetadata'() returns (v: Vec ($2_validator_ValidatorMetadata)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_validator_ValidatorMetadata'(): Vec ($2_validator_ValidatorMetadata) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata)), val: $2_validator_ValidatorMetadata) returns (m': $Mutation (Vec ($2_validator_ValidatorMetadata))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), val: $2_validator_ValidatorMetadata): Vec ($2_validator_ValidatorMetadata) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata))) returns (e: $2_validator_ValidatorMetadata, m': $Mutation (Vec ($2_validator_ValidatorMetadata))) {
    var v: Vec ($2_validator_ValidatorMetadata);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata)), other: Vec ($2_validator_ValidatorMetadata)) returns (m': $Mutation (Vec ($2_validator_ValidatorMetadata))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata))) returns (m': $Mutation (Vec ($2_validator_ValidatorMetadata))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), i: int) returns (dst: $2_validator_ValidatorMetadata) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), i: int): $2_validator_ValidatorMetadata {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata)), index: int)
returns (dst: $Mutation ($2_validator_ValidatorMetadata), m': $Mutation (Vec ($2_validator_ValidatorMetadata)))
{
    var v: Vec ($2_validator_ValidatorMetadata);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), i: int): $2_validator_ValidatorMetadata {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata)), i: int, j: int) returns (m': $Mutation (Vec ($2_validator_ValidatorMetadata)))
{
    var v: Vec ($2_validator_ValidatorMetadata);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), i: int, j: int): Vec ($2_validator_ValidatorMetadata) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata)), i: int) returns (e: $2_validator_ValidatorMetadata, m': $Mutation (Vec ($2_validator_ValidatorMetadata)))
{
    var v: Vec ($2_validator_ValidatorMetadata);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_validator_ValidatorMetadata'(m: $Mutation (Vec ($2_validator_ValidatorMetadata)), i: int) returns (e: $2_validator_ValidatorMetadata, m': $Mutation (Vec ($2_validator_ValidatorMetadata)))
{
    var len: int;
    var v: Vec ($2_validator_ValidatorMetadata);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), e: $2_validator_ValidatorMetadata) returns (res: bool)  {
    res := $ContainsVec'$2_validator_ValidatorMetadata'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_validator_ValidatorMetadata'(v: Vec ($2_validator_ValidatorMetadata), e: $2_validator_ValidatorMetadata) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_validator_ValidatorMetadata'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$2_vec_map_Entry'#0_#1'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$2_vec_map_Entry'#0_#1'''(v1: Vec ($2_vec_map_Entry'#0_#1'), v2: Vec ($2_vec_map_Entry'#0_#1')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$2_vec_map_Entry'#0_#1''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$2_vec_map_Entry'#0_#1'''(v: Vec ($2_vec_map_Entry'#0_#1')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$2_vec_map_Entry'#0_#1''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), e: $2_vec_map_Entry'#0_#1'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'#0_#1''(ReadVec(v, i), e))
}

function $IndexOfVec'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), e: $2_vec_map_Entry'#0_#1'): int;
axiom (forall v: Vec ($2_vec_map_Entry'#0_#1'), e: $2_vec_map_Entry'#0_#1':: {$IndexOfVec'$2_vec_map_Entry'#0_#1''(v, e)}
    (var i := $IndexOfVec'$2_vec_map_Entry'#0_#1''(v, e);
     if (!$ContainsVec'$2_vec_map_Entry'#0_#1''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$2_vec_map_Entry'#0_#1''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$2_vec_map_Entry'#0_#1''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$2_vec_map_Entry'#0_#1''(): Vec ($2_vec_map_Entry'#0_#1') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$2_vec_map_Entry'#0_#1''() returns (v: Vec ($2_vec_map_Entry'#0_#1')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$2_vec_map_Entry'#0_#1''(): Vec ($2_vec_map_Entry'#0_#1') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1')), val: $2_vec_map_Entry'#0_#1') returns (m': $Mutation (Vec ($2_vec_map_Entry'#0_#1'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), val: $2_vec_map_Entry'#0_#1'): Vec ($2_vec_map_Entry'#0_#1') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1'))) returns (e: $2_vec_map_Entry'#0_#1', m': $Mutation (Vec ($2_vec_map_Entry'#0_#1'))) {
    var v: Vec ($2_vec_map_Entry'#0_#1');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1')), other: Vec ($2_vec_map_Entry'#0_#1')) returns (m': $Mutation (Vec ($2_vec_map_Entry'#0_#1'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1'))) returns (m': $Mutation (Vec ($2_vec_map_Entry'#0_#1'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), i: int) returns (dst: $2_vec_map_Entry'#0_#1') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), i: int): $2_vec_map_Entry'#0_#1' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1')), index: int)
returns (dst: $Mutation ($2_vec_map_Entry'#0_#1'), m': $Mutation (Vec ($2_vec_map_Entry'#0_#1')))
{
    var v: Vec ($2_vec_map_Entry'#0_#1');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), i: int): $2_vec_map_Entry'#0_#1' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1')), i: int, j: int) returns (m': $Mutation (Vec ($2_vec_map_Entry'#0_#1')))
{
    var v: Vec ($2_vec_map_Entry'#0_#1');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), i: int, j: int): Vec ($2_vec_map_Entry'#0_#1') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1')), i: int) returns (e: $2_vec_map_Entry'#0_#1', m': $Mutation (Vec ($2_vec_map_Entry'#0_#1')))
{
    var v: Vec ($2_vec_map_Entry'#0_#1');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$2_vec_map_Entry'#0_#1''(m: $Mutation (Vec ($2_vec_map_Entry'#0_#1')), i: int) returns (e: $2_vec_map_Entry'#0_#1', m': $Mutation (Vec ($2_vec_map_Entry'#0_#1')))
{
    var len: int;
    var v: Vec ($2_vec_map_Entry'#0_#1');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), e: $2_vec_map_Entry'#0_#1') returns (res: bool)  {
    res := $ContainsVec'$2_vec_map_Entry'#0_#1''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$2_vec_map_Entry'#0_#1''(v: Vec ($2_vec_map_Entry'#0_#1'), e: $2_vec_map_Entry'#0_#1') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$2_vec_map_Entry'#0_#1''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'u8''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize

// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$2_object_ID`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$2_object_ID'(v: $2_object_ID): Vec int;

axiom (forall v1, v2: $2_object_ID :: {$1_bcs_serialize'$2_object_ID'(v1), $1_bcs_serialize'$2_object_ID'(v2)}
   $IsEqual'$2_object_ID'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$2_object_ID'(v1), $1_bcs_serialize'$2_object_ID'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $2_object_ID :: {$1_bcs_serialize'$2_object_ID'(v)}
     ( var r := $1_bcs_serialize'$2_object_ID'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$2_object_ID'(v: $2_object_ID) returns (res: Vec int);
ensures res == $1_bcs_serialize'$2_object_ID'(v);

function {:inline} $1_bcs_$to_bytes'$2_object_ID'(v: $2_object_ID): Vec int {
    $1_bcs_serialize'$2_object_ID'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `address`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'address'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)}
   $IsEqual'address'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'address'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'address'(v);

function {:inline} $1_bcs_$to_bytes'address'(v: int): Vec int {
    $1_bcs_serialize'address'(v)
}

// Serialized addresses should have the same length.
const $serialized_address_len: int;
// Serialized addresses should have the same length
axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); LenVec(r) == $serialized_address_len));




// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}



//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
type #1;
function {:inline} $IsEqual'#1'(x1: #1, x2: #1): bool { x1 == x2 }
function {:inline} $IsValid'#1'(x: #1): bool { true }

// spec fun at ./deps/move-stdlib/sources/vector.move:102:5+86
function {:inline} $1_vector_$is_empty'u64'(v: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u64'(v), 0)
}

// spec fun at ./deps/move-stdlib/sources/vector.move:102:5+86
function {:inline} $1_vector_$is_empty'$1_ascii_String'(v: Vec ($1_ascii_String)): bool {
    $IsEqual'u64'($1_vector_$length'$1_ascii_String'(v), 0)
}

// spec fun at ./deps/move-stdlib/sources/vector.move:102:5+86
function {:inline} $1_vector_$is_empty'$2_balance_Balance'$2_sui_SUI''(v: Vec ($2_balance_Balance'$2_sui_SUI')): bool {
    $IsEqual'u64'($1_vector_$length'$2_balance_Balance'$2_sui_SUI''(v), 0)
}

// spec fun at ./deps/move-stdlib/sources/vector.move:102:5+86
function {:inline} $1_vector_$is_empty'$2_epoch_time_lock_EpochTimeLock'(v: Vec ($2_epoch_time_lock_EpochTimeLock)): bool {
    $IsEqual'u64'($1_vector_$length'$2_epoch_time_lock_EpochTimeLock'(v), 0)
}

// spec fun at ./deps/move-stdlib/sources/option.move:89:5+171
function {:inline} $1_option_$borrow'u64'(t: $1_option_Option'u64'): int {
    $1_vector_$borrow'u64'($vec#$1_option_Option'u64'(t), 0)
}

// spec fun at ./deps/move-stdlib/sources/option.move:89:5+171
function {:inline} $1_option_$borrow'$1_ascii_String'(t: $1_option_Option'$1_ascii_String'): $1_ascii_String {
    $1_vector_$borrow'$1_ascii_String'($vec#$1_option_Option'$1_ascii_String'(t), 0)
}

// spec fun at ./deps/move-stdlib/sources/option.move:89:5+171
function {:inline} $1_option_$borrow'$2_balance_Balance'$2_sui_SUI''(t: $1_option_Option'$2_balance_Balance'$2_sui_SUI''): $2_balance_Balance'$2_sui_SUI' {
    $1_vector_$borrow'$2_balance_Balance'$2_sui_SUI''($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''(t), 0)
}

// spec fun at ./deps/move-stdlib/sources/option.move:89:5+171
function {:inline} $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'(t: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): $2_epoch_time_lock_EpochTimeLock {
    $1_vector_$borrow'$2_epoch_time_lock_EpochTimeLock'($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'(t), 0)
}

// spec fun at ./deps/move-stdlib/sources/option.move:54:5+95
function {:inline} $1_option_$is_none'u64'(t: $1_option_Option'u64'): bool {
    $1_vector_$is_empty'u64'($vec#$1_option_Option'u64'(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:54:5+95
function {:inline} $1_option_$is_none'$1_ascii_String'(t: $1_option_Option'$1_ascii_String'): bool {
    $1_vector_$is_empty'$1_ascii_String'($vec#$1_option_Option'$1_ascii_String'(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:54:5+95
function {:inline} $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''(t: $1_option_Option'$2_balance_Balance'$2_sui_SUI''): bool {
    $1_vector_$is_empty'$2_balance_Balance'$2_sui_SUI''($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:54:5+95
function {:inline} $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'(t: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): bool {
    $1_vector_$is_empty'$2_epoch_time_lock_EpochTimeLock'($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:64:5+96
function {:inline} $1_option_$is_some'u64'(t: $1_option_Option'u64'): bool {
    !$1_vector_$is_empty'u64'($vec#$1_option_Option'u64'(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:64:5+96
function {:inline} $1_option_$is_some'$1_ascii_String'(t: $1_option_Option'$1_ascii_String'): bool {
    !$1_vector_$is_empty'$1_ascii_String'($vec#$1_option_Option'$1_ascii_String'(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:64:5+96
function {:inline} $1_option_$is_some'$2_balance_Balance'$2_sui_SUI''(t: $1_option_Option'$2_balance_Balance'$2_sui_SUI''): bool {
    !$1_vector_$is_empty'$2_balance_Balance'$2_sui_SUI''($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:64:5+96
function {:inline} $1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'(t: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): bool {
    !$1_vector_$is_empty'$2_epoch_time_lock_EpochTimeLock'($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'(t))
}

// spec fun at ./deps/move-stdlib/sources/option.move:36:10+78
function {:inline} $1_option_spec_none'u64'(): $1_option_Option'u64' {
    $1_option_Option'u64'($EmptyVec'u64'())
}

// spec fun at ./deps/move-stdlib/sources/option.move:36:10+78
function {:inline} $1_option_spec_none'$1_ascii_String'(): $1_option_Option'$1_ascii_String' {
    $1_option_Option'$1_ascii_String'($EmptyVec'$1_ascii_String'())
}

// spec fun at ./deps/move-stdlib/sources/option.move:36:10+78
function {:inline} $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'(): $1_option_Option'$2_epoch_time_lock_EpochTimeLock' {
    $1_option_Option'$2_epoch_time_lock_EpochTimeLock'($EmptyVec'$2_epoch_time_lock_EpochTimeLock'())
}

// spec fun at ./deps/move-stdlib/sources/option.move:49:10+89
function {:inline} $1_option_spec_some'u64'(e: int): $1_option_Option'u64' {
    $1_option_Option'u64'(MakeVec1(e))
}

// spec fun at ./deps/move-stdlib/sources/option.move:49:10+89
function {:inline} $1_option_spec_some'$1_ascii_String'(e: $1_ascii_String): $1_option_Option'$1_ascii_String' {
    $1_option_Option'$1_ascii_String'(MakeVec1(e))
}

// spec fun at ./deps/move-stdlib/sources/option.move:49:10+89
function {:inline} $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''(e: $2_balance_Balance'$2_sui_SUI'): $1_option_Option'$2_balance_Balance'$2_sui_SUI'' {
    $1_option_Option'$2_balance_Balance'$2_sui_SUI''(MakeVec1(e))
}

// spec fun at ./deps/move-stdlib/sources/option.move:49:10+89
function {:inline} $1_option_spec_some'$2_epoch_time_lock_EpochTimeLock'(e: $2_epoch_time_lock_EpochTimeLock): $1_option_Option'$2_epoch_time_lock_EpochTimeLock' {
    $1_option_Option'$2_epoch_time_lock_EpochTimeLock'(MakeVec1(e))
}

// struct option::Option<u64> at ./deps/move-stdlib/sources/option.move:11:5+81
type {:datatype} $1_option_Option'u64';
function {:constructor} $1_option_Option'u64'($vec: Vec (int)): $1_option_Option'u64';
function {:inline} $Update'$1_option_Option'u64''_vec(s: $1_option_Option'u64', x: Vec (int)): $1_option_Option'u64' {
    $1_option_Option'u64'(x)
}
function $IsValid'$1_option_Option'u64''(s: $1_option_Option'u64'): bool {
    $IsValid'vec'u64''($vec#$1_option_Option'u64'(s))
}
function {:inline} $IsEqual'$1_option_Option'u64''(s1: $1_option_Option'u64', s2: $1_option_Option'u64'): bool {
    $IsEqual'vec'u64''($vec#$1_option_Option'u64'(s1), $vec#$1_option_Option'u64'(s2))}

// struct option::Option<ascii::String> at ./deps/move-stdlib/sources/option.move:11:5+81
type {:datatype} $1_option_Option'$1_ascii_String';
function {:constructor} $1_option_Option'$1_ascii_String'($vec: Vec ($1_ascii_String)): $1_option_Option'$1_ascii_String';
function {:inline} $Update'$1_option_Option'$1_ascii_String''_vec(s: $1_option_Option'$1_ascii_String', x: Vec ($1_ascii_String)): $1_option_Option'$1_ascii_String' {
    $1_option_Option'$1_ascii_String'(x)
}
function $IsValid'$1_option_Option'$1_ascii_String''(s: $1_option_Option'$1_ascii_String'): bool {
    $IsValid'vec'$1_ascii_String''($vec#$1_option_Option'$1_ascii_String'(s))
}
function {:inline} $IsEqual'$1_option_Option'$1_ascii_String''(s1: $1_option_Option'$1_ascii_String', s2: $1_option_Option'$1_ascii_String'): bool {
    $IsEqual'vec'$1_ascii_String''($vec#$1_option_Option'$1_ascii_String'(s1), $vec#$1_option_Option'$1_ascii_String'(s2))}

// struct option::Option<balance::Balance<sui::SUI>> at ./deps/move-stdlib/sources/option.move:11:5+81
type {:datatype} $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
function {:constructor} $1_option_Option'$2_balance_Balance'$2_sui_SUI''($vec: Vec ($2_balance_Balance'$2_sui_SUI')): $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
function {:inline} $Update'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''_vec(s: $1_option_Option'$2_balance_Balance'$2_sui_SUI'', x: Vec ($2_balance_Balance'$2_sui_SUI')): $1_option_Option'$2_balance_Balance'$2_sui_SUI'' {
    $1_option_Option'$2_balance_Balance'$2_sui_SUI''(x)
}
function $IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''(s: $1_option_Option'$2_balance_Balance'$2_sui_SUI''): bool {
    $IsValid'vec'$2_balance_Balance'$2_sui_SUI'''($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''(s))
}
function {:inline} $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''(s1: $1_option_Option'$2_balance_Balance'$2_sui_SUI'', s2: $1_option_Option'$2_balance_Balance'$2_sui_SUI''): bool {
    $IsEqual'vec'$2_balance_Balance'$2_sui_SUI'''($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''(s1), $vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''(s2))}

// struct option::Option<epoch_time_lock::EpochTimeLock> at ./deps/move-stdlib/sources/option.move:11:5+81
type {:datatype} $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
function {:constructor} $1_option_Option'$2_epoch_time_lock_EpochTimeLock'($vec: Vec ($2_epoch_time_lock_EpochTimeLock)): $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
function {:inline} $Update'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''_vec(s: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', x: Vec ($2_epoch_time_lock_EpochTimeLock)): $1_option_Option'$2_epoch_time_lock_EpochTimeLock' {
    $1_option_Option'$2_epoch_time_lock_EpochTimeLock'(x)
}
function $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''(s: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): bool {
    $IsValid'vec'$2_epoch_time_lock_EpochTimeLock''($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'(s))
}
function {:inline} $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''(s1: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', s2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): bool {
    $IsEqual'vec'$2_epoch_time_lock_EpochTimeLock''($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'(s1), $vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'(s2))}

// spec fun at ./deps/move-stdlib/sources/ascii.move:143:5+62
function {:inline} $1_ascii_$is_valid_char(b: int): bool {
    (b <= 127)
}

// struct ascii::String at ./deps/move-stdlib/sources/ascii.move:19:4+68
type {:datatype} $1_ascii_String;
function {:constructor} $1_ascii_String($bytes: Vec (int)): $1_ascii_String;
function {:inline} $Update'$1_ascii_String'_bytes(s: $1_ascii_String, x: Vec (int)): $1_ascii_String {
    $1_ascii_String(x)
}
function $IsValid'$1_ascii_String'(s: $1_ascii_String): bool {
    $IsValid'vec'u8''($bytes#$1_ascii_String(s))
}
function {:inline} $IsEqual'$1_ascii_String'(s1: $1_ascii_String, s2: $1_ascii_String): bool {
    $IsEqual'vec'u8''($bytes#$1_ascii_String(s1), $bytes#$1_ascii_String(s2))}

// fun ascii::string [baseline] at ./deps/move-stdlib/sources/ascii.move:45:5+239
procedure {:inline 1} $1_ascii_string(_$t0: Vec (int)) returns ($ret0: $1_ascii_String)
{
    // declare local variables
    var $t1: $1_option_Option'$1_ascii_String';
    var $t2: $1_option_Option'$1_ascii_String';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_ascii_String;
    var $t8: bool;
    var $t0: Vec (int);
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$1_option_Option'$1_ascii_String'': $1_option_Option'$1_ascii_String';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at ./deps/move-stdlib/sources/ascii.move:45:5+1
    assume {:print "$at(40,1578,1579)"} true;
    assume {:print "$track_local(4,10,0):", $t0} $t0 == $t0;

    // $t2 := ascii::try_string($t0) on_abort goto L3 with $t3 at ./deps/move-stdlib/sources/ascii.move:46:16+17
    assume {:print "$at(40,1640,1657)"} true;
    call $t2 := $1_ascii_try_string($t0);
    if ($abort_flag) {
        assume {:print "$at(40,1640,1657)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(4,10):", $t3} $t3 == $t3;
        goto L3;
    }

    // trace_local[x]($t2) at ./deps/move-stdlib/sources/ascii.move:46:12+1
    assume {:print "$track_local(4,10,1):", $t2} $t2 == $t2;

    // $t4 := opaque begin: option::is_some<ascii::String>($t2) at ./deps/move-stdlib/sources/ascii.move:48:13+19
    assume {:print "$at(40,1687,1706)"} true;

    // assume WellFormed($t4) at ./deps/move-stdlib/sources/ascii.move:48:13+19
    assume $IsValid'bool'($t4);

    // assume Eq<bool>($t4, option::$is_some<ascii::String>($t2)) at ./deps/move-stdlib/sources/ascii.move:48:13+19
    assume $IsEqual'bool'($t4, $1_option_$is_some'$1_ascii_String'($t2));

    // $t4 := opaque end: option::is_some<ascii::String>($t2) at ./deps/move-stdlib/sources/ascii.move:48:13+19

    // if ($t4) goto L0 else goto L1 at ./deps/move-stdlib/sources/ascii.move:47:8+113
    assume {:print "$at(40,1666,1779)"} true;
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at ./deps/move-stdlib/sources/ascii.move:49:38+24
    assume {:print "$at(40,1745,1769)"} true;
L1:

    // $t5 := 0 at ./deps/move-stdlib/sources/ascii.move:49:38+24
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := opaque begin: errors::invalid_argument($t5) at ./deps/move-stdlib/sources/ascii.move:49:13+50

    // assume WellFormed($t6) at ./deps/move-stdlib/sources/ascii.move:49:13+50
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, 7) at ./deps/move-stdlib/sources/ascii.move:49:13+50
    assume $IsEqual'u64'($t6, 7);

    // $t6 := opaque end: errors::invalid_argument($t5) at ./deps/move-stdlib/sources/ascii.move:49:13+50

    // trace_abort($t6) at ./deps/move-stdlib/sources/ascii.move:47:8+113
    assume {:print "$at(40,1666,1779)"} true;
    assume {:print "$track_abort(4,10):", $t6} $t6 == $t6;

    // $t3 := move($t6) at ./deps/move-stdlib/sources/ascii.move:47:8+113
    $t3 := $t6;

    // goto L3 at ./deps/move-stdlib/sources/ascii.move:47:8+113
    goto L3;

    // label L0 at ./deps/move-stdlib/sources/ascii.move:51:29+1
    assume {:print "$at(40,1809,1810)"} true;
L0:

    // $t7 := opaque begin: option::destroy_some<ascii::String>($t2) at ./deps/move-stdlib/sources/ascii.move:51:8+23

    // assume Identical($t8, option::$is_none<ascii::String>($t2)) at ./deps/move-stdlib/sources/ascii.move:51:8+23
    assume ($t8 == $1_option_$is_none'$1_ascii_String'($t2));

    // if ($t8) goto L5 else goto L4 at ./deps/move-stdlib/sources/ascii.move:51:8+23
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./deps/move-stdlib/sources/ascii.move:51:8+23
L5:

    // assume And(option::$is_none<ascii::String>($t2), Eq(7, $t3)) at ./deps/move-stdlib/sources/ascii.move:51:8+23
    assume ($1_option_$is_none'$1_ascii_String'($t2) && $IsEqual'num'(7, $t3));

    // trace_abort($t3) at ./deps/move-stdlib/sources/ascii.move:51:8+23
    assume {:print "$at(40,1788,1811)"} true;
    assume {:print "$track_abort(4,10):", $t3} $t3 == $t3;

    // goto L3 at ./deps/move-stdlib/sources/ascii.move:51:8+23
    goto L3;

    // label L4 at ./deps/move-stdlib/sources/ascii.move:51:8+23
L4:

    // assume And(WellFormed($t7), forall i: Range(0, Len<u8>(select ascii::String.bytes($t7))): ascii::$is_valid_char(Index(select ascii::String.bytes($t7), i))) at ./deps/move-stdlib/sources/ascii.move:51:8+23
    assume ($IsValid'$1_ascii_String'($t7) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($t7))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($t7), i)))))));

    // assume Eq<ascii::String>($t7, option::$borrow<ascii::String>($t2)) at ./deps/move-stdlib/sources/ascii.move:51:8+23
    assume $IsEqual'$1_ascii_String'($t7, $1_option_$borrow'$1_ascii_String'($t2));

    // $t7 := opaque end: option::destroy_some<ascii::String>($t2) at ./deps/move-stdlib/sources/ascii.move:51:8+23

    // trace_return[0]($t7) at ./deps/move-stdlib/sources/ascii.move:51:8+23
    assume {:print "$track_return(4,10,0):", $t7} $t7 == $t7;

    // label L2 at ./deps/move-stdlib/sources/ascii.move:52:5+1
    assume {:print "$at(40,1816,1817)"} true;
L2:

    // return $t7 at ./deps/move-stdlib/sources/ascii.move:52:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./deps/move-stdlib/sources/ascii.move:52:5+1
L3:

    // abort($t3) at ./deps/move-stdlib/sources/ascii.move:52:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun ascii::into_bytes [baseline] at ./deps/move-stdlib/sources/ascii.move:131:5+108
procedure {:inline 1} $1_ascii_into_bytes(_$t0: $1_ascii_String) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t0: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[string]($t0) at ./deps/move-stdlib/sources/ascii.move:131:5+1
    assume {:print "$at(40,4381,4382)"} true;
    assume {:print "$track_local(4,4,0):", $t0} $t0 == $t0;

    // $t2 := unpack ascii::String($t0) at ./deps/move-stdlib/sources/ascii.move:132:12+16
    assume {:print "$at(40,4444,4460)"} true;
    $t2 := $bytes#$1_ascii_String($t0);

    // trace_local[bytes]($t2) at ./deps/move-stdlib/sources/ascii.move:132:21+5
    assume {:print "$track_local(4,4,1):", $t2} $t2 == $t2;

    // trace_return[0]($t2) at ./deps/move-stdlib/sources/ascii.move:133:8+5
    assume {:print "$at(40,4478,4483)"} true;
    assume {:print "$track_return(4,4,0):", $t2} $t2 == $t2;

    // label L1 at ./deps/move-stdlib/sources/ascii.move:134:5+1
    assume {:print "$at(40,4488,4489)"} true;
L1:

    // return $t2 at ./deps/move-stdlib/sources/ascii.move:134:5+1
    $ret0 := $t2;
    return;

}

// fun ascii::is_valid_char [baseline] at ./deps/move-stdlib/sources/ascii.move:143:5+62
procedure {:inline 1} $1_ascii_is_valid_char(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t0: int;
    var $temp_0'bool': bool;
    var $temp_0'u8': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[b]($t0) at ./deps/move-stdlib/sources/ascii.move:143:5+1
    assume {:print "$at(40,4722,4723)"} true;
    assume {:print "$track_local(4,6,0):", $t0} $t0 == $t0;

    // $t1 := 127 at ./deps/move-stdlib/sources/ascii.move:144:13+4
    assume {:print "$at(40,4774,4778)"} true;
    $t1 := 127;
    assume $IsValid'u8'($t1);

    // $t2 := <=($t0, $t1) at ./deps/move-stdlib/sources/ascii.move:144:10+2
    call $t2 := $Le($t0, $t1);

    // trace_return[0]($t2) at ./deps/move-stdlib/sources/ascii.move:144:8+9
    assume {:print "$track_return(4,6,0):", $t2} $t2 == $t2;

    // label L1 at ./deps/move-stdlib/sources/ascii.move:145:5+1
    assume {:print "$at(40,4783,4784)"} true;
L1:

    // return $t2 at ./deps/move-stdlib/sources/ascii.move:145:5+1
    $ret0 := $t2;
    return;

}

// fun ascii::try_string [baseline] at ./deps/move-stdlib/sources/ascii.move:60:5+618
procedure {:inline 1} $1_ascii_try_string(_$t0: Vec (int)) returns ($ret0: $1_option_Option'$1_ascii_String')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $1_option_Option'$1_ascii_String';
    var $t14: $1_option_Option'$1_ascii_String';
    var $t15: $1_ascii_String;
    var $t16: $1_option_Option'$1_ascii_String';
    var $t0: Vec (int);
    var $temp_0'$1_option_Option'$1_ascii_String'': $1_option_Option'$1_ascii_String';
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at ./deps/move-stdlib/sources/ascii.move:60:5+1
    assume {:print "$at(40,2133,2134)"} true;
    assume {:print "$track_local(4,11,0):", $t0} $t0 == $t0;

    // $t4 := vector::length<u8>($t0) on_abort goto L9 with $t5 at ./deps/move-stdlib/sources/ascii.move:61:18+22
    assume {:print "$at(40,2209,2231)"} true;
    call $t4 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(40,2209,2231)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,11):", $t5} $t5 == $t5;
        goto L9;
    }

    // trace_local[len]($t4) at ./deps/move-stdlib/sources/ascii.move:61:12+3
    assume {:print "$track_local(4,11,2):", $t4} $t4 == $t4;

    // $t6 := 0 at ./deps/move-stdlib/sources/ascii.move:62:16+1
    assume {:print "$at(40,2248,2249)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_local[i]($t6) at ./deps/move-stdlib/sources/ascii.move:62:12+1
    assume {:print "$track_local(4,11,1):", $t6} $t6 == $t6;

    // label L6 at ./deps/move-stdlib/sources/ascii.move:64:12+122
    assume {:print "$at(40,2278,2400)"} true;
L6:

    // assert Le($t6, $t4) at ./deps/move-stdlib/sources/ascii.move:65:16+19
    assume {:print "$at(40,2300,2319)"} true;
    assert {:msg "assert_failed(40,2300,2319): base case of the loop invariant does not hold"}
      ($t6 <= $t4);

    // assert forall j: Range(0, $t6): ascii::$is_valid_char(Index($t0, j)) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    assume {:print "$at(40,2335,2387)"} true;
    assert {:msg "assert_failed(40,2335,2387): base case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t6); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($t0, j))))));

    // havoc[val]($t6) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t6;
    assume $IsValid'u64'($t6);

    // havoc[val]($t7) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t8;
    assume $IsValid'u8'($t8);

    // havoc[val]($t9) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t9;
    assume $IsValid'bool'($t9);

    // havoc[val]($t10) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t10;
    assume $IsValid'bool'($t10);

    // havoc[val]($t11) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    havoc $t12;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t6) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(4,11,1):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    assume {:print "$info(): loop invariant holds at current state"} true;
    assume !$abort_flag;

    // assume Le($t6, $t4) at ./deps/move-stdlib/sources/ascii.move:65:16+19
    assume {:print "$at(40,2300,2319)"} true;
    assume ($t6 <= $t4);

    // assume forall j: Range(0, $t6): ascii::$is_valid_char(Index($t0, j)) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    assume {:print "$at(40,2335,2387)"} true;
    assume (var $range_0 := $Range(0, $t6); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($t0, j))))));

    // $t7 := <($t6, $t4) at ./deps/move-stdlib/sources/ascii.move:68:14+1
    assume {:print "$at(40,2415,2416)"} true;
    call $t7 := $Lt($t6, $t4);

    // if ($t7) goto L0 else goto L2 at ./deps/move-stdlib/sources/ascii.move:63:8+333
    assume {:print "$at(40,2258,2591)"} true;
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./deps/move-stdlib/sources/ascii.move:70:48+6
    assume {:print "$at(40,2480,2486)"} true;
L0:

    // $t8 := vector::borrow<u8>($t0, $t6) on_abort goto L9 with $t5 at ./deps/move-stdlib/sources/ascii.move:70:33+25
    call $t8 := $1_vector_borrow'u8'($t0, $t6);
    if ($abort_flag) {
        assume {:print "$at(40,2465,2490)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,11):", $t5} $t5 == $t5;
        goto L9;
    }

    // trace_local[possible_byte]($t8) at ./deps/move-stdlib/sources/ascii.move:70:16+13
    assume {:print "$track_local(4,11,3):", $t8} $t8 == $t8;

    // $t9 := ascii::is_valid_char($t8) on_abort goto L9 with $t5 at ./deps/move-stdlib/sources/ascii.move:71:17+28
    assume {:print "$at(40,2508,2536)"} true;
    call $t9 := $1_ascii_is_valid_char($t8);
    if ($abort_flag) {
        assume {:print "$at(40,2508,2536)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,11):", $t5} $t5 == $t5;
        goto L9;
    }

    // $t10 := !($t9) at ./deps/move-stdlib/sources/ascii.move:71:16+1
    call $t10 := $Not($t9);

    // if ($t10) goto L3 else goto L5 at ./deps/move-stdlib/sources/ascii.move:71:12+56
    if ($t10) { goto L3; } else { goto L5; }

    // label L3 at ./deps/move-stdlib/sources/ascii.move:71:54+14
L3:

    // $t13 := opaque begin: option::none<ascii::String>() at ./deps/move-stdlib/sources/ascii.move:71:54+14

    // assume And(WellFormed($t13), And(Le(Len<ascii::String>(select option::Option.vec($t13)), 1), forall $elem: select option::Option.vec($t13): forall i: Range(0, Len<u8>(select ascii::String.bytes($elem))): ascii::$is_valid_char(Index(select ascii::String.bytes($elem), i)))) at ./deps/move-stdlib/sources/ascii.move:71:54+14
    assume ($IsValid'$1_option_Option'$1_ascii_String''($t13) && ((LenVec($vec#$1_option_Option'$1_ascii_String'($t13)) <= 1) && (var $range_0 := $vec#$1_option_Option'$1_ascii_String'($t13); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((var $range_2 := $Range(0, LenVec($bytes#$1_ascii_String($elem))); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($elem), i))))))))))));

    // assume Eq<option::Option<ascii::String>>($t13, option::spec_none<ascii::String>()) at ./deps/move-stdlib/sources/ascii.move:71:54+14
    assume $IsEqual'$1_option_Option'$1_ascii_String''($t13, $1_option_spec_none'$1_ascii_String'());

    // $t13 := opaque end: option::none<ascii::String>() at ./deps/move-stdlib/sources/ascii.move:71:54+14

    // trace_return[0]($t13) at ./deps/move-stdlib/sources/ascii.move:71:47+21
    assume {:print "$track_return(4,11,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at ./deps/move-stdlib/sources/ascii.move:71:47+21
    $t14 := $t13;

    // goto L8 at ./deps/move-stdlib/sources/ascii.move:71:47+21
    goto L8;

    // label L5 at ./deps/move-stdlib/sources/ascii.move:72:16+1
    assume {:print "$at(40,2576,2577)"} true;
L5:

    // $t11 := 1 at ./deps/move-stdlib/sources/ascii.move:72:20+1
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t6, $t11) on_abort goto L9 with $t5 at ./deps/move-stdlib/sources/ascii.move:72:18+1
    call $t12 := $AddU64($t6, $t11);
    if ($abort_flag) {
        assume {:print "$at(40,2578,2579)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,11):", $t5} $t5 == $t5;
        goto L9;
    }

    // trace_local[i]($t12) at ./deps/move-stdlib/sources/ascii.move:72:12+1
    assume {:print "$track_local(4,11,1):", $t12} $t12 == $t12;

    // goto L7 at ./deps/move-stdlib/sources/ascii.move:72:21+1
    goto L7;

    // label L2 at ./deps/move-stdlib/sources/ascii.move:74:8+106
    assume {:print "$at(40,2600,2706)"} true;
L2:

    // assert Eq<u64>($t6, $t4) at ./deps/move-stdlib/sources/ascii.move:75:12+16
    assume {:print "$at(40,2618,2634)"} true;
    assert {:msg "assert_failed(40,2618,2634): unknown assertion failed"}
      $IsEqual'u64'($t6, $t4);

    // assert forall j: Range(0, $t4): ascii::$is_valid_char(Index($t0, j)) at ./deps/move-stdlib/sources/ascii.move:76:12+51
    assume {:print "$at(40,2646,2697)"} true;
    assert {:msg "assert_failed(40,2646,2697): unknown assertion failed"}
      (var $range_0 := $Range(0, $t4); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($t0, j))))));

    // $t15 := pack ascii::String($t0) at ./deps/move-stdlib/sources/ascii.move:78:21+16
    assume {:print "$at(40,2728,2744)"} true;
    $t15 := $1_ascii_String($t0);

    // $t16 := opaque begin: option::some<ascii::String>($t15) at ./deps/move-stdlib/sources/ascii.move:78:8+30

    // assume And(WellFormed($t16), And(Le(Len<ascii::String>(select option::Option.vec($t16)), 1), forall $elem: select option::Option.vec($t16): forall i: Range(0, Len<u8>(select ascii::String.bytes($elem))): ascii::$is_valid_char(Index(select ascii::String.bytes($elem), i)))) at ./deps/move-stdlib/sources/ascii.move:78:8+30
    assume ($IsValid'$1_option_Option'$1_ascii_String''($t16) && ((LenVec($vec#$1_option_Option'$1_ascii_String'($t16)) <= 1) && (var $range_0 := $vec#$1_option_Option'$1_ascii_String'($t16); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((var $range_2 := $Range(0, LenVec($bytes#$1_ascii_String($elem))); (forall $i_3: int :: $InRange($range_2, $i_3) ==> (var i := $i_3;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($elem), i))))))))))));

    // assume Eq<option::Option<ascii::String>>($t16, option::spec_some<ascii::String>($t15)) at ./deps/move-stdlib/sources/ascii.move:78:8+30
    assume $IsEqual'$1_option_Option'$1_ascii_String''($t16, $1_option_spec_some'$1_ascii_String'($t15));

    // $t16 := opaque end: option::some<ascii::String>($t15) at ./deps/move-stdlib/sources/ascii.move:78:8+30

    // trace_return[0]($t16) at ./deps/move-stdlib/sources/ascii.move:78:8+30
    assume {:print "$track_return(4,11,0):", $t16} $t16 == $t16;

    // $t14 := move($t16) at ./deps/move-stdlib/sources/ascii.move:78:8+30
    $t14 := $t16;

    // goto L8 at ./deps/move-stdlib/sources/ascii.move:78:8+30
    goto L8;

    // label L7 at ./deps/move-stdlib/sources/ascii.move:74:8+106
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(40,2600,2706)"} true;
L7:

    // assert Le($t12, $t4) at ./deps/move-stdlib/sources/ascii.move:65:16+19
    assume {:print "$at(40,2300,2319)"} true;
    assert {:msg "assert_failed(40,2300,2319): induction case of the loop invariant does not hold"}
      ($t12 <= $t4);

    // assert forall j: Range(0, $t12): ascii::$is_valid_char(Index($t0, j)) at ./deps/move-stdlib/sources/ascii.move:66:16+52
    assume {:print "$at(40,2335,2387)"} true;
    assert {:msg "assert_failed(40,2335,2387): induction case of the loop invariant does not hold"}
      (var $range_0 := $Range(0, $t12); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var j := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($t0, j))))));

    // stop() at ./deps/move-stdlib/sources/ascii.move:66:16+52
    assume false;
    return;

    // label L8 at ./deps/move-stdlib/sources/ascii.move:79:5+1
    assume {:print "$at(40,2750,2751)"} true;
L8:

    // return $t14 at ./deps/move-stdlib/sources/ascii.move:79:5+1
    $ret0 := $t14;
    return;

    // label L9 at ./deps/move-stdlib/sources/ascii.move:79:5+1
L9:

    // abort($t5) at ./deps/move-stdlib/sources/ascii.move:79:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun signer::address_of [baseline] at ./deps/move-stdlib/sources/signer.move:15:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at ./deps/move-stdlib/sources/signer.move:15:5+1
    assume {:print "$at(25,470,471)"} true;
    assume {:print "$track_local(5,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at ./deps/move-stdlib/sources/signer.move:16:10+17
    assume {:print "$at(25,524,541)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(25,524,541)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(5,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at ./deps/move-stdlib/sources/signer.move:16:9+18
    assume {:print "$track_return(5,0,0):", $t1} $t1 == $t1;

    // label L1 at ./deps/move-stdlib/sources/signer.move:17:5+1
    assume {:print "$at(25,546,547)"} true;
L1:

    // return $t1 at ./deps/move-stdlib/sources/signer.move:17:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./deps/move-stdlib/sources/signer.move:17:5+1
L2:

    // abort($t2) at ./deps/move-stdlib/sources/signer.move:17:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct vec_set::VecSet<object::ID> at ./sources/vec_set.move:18:5+88
type {:datatype} $2_vec_set_VecSet'$2_object_ID';
function {:constructor} $2_vec_set_VecSet'$2_object_ID'($contents: Vec ($2_object_ID)): $2_vec_set_VecSet'$2_object_ID';
function {:inline} $Update'$2_vec_set_VecSet'$2_object_ID''_contents(s: $2_vec_set_VecSet'$2_object_ID', x: Vec ($2_object_ID)): $2_vec_set_VecSet'$2_object_ID' {
    $2_vec_set_VecSet'$2_object_ID'(x)
}
function $IsValid'$2_vec_set_VecSet'$2_object_ID''(s: $2_vec_set_VecSet'$2_object_ID'): bool {
    $IsValid'vec'$2_object_ID''($contents#$2_vec_set_VecSet'$2_object_ID'(s))
}
function {:inline} $IsEqual'$2_vec_set_VecSet'$2_object_ID''(s1: $2_vec_set_VecSet'$2_object_ID', s2: $2_vec_set_VecSet'$2_object_ID'): bool {
    $IsEqual'vec'$2_object_ID''($contents#$2_vec_set_VecSet'$2_object_ID'(s1), $contents#$2_vec_set_VecSet'$2_object_ID'(s2))}

// struct vec_set::VecSet<#0> at ./sources/vec_set.move:18:5+88
type {:datatype} $2_vec_set_VecSet'#0';
function {:constructor} $2_vec_set_VecSet'#0'($contents: Vec (#0)): $2_vec_set_VecSet'#0';
function {:inline} $Update'$2_vec_set_VecSet'#0''_contents(s: $2_vec_set_VecSet'#0', x: Vec (#0)): $2_vec_set_VecSet'#0' {
    $2_vec_set_VecSet'#0'(x)
}
function $IsValid'$2_vec_set_VecSet'#0''(s: $2_vec_set_VecSet'#0'): bool {
    $IsValid'vec'#0''($contents#$2_vec_set_VecSet'#0'(s))
}
function {:inline} $IsEqual'$2_vec_set_VecSet'#0''(s1: $2_vec_set_VecSet'#0', s2: $2_vec_set_VecSet'#0'): bool {
    $IsEqual'vec'#0''($contents#$2_vec_set_VecSet'#0'(s1), $contents#$2_vec_set_VecSet'#0'(s2))}

// fun vec_set::contains<object::ID> [baseline] at ./sources/vec_set.move:41:5+125
procedure {:inline 1} $2_vec_set_contains'$2_object_ID'(_$t0: $2_vec_set_VecSet'$2_object_ID', _$t1: $2_object_ID) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_set_VecSet'$2_object_ID';
    var $t1: $2_object_ID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:41:5+1
    assume {:print "$at(33,1532,1533)"} true;
    assume {:print "$track_local(6,0,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:41:5+1
    assume {:print "$track_local(6,0,1):", $t1} $t1 == $t1;

    // $t3 := vec_set::get_idx_opt<#0>($t0, $t1) on_abort goto L2 with $t4 at ./sources/vec_set.move:42:26+22
    assume {:print "$at(33,1628,1650)"} true;
    call $t3 := $2_vec_set_get_idx_opt'$2_object_ID'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1628,1650)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_set.move:42:9+40

    // assume WellFormed($t5) at ./sources/vec_set.move:42:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_set.move:42:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_set.move:42:9+40

    // trace_return[0]($t5) at ./sources/vec_set.move:42:9+40
    assume {:print "$track_return(6,0,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/vec_set.move:43:5+1
    assume {:print "$at(33,1656,1657)"} true;
L1:

    // return $t5 at ./sources/vec_set.move:43:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/vec_set.move:43:5+1
L2:

    // abort($t4) at ./sources/vec_set.move:43:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_set::contains<#0> [baseline] at ./sources/vec_set.move:41:5+125
procedure {:inline 1} $2_vec_set_contains'#0'(_$t0: $2_vec_set_VecSet'#0', _$t1: #0) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_set_VecSet'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:41:5+1
    assume {:print "$at(33,1532,1533)"} true;
    assume {:print "$track_local(6,0,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:41:5+1
    assume {:print "$track_local(6,0,1):", $t1} $t1 == $t1;

    // $t3 := vec_set::get_idx_opt<#0>($t0, $t1) on_abort goto L2 with $t4 at ./sources/vec_set.move:42:26+22
    assume {:print "$at(33,1628,1650)"} true;
    call $t3 := $2_vec_set_get_idx_opt'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1628,1650)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_set.move:42:9+40

    // assume WellFormed($t5) at ./sources/vec_set.move:42:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_set.move:42:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_set.move:42:9+40

    // trace_return[0]($t5) at ./sources/vec_set.move:42:9+40
    assume {:print "$track_return(6,0,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/vec_set.move:43:5+1
    assume {:print "$at(33,1656,1657)"} true;
L1:

    // return $t5 at ./sources/vec_set.move:43:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/vec_set.move:43:5+1
L2:

    // abort($t4) at ./sources/vec_set.move:43:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_set::contains [verification] at ./sources/vec_set.move:41:5+125
procedure {:timeLimit 40} $2_vec_set_contains$verify(_$t0: $2_vec_set_VecSet'#0', _$t1: #0) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_set_VecSet'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:41:5+1
    assume {:print "$at(33,1532,1533)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($t0);

    // assume WellFormed($t1) at ./sources/vec_set.move:41:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_set.move:41:5+1
    assume {:print "$track_local(6,0,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:41:5+1
    assume {:print "$track_local(6,0,1):", $t1} $t1 == $t1;

    // $t3 := vec_set::get_idx_opt<#0>($t0, $t1) on_abort goto L2 with $t4 at ./sources/vec_set.move:42:26+22
    assume {:print "$at(33,1628,1650)"} true;
    call $t3 := $2_vec_set_get_idx_opt'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1628,1650)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_set.move:42:9+40

    // assume WellFormed($t5) at ./sources/vec_set.move:42:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_set.move:42:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_set.move:42:9+40

    // trace_return[0]($t5) at ./sources/vec_set.move:42:9+40
    assume {:print "$track_return(6,0,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/vec_set.move:43:5+1
    assume {:print "$at(33,1656,1657)"} true;
L1:

    // return $t5 at ./sources/vec_set.move:43:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/vec_set.move:43:5+1
L2:

    // abort($t4) at ./sources/vec_set.move:43:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_set::empty<object::ID> [baseline] at ./sources/vec_set.move:23:5+98
procedure {:inline 1} $2_vec_set_empty'$2_object_ID'() returns ($ret0: $2_vec_set_VecSet'$2_object_ID')
{
    // declare local variables
    var $t0: Vec ($2_object_ID);
    var $t1: int;
    var $t2: $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';

    // bytecode translation starts here
    // $t0 := vector::empty<#0>() on_abort goto L2 with $t1 at ./sources/vec_set.move:24:28+15
    assume {:print "$at(33,904,919)"} true;
    call $t0 := $1_vector_empty'$2_object_ID'();
    if ($abort_flag) {
        assume {:print "$at(33,904,919)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(6,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack vec_set::VecSet<#0>($t0) at ./sources/vec_set.move:24:9+36
    $t2 := $2_vec_set_VecSet'$2_object_ID'($t0);

    // trace_return[0]($t2) at ./sources/vec_set.move:24:9+36
    assume {:print "$track_return(6,1,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_set.move:25:5+1
    assume {:print "$at(33,926,927)"} true;
L1:

    // return $t2 at ./sources/vec_set.move:25:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_set.move:25:5+1
L2:

    // abort($t1) at ./sources/vec_set.move:25:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vec_set::empty [verification] at ./sources/vec_set.move:23:5+98
procedure {:timeLimit 40} $2_vec_set_empty$verify() returns ($ret0: $2_vec_set_VecSet'#0')
{
    // declare local variables
    var $t0: Vec (#0);
    var $t1: int;
    var $t2: $2_vec_set_VecSet'#0';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := vector::empty<#0>() on_abort goto L2 with $t1 at ./sources/vec_set.move:24:28+15
    assume {:print "$at(33,904,919)"} true;
    call $t0 := $1_vector_empty'#0'();
    if ($abort_flag) {
        assume {:print "$at(33,904,919)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(6,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack vec_set::VecSet<#0>($t0) at ./sources/vec_set.move:24:9+36
    $t2 := $2_vec_set_VecSet'#0'($t0);

    // trace_return[0]($t2) at ./sources/vec_set.move:24:9+36
    assume {:print "$track_return(6,1,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_set.move:25:5+1
    assume {:print "$at(33,926,927)"} true;
L1:

    // return $t2 at ./sources/vec_set.move:25:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_set.move:25:5+1
L2:

    // abort($t1) at ./sources/vec_set.move:25:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vec_set::is_empty [verification] at ./sources/vec_set.move:51:5+91
procedure {:timeLimit 40} $2_vec_set_is_empty$verify(_$t0: $2_vec_set_VecSet'#0') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $2_vec_set_VecSet'#0';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:51:5+1
    assume {:print "$at(33,1879,1880)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($t0);

    // trace_local[self]($t0) at ./sources/vec_set.move:51:5+1
    assume {:print "$track_local(6,6,0):", $t0} $t0 == $t0;

    // $t1 := vec_set::size<#0>($t0) on_abort goto L2 with $t2 at ./sources/vec_set.move:52:9+10
    assume {:print "$at(33,1949,1959)"} true;
    call $t1 := $2_vec_set_size'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,1949,1959)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(6,6):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := 0 at ./sources/vec_set.move:52:23+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := ==($t1, $t3) at ./sources/vec_set.move:52:20+2
    $t4 := $IsEqual'u64'($t1, $t3);

    // trace_return[0]($t4) at ./sources/vec_set.move:52:9+15
    assume {:print "$track_return(6,6,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/vec_set.move:53:5+1
    assume {:print "$at(33,1969,1970)"} true;
L1:

    // return $t4 at ./sources/vec_set.move:53:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/vec_set.move:53:5+1
L2:

    // abort($t2) at ./sources/vec_set.move:53:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun vec_set::remove<object::ID> [baseline] at ./sources/vec_set.move:35:5+159
procedure {:inline 1} $2_vec_set_remove'$2_object_ID'(_$t0: $Mutation ($2_vec_set_VecSet'$2_object_ID'), _$t1: $2_object_ID) returns ($ret0: $Mutation ($2_vec_set_VecSet'$2_object_ID'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t3: $2_object_ID;
    var $t4: int;
    var $t5: $2_vec_set_VecSet'$2_object_ID';
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (Vec ($2_object_ID));
    var $t9: $2_object_ID;
    var $t0: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t1: $2_object_ID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t8));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:35:5+1
    assume {:print "$at(33,1292,1293)"} true;
    $temp_0'$2_vec_set_VecSet'$2_object_ID'' := $Dereference($t0);
    assume {:print "$track_local(6,7,0):", $temp_0'$2_vec_set_VecSet'$2_object_ID''} $temp_0'$2_vec_set_VecSet'$2_object_ID'' == $temp_0'$2_vec_set_VecSet'$2_object_ID'';

    // trace_local[key]($t1) at ./sources/vec_set.move:35:5+1
    assume {:print "$track_local(6,7,1):", $t1} $t1 == $t1;

    // $t5 := read_ref($t0) at ./sources/vec_set.move:36:26+11
    assume {:print "$at(33,1384,1395)"} true;
    $t5 := $Dereference($t0);

    // $t6 := vec_set::get_idx<#0>($t5, $t1) on_abort goto L2 with $t7 at ./sources/vec_set.move:36:19+18
    call $t6 := $2_vec_set_get_idx'$2_object_ID'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1377,1395)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(6,7):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[idx]($t6) at ./sources/vec_set.move:36:13+3
    assume {:print "$track_local(6,7,4):", $t6} $t6 == $t6;

    // $t8 := borrow_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:37:24+18
    assume {:print "$at(33,1420,1438)"} true;
    $t8 := $ChildMutation($t0, 0, $contents#$2_vec_set_VecSet'$2_object_ID'($Dereference($t0)));

    // $t9 := vector::remove<#0>($t8, $t6) on_abort goto L2 with $t7 at ./sources/vec_set.move:37:9+39
    call $t9,$t8 := $1_vector_remove'$2_object_ID'($t8, $t6);
    if ($abort_flag) {
        assume {:print "$at(33,1405,1444)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(6,7):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).contents (vector<#0>)]($t8) at ./sources/vec_set.move:37:9+39
    $t0 := $UpdateMutation($t0, $Update'$2_vec_set_VecSet'$2_object_ID''_contents($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/vec_set.move:37:9+39
    $temp_0'$2_vec_set_VecSet'$2_object_ID'' := $Dereference($t0);
    assume {:print "$track_local(6,7,0):", $temp_0'$2_vec_set_VecSet'$2_object_ID''} $temp_0'$2_vec_set_VecSet'$2_object_ID'' == $temp_0'$2_vec_set_VecSet'$2_object_ID'';

    // destroy($t9) at ./sources/vec_set.move:37:9+39

    // trace_local[self]($t0) at ./sources/vec_set.move:37:48+1
    $temp_0'$2_vec_set_VecSet'$2_object_ID'' := $Dereference($t0);
    assume {:print "$track_local(6,7,0):", $temp_0'$2_vec_set_VecSet'$2_object_ID''} $temp_0'$2_vec_set_VecSet'$2_object_ID'' == $temp_0'$2_vec_set_VecSet'$2_object_ID'';

    // label L1 at ./sources/vec_set.move:38:5+1
    assume {:print "$at(33,1450,1451)"} true;
L1:

    // return () at ./sources/vec_set.move:38:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/vec_set.move:38:5+1
L2:

    // abort($t7) at ./sources/vec_set.move:38:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun vec_set::remove [verification] at ./sources/vec_set.move:35:5+159
procedure {:timeLimit 40} $2_vec_set_remove$verify(_$t0: $Mutation ($2_vec_set_VecSet'#0'), _$t1: #0) returns ($ret0: $Mutation ($2_vec_set_VecSet'#0'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_set_VecSet'#0');
    var $t3: #0;
    var $t4: int;
    var $t5: $2_vec_set_VecSet'#0';
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (Vec (#0));
    var $t9: #0;
    var $t0: $Mutation ($2_vec_set_VecSet'#0');
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:35:5+1
    assume {:print "$at(33,1292,1293)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/vec_set.move:35:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_set.move:35:5+1
    $temp_0'$2_vec_set_VecSet'#0'' := $Dereference($t0);
    assume {:print "$track_local(6,7,0):", $temp_0'$2_vec_set_VecSet'#0''} $temp_0'$2_vec_set_VecSet'#0'' == $temp_0'$2_vec_set_VecSet'#0'';

    // trace_local[key]($t1) at ./sources/vec_set.move:35:5+1
    assume {:print "$track_local(6,7,1):", $t1} $t1 == $t1;

    // $t5 := read_ref($t0) at ./sources/vec_set.move:36:26+11
    assume {:print "$at(33,1384,1395)"} true;
    $t5 := $Dereference($t0);

    // $t6 := vec_set::get_idx<#0>($t5, $t1) on_abort goto L2 with $t7 at ./sources/vec_set.move:36:19+18
    call $t6 := $2_vec_set_get_idx'#0'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1377,1395)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(6,7):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[idx]($t6) at ./sources/vec_set.move:36:13+3
    assume {:print "$track_local(6,7,4):", $t6} $t6 == $t6;

    // $t8 := borrow_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:37:24+18
    assume {:print "$at(33,1420,1438)"} true;
    $t8 := $ChildMutation($t0, 0, $contents#$2_vec_set_VecSet'#0'($Dereference($t0)));

    // $t9 := vector::remove<#0>($t8, $t6) on_abort goto L2 with $t7 at ./sources/vec_set.move:37:9+39
    call $t9,$t8 := $1_vector_remove'#0'($t8, $t6);
    if ($abort_flag) {
        assume {:print "$at(33,1405,1444)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(6,7):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).contents (vector<#0>)]($t8) at ./sources/vec_set.move:37:9+39
    $t0 := $UpdateMutation($t0, $Update'$2_vec_set_VecSet'#0''_contents($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/vec_set.move:37:9+39
    $temp_0'$2_vec_set_VecSet'#0'' := $Dereference($t0);
    assume {:print "$track_local(6,7,0):", $temp_0'$2_vec_set_VecSet'#0''} $temp_0'$2_vec_set_VecSet'#0'' == $temp_0'$2_vec_set_VecSet'#0'';

    // destroy($t9) at ./sources/vec_set.move:37:9+39

    // trace_local[self]($t0) at ./sources/vec_set.move:37:48+1
    $temp_0'$2_vec_set_VecSet'#0'' := $Dereference($t0);
    assume {:print "$track_local(6,7,0):", $temp_0'$2_vec_set_VecSet'#0''} $temp_0'$2_vec_set_VecSet'#0'' == $temp_0'$2_vec_set_VecSet'#0'';

    // label L1 at ./sources/vec_set.move:38:5+1
    assume {:print "$at(33,1450,1451)"} true;
L1:

    // return () at ./sources/vec_set.move:38:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/vec_set.move:38:5+1
L2:

    // abort($t7) at ./sources/vec_set.move:38:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun vec_set::get_idx<object::ID> [baseline] at ./sources/vec_set.move:80:5+213
procedure {:inline 1} $2_vec_set_get_idx'$2_object_ID'(_$t0: $2_vec_set_VecSet'$2_object_ID', _$t1: $2_object_ID) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_set_VecSet'$2_object_ID';
    var $t1: $2_object_ID;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:80:5+1
    assume {:print "$at(33,2884,2885)"} true;
    assume {:print "$track_local(6,2,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:80:5+1
    assume {:print "$track_local(6,2,1):", $t1} $t1 == $t1;

    // $t3 := vec_set::get_idx_opt<#0>($t0, $t1) on_abort goto L3 with $t4 at ./sources/vec_set.move:81:23+22
    assume {:print "$at(33,2968,2990)"} true;
    call $t3 := $2_vec_set_get_idx_opt'$2_object_ID'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,2968,2990)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[idx_opt]($t3) at ./sources/vec_set.move:81:13+7
    assume {:print "$track_local(6,2,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_set.move:82:17+25
    assume {:print "$at(33,3008,3033)"} true;

    // assume WellFormed($t5) at ./sources/vec_set.move:82:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_set.move:82:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_set.move:82:17+25

    // if ($t5) goto L0 else goto L1 at ./sources/vec_set.move:82:9+52
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_set.move:82:44+16
L1:

    // $t6 := 1 at ./sources/vec_set.move:82:44+16
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/vec_set.move:82:9+52
    assume {:print "$at(33,3000,3052)"} true;
    assume {:print "$track_abort(6,2):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/vec_set.move:82:9+52
    $t4 := $t6;

    // goto L3 at ./sources/vec_set.move:82:9+52
    goto L3;

    // label L0 at ./sources/vec_set.move:83:30+7
    assume {:print "$at(33,3083,3090)"} true;
L0:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./sources/vec_set.move:83:9+29

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./sources/vec_set.move:83:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L5 else goto L4 at ./sources/vec_set.move:83:9+29
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./sources/vec_set.move:83:9+29
L5:

    // assume And(option::$is_none<u64>($t3), Eq(7, $t4)) at ./sources/vec_set.move:83:9+29
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/vec_set.move:83:9+29
    assume {:print "$at(33,3062,3091)"} true;
    assume {:print "$track_abort(6,2):", $t4} $t4 == $t4;

    // goto L3 at ./sources/vec_set.move:83:9+29
    goto L3;

    // label L4 at ./sources/vec_set.move:83:9+29
L4:

    // assume WellFormed($t7) at ./sources/vec_set.move:83:9+29
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./sources/vec_set.move:83:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./sources/vec_set.move:83:9+29

    // trace_return[0]($t7) at ./sources/vec_set.move:83:9+29
    assume {:print "$track_return(6,2,0):", $t7} $t7 == $t7;

    // label L2 at ./sources/vec_set.move:84:5+1
    assume {:print "$at(33,3096,3097)"} true;
L2:

    // return $t7 at ./sources/vec_set.move:84:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./sources/vec_set.move:84:5+1
L3:

    // abort($t4) at ./sources/vec_set.move:84:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_set::get_idx<#0> [baseline] at ./sources/vec_set.move:80:5+213
procedure {:inline 1} $2_vec_set_get_idx'#0'(_$t0: $2_vec_set_VecSet'#0', _$t1: #0) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_set_VecSet'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:80:5+1
    assume {:print "$at(33,2884,2885)"} true;
    assume {:print "$track_local(6,2,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:80:5+1
    assume {:print "$track_local(6,2,1):", $t1} $t1 == $t1;

    // $t3 := vec_set::get_idx_opt<#0>($t0, $t1) on_abort goto L3 with $t4 at ./sources/vec_set.move:81:23+22
    assume {:print "$at(33,2968,2990)"} true;
    call $t3 := $2_vec_set_get_idx_opt'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,2968,2990)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[idx_opt]($t3) at ./sources/vec_set.move:81:13+7
    assume {:print "$track_local(6,2,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_set.move:82:17+25
    assume {:print "$at(33,3008,3033)"} true;

    // assume WellFormed($t5) at ./sources/vec_set.move:82:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_set.move:82:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_set.move:82:17+25

    // if ($t5) goto L0 else goto L1 at ./sources/vec_set.move:82:9+52
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_set.move:82:44+16
L1:

    // $t6 := 1 at ./sources/vec_set.move:82:44+16
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/vec_set.move:82:9+52
    assume {:print "$at(33,3000,3052)"} true;
    assume {:print "$track_abort(6,2):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/vec_set.move:82:9+52
    $t4 := $t6;

    // goto L3 at ./sources/vec_set.move:82:9+52
    goto L3;

    // label L0 at ./sources/vec_set.move:83:30+7
    assume {:print "$at(33,3083,3090)"} true;
L0:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./sources/vec_set.move:83:9+29

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./sources/vec_set.move:83:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L5 else goto L4 at ./sources/vec_set.move:83:9+29
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./sources/vec_set.move:83:9+29
L5:

    // assume And(option::$is_none<u64>($t3), Eq(7, $t4)) at ./sources/vec_set.move:83:9+29
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/vec_set.move:83:9+29
    assume {:print "$at(33,3062,3091)"} true;
    assume {:print "$track_abort(6,2):", $t4} $t4 == $t4;

    // goto L3 at ./sources/vec_set.move:83:9+29
    goto L3;

    // label L4 at ./sources/vec_set.move:83:9+29
L4:

    // assume WellFormed($t7) at ./sources/vec_set.move:83:9+29
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./sources/vec_set.move:83:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./sources/vec_set.move:83:9+29

    // trace_return[0]($t7) at ./sources/vec_set.move:83:9+29
    assume {:print "$track_return(6,2,0):", $t7} $t7 == $t7;

    // label L2 at ./sources/vec_set.move:84:5+1
    assume {:print "$at(33,3096,3097)"} true;
L2:

    // return $t7 at ./sources/vec_set.move:84:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./sources/vec_set.move:84:5+1
L3:

    // abort($t4) at ./sources/vec_set.move:84:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_set::get_idx [verification] at ./sources/vec_set.move:80:5+213
procedure {:timeLimit 40} $2_vec_set_get_idx$verify(_$t0: $2_vec_set_VecSet'#0', _$t1: #0) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_set_VecSet'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:80:5+1
    assume {:print "$at(33,2884,2885)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($t0);

    // assume WellFormed($t1) at ./sources/vec_set.move:80:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_set.move:80:5+1
    assume {:print "$track_local(6,2,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:80:5+1
    assume {:print "$track_local(6,2,1):", $t1} $t1 == $t1;

    // $t3 := vec_set::get_idx_opt<#0>($t0, $t1) on_abort goto L3 with $t4 at ./sources/vec_set.move:81:23+22
    assume {:print "$at(33,2968,2990)"} true;
    call $t3 := $2_vec_set_get_idx_opt'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,2968,2990)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(6,2):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[idx_opt]($t3) at ./sources/vec_set.move:81:13+7
    assume {:print "$track_local(6,2,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_set.move:82:17+25
    assume {:print "$at(33,3008,3033)"} true;

    // assume WellFormed($t5) at ./sources/vec_set.move:82:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_set.move:82:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_set.move:82:17+25

    // if ($t5) goto L0 else goto L1 at ./sources/vec_set.move:82:9+52
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_set.move:82:44+16
L1:

    // $t6 := 1 at ./sources/vec_set.move:82:44+16
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/vec_set.move:82:9+52
    assume {:print "$at(33,3000,3052)"} true;
    assume {:print "$track_abort(6,2):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/vec_set.move:82:9+52
    $t4 := $t6;

    // goto L3 at ./sources/vec_set.move:82:9+52
    goto L3;

    // label L0 at ./sources/vec_set.move:83:30+7
    assume {:print "$at(33,3083,3090)"} true;
L0:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./sources/vec_set.move:83:9+29

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./sources/vec_set.move:83:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L5 else goto L4 at ./sources/vec_set.move:83:9+29
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./sources/vec_set.move:83:9+29
L5:

    // assume And(option::$is_none<u64>($t3), Eq(7, $t4)) at ./sources/vec_set.move:83:9+29
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/vec_set.move:83:9+29
    assume {:print "$at(33,3062,3091)"} true;
    assume {:print "$track_abort(6,2):", $t4} $t4 == $t4;

    // goto L3 at ./sources/vec_set.move:83:9+29
    goto L3;

    // label L4 at ./sources/vec_set.move:83:9+29
L4:

    // assume WellFormed($t7) at ./sources/vec_set.move:83:9+29
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./sources/vec_set.move:83:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./sources/vec_set.move:83:9+29

    // trace_return[0]($t7) at ./sources/vec_set.move:83:9+29
    assume {:print "$track_return(6,2,0):", $t7} $t7 == $t7;

    // label L2 at ./sources/vec_set.move:84:5+1
    assume {:print "$at(33,3096,3097)"} true;
L2:

    // return $t7 at ./sources/vec_set.move:84:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./sources/vec_set.move:84:5+1
L3:

    // abort($t4) at ./sources/vec_set.move:84:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_set::get_idx_opt<object::ID> [baseline] at ./sources/vec_set.move:66:5+321
procedure {:inline 1} $2_vec_set_get_idx_opt'$2_object_ID'(_$t0: $2_vec_set_VecSet'$2_object_ID', _$t1: $2_object_ID) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec ($2_object_ID);
    var $t9: $2_object_ID;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t0: $2_vec_set_VecSet'$2_object_ID';
    var $t1: $2_object_ID;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:66:5+1
    assume {:print "$at(33,2406,2407)"} true;
    assume {:print "$track_local(6,3,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:66:5+1
    assume {:print "$track_local(6,3,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./sources/vec_set.move:67:17+1
    assume {:print "$at(33,2496,2497)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at ./sources/vec_set.move:67:13+1
    assume {:print "$track_local(6,3,2):", $t4} $t4 == $t4;

    // $t5 := vec_set::size<#0>($t0) on_abort goto L9 with $t6 at ./sources/vec_set.move:68:17+10
    assume {:print "$at(33,2515,2525)"} true;
    call $t5 := $2_vec_set_size'$2_object_ID'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,2515,2525)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[n]($t5) at ./sources/vec_set.move:68:13+1
    assume {:print "$track_local(6,3,3):", $t5} $t5 == $t5;

    // label L6 at ./sources/vec_set.move:69:16+1
    assume {:print "$at(33,2542,2543)"} true;
L6:

    // havoc[val]($t4) at ./sources/vec_set.move:69:16+1
    havoc $t4;
    assume $IsValid'u64'($t4);

    // havoc[val]($t7) at ./sources/vec_set.move:69:16+1
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/vec_set.move:69:16+1
    havoc $t8;
    assume $IsValid'vec'$2_object_ID''($t8);

    // havoc[val]($t9) at ./sources/vec_set.move:69:16+1
    havoc $t9;
    assume $IsValid'$2_object_ID'($t9);

    // havoc[val]($t10) at ./sources/vec_set.move:69:16+1
    havoc $t10;
    assume $IsValid'bool'($t10);

    // havoc[val]($t11) at ./sources/vec_set.move:69:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/vec_set.move:69:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t4) at ./sources/vec_set.move:69:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(6,3,2):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/vec_set.move:69:16+1
    assume !$abort_flag;

    // $t7 := <($t4, $t5) at ./sources/vec_set.move:69:18+1
    call $t7 := $Lt($t4, $t5);

    // if ($t7) goto L0 else goto L2 at ./sources/vec_set.move:69:9+162
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/vec_set.move:70:33+4
    assume {:print "$at(33,2583,2587)"} true;
L0:

    // $t8 := get_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:70:32+14
    $t8 := $contents#$2_vec_set_VecSet'$2_object_ID'($t0);

    // $t9 := vector::borrow<#0>($t8, $t4) on_abort goto L9 with $t6 at ./sources/vec_set.move:70:17+33
    call $t9 := $1_vector_borrow'$2_object_ID'($t8, $t4);
    if ($abort_flag) {
        assume {:print "$at(33,2567,2600)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t10 := ==($t9, $t1) at ./sources/vec_set.move:70:51+2
    $t10 := $IsEqual'$2_object_ID'($t9, $t1);

    // if ($t10) goto L3 else goto L5 at ./sources/vec_set.move:70:13+100
    if ($t10) { goto L3; } else { goto L5; }

    // label L3 at ./sources/vec_set.move:71:17+22
    assume {:print "$at(33,2627,2649)"} true;
L3:

    // destroy($t0) at ./sources/vec_set.move:71:17+22

    // destroy($t1) at ./sources/vec_set.move:71:17+22

    // $t13 := opaque begin: option::some<u64>($t4) at ./sources/vec_set.move:71:24+15

    // assume And(WellFormed($t13), Le(Len<u64>(select option::Option.vec($t13)), 1)) at ./sources/vec_set.move:71:24+15
    assume ($IsValid'$1_option_Option'u64''($t13) && (LenVec($vec#$1_option_Option'u64'($t13)) <= 1));

    // assume Eq<option::Option<u64>>($t13, option::spec_some<u64>($t4)) at ./sources/vec_set.move:71:24+15
    assume $IsEqual'$1_option_Option'u64''($t13, $1_option_spec_some'u64'($t4));

    // $t13 := opaque end: option::some<u64>($t4) at ./sources/vec_set.move:71:24+15

    // trace_return[0]($t13) at ./sources/vec_set.move:71:17+22
    assume {:print "$track_return(6,3,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at ./sources/vec_set.move:71:17+22
    $t14 := $t13;

    // goto L8 at ./sources/vec_set.move:71:17+22
    goto L8;

    // label L5 at ./sources/vec_set.move:73:17+1
    assume {:print "$at(33,2681,2682)"} true;
L5:

    // $t11 := 1 at ./sources/vec_set.move:73:21+1
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t4, $t11) on_abort goto L9 with $t6 at ./sources/vec_set.move:73:19+1
    call $t12 := $AddU64($t4, $t11);
    if ($abort_flag) {
        assume {:print "$at(33,2683,2684)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t12) at ./sources/vec_set.move:73:13+1
    assume {:print "$track_local(6,3,2):", $t12} $t12 == $t12;

    // goto L7 at ./sources/vec_set.move:73:22+1
    goto L7;

    // label L2 at ./sources/vec_set.move:75:9+14
    assume {:print "$at(33,2707,2721)"} true;
L2:

    // destroy($t0) at ./sources/vec_set.move:75:9+14

    // destroy($t1) at ./sources/vec_set.move:75:9+14

    // $t15 := opaque begin: option::none<u64>() at ./sources/vec_set.move:75:9+14

    // assume And(WellFormed($t15), Le(Len<u64>(select option::Option.vec($t15)), 1)) at ./sources/vec_set.move:75:9+14
    assume ($IsValid'$1_option_Option'u64''($t15) && (LenVec($vec#$1_option_Option'u64'($t15)) <= 1));

    // assume Eq<option::Option<u64>>($t15, option::spec_none<u64>()) at ./sources/vec_set.move:75:9+14
    assume $IsEqual'$1_option_Option'u64''($t15, $1_option_spec_none'u64'());

    // $t15 := opaque end: option::none<u64>() at ./sources/vec_set.move:75:9+14

    // trace_return[0]($t15) at ./sources/vec_set.move:75:9+14
    assume {:print "$track_return(6,3,0):", $t15} $t15 == $t15;

    // $t14 := move($t15) at ./sources/vec_set.move:75:9+14
    $t14 := $t15;

    // goto L8 at ./sources/vec_set.move:75:9+14
    goto L8;

    // label L7 at ./sources/vec_set.move:75:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/vec_set.move:75:9+14
    assume false;
    return;

    // label L8 at ./sources/vec_set.move:76:5+1
    assume {:print "$at(33,2726,2727)"} true;
L8:

    // return $t14 at ./sources/vec_set.move:76:5+1
    $ret0 := $t14;
    return;

    // label L9 at ./sources/vec_set.move:76:5+1
L9:

    // abort($t6) at ./sources/vec_set.move:76:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_set::get_idx_opt<#0> [baseline] at ./sources/vec_set.move:66:5+321
procedure {:inline 1} $2_vec_set_get_idx_opt'#0'(_$t0: $2_vec_set_VecSet'#0', _$t1: #0) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec (#0);
    var $t9: #0;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t0: $2_vec_set_VecSet'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:66:5+1
    assume {:print "$at(33,2406,2407)"} true;
    assume {:print "$track_local(6,3,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:66:5+1
    assume {:print "$track_local(6,3,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./sources/vec_set.move:67:17+1
    assume {:print "$at(33,2496,2497)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at ./sources/vec_set.move:67:13+1
    assume {:print "$track_local(6,3,2):", $t4} $t4 == $t4;

    // $t5 := vec_set::size<#0>($t0) on_abort goto L9 with $t6 at ./sources/vec_set.move:68:17+10
    assume {:print "$at(33,2515,2525)"} true;
    call $t5 := $2_vec_set_size'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,2515,2525)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[n]($t5) at ./sources/vec_set.move:68:13+1
    assume {:print "$track_local(6,3,3):", $t5} $t5 == $t5;

    // label L6 at ./sources/vec_set.move:69:16+1
    assume {:print "$at(33,2542,2543)"} true;
L6:

    // havoc[val]($t4) at ./sources/vec_set.move:69:16+1
    havoc $t4;
    assume $IsValid'u64'($t4);

    // havoc[val]($t7) at ./sources/vec_set.move:69:16+1
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/vec_set.move:69:16+1
    havoc $t8;
    assume $IsValid'vec'#0''($t8);

    // havoc[val]($t9) at ./sources/vec_set.move:69:16+1
    havoc $t9;
    assume $IsValid'#0'($t9);

    // havoc[val]($t10) at ./sources/vec_set.move:69:16+1
    havoc $t10;
    assume $IsValid'bool'($t10);

    // havoc[val]($t11) at ./sources/vec_set.move:69:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/vec_set.move:69:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t4) at ./sources/vec_set.move:69:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(6,3,2):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/vec_set.move:69:16+1
    assume !$abort_flag;

    // $t7 := <($t4, $t5) at ./sources/vec_set.move:69:18+1
    call $t7 := $Lt($t4, $t5);

    // if ($t7) goto L0 else goto L2 at ./sources/vec_set.move:69:9+162
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/vec_set.move:70:33+4
    assume {:print "$at(33,2583,2587)"} true;
L0:

    // $t8 := get_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:70:32+14
    $t8 := $contents#$2_vec_set_VecSet'#0'($t0);

    // $t9 := vector::borrow<#0>($t8, $t4) on_abort goto L9 with $t6 at ./sources/vec_set.move:70:17+33
    call $t9 := $1_vector_borrow'#0'($t8, $t4);
    if ($abort_flag) {
        assume {:print "$at(33,2567,2600)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t10 := ==($t9, $t1) at ./sources/vec_set.move:70:51+2
    $t10 := $IsEqual'#0'($t9, $t1);

    // if ($t10) goto L3 else goto L5 at ./sources/vec_set.move:70:13+100
    if ($t10) { goto L3; } else { goto L5; }

    // label L3 at ./sources/vec_set.move:71:17+22
    assume {:print "$at(33,2627,2649)"} true;
L3:

    // destroy($t0) at ./sources/vec_set.move:71:17+22

    // destroy($t1) at ./sources/vec_set.move:71:17+22

    // $t13 := opaque begin: option::some<u64>($t4) at ./sources/vec_set.move:71:24+15

    // assume And(WellFormed($t13), Le(Len<u64>(select option::Option.vec($t13)), 1)) at ./sources/vec_set.move:71:24+15
    assume ($IsValid'$1_option_Option'u64''($t13) && (LenVec($vec#$1_option_Option'u64'($t13)) <= 1));

    // assume Eq<option::Option<u64>>($t13, option::spec_some<u64>($t4)) at ./sources/vec_set.move:71:24+15
    assume $IsEqual'$1_option_Option'u64''($t13, $1_option_spec_some'u64'($t4));

    // $t13 := opaque end: option::some<u64>($t4) at ./sources/vec_set.move:71:24+15

    // trace_return[0]($t13) at ./sources/vec_set.move:71:17+22
    assume {:print "$track_return(6,3,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at ./sources/vec_set.move:71:17+22
    $t14 := $t13;

    // goto L8 at ./sources/vec_set.move:71:17+22
    goto L8;

    // label L5 at ./sources/vec_set.move:73:17+1
    assume {:print "$at(33,2681,2682)"} true;
L5:

    // $t11 := 1 at ./sources/vec_set.move:73:21+1
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t4, $t11) on_abort goto L9 with $t6 at ./sources/vec_set.move:73:19+1
    call $t12 := $AddU64($t4, $t11);
    if ($abort_flag) {
        assume {:print "$at(33,2683,2684)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t12) at ./sources/vec_set.move:73:13+1
    assume {:print "$track_local(6,3,2):", $t12} $t12 == $t12;

    // goto L7 at ./sources/vec_set.move:73:22+1
    goto L7;

    // label L2 at ./sources/vec_set.move:75:9+14
    assume {:print "$at(33,2707,2721)"} true;
L2:

    // destroy($t0) at ./sources/vec_set.move:75:9+14

    // destroy($t1) at ./sources/vec_set.move:75:9+14

    // $t15 := opaque begin: option::none<u64>() at ./sources/vec_set.move:75:9+14

    // assume And(WellFormed($t15), Le(Len<u64>(select option::Option.vec($t15)), 1)) at ./sources/vec_set.move:75:9+14
    assume ($IsValid'$1_option_Option'u64''($t15) && (LenVec($vec#$1_option_Option'u64'($t15)) <= 1));

    // assume Eq<option::Option<u64>>($t15, option::spec_none<u64>()) at ./sources/vec_set.move:75:9+14
    assume $IsEqual'$1_option_Option'u64''($t15, $1_option_spec_none'u64'());

    // $t15 := opaque end: option::none<u64>() at ./sources/vec_set.move:75:9+14

    // trace_return[0]($t15) at ./sources/vec_set.move:75:9+14
    assume {:print "$track_return(6,3,0):", $t15} $t15 == $t15;

    // $t14 := move($t15) at ./sources/vec_set.move:75:9+14
    $t14 := $t15;

    // goto L8 at ./sources/vec_set.move:75:9+14
    goto L8;

    // label L7 at ./sources/vec_set.move:75:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/vec_set.move:75:9+14
    assume false;
    return;

    // label L8 at ./sources/vec_set.move:76:5+1
    assume {:print "$at(33,2726,2727)"} true;
L8:

    // return $t14 at ./sources/vec_set.move:76:5+1
    $ret0 := $t14;
    return;

    // label L9 at ./sources/vec_set.move:76:5+1
L9:

    // abort($t6) at ./sources/vec_set.move:76:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_set::get_idx_opt [verification] at ./sources/vec_set.move:66:5+321
procedure {:timeLimit 40} $2_vec_set_get_idx_opt$verify(_$t0: $2_vec_set_VecSet'#0', _$t1: #0) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec (#0);
    var $t9: #0;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t0: $2_vec_set_VecSet'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:66:5+1
    assume {:print "$at(33,2406,2407)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($t0);

    // assume WellFormed($t1) at ./sources/vec_set.move:66:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_set.move:66:5+1
    assume {:print "$track_local(6,3,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_set.move:66:5+1
    assume {:print "$track_local(6,3,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./sources/vec_set.move:67:17+1
    assume {:print "$at(33,2496,2497)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at ./sources/vec_set.move:67:13+1
    assume {:print "$track_local(6,3,2):", $t4} $t4 == $t4;

    // $t5 := vec_set::size<#0>($t0) on_abort goto L9 with $t6 at ./sources/vec_set.move:68:17+10
    assume {:print "$at(33,2515,2525)"} true;
    call $t5 := $2_vec_set_size'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,2515,2525)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[n]($t5) at ./sources/vec_set.move:68:13+1
    assume {:print "$track_local(6,3,3):", $t5} $t5 == $t5;

    // label L6 at ./sources/vec_set.move:69:16+1
    assume {:print "$at(33,2542,2543)"} true;
L6:

    // havoc[val]($t4) at ./sources/vec_set.move:69:16+1
    havoc $t4;
    assume $IsValid'u64'($t4);

    // havoc[val]($t7) at ./sources/vec_set.move:69:16+1
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/vec_set.move:69:16+1
    havoc $t8;
    assume $IsValid'vec'#0''($t8);

    // havoc[val]($t9) at ./sources/vec_set.move:69:16+1
    havoc $t9;
    assume $IsValid'#0'($t9);

    // havoc[val]($t10) at ./sources/vec_set.move:69:16+1
    havoc $t10;
    assume $IsValid'bool'($t10);

    // havoc[val]($t11) at ./sources/vec_set.move:69:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/vec_set.move:69:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t4) at ./sources/vec_set.move:69:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(6,3,2):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/vec_set.move:69:16+1
    assume !$abort_flag;

    // $t7 := <($t4, $t5) at ./sources/vec_set.move:69:18+1
    call $t7 := $Lt($t4, $t5);

    // if ($t7) goto L0 else goto L2 at ./sources/vec_set.move:69:9+162
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/vec_set.move:70:33+4
    assume {:print "$at(33,2583,2587)"} true;
L0:

    // $t8 := get_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:70:32+14
    $t8 := $contents#$2_vec_set_VecSet'#0'($t0);

    // $t9 := vector::borrow<#0>($t8, $t4) on_abort goto L9 with $t6 at ./sources/vec_set.move:70:17+33
    call $t9 := $1_vector_borrow'#0'($t8, $t4);
    if ($abort_flag) {
        assume {:print "$at(33,2567,2600)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t10 := ==($t9, $t1) at ./sources/vec_set.move:70:51+2
    $t10 := $IsEqual'#0'($t9, $t1);

    // if ($t10) goto L3 else goto L5 at ./sources/vec_set.move:70:13+100
    if ($t10) { goto L3; } else { goto L5; }

    // label L3 at ./sources/vec_set.move:71:17+22
    assume {:print "$at(33,2627,2649)"} true;
L3:

    // destroy($t0) at ./sources/vec_set.move:71:17+22

    // destroy($t1) at ./sources/vec_set.move:71:17+22

    // $t13 := opaque begin: option::some<u64>($t4) at ./sources/vec_set.move:71:24+15

    // assume And(WellFormed($t13), Le(Len<u64>(select option::Option.vec($t13)), 1)) at ./sources/vec_set.move:71:24+15
    assume ($IsValid'$1_option_Option'u64''($t13) && (LenVec($vec#$1_option_Option'u64'($t13)) <= 1));

    // assume Eq<option::Option<u64>>($t13, option::spec_some<u64>($t4)) at ./sources/vec_set.move:71:24+15
    assume $IsEqual'$1_option_Option'u64''($t13, $1_option_spec_some'u64'($t4));

    // $t13 := opaque end: option::some<u64>($t4) at ./sources/vec_set.move:71:24+15

    // trace_return[0]($t13) at ./sources/vec_set.move:71:17+22
    assume {:print "$track_return(6,3,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at ./sources/vec_set.move:71:17+22
    $t14 := $t13;

    // goto L8 at ./sources/vec_set.move:71:17+22
    goto L8;

    // label L5 at ./sources/vec_set.move:73:17+1
    assume {:print "$at(33,2681,2682)"} true;
L5:

    // $t11 := 1 at ./sources/vec_set.move:73:21+1
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t4, $t11) on_abort goto L9 with $t6 at ./sources/vec_set.move:73:19+1
    call $t12 := $AddU64($t4, $t11);
    if ($abort_flag) {
        assume {:print "$at(33,2683,2684)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,3):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t12) at ./sources/vec_set.move:73:13+1
    assume {:print "$track_local(6,3,2):", $t12} $t12 == $t12;

    // goto L7 at ./sources/vec_set.move:73:22+1
    goto L7;

    // label L2 at ./sources/vec_set.move:75:9+14
    assume {:print "$at(33,2707,2721)"} true;
L2:

    // destroy($t0) at ./sources/vec_set.move:75:9+14

    // destroy($t1) at ./sources/vec_set.move:75:9+14

    // $t15 := opaque begin: option::none<u64>() at ./sources/vec_set.move:75:9+14

    // assume And(WellFormed($t15), Le(Len<u64>(select option::Option.vec($t15)), 1)) at ./sources/vec_set.move:75:9+14
    assume ($IsValid'$1_option_Option'u64''($t15) && (LenVec($vec#$1_option_Option'u64'($t15)) <= 1));

    // assume Eq<option::Option<u64>>($t15, option::spec_none<u64>()) at ./sources/vec_set.move:75:9+14
    assume $IsEqual'$1_option_Option'u64''($t15, $1_option_spec_none'u64'());

    // $t15 := opaque end: option::none<u64>() at ./sources/vec_set.move:75:9+14

    // trace_return[0]($t15) at ./sources/vec_set.move:75:9+14
    assume {:print "$track_return(6,3,0):", $t15} $t15 == $t15;

    // $t14 := move($t15) at ./sources/vec_set.move:75:9+14
    $t14 := $t15;

    // goto L8 at ./sources/vec_set.move:75:9+14
    goto L8;

    // label L7 at ./sources/vec_set.move:75:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/vec_set.move:75:9+14
    assume false;
    return;

    // label L8 at ./sources/vec_set.move:76:5+1
    assume {:print "$at(33,2726,2727)"} true;
L8:

    // return $t14 at ./sources/vec_set.move:76:5+1
    $ret0 := $t14;
    return;

    // label L9 at ./sources/vec_set.move:76:5+1
L9:

    // abort($t6) at ./sources/vec_set.move:76:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_set::insert<object::ID> [baseline] at ./sources/vec_set.move:29:5+181
procedure {:inline 1} $2_vec_set_insert'$2_object_ID'(_$t0: $Mutation ($2_vec_set_VecSet'$2_object_ID'), _$t1: $2_object_ID) returns ($ret0: $Mutation ($2_vec_set_VecSet'$2_object_ID'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t3: $2_object_ID;
    var $t4: $2_vec_set_VecSet'$2_object_ID';
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation (Vec ($2_object_ID));
    var $t0: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t1: $2_object_ID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:29:5+1
    assume {:print "$at(33,1021,1022)"} true;
    $temp_0'$2_vec_set_VecSet'$2_object_ID'' := $Dereference($t0);
    assume {:print "$track_local(6,4,0):", $temp_0'$2_vec_set_VecSet'$2_object_ID''} $temp_0'$2_vec_set_VecSet'$2_object_ID'' == $temp_0'$2_vec_set_VecSet'$2_object_ID'';

    // trace_local[key]($t1) at ./sources/vec_set.move:29:5+1
    assume {:print "$track_local(6,4,1):", $t1} $t1 == $t1;

    // $t4 := read_ref($t0) at ./sources/vec_set.move:30:26+12
    assume {:print "$at(33,1112,1124)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vec_set::contains<#0>($t4, $t1) on_abort goto L3 with $t6 at ./sources/vec_set.move:30:18+20
    call $t5 := $2_vec_set_contains'$2_object_ID'($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1104,1124)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := !($t5) at ./sources/vec_set.move:30:17+1
    call $t7 := $Not($t5);

    // if ($t7) goto L0 else goto L1 at ./sources/vec_set.move:30:9+49
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_set.move:30:9+49
L1:

    // destroy($t0) at ./sources/vec_set.move:30:9+49

    // $t8 := 0 at ./sources/vec_set.move:30:40+17
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/vec_set.move:30:9+49
    assume {:print "$at(33,1095,1144)"} true;
    assume {:print "$track_abort(6,4):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./sources/vec_set.move:30:9+49
    $t6 := $t8;

    // goto L3 at ./sources/vec_set.move:30:9+49
    goto L3;

    // label L0 at ./sources/vec_set.move:31:32+4
    assume {:print "$at(33,1177,1181)"} true;
L0:

    // $t9 := borrow_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:31:27+18
    $t9 := $ChildMutation($t0, 0, $contents#$2_vec_set_VecSet'$2_object_ID'($Dereference($t0)));

    // vector::push_back<#0>($t9, $t1) on_abort goto L3 with $t6 at ./sources/vec_set.move:31:9+42
    call $t9 := $1_vector_push_back'$2_object_ID'($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1154,1196)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // write_back[Reference($t0).contents (vector<#0>)]($t9) at ./sources/vec_set.move:31:9+42
    $t0 := $UpdateMutation($t0, $Update'$2_vec_set_VecSet'$2_object_ID''_contents($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/vec_set.move:31:9+42
    $temp_0'$2_vec_set_VecSet'$2_object_ID'' := $Dereference($t0);
    assume {:print "$track_local(6,4,0):", $temp_0'$2_vec_set_VecSet'$2_object_ID''} $temp_0'$2_vec_set_VecSet'$2_object_ID'' == $temp_0'$2_vec_set_VecSet'$2_object_ID'';

    // trace_local[self]($t0) at ./sources/vec_set.move:31:9+42
    $temp_0'$2_vec_set_VecSet'$2_object_ID'' := $Dereference($t0);
    assume {:print "$track_local(6,4,0):", $temp_0'$2_vec_set_VecSet'$2_object_ID''} $temp_0'$2_vec_set_VecSet'$2_object_ID'' == $temp_0'$2_vec_set_VecSet'$2_object_ID'';

    // label L2 at ./sources/vec_set.move:32:5+1
    assume {:print "$at(33,1201,1202)"} true;
L2:

    // return () at ./sources/vec_set.move:32:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/vec_set.move:32:5+1
L3:

    // abort($t6) at ./sources/vec_set.move:32:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_set::insert [verification] at ./sources/vec_set.move:29:5+181
procedure {:timeLimit 40} $2_vec_set_insert$verify(_$t0: $Mutation ($2_vec_set_VecSet'#0'), _$t1: #0) returns ($ret0: $Mutation ($2_vec_set_VecSet'#0'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_set_VecSet'#0');
    var $t3: #0;
    var $t4: $2_vec_set_VecSet'#0';
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation (Vec (#0));
    var $t0: $Mutation ($2_vec_set_VecSet'#0');
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:29:5+1
    assume {:print "$at(33,1021,1022)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/vec_set.move:29:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_set.move:29:5+1
    $temp_0'$2_vec_set_VecSet'#0'' := $Dereference($t0);
    assume {:print "$track_local(6,4,0):", $temp_0'$2_vec_set_VecSet'#0''} $temp_0'$2_vec_set_VecSet'#0'' == $temp_0'$2_vec_set_VecSet'#0'';

    // trace_local[key]($t1) at ./sources/vec_set.move:29:5+1
    assume {:print "$track_local(6,4,1):", $t1} $t1 == $t1;

    // $t4 := read_ref($t0) at ./sources/vec_set.move:30:26+12
    assume {:print "$at(33,1112,1124)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vec_set::contains<#0>($t4, $t1) on_abort goto L3 with $t6 at ./sources/vec_set.move:30:18+20
    call $t5 := $2_vec_set_contains'#0'($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1104,1124)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t7 := !($t5) at ./sources/vec_set.move:30:17+1
    call $t7 := $Not($t5);

    // if ($t7) goto L0 else goto L1 at ./sources/vec_set.move:30:9+49
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_set.move:30:9+49
L1:

    // destroy($t0) at ./sources/vec_set.move:30:9+49

    // $t8 := 0 at ./sources/vec_set.move:30:40+17
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/vec_set.move:30:9+49
    assume {:print "$at(33,1095,1144)"} true;
    assume {:print "$track_abort(6,4):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./sources/vec_set.move:30:9+49
    $t6 := $t8;

    // goto L3 at ./sources/vec_set.move:30:9+49
    goto L3;

    // label L0 at ./sources/vec_set.move:31:32+4
    assume {:print "$at(33,1177,1181)"} true;
L0:

    // $t9 := borrow_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:31:27+18
    $t9 := $ChildMutation($t0, 0, $contents#$2_vec_set_VecSet'#0'($Dereference($t0)));

    // vector::push_back<#0>($t9, $t1) on_abort goto L3 with $t6 at ./sources/vec_set.move:31:9+42
    call $t9 := $1_vector_push_back'#0'($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(33,1154,1196)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(6,4):", $t6} $t6 == $t6;
        goto L3;
    }

    // write_back[Reference($t0).contents (vector<#0>)]($t9) at ./sources/vec_set.move:31:9+42
    $t0 := $UpdateMutation($t0, $Update'$2_vec_set_VecSet'#0''_contents($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/vec_set.move:31:9+42
    $temp_0'$2_vec_set_VecSet'#0'' := $Dereference($t0);
    assume {:print "$track_local(6,4,0):", $temp_0'$2_vec_set_VecSet'#0''} $temp_0'$2_vec_set_VecSet'#0'' == $temp_0'$2_vec_set_VecSet'#0'';

    // trace_local[self]($t0) at ./sources/vec_set.move:31:9+42
    $temp_0'$2_vec_set_VecSet'#0'' := $Dereference($t0);
    assume {:print "$track_local(6,4,0):", $temp_0'$2_vec_set_VecSet'#0''} $temp_0'$2_vec_set_VecSet'#0'' == $temp_0'$2_vec_set_VecSet'#0'';

    // label L2 at ./sources/vec_set.move:32:5+1
    assume {:print "$at(33,1201,1202)"} true;
L2:

    // return () at ./sources/vec_set.move:32:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/vec_set.move:32:5+1
L3:

    // abort($t6) at ./sources/vec_set.move:32:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_set::into_keys [verification] at ./sources/vec_set.move:57:5+129
procedure {:timeLimit 40} $2_vec_set_into_keys$verify(_$t0: $2_vec_set_VecSet'#0') returns ($ret0: Vec (#0))
{
    // declare local variables
    var $t1: Vec (#0);
    var $t2: Vec (#0);
    var $t0: $2_vec_set_VecSet'#0';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'vec'#0'': Vec (#0);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:57:5+1
    assume {:print "$at(33,2089,2090)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($t0);

    // trace_local[self]($t0) at ./sources/vec_set.move:57:5+1
    assume {:print "$track_local(6,5,0):", $t0} $t0 == $t0;

    // $t2 := unpack vec_set::VecSet<#0>($t0) at ./sources/vec_set.move:58:13+19
    assume {:print "$at(33,2168,2187)"} true;
    $t2 := $contents#$2_vec_set_VecSet'#0'($t0);

    // trace_local[contents]($t2) at ./sources/vec_set.move:58:22+8
    assume {:print "$track_local(6,5,1):", $t2} $t2 == $t2;

    // trace_return[0]($t2) at ./sources/vec_set.move:59:9+8
    assume {:print "$at(33,2204,2212)"} true;
    assume {:print "$track_return(6,5,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_set.move:60:5+1
    assume {:print "$at(33,2217,2218)"} true;
L1:

    // return $t2 at ./sources/vec_set.move:60:5+1
    $ret0 := $t2;
    return;

}

// fun vec_set::size<object::ID> [baseline] at ./sources/vec_set.move:46:5+101
procedure {:inline 1} $2_vec_set_size'$2_object_ID'(_$t0: $2_vec_set_VecSet'$2_object_ID') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_object_ID);
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'$2_vec_set_VecSet'$2_object_ID'': $2_vec_set_VecSet'$2_object_ID';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:46:5+1
    assume {:print "$at(33,1710,1711)"} true;
    assume {:print "$track_local(6,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:47:24+14
    assume {:print "$at(33,1790,1804)"} true;
    $t1 := $contents#$2_vec_set_VecSet'$2_object_ID'($t0);

    // $t2 := vector::length<#0>($t1) on_abort goto L2 with $t3 at ./sources/vec_set.move:47:9+30
    call $t2 := $1_vector_length'$2_object_ID'($t1);
    if ($abort_flag) {
        assume {:print "$at(33,1775,1805)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/vec_set.move:47:9+30
    assume {:print "$track_return(6,8,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_set.move:48:5+1
    assume {:print "$at(33,1810,1811)"} true;
L1:

    // return $t2 at ./sources/vec_set.move:48:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_set.move:48:5+1
L2:

    // abort($t3) at ./sources/vec_set.move:48:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vec_set::size<#0> [baseline] at ./sources/vec_set.move:46:5+101
procedure {:inline 1} $2_vec_set_size'#0'(_$t0: $2_vec_set_VecSet'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec (#0);
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_set_VecSet'#0';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_set.move:46:5+1
    assume {:print "$at(33,1710,1711)"} true;
    assume {:print "$track_local(6,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:47:24+14
    assume {:print "$at(33,1790,1804)"} true;
    $t1 := $contents#$2_vec_set_VecSet'#0'($t0);

    // $t2 := vector::length<#0>($t1) on_abort goto L2 with $t3 at ./sources/vec_set.move:47:9+30
    call $t2 := $1_vector_length'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(33,1775,1805)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/vec_set.move:47:9+30
    assume {:print "$track_return(6,8,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_set.move:48:5+1
    assume {:print "$at(33,1810,1811)"} true;
L1:

    // return $t2 at ./sources/vec_set.move:48:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_set.move:48:5+1
L2:

    // abort($t3) at ./sources/vec_set.move:48:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vec_set::size [verification] at ./sources/vec_set.move:46:5+101
procedure {:timeLimit 40} $2_vec_set_size$verify(_$t0: $2_vec_set_VecSet'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec (#0);
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_set_VecSet'#0';
    var $temp_0'$2_vec_set_VecSet'#0'': $2_vec_set_VecSet'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_set.move:46:5+1
    assume {:print "$at(33,1710,1711)"} true;
    assume $IsValid'$2_vec_set_VecSet'#0''($t0);

    // trace_local[self]($t0) at ./sources/vec_set.move:46:5+1
    assume {:print "$track_local(6,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_set::VecSet<#0>>.contents($t0) at ./sources/vec_set.move:47:24+14
    assume {:print "$at(33,1790,1804)"} true;
    $t1 := $contents#$2_vec_set_VecSet'#0'($t0);

    // $t2 := vector::length<#0>($t1) on_abort goto L2 with $t3 at ./sources/vec_set.move:47:9+30
    call $t2 := $1_vector_length'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(33,1775,1805)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(6,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/vec_set.move:47:9+30
    assume {:print "$track_return(6,8,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_set.move:48:5+1
    assume {:print "$at(33,1810,1811)"} true;
L1:

    // return $t2 at ./sources/vec_set.move:48:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_set.move:48:5+1
L2:

    // abort($t3) at ./sources/vec_set.move:48:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct tx_context::TxContext at ./sources/tx_context.move:25:5+453
type {:datatype} $2_tx_context_TxContext;
function {:constructor} $2_tx_context_TxContext($signer: $signer, $tx_hash: Vec (int), $epoch: int, $ids_created: int): $2_tx_context_TxContext;
function {:inline} $Update'$2_tx_context_TxContext'_signer(s: $2_tx_context_TxContext, x: $signer): $2_tx_context_TxContext {
    $2_tx_context_TxContext(x, $tx_hash#$2_tx_context_TxContext(s), $epoch#$2_tx_context_TxContext(s), $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_tx_hash(s: $2_tx_context_TxContext, x: Vec (int)): $2_tx_context_TxContext {
    $2_tx_context_TxContext($signer#$2_tx_context_TxContext(s), x, $epoch#$2_tx_context_TxContext(s), $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_epoch(s: $2_tx_context_TxContext, x: int): $2_tx_context_TxContext {
    $2_tx_context_TxContext($signer#$2_tx_context_TxContext(s), $tx_hash#$2_tx_context_TxContext(s), x, $ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $Update'$2_tx_context_TxContext'_ids_created(s: $2_tx_context_TxContext, x: int): $2_tx_context_TxContext {
    $2_tx_context_TxContext($signer#$2_tx_context_TxContext(s), $tx_hash#$2_tx_context_TxContext(s), $epoch#$2_tx_context_TxContext(s), x)
}
function $IsValid'$2_tx_context_TxContext'(s: $2_tx_context_TxContext): bool {
    $IsValid'signer'($signer#$2_tx_context_TxContext(s))
      && $IsValid'vec'u8''($tx_hash#$2_tx_context_TxContext(s))
      && $IsValid'u64'($epoch#$2_tx_context_TxContext(s))
      && $IsValid'u64'($ids_created#$2_tx_context_TxContext(s))
}
function {:inline} $IsEqual'$2_tx_context_TxContext'(s1: $2_tx_context_TxContext, s2: $2_tx_context_TxContext): bool {
    $IsEqual'signer'($signer#$2_tx_context_TxContext(s1), $signer#$2_tx_context_TxContext(s2))
    && $IsEqual'vec'u8''($tx_hash#$2_tx_context_TxContext(s1), $tx_hash#$2_tx_context_TxContext(s2))
    && $IsEqual'u64'($epoch#$2_tx_context_TxContext(s1), $epoch#$2_tx_context_TxContext(s2))
    && $IsEqual'u64'($ids_created#$2_tx_context_TxContext(s1), $ids_created#$2_tx_context_TxContext(s2))}

// fun tx_context::ids_created [verification] at ./sources/tx_context.move:62:5+71
procedure {:timeLimit 40} $2_tx_context_ids_created$verify(_$t0: $2_tx_context_TxContext) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/tx_context.move:62:5+1
    assume {:print "$at(41,2075,2076)"} true;
    assume $IsValid'$2_tx_context_TxContext'($t0);

    // trace_local[self]($t0) at ./sources/tx_context.move:62:5+1
    assume {:print "$track_local(7,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.ids_created($t0) at ./sources/tx_context.move:63:9+16
    assume {:print "$at(41,2124,2140)"} true;
    $t1 := $ids_created#$2_tx_context_TxContext($t0);

    // trace_return[0]($t1) at ./sources/tx_context.move:63:9+16
    assume {:print "$track_return(7,2,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/tx_context.move:64:5+1
    assume {:print "$at(41,2145,2146)"} true;
L1:

    // return $t1 at ./sources/tx_context.move:64:5+1
    $ret0 := $t1;
    return;

}

// fun tx_context::epoch [baseline] at ./sources/tx_context.move:48:5+66
procedure {:inline 1} $2_tx_context_epoch(_$t0: $2_tx_context_TxContext) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/tx_context.move:48:5+1
    assume {:print "$at(41,1597,1598)"} true;
    assume {:print "$track_local(7,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.epoch($t0) at ./sources/tx_context.move:49:9+10
    assume {:print "$at(41,1647,1657)"} true;
    $t1 := $epoch#$2_tx_context_TxContext($t0);

    // trace_return[0]($t1) at ./sources/tx_context.move:49:9+10
    assume {:print "$track_return(7,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/tx_context.move:50:5+1
    assume {:print "$at(41,1662,1663)"} true;
L1:

    // return $t1 at ./sources/tx_context.move:50:5+1
    $ret0 := $t1;
    return;

}

// fun tx_context::epoch [verification] at ./sources/tx_context.move:48:5+66
procedure {:timeLimit 40} $2_tx_context_epoch$verify(_$t0: $2_tx_context_TxContext) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/tx_context.move:48:5+1
    assume {:print "$at(41,1597,1598)"} true;
    assume $IsValid'$2_tx_context_TxContext'($t0);

    // trace_local[self]($t0) at ./sources/tx_context.move:48:5+1
    assume {:print "$track_local(7,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.epoch($t0) at ./sources/tx_context.move:49:9+10
    assume {:print "$at(41,1647,1657)"} true;
    $t1 := $epoch#$2_tx_context_TxContext($t0);

    // trace_return[0]($t1) at ./sources/tx_context.move:49:9+10
    assume {:print "$track_return(7,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/tx_context.move:50:5+1
    assume {:print "$at(41,1662,1663)"} true;
L1:

    // return $t1 at ./sources/tx_context.move:50:5+1
    $ret0 := $t1;
    return;

}

// fun tx_context::new_object [baseline] at ./sources/tx_context.move:53:5+220
procedure {:inline 1} $2_tx_context_new_object(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: int, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: Vec (int);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t9));

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/tx_context.move:53:5+1
    assume {:print "$at(41,1734,1735)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(7,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := get_field<tx_context::TxContext>.ids_created($t0) at ./sources/tx_context.move:54:27+15
    assume {:print "$at(41,1822,1837)"} true;
    $t3 := $ids_created#$2_tx_context_TxContext($Dereference($t0));

    // trace_local[ids_created]($t3) at ./sources/tx_context.move:54:13+11
    assume {:print "$track_local(7,3,2):", $t3} $t3 == $t3;

    // $t4 := get_field<tx_context::TxContext>.tx_hash($t0) at ./sources/tx_context.move:55:29+12
    assume {:print "$at(41,1867,1879)"} true;
    $t4 := $tx_hash#$2_tx_context_TxContext($Dereference($t0));

    // $t5 := tx_context::derive_id($t4, $t3) on_abort goto L2 with $t6 at ./sources/tx_context.move:55:18+37
    call $t5 := $2_tx_context_derive_id($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(41,1856,1893)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(7,3):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[id]($t5) at ./sources/tx_context.move:55:13+2
    assume {:print "$track_local(7,3,1):", $t5} $t5 == $t5;

    // $t7 := 1 at ./sources/tx_context.move:56:41+1
    assume {:print "$at(41,1935,1936)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := +($t3, $t7) on_abort goto L2 with $t6 at ./sources/tx_context.move:56:39+1
    call $t8 := $AddU64($t3, $t7);
    if ($abort_flag) {
        assume {:print "$at(41,1933,1934)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(7,3):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_field<tx_context::TxContext>.ids_created($t0) at ./sources/tx_context.move:56:9+15
    $t9 := $ChildMutation($t0, 3, $ids_created#$2_tx_context_TxContext($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/tx_context.move:56:9+33
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).ids_created (u64)]($t9) at ./sources/tx_context.move:56:9+33
    $t0 := $UpdateMutation($t0, $Update'$2_tx_context_TxContext'_ids_created($Dereference($t0), $Dereference($t9)));

    // trace_local[ctx]($t0) at ./sources/tx_context.move:56:9+33
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(7,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_return[0]($t5) at ./sources/tx_context.move:57:9+2
    assume {:print "$at(41,1946,1948)"} true;
    assume {:print "$track_return(7,3,0):", $t5} $t5 == $t5;

    // trace_local[ctx]($t0) at ./sources/tx_context.move:57:9+2
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(7,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/tx_context.move:58:5+1
    assume {:print "$at(41,1953,1954)"} true;
L1:

    // return $t5 at ./sources/tx_context.move:58:5+1
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/tx_context.move:58:5+1
L2:

    // abort($t6) at ./sources/tx_context.move:58:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun tx_context::new_object [verification] at ./sources/tx_context.move:53:5+220
procedure {:timeLimit 40} $2_tx_context_new_object$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: int, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: Vec (int);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/tx_context.move:53:5+1
    assume {:print "$at(41,1734,1735)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/tx_context.move:53:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(7,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := get_field<tx_context::TxContext>.ids_created($t0) at ./sources/tx_context.move:54:27+15
    assume {:print "$at(41,1822,1837)"} true;
    $t3 := $ids_created#$2_tx_context_TxContext($Dereference($t0));

    // trace_local[ids_created]($t3) at ./sources/tx_context.move:54:13+11
    assume {:print "$track_local(7,3,2):", $t3} $t3 == $t3;

    // $t4 := get_field<tx_context::TxContext>.tx_hash($t0) at ./sources/tx_context.move:55:29+12
    assume {:print "$at(41,1867,1879)"} true;
    $t4 := $tx_hash#$2_tx_context_TxContext($Dereference($t0));

    // $t5 := tx_context::derive_id($t4, $t3) on_abort goto L2 with $t6 at ./sources/tx_context.move:55:18+37
    call $t5 := $2_tx_context_derive_id($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(41,1856,1893)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(7,3):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[id]($t5) at ./sources/tx_context.move:55:13+2
    assume {:print "$track_local(7,3,1):", $t5} $t5 == $t5;

    // $t7 := 1 at ./sources/tx_context.move:56:41+1
    assume {:print "$at(41,1935,1936)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := +($t3, $t7) on_abort goto L2 with $t6 at ./sources/tx_context.move:56:39+1
    call $t8 := $AddU64($t3, $t7);
    if ($abort_flag) {
        assume {:print "$at(41,1933,1934)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(7,3):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_field<tx_context::TxContext>.ids_created($t0) at ./sources/tx_context.move:56:9+15
    $t9 := $ChildMutation($t0, 3, $ids_created#$2_tx_context_TxContext($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/tx_context.move:56:9+33
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).ids_created (u64)]($t9) at ./sources/tx_context.move:56:9+33
    $t0 := $UpdateMutation($t0, $Update'$2_tx_context_TxContext'_ids_created($Dereference($t0), $Dereference($t9)));

    // trace_local[ctx]($t0) at ./sources/tx_context.move:56:9+33
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(7,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_return[0]($t5) at ./sources/tx_context.move:57:9+2
    assume {:print "$at(41,1946,1948)"} true;
    assume {:print "$track_return(7,3,0):", $t5} $t5 == $t5;

    // trace_local[ctx]($t0) at ./sources/tx_context.move:57:9+2
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(7,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/tx_context.move:58:5+1
    assume {:print "$at(41,1953,1954)"} true;
L1:

    // return $t5 at ./sources/tx_context.move:58:5+1
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/tx_context.move:58:5+1
L2:

    // abort($t6) at ./sources/tx_context.move:58:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun tx_context::sender [baseline] at ./sources/tx_context.move:39:5+93
procedure {:inline 1} $2_tx_context_sender(_$t0: $2_tx_context_TxContext) returns ($ret0: int)
{
    // declare local variables
    var $t1: $signer;
    var $t2: int;
    var $t3: int;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/tx_context.move:39:5+1
    assume {:print "$at(41,1343,1344)"} true;
    assume {:print "$track_local(7,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.signer($t0) at ./sources/tx_context.move:40:28+12
    assume {:print "$at(41,1417,1429)"} true;
    $t1 := $signer#$2_tx_context_TxContext($t0);

    // $t2 := signer::address_of($t1) on_abort goto L2 with $t3 at ./sources/tx_context.move:40:9+32
    call $t2 := $1_signer_address_of($t1);
    if ($abort_flag) {
        assume {:print "$at(41,1398,1430)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(7,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/tx_context.move:40:9+32
    assume {:print "$track_return(7,4,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/tx_context.move:41:5+1
    assume {:print "$at(41,1435,1436)"} true;
L1:

    // return $t2 at ./sources/tx_context.move:41:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/tx_context.move:41:5+1
L2:

    // abort($t3) at ./sources/tx_context.move:41:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun tx_context::sender [verification] at ./sources/tx_context.move:39:5+93
procedure {:timeLimit 40} $2_tx_context_sender$verify(_$t0: $2_tx_context_TxContext) returns ($ret0: int)
{
    // declare local variables
    var $t1: $signer;
    var $t2: int;
    var $t3: int;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/tx_context.move:39:5+1
    assume {:print "$at(41,1343,1344)"} true;
    assume $IsValid'$2_tx_context_TxContext'($t0);

    // trace_local[self]($t0) at ./sources/tx_context.move:39:5+1
    assume {:print "$track_local(7,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.signer($t0) at ./sources/tx_context.move:40:28+12
    assume {:print "$at(41,1417,1429)"} true;
    $t1 := $signer#$2_tx_context_TxContext($t0);

    // $t2 := signer::address_of($t1) on_abort goto L2 with $t3 at ./sources/tx_context.move:40:9+32
    call $t2 := $1_signer_address_of($t1);
    if ($abort_flag) {
        assume {:print "$at(41,1398,1430)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(7,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/tx_context.move:40:9+32
    assume {:print "$track_return(7,4,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/tx_context.move:41:5+1
    assume {:print "$at(41,1435,1436)"} true;
L1:

    // return $t2 at ./sources/tx_context.move:41:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/tx_context.move:41:5+1
L2:

    // abort($t3) at ./sources/tx_context.move:41:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun tx_context::signer_ [verification] at ./sources/tx_context.move:44:5+74
procedure {:timeLimit 40} $2_tx_context_signer_$verify(_$t0: $2_tx_context_TxContext) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: $signer;
    var $t0: $2_tx_context_TxContext;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/tx_context.move:44:5+1
    assume {:print "$at(41,1517,1518)"} true;
    assume $IsValid'$2_tx_context_TxContext'($t0);

    // trace_local[self]($t0) at ./sources/tx_context.move:44:5+1
    assume {:print "$track_local(7,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<tx_context::TxContext>.signer($t0) at ./sources/tx_context.move:45:9+12
    assume {:print "$at(41,1573,1585)"} true;
    $t1 := $signer#$2_tx_context_TxContext($t0);

    // trace_return[0]($t1) at ./sources/tx_context.move:45:9+12
    assume {:print "$track_return(7,5,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/tx_context.move:46:5+1
    assume {:print "$at(41,1590,1591)"} true;
L1:

    // return $t1 at ./sources/tx_context.move:46:5+1
    $ret0 := $t1;
    return;

}

// struct object::ID at ./sources/object.move:24:5+406
type {:datatype} $2_object_ID;
function {:constructor} $2_object_ID($bytes: int): $2_object_ID;
function {:inline} $Update'$2_object_ID'_bytes(s: $2_object_ID, x: int): $2_object_ID {
    $2_object_ID(x)
}
function $IsValid'$2_object_ID'(s: $2_object_ID): bool {
    $IsValid'address'($bytes#$2_object_ID(s))
}
function {:inline} $IsEqual'$2_object_ID'(s1: $2_object_ID, s2: $2_object_ID): bool {
    s1 == s2
}

// struct object::UID at ./sources/object.move:38:5+44
type {:datatype} $2_object_UID;
function {:constructor} $2_object_UID($id: $2_object_ID): $2_object_UID;
function {:inline} $Update'$2_object_UID'_id(s: $2_object_UID, x: $2_object_ID): $2_object_UID {
    $2_object_UID(x)
}
function $IsValid'$2_object_UID'(s: $2_object_UID): bool {
    $IsValid'$2_object_ID'($id#$2_object_UID(s))
}
function {:inline} $IsEqual'$2_object_UID'(s1: $2_object_UID, s2: $2_object_UID): bool {
    s1 == s2
}

// fun object::id<bag::Item<#0>> [baseline] at ./sources/object.move:104:5+69
procedure {:inline 1} $2_object_id'$2_bag_Item'#0''(_$t0: $2_bag_Item'#0') returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t0: $2_bag_Item'#0';
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/object.move:104:5+1
    assume {:print "$at(4,3712,3713)"} true;
    assume {:print "$track_local(9,5,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:105:9+15
    assume {:print "$at(4,3757,3772)"} true;
    call $t1 := $2_object_borrow_uid'$2_bag_Item'#0''($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3757,3772)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:105:9+18
    $t3 := $id#$2_object_UID($t1);

    // trace_return[0]($t3) at ./sources/object.move:105:9+18
    assume {:print "$track_return(9,5,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/object.move:106:5+1
    assume {:print "$at(4,3780,3781)"} true;
L1:

    // return $t3 at ./sources/object.move:106:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/object.move:106:5+1
L2:

    // abort($t2) at ./sources/object.move:106:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id<collection::Item<#0>> [baseline] at ./sources/object.move:104:5+69
procedure {:inline 1} $2_object_id'$2_collection_Item'#0''(_$t0: $2_collection_Item'#0') returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t0: $2_collection_Item'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/object.move:104:5+1
    assume {:print "$at(4,3712,3713)"} true;
    assume {:print "$track_local(9,5,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:105:9+15
    assume {:print "$at(4,3757,3772)"} true;
    call $t1 := $2_object_borrow_uid'$2_collection_Item'#0''($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3757,3772)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:105:9+18
    $t3 := $id#$2_object_UID($t1);

    // trace_return[0]($t3) at ./sources/object.move:105:9+18
    assume {:print "$track_return(9,5,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/object.move:106:5+1
    assume {:print "$at(4,3780,3781)"} true;
L1:

    // return $t3 at ./sources/object.move:106:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/object.move:106:5+1
L2:

    // abort($t2) at ./sources/object.move:106:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id<#0> [baseline] at ./sources/object.move:104:5+69
procedure {:inline 1} $2_object_id'#0'(_$t0: #0) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/object.move:104:5+1
    assume {:print "$at(4,3712,3713)"} true;
    assume {:print "$track_local(9,5,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:105:9+15
    assume {:print "$at(4,3757,3772)"} true;
    call $t1 := $2_object_borrow_uid'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3757,3772)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:105:9+18
    $t3 := $id#$2_object_UID($t1);

    // trace_return[0]($t3) at ./sources/object.move:105:9+18
    assume {:print "$track_return(9,5,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/object.move:106:5+1
    assume {:print "$at(4,3780,3781)"} true;
L1:

    // return $t3 at ./sources/object.move:106:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/object.move:106:5+1
L2:

    // abort($t2) at ./sources/object.move:106:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id [verification] at ./sources/object.move:104:5+69
procedure {:timeLimit 40} $2_object_id$verify(_$t0: #0) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:104:5+1
    assume {:print "$at(4,3712,3713)"} true;
    assume $IsValid'#0'($t0);

    // trace_local[obj]($t0) at ./sources/object.move:104:5+1
    assume {:print "$track_local(9,5,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:105:9+15
    assume {:print "$at(4,3757,3772)"} true;
    call $t1 := $2_object_borrow_uid'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3757,3772)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,5):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:105:9+18
    $t3 := $id#$2_object_UID($t1);

    // trace_return[0]($t3) at ./sources/object.move:105:9+18
    assume {:print "$track_return(9,5,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/object.move:106:5+1
    assume {:print "$at(4,3780,3781)"} true;
L1:

    // return $t3 at ./sources/object.move:106:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/object.move:106:5+1
L2:

    // abort($t2) at ./sources/object.move:106:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::borrow_id [verification] at ./sources/object.move:109:5+78
procedure {:timeLimit 40} $2_object_borrow_id$verify(_$t0: #0) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_object_ID': $2_object_ID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:109:5+1
    assume {:print "$at(4,3831,3832)"} true;
    assume $IsValid'#0'($t0);

    // trace_local[obj]($t0) at ./sources/object.move:109:5+1
    assume {:print "$track_local(9,0,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:110:10+15
    assume {:print "$at(4,3885,3900)"} true;
    call $t1 := $2_object_borrow_uid'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3885,3900)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:110:9+19
    $t3 := $id#$2_object_UID($t1);

    // trace_return[0]($t3) at ./sources/object.move:110:9+19
    assume {:print "$track_return(9,0,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/object.move:111:5+1
    assume {:print "$at(4,3908,3909)"} true;
L1:

    // return $t3 at ./sources/object.move:111:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/object.move:111:5+1
L2:

    // abort($t2) at ./sources/object.move:111:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::delete [baseline] at ./sources/object.move:99:5+58
procedure {:inline 1} $2_object_delete(_$t0: $2_object_UID) returns ()
{
    // declare local variables
    var $t1: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[id]($t0) at ./sources/object.move:99:5+1
    assume {:print "$at(4,3607,3608)"} true;
    assume {:print "$track_local(9,3,0):", $t0} $t0 == $t0;

    // object::delete_impl<object::UID>($t0) on_abort goto L2 with $t1 at ./sources/object.move:100:9+15
    assume {:print "$at(4,3644,3659)"} true;
    call $2_object_delete_impl'$2_object_UID'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3644,3659)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(9,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // label L1 at ./sources/object.move:101:5+1
    assume {:print "$at(4,3664,3665)"} true;
L1:

    // return () at ./sources/object.move:101:5+1
    return;

    // label L2 at ./sources/object.move:101:5+1
L2:

    // abort($t1) at ./sources/object.move:101:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun object::delete [verification] at ./sources/object.move:99:5+58
procedure {:timeLimit 40} $2_object_delete$verify(_$t0: $2_object_UID) returns ()
{
    // declare local variables
    var $t1: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:99:5+1
    assume {:print "$at(4,3607,3608)"} true;
    assume $IsValid'$2_object_UID'($t0);

    // trace_local[id]($t0) at ./sources/object.move:99:5+1
    assume {:print "$track_local(9,3,0):", $t0} $t0 == $t0;

    // object::delete_impl<object::UID>($t0) on_abort goto L2 with $t1 at ./sources/object.move:100:9+15
    assume {:print "$at(4,3644,3659)"} true;
    call $2_object_delete_impl'$2_object_UID'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3644,3659)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(9,3):", $t1} $t1 == $t1;
        goto L2;
    }

    // label L1 at ./sources/object.move:101:5+1
    assume {:print "$at(4,3664,3665)"} true;
L1:

    // return () at ./sources/object.move:101:5+1
    return;

    // label L2 at ./sources/object.move:101:5+1
L2:

    // abort($t1) at ./sources/object.move:101:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun object::id_address<bag::Bag> [baseline] at ./sources/object.move:119:5+88
procedure {:inline 1} $2_object_id_address'$2_bag_Bag'(_$t0: $2_bag_Bag) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: int;
    var $t0: $2_bag_Bag;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/object.move:119:5+1
    assume {:print "$at(4,4140,4141)"} true;
    assume {:print "$track_local(9,6,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:120:9+15
    assume {:print "$at(4,4198,4213)"} true;
    call $t1 := $2_object_borrow_uid'$2_bag_Bag'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,4198,4213)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,6):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:120:9+18
    $t3 := $id#$2_object_UID($t1);

    // $t4 := get_field<object::ID>.bytes($t3) at ./sources/object.move:120:9+24
    $t4 := $bytes#$2_object_ID($t3);

    // trace_return[0]($t4) at ./sources/object.move:120:9+24
    assume {:print "$track_return(9,6,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/object.move:121:5+1
    assume {:print "$at(4,4227,4228)"} true;
L1:

    // return $t4 at ./sources/object.move:121:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/object.move:121:5+1
L2:

    // abort($t2) at ./sources/object.move:121:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id_address<collection::Collection<#0>> [baseline] at ./sources/object.move:119:5+88
procedure {:inline 1} $2_object_id_address'$2_collection_Collection'#0''(_$t0: $2_collection_Collection'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: int;
    var $t0: $2_collection_Collection'#0';
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/object.move:119:5+1
    assume {:print "$at(4,4140,4141)"} true;
    assume {:print "$track_local(9,6,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:120:9+15
    assume {:print "$at(4,4198,4213)"} true;
    call $t1 := $2_object_borrow_uid'$2_collection_Collection'#0''($t0);
    if ($abort_flag) {
        assume {:print "$at(4,4198,4213)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,6):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:120:9+18
    $t3 := $id#$2_object_UID($t1);

    // $t4 := get_field<object::ID>.bytes($t3) at ./sources/object.move:120:9+24
    $t4 := $bytes#$2_object_ID($t3);

    // trace_return[0]($t4) at ./sources/object.move:120:9+24
    assume {:print "$track_return(9,6,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/object.move:121:5+1
    assume {:print "$at(4,4227,4228)"} true;
L1:

    // return $t4 at ./sources/object.move:121:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/object.move:121:5+1
L2:

    // abort($t2) at ./sources/object.move:121:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id_address<#1> [baseline] at ./sources/object.move:119:5+88
procedure {:inline 1} $2_object_id_address'#1'(_$t0: #1) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: int;
    var $t0: #1;
    var $temp_0'#1': #1;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/object.move:119:5+1
    assume {:print "$at(4,4140,4141)"} true;
    assume {:print "$track_local(9,6,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:120:9+15
    assume {:print "$at(4,4198,4213)"} true;
    call $t1 := $2_object_borrow_uid'#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,4198,4213)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,6):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:120:9+18
    $t3 := $id#$2_object_UID($t1);

    // $t4 := get_field<object::ID>.bytes($t3) at ./sources/object.move:120:9+24
    $t4 := $bytes#$2_object_ID($t3);

    // trace_return[0]($t4) at ./sources/object.move:120:9+24
    assume {:print "$track_return(9,6,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/object.move:121:5+1
    assume {:print "$at(4,4227,4228)"} true;
L1:

    // return $t4 at ./sources/object.move:121:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/object.move:121:5+1
L2:

    // abort($t2) at ./sources/object.move:121:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id_address [verification] at ./sources/object.move:119:5+88
procedure {:timeLimit 40} $2_object_id_address$verify(_$t0: #0) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: int;
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:119:5+1
    assume {:print "$at(4,4140,4141)"} true;
    assume $IsValid'#0'($t0);

    // trace_local[obj]($t0) at ./sources/object.move:119:5+1
    assume {:print "$track_local(9,6,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:120:9+15
    assume {:print "$at(4,4198,4213)"} true;
    call $t1 := $2_object_borrow_uid'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,4198,4213)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,6):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:120:9+18
    $t3 := $id#$2_object_UID($t1);

    // $t4 := get_field<object::ID>.bytes($t3) at ./sources/object.move:120:9+24
    $t4 := $bytes#$2_object_ID($t3);

    // trace_return[0]($t4) at ./sources/object.move:120:9+24
    assume {:print "$track_return(9,6,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/object.move:121:5+1
    assume {:print "$at(4,4227,4228)"} true;
L1:

    // return $t4 at ./sources/object.move:121:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/object.move:121:5+1
L2:

    // abort($t2) at ./sources/object.move:121:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id_bytes [verification] at ./sources/object.move:114:5+99
procedure {:timeLimit 40} $2_object_id_bytes$verify(_$t0: #0) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: Vec (int);
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:114:5+1
    assume {:print "$at(4,3974,3975)"} true;
    assume $IsValid'#0'($t0);

    // trace_local[obj]($t0) at ./sources/object.move:114:5+1
    assume {:print "$track_local(9,7,0):", $t0} $t0 == $t0;

    // $t1 := object::borrow_uid<#0>($t0) on_abort goto L2 with $t2 at ./sources/object.move:115:24+15
    assume {:print "$at(4,4048,4063)"} true;
    call $t1 := $2_object_borrow_uid'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,4048,4063)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,7):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<object::UID>.id($t1) at ./sources/object.move:115:23+19
    $t3 := $id#$2_object_UID($t1);

    // $t4 := bcs::to_bytes<object::ID>($t3) on_abort goto L2 with $t2 at ./sources/object.move:115:9+34
    call $t4 := $1_bcs_to_bytes'$2_object_ID'($t3);
    if ($abort_flag) {
        assume {:print "$at(4,4033,4067)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,7):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/object.move:115:9+34
    assume {:print "$track_return(9,7,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/object.move:116:5+1
    assume {:print "$at(4,4072,4073)"} true;
L1:

    // return $t4 at ./sources/object.move:116:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/object.move:116:5+1
L2:

    // abort($t2) at ./sources/object.move:116:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::id_to_address [verification] at ./sources/object.move:50:5+67
procedure {:timeLimit 40} $2_object_id_to_address$verify(_$t0: $2_object_ID) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_object_ID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:50:5+1
    assume {:print "$at(4,2111,2112)"} true;
    assume $IsValid'$2_object_ID'($t0);

    // trace_local[id]($t0) at ./sources/object.move:50:5+1
    assume {:print "$track_local(9,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ID>.bytes($t0) at ./sources/object.move:51:9+8
    assume {:print "$at(4,2164,2172)"} true;
    $t1 := $bytes#$2_object_ID($t0);

    // trace_return[0]($t1) at ./sources/object.move:51:9+8
    assume {:print "$track_return(9,8,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/object.move:52:5+1
    assume {:print "$at(4,2177,2178)"} true;
L1:

    // return $t1 at ./sources/object.move:52:5+1
    $ret0 := $t1;
    return;

}

// fun object::id_to_bytes [verification] at ./sources/object.move:45:5+84
procedure {:timeLimit 40} $2_object_id_to_bytes$verify(_$t0: $2_object_ID) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: int;
    var $t2: Vec (int);
    var $t3: int;
    var $t0: $2_object_ID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:45:5+1
    assume {:print "$at(4,1970,1971)"} true;
    assume $IsValid'$2_object_ID'($t0);

    // trace_local[id]($t0) at ./sources/object.move:45:5+1
    assume {:print "$track_local(9,9,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ID>.bytes($t0) at ./sources/object.move:46:23+9
    assume {:print "$at(4,2038,2047)"} true;
    $t1 := $bytes#$2_object_ID($t0);

    // $t2 := bcs::to_bytes<address>($t1) on_abort goto L2 with $t3 at ./sources/object.move:46:9+24
    call $t2 := $1_bcs_to_bytes'address'($t1);
    if ($abort_flag) {
        assume {:print "$at(4,2024,2048)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(9,9):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/object.move:46:9+24
    assume {:print "$track_return(9,9,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/object.move:47:5+1
    assume {:print "$at(4,2053,2054)"} true;
L1:

    // return $t2 at ./sources/object.move:47:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/object.move:47:5+1
L2:

    // abort($t3) at ./sources/object.move:47:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::new [baseline] at ./sources/object.move:88:5+131
procedure {:inline 1} $2_object_new(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_object_UID, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: $2_object_UID;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/object.move:88:5+1
    assume {:print "$at(4,3114,3115)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(9,10,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := tx_context::new_object($t0) on_abort goto L2 with $t2 at ./sources/object.move:90:29+27
    assume {:print "$at(4,3199,3226)"} true;
    call $t1,$t0 := $2_tx_context_new_object($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3199,3226)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack object::ID($t1) at ./sources/object.move:90:17+41
    $t3 := $2_object_ID($t1);

    // $t4 := pack object::UID($t3) at ./sources/object.move:89:9+74
    assume {:print "$at(4,3165,3239)"} true;
    $t4 := $2_object_UID($t3);

    // trace_return[0]($t4) at ./sources/object.move:89:9+74
    assume {:print "$track_return(9,10,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t0) at ./sources/object.move:89:9+74
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(9,10,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/object.move:92:5+1
    assume {:print "$at(4,3244,3245)"} true;
L1:

    // return $t4 at ./sources/object.move:92:5+1
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/object.move:92:5+1
L2:

    // abort($t2) at ./sources/object.move:92:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::new [verification] at ./sources/object.move:88:5+131
procedure {:timeLimit 40} $2_object_new$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_object_UID, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $2_object_ID;
    var $t4: $2_object_UID;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:88:5+1
    assume {:print "$at(4,3114,3115)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/object.move:88:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(9,10,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := tx_context::new_object($t0) on_abort goto L2 with $t2 at ./sources/object.move:90:29+27
    assume {:print "$at(4,3199,3226)"} true;
    call $t1,$t0 := $2_tx_context_new_object($t0);
    if ($abort_flag) {
        assume {:print "$at(4,3199,3226)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(9,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack object::ID($t1) at ./sources/object.move:90:17+41
    $t3 := $2_object_ID($t1);

    // $t4 := pack object::UID($t3) at ./sources/object.move:89:9+74
    assume {:print "$at(4,3165,3239)"} true;
    $t4 := $2_object_UID($t3);

    // trace_return[0]($t4) at ./sources/object.move:89:9+74
    assume {:print "$track_return(9,10,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t0) at ./sources/object.move:89:9+74
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(9,10,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/object.move:92:5+1
    assume {:print "$at(4,3244,3245)"} true;
L1:

    // return $t4 at ./sources/object.move:92:5+1
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/object.move:92:5+1
L2:

    // abort($t2) at ./sources/object.move:92:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object::sui_system_state [baseline] at ./sources/object.move:58:5+132
procedure {:inline 1} $2_object_sui_system_state() returns ($ret0: $2_object_UID)
{
    // declare local variables
    var $t0: int;
    var $t1: $2_object_ID;
    var $t2: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;

    // bytecode translation starts here
    // $t0 := 0x5 at ./sources/object.move:60:29+26
    assume {:print "$at(4,2418,2444)"} true;
    $t0 := 5;
    assume $IsValid'address'($t0);

    // $t1 := pack object::ID($t0) at ./sources/object.move:60:17+40
    $t1 := $2_object_ID($t0);

    // $t2 := pack object::UID($t1) at ./sources/object.move:59:9+73
    assume {:print "$at(4,2384,2457)"} true;
    $t2 := $2_object_UID($t1);

    // trace_return[0]($t2) at ./sources/object.move:59:9+73
    assume {:print "$track_return(9,11,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/object.move:62:5+1
    assume {:print "$at(4,2462,2463)"} true;
L1:

    // return $t2 at ./sources/object.move:62:5+1
    $ret0 := $t2;
    return;

}

// fun object::sui_system_state [verification] at ./sources/object.move:58:5+132
procedure {:timeLimit 40} $2_object_sui_system_state$verify() returns ($ret0: $2_object_UID)
{
    // declare local variables
    var $t0: int;
    var $t1: $2_object_ID;
    var $t2: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := 0x5 at ./sources/object.move:60:29+26
    assume {:print "$at(4,2418,2444)"} true;
    $t0 := 5;
    assume $IsValid'address'($t0);

    // $t1 := pack object::ID($t0) at ./sources/object.move:60:17+40
    $t1 := $2_object_ID($t0);

    // $t2 := pack object::UID($t1) at ./sources/object.move:59:9+73
    assume {:print "$at(4,2384,2457)"} true;
    $t2 := $2_object_UID($t1);

    // trace_return[0]($t2) at ./sources/object.move:59:9+73
    assume {:print "$track_return(9,11,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/object.move:62:5+1
    assume {:print "$at(4,2462,2463)"} true;
L1:

    // return $t2 at ./sources/object.move:62:5+1
    $ret0 := $t2;
    return;

}

// fun object::uid_as_inner [baseline] at ./sources/object.move:65:5+63
procedure {:inline 1} $2_object_uid_as_inner(_$t0: $2_object_UID) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[uid]($t0) at ./sources/object.move:65:5+1
    assume {:print "$at(4,2505,2506)"} true;
    assume {:print "$track_local(9,12,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:66:9+7
    assume {:print "$at(4,2555,2562)"} true;
    $t1 := $id#$2_object_UID($t0);

    // trace_return[0]($t1) at ./sources/object.move:66:9+7
    assume {:print "$track_return(9,12,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/object.move:67:5+1
    assume {:print "$at(4,2567,2568)"} true;
L1:

    // return $t1 at ./sources/object.move:67:5+1
    $ret0 := $t1;
    return;

}

// fun object::uid_as_inner [verification] at ./sources/object.move:65:5+63
procedure {:timeLimit 40} $2_object_uid_as_inner$verify(_$t0: $2_object_UID) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:65:5+1
    assume {:print "$at(4,2505,2506)"} true;
    assume $IsValid'$2_object_UID'($t0);

    // trace_local[uid]($t0) at ./sources/object.move:65:5+1
    assume {:print "$track_local(9,12,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:66:9+7
    assume {:print "$at(4,2555,2562)"} true;
    $t1 := $id#$2_object_UID($t0);

    // trace_return[0]($t1) at ./sources/object.move:66:9+7
    assume {:print "$track_return(9,12,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/object.move:67:5+1
    assume {:print "$at(4,2567,2568)"} true;
L1:

    // return $t1 at ./sources/object.move:67:5+1
    $ret0 := $t1;
    return;

}

// fun object::uid_to_address [baseline] at ./sources/object.move:80:5+74
procedure {:inline 1} $2_object_uid_to_address(_$t0: $2_object_UID) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[uid]($t0) at ./sources/object.move:80:5+1
    assume {:print "$at(4,2876,2877)"} true;
    assume {:print "$track_local(9,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:81:9+6
    assume {:print "$at(4,2932,2938)"} true;
    $t1 := $id#$2_object_UID($t0);

    // $t2 := get_field<object::ID>.bytes($t1) at ./sources/object.move:81:9+12
    $t2 := $bytes#$2_object_ID($t1);

    // trace_return[0]($t2) at ./sources/object.move:81:9+12
    assume {:print "$track_return(9,13,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/object.move:82:5+1
    assume {:print "$at(4,2949,2950)"} true;
L1:

    // return $t2 at ./sources/object.move:82:5+1
    $ret0 := $t2;
    return;

}

// fun object::uid_to_address [verification] at ./sources/object.move:80:5+74
procedure {:timeLimit 40} $2_object_uid_to_address$verify(_$t0: $2_object_UID) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:80:5+1
    assume {:print "$at(4,2876,2877)"} true;
    assume $IsValid'$2_object_UID'($t0);

    // trace_local[uid]($t0) at ./sources/object.move:80:5+1
    assume {:print "$track_local(9,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:81:9+6
    assume {:print "$at(4,2932,2938)"} true;
    $t1 := $id#$2_object_UID($t0);

    // $t2 := get_field<object::ID>.bytes($t1) at ./sources/object.move:81:9+12
    $t2 := $bytes#$2_object_ID($t1);

    // trace_return[0]($t2) at ./sources/object.move:81:9+12
    assume {:print "$track_return(9,13,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/object.move:82:5+1
    assume {:print "$at(4,2949,2950)"} true;
L1:

    // return $t2 at ./sources/object.move:82:5+1
    $ret0 := $t2;
    return;

}

// fun object::uid_to_bytes [verification] at ./sources/object.move:75:5+91
procedure {:timeLimit 40} $2_object_uid_to_bytes$verify(_$t0: $2_object_UID) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:75:5+1
    assume {:print "$at(4,2728,2729)"} true;
    assume $IsValid'$2_object_UID'($t0);

    // trace_local[uid]($t0) at ./sources/object.move:75:5+1
    assume {:print "$track_local(9,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:76:24+6
    assume {:print "$at(4,2800,2806)"} true;
    $t1 := $id#$2_object_UID($t0);

    // $t2 := get_field<object::ID>.bytes($t1) at ./sources/object.move:76:23+13
    $t2 := $bytes#$2_object_ID($t1);

    // $t3 := bcs::to_bytes<address>($t2) on_abort goto L2 with $t4 at ./sources/object.move:76:9+28
    call $t3 := $1_bcs_to_bytes'address'($t2);
    if ($abort_flag) {
        assume {:print "$at(4,2785,2813)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(9,14):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/object.move:76:9+28
    assume {:print "$track_return(9,14,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/object.move:77:5+1
    assume {:print "$at(4,2818,2819)"} true;
L1:

    // return $t3 at ./sources/object.move:77:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/object.move:77:5+1
L2:

    // abort($t4) at ./sources/object.move:77:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::uid_to_inner [baseline] at ./sources/object.move:70:5+61
procedure {:inline 1} $2_object_uid_to_inner(_$t0: $2_object_UID) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[uid]($t0) at ./sources/object.move:70:5+1
    assume {:print "$at(4,2624,2625)"} true;
    assume {:print "$track_local(9,15,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:71:9+6
    assume {:print "$at(4,2673,2679)"} true;
    $t1 := $id#$2_object_UID($t0);

    // trace_return[0]($t1) at ./sources/object.move:71:9+6
    assume {:print "$track_return(9,15,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/object.move:72:5+1
    assume {:print "$at(4,2684,2685)"} true;
L1:

    // return $t1 at ./sources/object.move:72:5+1
    $ret0 := $t1;
    return;

}

// fun object::uid_to_inner [verification] at ./sources/object.move:70:5+61
procedure {:timeLimit 40} $2_object_uid_to_inner$verify(_$t0: $2_object_UID) returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t0: $2_object_UID;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object.move:70:5+1
    assume {:print "$at(4,2624,2625)"} true;
    assume $IsValid'$2_object_UID'($t0);

    // trace_local[uid]($t0) at ./sources/object.move:70:5+1
    assume {:print "$track_local(9,15,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::UID>.id($t0) at ./sources/object.move:71:9+6
    assume {:print "$at(4,2673,2679)"} true;
    $t1 := $id#$2_object_UID($t0);

    // trace_return[0]($t1) at ./sources/object.move:71:9+6
    assume {:print "$track_return(9,15,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/object.move:72:5+1
    assume {:print "$at(4,2684,2685)"} true;
L1:

    // return $t1 at ./sources/object.move:72:5+1
    $ret0 := $t1;
    return;

}

// struct typed_id::TypedID<bag::Item<#0>> at ./sources/typed_id.move:23:5+76
type {:datatype} $2_typed_id_TypedID'$2_bag_Item'#0'';
function {:constructor} $2_typed_id_TypedID'$2_bag_Item'#0''($id: $2_object_ID): $2_typed_id_TypedID'$2_bag_Item'#0'';
function {:inline} $Update'$2_typed_id_TypedID'$2_bag_Item'#0'''_id(s: $2_typed_id_TypedID'$2_bag_Item'#0'', x: $2_object_ID): $2_typed_id_TypedID'$2_bag_Item'#0'' {
    $2_typed_id_TypedID'$2_bag_Item'#0''(x)
}
function $IsValid'$2_typed_id_TypedID'$2_bag_Item'#0'''(s: $2_typed_id_TypedID'$2_bag_Item'#0''): bool {
    $IsValid'$2_object_ID'($id#$2_typed_id_TypedID'$2_bag_Item'#0''(s))
}
function {:inline} $IsEqual'$2_typed_id_TypedID'$2_bag_Item'#0'''(s1: $2_typed_id_TypedID'$2_bag_Item'#0'', s2: $2_typed_id_TypedID'$2_bag_Item'#0''): bool {
    s1 == s2
}

// struct typed_id::TypedID<collection::Item<#0>> at ./sources/typed_id.move:23:5+76
type {:datatype} $2_typed_id_TypedID'$2_collection_Item'#0'';
function {:constructor} $2_typed_id_TypedID'$2_collection_Item'#0''($id: $2_object_ID): $2_typed_id_TypedID'$2_collection_Item'#0'';
function {:inline} $Update'$2_typed_id_TypedID'$2_collection_Item'#0'''_id(s: $2_typed_id_TypedID'$2_collection_Item'#0'', x: $2_object_ID): $2_typed_id_TypedID'$2_collection_Item'#0'' {
    $2_typed_id_TypedID'$2_collection_Item'#0''(x)
}
function $IsValid'$2_typed_id_TypedID'$2_collection_Item'#0'''(s: $2_typed_id_TypedID'$2_collection_Item'#0''): bool {
    $IsValid'$2_object_ID'($id#$2_typed_id_TypedID'$2_collection_Item'#0''(s))
}
function {:inline} $IsEqual'$2_typed_id_TypedID'$2_collection_Item'#0'''(s1: $2_typed_id_TypedID'$2_collection_Item'#0'', s2: $2_typed_id_TypedID'$2_collection_Item'#0''): bool {
    s1 == s2
}

// struct typed_id::TypedID<#0> at ./sources/typed_id.move:23:5+76
type {:datatype} $2_typed_id_TypedID'#0';
function {:constructor} $2_typed_id_TypedID'#0'($id: $2_object_ID): $2_typed_id_TypedID'#0';
function {:inline} $Update'$2_typed_id_TypedID'#0''_id(s: $2_typed_id_TypedID'#0', x: $2_object_ID): $2_typed_id_TypedID'#0' {
    $2_typed_id_TypedID'#0'(x)
}
function $IsValid'$2_typed_id_TypedID'#0''(s: $2_typed_id_TypedID'#0'): bool {
    $IsValid'$2_object_ID'($id#$2_typed_id_TypedID'#0'(s))
}
function {:inline} $IsEqual'$2_typed_id_TypedID'#0''(s1: $2_typed_id_TypedID'#0', s2: $2_typed_id_TypedID'#0'): bool {
    s1 == s2
}

// fun typed_id::new<bag::Item<#0>> [baseline] at ./sources/typed_id.move:28:5+91
procedure {:inline 1} $2_typed_id_new'$2_bag_Item'#0''(_$t0: $2_bag_Item'#0') returns ($ret0: $2_typed_id_TypedID'$2_bag_Item'#0'')
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t3: $2_typed_id_TypedID'$2_bag_Item'#0'';
    var $t0: $2_bag_Item'#0';
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'$2_typed_id_TypedID'$2_bag_Item'#0''': $2_typed_id_TypedID'$2_bag_Item'#0'';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/typed_id.move:28:5+1
    assume {:print "$at(32,977,978)"} true;
    assume {:print "$track_local(10,2,0):", $t0} $t0 == $t0;

    // $t1 := object::id<#0>($t0) on_abort goto L2 with $t2 at ./sources/typed_id.move:29:23+15
    assume {:print "$at(32,1045,1060)"} true;
    call $t1 := $2_object_id'$2_bag_Item'#0''($t0);
    if ($abort_flag) {
        assume {:print "$at(32,1045,1060)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(10,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack typed_id::TypedID<#0>($t1) at ./sources/typed_id.move:29:9+31
    $t3 := $2_typed_id_TypedID'$2_bag_Item'#0''($t1);

    // trace_return[0]($t3) at ./sources/typed_id.move:29:9+31
    assume {:print "$track_return(10,2,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/typed_id.move:30:5+1
    assume {:print "$at(32,1067,1068)"} true;
L1:

    // return $t3 at ./sources/typed_id.move:30:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/typed_id.move:30:5+1
L2:

    // abort($t2) at ./sources/typed_id.move:30:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun typed_id::new<collection::Item<#0>> [baseline] at ./sources/typed_id.move:28:5+91
procedure {:inline 1} $2_typed_id_new'$2_collection_Item'#0''(_$t0: $2_collection_Item'#0') returns ($ret0: $2_typed_id_TypedID'$2_collection_Item'#0'')
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t3: $2_typed_id_TypedID'$2_collection_Item'#0'';
    var $t0: $2_collection_Item'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'$2_typed_id_TypedID'$2_collection_Item'#0''': $2_typed_id_TypedID'$2_collection_Item'#0'';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/typed_id.move:28:5+1
    assume {:print "$at(32,977,978)"} true;
    assume {:print "$track_local(10,2,0):", $t0} $t0 == $t0;

    // $t1 := object::id<#0>($t0) on_abort goto L2 with $t2 at ./sources/typed_id.move:29:23+15
    assume {:print "$at(32,1045,1060)"} true;
    call $t1 := $2_object_id'$2_collection_Item'#0''($t0);
    if ($abort_flag) {
        assume {:print "$at(32,1045,1060)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(10,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack typed_id::TypedID<#0>($t1) at ./sources/typed_id.move:29:9+31
    $t3 := $2_typed_id_TypedID'$2_collection_Item'#0''($t1);

    // trace_return[0]($t3) at ./sources/typed_id.move:29:9+31
    assume {:print "$track_return(10,2,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/typed_id.move:30:5+1
    assume {:print "$at(32,1067,1068)"} true;
L1:

    // return $t3 at ./sources/typed_id.move:30:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/typed_id.move:30:5+1
L2:

    // abort($t2) at ./sources/typed_id.move:30:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun typed_id::new [verification] at ./sources/typed_id.move:28:5+91
procedure {:timeLimit 40} $2_typed_id_new$verify(_$t0: #0) returns ($ret0: $2_typed_id_TypedID'#0')
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: int;
    var $t3: $2_typed_id_TypedID'#0';
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_typed_id_TypedID'#0'': $2_typed_id_TypedID'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/typed_id.move:28:5+1
    assume {:print "$at(32,977,978)"} true;
    assume $IsValid'#0'($t0);

    // trace_local[obj]($t0) at ./sources/typed_id.move:28:5+1
    assume {:print "$track_local(10,2,0):", $t0} $t0 == $t0;

    // $t1 := object::id<#0>($t0) on_abort goto L2 with $t2 at ./sources/typed_id.move:29:23+15
    assume {:print "$at(32,1045,1060)"} true;
    call $t1 := $2_object_id'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(32,1045,1060)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(10,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack typed_id::TypedID<#0>($t1) at ./sources/typed_id.move:29:9+31
    $t3 := $2_typed_id_TypedID'#0'($t1);

    // trace_return[0]($t3) at ./sources/typed_id.move:29:9+31
    assume {:print "$track_return(10,2,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/typed_id.move:30:5+1
    assume {:print "$at(32,1067,1068)"} true;
L1:

    // return $t3 at ./sources/typed_id.move:30:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/typed_id.move:30:5+1
L2:

    // abort($t2) at ./sources/typed_id.move:30:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun typed_id::as_id [verification] at ./sources/typed_id.move:33:5+81
procedure {:timeLimit 40} $2_typed_id_as_id$verify(_$t0: $2_typed_id_TypedID'#0') returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t0: $2_typed_id_TypedID'#0';
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_typed_id_TypedID'#0'': $2_typed_id_TypedID'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/typed_id.move:33:5+1
    assume {:print "$at(32,1118,1119)"} true;
    assume $IsValid'$2_typed_id_TypedID'#0''($t0);

    // trace_local[typed_id]($t0) at ./sources/typed_id.move:33:5+1
    assume {:print "$track_local(10,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<typed_id::TypedID<#0>>.id($t0) at ./sources/typed_id.move:34:9+12
    assume {:print "$at(32,1181,1193)"} true;
    $t1 := $id#$2_typed_id_TypedID'#0'($t0);

    // trace_return[0]($t1) at ./sources/typed_id.move:34:9+12
    assume {:print "$track_return(10,0,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/typed_id.move:35:5+1
    assume {:print "$at(32,1198,1199)"} true;
L1:

    // return $t1 at ./sources/typed_id.move:35:5+1
    $ret0 := $t1;
    return;

}

// fun typed_id::equals_object [verification] at ./sources/typed_id.move:44:5+117
procedure {:timeLimit 40} $2_typed_id_equals_object$verify(_$t0: $2_typed_id_TypedID'#0', _$t1: #0) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $2_object_ID;
    var $t3: $2_object_ID;
    var $t4: int;
    var $t5: bool;
    var $t0: $2_typed_id_TypedID'#0';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_typed_id_TypedID'#0'': $2_typed_id_TypedID'#0';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/typed_id.move:44:5+1
    assume {:print "$at(32,1435,1436)"} true;
    assume $IsValid'$2_typed_id_TypedID'#0''($t0);

    // assume WellFormed($t1) at ./sources/typed_id.move:44:5+1
    assume $IsValid'#0'($t1);

    // trace_local[typed_id]($t0) at ./sources/typed_id.move:44:5+1
    assume {:print "$track_local(10,1,0):", $t0} $t0 == $t0;

    // trace_local[obj]($t1) at ./sources/typed_id.move:44:5+1
    assume {:print "$track_local(10,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<typed_id::TypedID<#0>>.id($t0) at ./sources/typed_id.move:45:9+11
    assume {:print "$at(32,1516,1527)"} true;
    $t2 := $id#$2_typed_id_TypedID'#0'($t0);

    // $t3 := object::id<#0>($t1) on_abort goto L2 with $t4 at ./sources/typed_id.move:45:24+15
    call $t3 := $2_object_id'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(32,1531,1546)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(10,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := ==($t2, $t3) at ./sources/typed_id.move:45:21+2
    $t5 := $IsEqual'$2_object_ID'($t2, $t3);

    // trace_return[0]($t5) at ./sources/typed_id.move:45:9+30
    assume {:print "$track_return(10,1,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/typed_id.move:46:5+1
    assume {:print "$at(32,1551,1552)"} true;
L1:

    // return $t5 at ./sources/typed_id.move:46:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/typed_id.move:46:5+1
L2:

    // abort($t4) at ./sources/typed_id.move:46:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun typed_id::to_id [verification] at ./sources/typed_id.move:38:5+108
procedure {:timeLimit 40} $2_typed_id_to_id$verify(_$t0: $2_typed_id_TypedID'#0') returns ($ret0: $2_object_ID)
{
    // declare local variables
    var $t1: $2_object_ID;
    var $t2: $2_object_ID;
    var $t0: $2_typed_id_TypedID'#0';
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'$2_typed_id_TypedID'#0'': $2_typed_id_TypedID'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/typed_id.move:38:5+1
    assume {:print "$at(32,1246,1247)"} true;
    assume $IsValid'$2_typed_id_TypedID'#0''($t0);

    // trace_local[typed_id]($t0) at ./sources/typed_id.move:38:5+1
    assume {:print "$track_local(10,3,0):", $t0} $t0 == $t0;

    // $t2 := unpack typed_id::TypedID<#0>($t0) at ./sources/typed_id.move:39:13+14
    assume {:print "$at(32,1311,1325)"} true;
    $t2 := $id#$2_typed_id_TypedID'#0'($t0);

    // trace_local[id]($t2) at ./sources/typed_id.move:39:23+2
    assume {:print "$track_local(10,3,1):", $t2} $t2 == $t2;

    // trace_return[0]($t2) at ./sources/typed_id.move:40:9+2
    assume {:print "$at(32,1346,1348)"} true;
    assume {:print "$track_return(10,3,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/typed_id.move:41:5+1
    assume {:print "$at(32,1353,1354)"} true;
L1:

    // return $t2 at ./sources/typed_id.move:41:5+1
    $ret0 := $t2;
    return;

}

// fun transfer::transfer<bag::Bag> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_bag_Bag'(_$t0: $2_bag_Bag, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_bag_Bag;
    var $t1: int;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_bag_Bag'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<coin::Coin<sui::SUI>> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_coin_Coin'$2_sui_SUI''(_$t0: $2_coin_Coin'$2_sui_SUI', _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_coin_Coin'$2_sui_SUI';
    var $t1: int;
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_coin_Coin'$2_sui_SUI''($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<coin::Coin<#0>> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_coin_Coin'#0''(_$t0: $2_coin_Coin'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_coin_Coin'#0';
    var $t1: int;
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_coin_Coin'#0''($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<coin::TreasuryCap<#0>> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_coin_TreasuryCap'#0''(_$t0: $2_coin_TreasuryCap'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_coin_TreasuryCap'#0';
    var $t1: int;
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_coin_TreasuryCap'#0''($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<collection::Collection<#0>> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_collection_Collection'#0''(_$t0: $2_collection_Collection'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_collection_Collection'#0';
    var $t1: int;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_collection_Collection'#0''($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<locked_coin::LockedCoin<sui::SUI>> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_locked_coin_LockedCoin'$2_sui_SUI''(_$t0: $2_locked_coin_LockedCoin'$2_sui_SUI', _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t1: int;
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_locked_coin_LockedCoin'$2_sui_SUI''($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<locked_coin::LockedCoin<#0>> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_locked_coin_LockedCoin'#0''(_$t0: $2_locked_coin_LockedCoin'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_locked_coin_LockedCoin'#0';
    var $t1: int;
    var $temp_0'$2_locked_coin_LockedCoin'#0'': $2_locked_coin_LockedCoin'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_locked_coin_LockedCoin'#0''($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<delegation::Delegation> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_delegation_Delegation'(_$t0: $2_delegation_Delegation, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_delegation_Delegation;
    var $t1: int;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_delegation_Delegation'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<devnet_nft::DevNetNFT> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_devnet_nft_DevNetNFT'(_$t0: $2_devnet_nft_DevNetNFT, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_devnet_nft_DevNetNFT;
    var $t1: int;
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_devnet_nft_DevNetNFT'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<stake::Stake> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_stake_Stake'(_$t0: $2_stake_Stake, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_stake_Stake;
    var $t1: int;
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_stake_Stake'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<object_basics::Object> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_object_basics_Object'(_$t0: $2_object_basics_Object, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_object_basics_Object;
    var $t1: int;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_object_basics_Object'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<object_basics::Wrapper> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'$2_object_basics_Wrapper'(_$t0: $2_object_basics_Wrapper, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: $2_object_basics_Wrapper;
    var $t1: int;
    var $temp_0'$2_object_basics_Wrapper': $2_object_basics_Wrapper;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'$2_object_basics_Wrapper'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer<#0> [baseline] at ./sources/transfer.move:10:5+140
procedure {:inline 1} $2_transfer_transfer'#0'(_$t0: #0, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: #0;
    var $t1: int;
    var $temp_0'#0': #0;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer [verification] at ./sources/transfer.move:10:5+140
procedure {:timeLimit 40} $2_transfer_transfer$verify(_$t0: #0, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: #0;
    var $t1: int;
    var $temp_0'#0': #0;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$at(56,309,310)"} true;
    assume $IsValid'#0'($t0);

    // assume WellFormed($t1) at ./sources/transfer.move:10:5+1
    assume $IsValid'address'($t1);

    // trace_local[obj]($t0) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/transfer.move:10:5+1
    assume {:print "$track_local(11,2,1):", $t1} $t1 == $t1;

    // $t2 := false at ./sources/transfer.move:12:43+5
    assume {:print "$at(56,437,442)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // transfer::transfer_internal<#0>($t0, $t1, $t2) on_abort goto L2 with $t3 at ./sources/transfer.move:12:9+40
    call $2_transfer_transfer_internal'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(56,403,443)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:13:5+1
    assume {:print "$at(56,448,449)"} true;
L1:

    // return () at ./sources/transfer.move:13:5+1
    return;

    // label L2 at ./sources/transfer.move:13:5+1
L2:

    // abort($t3) at ./sources/transfer.move:13:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer_to_object<bag::Item<#0>, bag::Bag> [baseline] at ./sources/transfer.move:16:5+174
procedure {:inline 1} $2_transfer_transfer_to_object'$2_bag_Item'#0'_$2_bag_Bag'(_$t0: $2_bag_Item'#0', _$t1: $Mutation ($2_bag_Bag)) returns ($ret0: $Mutation ($2_bag_Bag))
{
    // declare local variables
    var $t2: int;
    var $t3: $2_bag_Bag;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: $2_bag_Item'#0';
    var $t1: $Mutation ($2_bag_Bag);
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:16:5+1
    assume {:print "$at(56,518,519)"} true;
    assume {:print "$track_local(11,4,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at ./sources/transfer.move:16:5+1
    $temp_0'$2_bag_Bag' := $Dereference($t1);
    assume {:print "$track_local(11,4,1):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // $t3 := read_ref($t1) at ./sources/transfer.move:17:43+5
    assume {:print "$at(56,631,636)"} true;
    $t3 := $Dereference($t1);

    // $t4 := object::id_address<#1>($t3) on_abort goto L2 with $t5 at ./sources/transfer.move:17:24+25
    call $t4 := $2_object_id_address'$2_bag_Bag'($t3);
    if ($abort_flag) {
        assume {:print "$at(56,612,637)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(11,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[owner_id]($t4) at ./sources/transfer.move:17:13+8
    assume {:print "$track_local(11,4,2):", $t4} $t4 == $t4;

    // $t6 := true at ./sources/transfer.move:18:42+4
    assume {:print "$at(56,680,684)"} true;
    $t6 := true;
    assume $IsValid'bool'($t6);

    // transfer::transfer_internal<#0>($t0, $t4, $t6) on_abort goto L2 with $t5 at ./sources/transfer.move:18:9+38
    call $2_transfer_transfer_internal'$2_bag_Item'#0''($t0, $t4, $t6);
    if ($abort_flag) {
        assume {:print "$at(56,647,685)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(11,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[owner]($t1) at ./sources/transfer.move:18:47+1
    $temp_0'$2_bag_Bag' := $Dereference($t1);
    assume {:print "$track_local(11,4,1):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // label L1 at ./sources/transfer.move:19:5+1
    assume {:print "$at(56,691,692)"} true;
L1:

    // return () at ./sources/transfer.move:19:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/transfer.move:19:5+1
L2:

    // abort($t5) at ./sources/transfer.move:19:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun transfer::transfer_to_object<collection::Item<#0>, collection::Collection<#0>> [baseline] at ./sources/transfer.move:16:5+174
procedure {:inline 1} $2_transfer_transfer_to_object'$2_collection_Item'#0'_$2_collection_Collection'#0''(_$t0: $2_collection_Item'#0', _$t1: $Mutation ($2_collection_Collection'#0')) returns ($ret0: $Mutation ($2_collection_Collection'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: $2_collection_Collection'#0';
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: $2_collection_Item'#0';
    var $t1: $Mutation ($2_collection_Collection'#0');
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:16:5+1
    assume {:print "$at(56,518,519)"} true;
    assume {:print "$track_local(11,4,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at ./sources/transfer.move:16:5+1
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t1);
    assume {:print "$track_local(11,4,1):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // $t3 := read_ref($t1) at ./sources/transfer.move:17:43+5
    assume {:print "$at(56,631,636)"} true;
    $t3 := $Dereference($t1);

    // $t4 := object::id_address<#1>($t3) on_abort goto L2 with $t5 at ./sources/transfer.move:17:24+25
    call $t4 := $2_object_id_address'$2_collection_Collection'#0''($t3);
    if ($abort_flag) {
        assume {:print "$at(56,612,637)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(11,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[owner_id]($t4) at ./sources/transfer.move:17:13+8
    assume {:print "$track_local(11,4,2):", $t4} $t4 == $t4;

    // $t6 := true at ./sources/transfer.move:18:42+4
    assume {:print "$at(56,680,684)"} true;
    $t6 := true;
    assume $IsValid'bool'($t6);

    // transfer::transfer_internal<#0>($t0, $t4, $t6) on_abort goto L2 with $t5 at ./sources/transfer.move:18:9+38
    call $2_transfer_transfer_internal'$2_collection_Item'#0''($t0, $t4, $t6);
    if ($abort_flag) {
        assume {:print "$at(56,647,685)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(11,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[owner]($t1) at ./sources/transfer.move:18:47+1
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t1);
    assume {:print "$track_local(11,4,1):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // label L1 at ./sources/transfer.move:19:5+1
    assume {:print "$at(56,691,692)"} true;
L1:

    // return () at ./sources/transfer.move:19:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/transfer.move:19:5+1
L2:

    // abort($t5) at ./sources/transfer.move:19:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun transfer::transfer_to_object [verification] at ./sources/transfer.move:16:5+174
procedure {:timeLimit 40} $2_transfer_transfer_to_object$verify(_$t0: #0, _$t1: $Mutation (#1)) returns ($ret0: $Mutation (#1))
{
    // declare local variables
    var $t2: int;
    var $t3: #1;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: #0;
    var $t1: $Mutation (#1);
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/transfer.move:16:5+1
    assume {:print "$at(56,518,519)"} true;
    assume $IsValid'#0'($t0);

    // assume WellFormed($t1) at ./sources/transfer.move:16:5+1
    assume $IsValid'#1'($Dereference($t1));

    // trace_local[obj]($t0) at ./sources/transfer.move:16:5+1
    assume {:print "$track_local(11,4,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at ./sources/transfer.move:16:5+1
    $temp_0'#1' := $Dereference($t1);
    assume {:print "$track_local(11,4,1):", $temp_0'#1'} $temp_0'#1' == $temp_0'#1';

    // $t3 := read_ref($t1) at ./sources/transfer.move:17:43+5
    assume {:print "$at(56,631,636)"} true;
    $t3 := $Dereference($t1);

    // $t4 := object::id_address<#1>($t3) on_abort goto L2 with $t5 at ./sources/transfer.move:17:24+25
    call $t4 := $2_object_id_address'#1'($t3);
    if ($abort_flag) {
        assume {:print "$at(56,612,637)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(11,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[owner_id]($t4) at ./sources/transfer.move:17:13+8
    assume {:print "$track_local(11,4,2):", $t4} $t4 == $t4;

    // $t6 := true at ./sources/transfer.move:18:42+4
    assume {:print "$at(56,680,684)"} true;
    $t6 := true;
    assume $IsValid'bool'($t6);

    // transfer::transfer_internal<#0>($t0, $t4, $t6) on_abort goto L2 with $t5 at ./sources/transfer.move:18:9+38
    call $2_transfer_transfer_internal'#0'($t0, $t4, $t6);
    if ($abort_flag) {
        assume {:print "$at(56,647,685)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(11,4):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[owner]($t1) at ./sources/transfer.move:18:47+1
    $temp_0'#1' := $Dereference($t1);
    assume {:print "$track_local(11,4,1):", $temp_0'#1'} $temp_0'#1' == $temp_0'#1';

    // label L1 at ./sources/transfer.move:19:5+1
    assume {:print "$at(56,691,692)"} true;
L1:

    // return () at ./sources/transfer.move:19:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/transfer.move:19:5+1
L2:

    // abort($t5) at ./sources/transfer.move:19:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun transfer::transfer_to_object_id<bag::Bag> [baseline] at ./sources/transfer.move:29:5+144
procedure {:inline 1} $2_transfer_transfer_to_object_id'$2_bag_Bag'(_$t0: $2_bag_Bag, _$t1: $2_object_UID) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $2_bag_Bag;
    var $t1: $2_object_UID;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:29:5+1
    assume {:print "$at(56,1423,1424)"} true;
    assume {:print "$track_local(11,5,0):", $t0} $t0 == $t0;

    // trace_local[owner_id]($t1) at ./sources/transfer.move:29:5+1
    assume {:print "$track_local(11,5,1):", $t1} $t1 == $t1;

    // $t2 := object::uid_to_address($t1) on_abort goto L2 with $t3 at ./sources/transfer.move:30:32+32
    assume {:print "$at(56,1521,1553)"} true;
    call $t2 := $2_object_uid_to_address($t1);
    if ($abort_flag) {
        assume {:print "$at(56,1521,1553)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := true at ./sources/transfer.move:30:66+4
    $t4 := true;
    assume $IsValid'bool'($t4);

    // transfer::transfer_internal<#0>($t0, $t2, $t4) on_abort goto L2 with $t3 at ./sources/transfer.move:30:9+62
    call $2_transfer_transfer_internal'$2_bag_Bag'($t0, $t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(56,1498,1560)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:31:5+1
    assume {:print "$at(56,1566,1567)"} true;
L1:

    // return () at ./sources/transfer.move:31:5+1
    return;

    // label L2 at ./sources/transfer.move:31:5+1
L2:

    // abort($t3) at ./sources/transfer.move:31:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer_to_object_id<collection::Collection<#0>> [baseline] at ./sources/transfer.move:29:5+144
procedure {:inline 1} $2_transfer_transfer_to_object_id'$2_collection_Collection'#0''(_$t0: $2_collection_Collection'#0', _$t1: $2_object_UID) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $2_collection_Collection'#0';
    var $t1: $2_object_UID;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[obj]($t0) at ./sources/transfer.move:29:5+1
    assume {:print "$at(56,1423,1424)"} true;
    assume {:print "$track_local(11,5,0):", $t0} $t0 == $t0;

    // trace_local[owner_id]($t1) at ./sources/transfer.move:29:5+1
    assume {:print "$track_local(11,5,1):", $t1} $t1 == $t1;

    // $t2 := object::uid_to_address($t1) on_abort goto L2 with $t3 at ./sources/transfer.move:30:32+32
    assume {:print "$at(56,1521,1553)"} true;
    call $t2 := $2_object_uid_to_address($t1);
    if ($abort_flag) {
        assume {:print "$at(56,1521,1553)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := true at ./sources/transfer.move:30:66+4
    $t4 := true;
    assume $IsValid'bool'($t4);

    // transfer::transfer_internal<#0>($t0, $t2, $t4) on_abort goto L2 with $t3 at ./sources/transfer.move:30:9+62
    call $2_transfer_transfer_internal'$2_collection_Collection'#0''($t0, $t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(56,1498,1560)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:31:5+1
    assume {:print "$at(56,1566,1567)"} true;
L1:

    // return () at ./sources/transfer.move:31:5+1
    return;

    // label L2 at ./sources/transfer.move:31:5+1
L2:

    // abort($t3) at ./sources/transfer.move:31:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun transfer::transfer_to_object_id [verification] at ./sources/transfer.move:29:5+144
procedure {:timeLimit 40} $2_transfer_transfer_to_object_id$verify(_$t0: #0, _$t1: $2_object_UID) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: #0;
    var $t1: $2_object_UID;
    var $temp_0'#0': #0;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/transfer.move:29:5+1
    assume {:print "$at(56,1423,1424)"} true;
    assume $IsValid'#0'($t0);

    // assume WellFormed($t1) at ./sources/transfer.move:29:5+1
    assume $IsValid'$2_object_UID'($t1);

    // trace_local[obj]($t0) at ./sources/transfer.move:29:5+1
    assume {:print "$track_local(11,5,0):", $t0} $t0 == $t0;

    // trace_local[owner_id]($t1) at ./sources/transfer.move:29:5+1
    assume {:print "$track_local(11,5,1):", $t1} $t1 == $t1;

    // $t2 := object::uid_to_address($t1) on_abort goto L2 with $t3 at ./sources/transfer.move:30:32+32
    assume {:print "$at(56,1521,1553)"} true;
    call $t2 := $2_object_uid_to_address($t1);
    if ($abort_flag) {
        assume {:print "$at(56,1521,1553)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := true at ./sources/transfer.move:30:66+4
    $t4 := true;
    assume $IsValid'bool'($t4);

    // transfer::transfer_internal<#0>($t0, $t2, $t4) on_abort goto L2 with $t3 at ./sources/transfer.move:30:9+62
    call $2_transfer_transfer_internal'#0'($t0, $t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(56,1498,1560)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(11,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/transfer.move:31:5+1
    assume {:print "$at(56,1566,1567)"} true;
L1:

    // return () at ./sources/transfer.move:31:5+1
    return;

    // label L2 at ./sources/transfer.move:31:5+1
L2:

    // abort($t3) at ./sources/transfer.move:31:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct bag::Bag at ./sources/bag.move:34:5+99
type {:datatype} $2_bag_Bag;
function {:constructor} $2_bag_Bag($id: $2_object_UID, $objects: $2_vec_set_VecSet'$2_object_ID', $max_capacity: int): $2_bag_Bag;
function {:inline} $Update'$2_bag_Bag'_id(s: $2_bag_Bag, x: $2_object_UID): $2_bag_Bag {
    $2_bag_Bag(x, $objects#$2_bag_Bag(s), $max_capacity#$2_bag_Bag(s))
}
function {:inline} $Update'$2_bag_Bag'_objects(s: $2_bag_Bag, x: $2_vec_set_VecSet'$2_object_ID'): $2_bag_Bag {
    $2_bag_Bag($id#$2_bag_Bag(s), x, $max_capacity#$2_bag_Bag(s))
}
function {:inline} $Update'$2_bag_Bag'_max_capacity(s: $2_bag_Bag, x: int): $2_bag_Bag {
    $2_bag_Bag($id#$2_bag_Bag(s), $objects#$2_bag_Bag(s), x)
}
function $IsValid'$2_bag_Bag'(s: $2_bag_Bag): bool {
    $IsValid'$2_object_UID'($id#$2_bag_Bag(s))
      && $IsValid'$2_vec_set_VecSet'$2_object_ID''($objects#$2_bag_Bag(s))
      && $IsValid'u64'($max_capacity#$2_bag_Bag(s))
}
function {:inline} $IsEqual'$2_bag_Bag'(s1: $2_bag_Bag, s2: $2_bag_Bag): bool {
    $IsEqual'$2_object_UID'($id#$2_bag_Bag(s1), $id#$2_bag_Bag(s2))
    && $IsEqual'$2_vec_set_VecSet'$2_object_ID''($objects#$2_bag_Bag(s1), $objects#$2_bag_Bag(s2))
    && $IsEqual'u64'($max_capacity#$2_bag_Bag(s1), $max_capacity#$2_bag_Bag(s2))}
var $2_bag_Bag_$memory: $Memory $2_bag_Bag;

// struct bag::Item<#0> at ./sources/bag.move:40:5+72
type {:datatype} $2_bag_Item'#0';
function {:constructor} $2_bag_Item'#0'($id: $2_object_UID, $value: #0): $2_bag_Item'#0';
function {:inline} $Update'$2_bag_Item'#0''_id(s: $2_bag_Item'#0', x: $2_object_UID): $2_bag_Item'#0' {
    $2_bag_Item'#0'(x, $value#$2_bag_Item'#0'(s))
}
function {:inline} $Update'$2_bag_Item'#0''_value(s: $2_bag_Item'#0', x: #0): $2_bag_Item'#0' {
    $2_bag_Item'#0'($id#$2_bag_Item'#0'(s), x)
}
function $IsValid'$2_bag_Item'#0''(s: $2_bag_Item'#0'): bool {
    $IsValid'$2_object_UID'($id#$2_bag_Item'#0'(s))
      && $IsValid'#0'($value#$2_bag_Item'#0'(s))
}
function {:inline} $IsEqual'$2_bag_Item'#0''(s1: $2_bag_Item'#0', s2: $2_bag_Item'#0'): bool {
    s1 == s2
}
var $2_bag_Item'#0'_$memory: $Memory $2_bag_Item'#0';

// fun bag::contains [verification] at ./sources/bag.move:82:5+93
procedure {:timeLimit 40} $2_bag_contains$verify(_$t0: $2_bag_Bag, _$t1: $2_object_ID) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $2_vec_set_VecSet'$2_object_ID';
    var $t3: bool;
    var $t4: int;
    var $t0: $2_bag_Bag;
    var $t1: $2_object_ID;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:82:5+1
    assume {:print "$at(6,2848,2849)"} true;
    assume $IsValid'$2_bag_Bag'($t0);

    // assume WellFormed($t1) at ./sources/bag.move:82:5+1
    assume $IsValid'$2_object_ID'($t1);

    // trace_local[c]($t0) at ./sources/bag.move:82:5+1
    assume {:print "$track_local(12,1,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at ./sources/bag.move:82:5+1
    assume {:print "$track_local(12,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<bag::Bag>.objects($t0) at ./sources/bag.move:83:27+10
    assume {:print "$at(6,2920,2930)"} true;
    $t2 := $objects#$2_bag_Bag($t0);

    // $t3 := vec_set::contains<object::ID>($t2, $t1) on_abort goto L2 with $t4 at ./sources/bag.move:83:9+33
    call $t3 := $2_vec_set_contains'$2_object_ID'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(6,2902,2935)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(12,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/bag.move:83:9+33
    assume {:print "$track_return(12,1,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/bag.move:84:5+1
    assume {:print "$at(6,2940,2941)"} true;
L1:

    // return $t3 at ./sources/bag.move:84:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/bag.move:84:5+1
L2:

    // abort($t4) at ./sources/bag.move:84:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun bag::remove<#0> [baseline] at ./sources/bag.move:88:5+216
procedure {:inline 1} $2_bag_remove'#0'(_$t0: $Mutation ($2_bag_Bag), _$t1: $2_bag_Item'#0') returns ($ret0: #0, $ret1: $Mutation ($2_bag_Bag))
{
    // declare local variables
    var $t2: $2_object_ID;
    var $t3: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t4: $2_object_UID;
    var $t5: #0;
    var $t6: $2_object_UID;
    var $t7: #0;
    var $t8: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t9: $2_object_ID;
    var $t10: int;
    var $t0: $Mutation ($2_bag_Bag);
    var $t1: $2_bag_Item'#0';
    var $temp_0'#0': #0;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t8));

    // bytecode translation starts here
    // trace_local[c]($t0) at ./sources/bag.move:88:5+1
    assume {:print "$at(6,3040,3041)"} true;
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,5,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // trace_local[item]($t1) at ./sources/bag.move:88:5+1
    assume {:print "$track_local(12,5,1):", $t1} $t1 == $t1;

    // ($t6, $t7) := unpack bag::Item<#0>($t1) at ./sources/bag.move:89:13+18
    assume {:print "$at(6,3113,3131)"} true;
    $t6 := $id#$2_bag_Item'#0'($t1);
    $t7 := $value#$2_bag_Item'#0'($t1);

    // trace_local[value]($t7) at ./sources/bag.move:89:24+5
    assume {:print "$track_local(12,5,5):", $t7} $t7 == $t7;

    // trace_local[id]($t6) at ./sources/bag.move:89:20+2
    assume {:print "$track_local(12,5,4):", $t6} $t6 == $t6;

    // $t8 := borrow_field<bag::Bag>.objects($t0) at ./sources/bag.move:90:25+14
    assume {:print "$at(6,3164,3178)"} true;
    $t8 := $ChildMutation($t0, 1, $objects#$2_bag_Bag($Dereference($t0)));

    // $t9 := object::uid_to_inner($t6) on_abort goto L2 with $t10 at ./sources/bag.move:90:42+25
    call $t9 := $2_object_uid_to_inner($t6);
    if ($abort_flag) {
        assume {:print "$at(6,3181,3206)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(12,5):", $t10} $t10 == $t10;
        goto L2;
    }

    // vec_set::remove<object::ID>($t8, $t9) on_abort goto L2 with $t10 at ./sources/bag.move:90:9+59
    call $t8 := $2_vec_set_remove'$2_object_ID'($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(6,3148,3207)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(12,5):", $t10} $t10 == $t10;
        goto L2;
    }

    // write_back[Reference($t0).objects (vec_set::VecSet<object::ID>)]($t8) at ./sources/bag.move:90:9+59
    $t0 := $UpdateMutation($t0, $Update'$2_bag_Bag'_objects($Dereference($t0), $Dereference($t8)));

    // trace_local[c]($t0) at ./sources/bag.move:90:9+59
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,5,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // object::delete($t6) on_abort goto L2 with $t10 at ./sources/bag.move:91:9+18
    assume {:print "$at(6,3217,3235)"} true;
    call $2_object_delete($t6);
    if ($abort_flag) {
        assume {:print "$at(6,3217,3235)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(12,5):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_return[0]($t7) at ./sources/bag.move:92:9+5
    assume {:print "$at(6,3245,3250)"} true;
    assume {:print "$track_return(12,5,0):", $t7} $t7 == $t7;

    // trace_local[c]($t0) at ./sources/bag.move:92:9+5
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,5,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // label L1 at ./sources/bag.move:93:5+1
    assume {:print "$at(6,3255,3256)"} true;
L1:

    // return $t7 at ./sources/bag.move:93:5+1
    $ret0 := $t7;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/bag.move:93:5+1
L2:

    // abort($t10) at ./sources/bag.move:93:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun bag::remove [verification] at ./sources/bag.move:88:5+216
procedure {:timeLimit 40} $2_bag_remove$verify(_$t0: $Mutation ($2_bag_Bag), _$t1: $2_bag_Item'#0') returns ($ret0: #0, $ret1: $Mutation ($2_bag_Bag))
{
    // declare local variables
    var $t2: $2_object_ID;
    var $t3: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t4: $2_object_UID;
    var $t5: #0;
    var $t6: $2_object_UID;
    var $t7: #0;
    var $t8: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t9: $2_object_ID;
    var $t10: int;
    var $t0: $Mutation ($2_bag_Bag);
    var $t1: $2_bag_Item'#0';
    var $temp_0'#0': #0;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:88:5+1
    assume {:print "$at(6,3040,3041)"} true;
    assume $IsValid'$2_bag_Bag'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/bag.move:88:5+1
    assume $IsValid'$2_bag_Item'#0''($t1);

    // trace_local[c]($t0) at ./sources/bag.move:88:5+1
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,5,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // trace_local[item]($t1) at ./sources/bag.move:88:5+1
    assume {:print "$track_local(12,5,1):", $t1} $t1 == $t1;

    // ($t6, $t7) := unpack bag::Item<#0>($t1) at ./sources/bag.move:89:13+18
    assume {:print "$at(6,3113,3131)"} true;
    $t6 := $id#$2_bag_Item'#0'($t1);
    $t7 := $value#$2_bag_Item'#0'($t1);

    // trace_local[value]($t7) at ./sources/bag.move:89:24+5
    assume {:print "$track_local(12,5,5):", $t7} $t7 == $t7;

    // trace_local[id]($t6) at ./sources/bag.move:89:20+2
    assume {:print "$track_local(12,5,4):", $t6} $t6 == $t6;

    // $t8 := borrow_field<bag::Bag>.objects($t0) at ./sources/bag.move:90:25+14
    assume {:print "$at(6,3164,3178)"} true;
    $t8 := $ChildMutation($t0, 1, $objects#$2_bag_Bag($Dereference($t0)));

    // $t9 := object::uid_to_inner($t6) on_abort goto L2 with $t10 at ./sources/bag.move:90:42+25
    call $t9 := $2_object_uid_to_inner($t6);
    if ($abort_flag) {
        assume {:print "$at(6,3181,3206)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(12,5):", $t10} $t10 == $t10;
        goto L2;
    }

    // vec_set::remove<object::ID>($t8, $t9) on_abort goto L2 with $t10 at ./sources/bag.move:90:9+59
    call $t8 := $2_vec_set_remove'$2_object_ID'($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(6,3148,3207)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(12,5):", $t10} $t10 == $t10;
        goto L2;
    }

    // write_back[Reference($t0).objects (vec_set::VecSet<object::ID>)]($t8) at ./sources/bag.move:90:9+59
    $t0 := $UpdateMutation($t0, $Update'$2_bag_Bag'_objects($Dereference($t0), $Dereference($t8)));

    // trace_local[c]($t0) at ./sources/bag.move:90:9+59
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,5,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // object::delete($t6) on_abort goto L2 with $t10 at ./sources/bag.move:91:9+18
    assume {:print "$at(6,3217,3235)"} true;
    call $2_object_delete($t6);
    if ($abort_flag) {
        assume {:print "$at(6,3217,3235)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(12,5):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_return[0]($t7) at ./sources/bag.move:92:9+5
    assume {:print "$at(6,3245,3250)"} true;
    assume {:print "$track_return(12,5,0):", $t7} $t7 == $t7;

    // trace_local[c]($t0) at ./sources/bag.move:92:9+5
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,5,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // label L1 at ./sources/bag.move:93:5+1
    assume {:print "$at(6,3255,3256)"} true;
L1:

    // return $t7 at ./sources/bag.move:93:5+1
    $ret0 := $t7;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/bag.move:93:5+1
L2:

    // abort($t10) at ./sources/bag.move:93:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun bag::size [baseline] at ./sources/bag.move:66:5+71
procedure {:inline 1} $2_bag_size(_$t0: $2_bag_Bag) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_vec_set_VecSet'$2_object_ID';
    var $t2: int;
    var $t3: int;
    var $t0: $2_bag_Bag;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[c]($t0) at ./sources/bag.move:66:5+1
    assume {:print "$at(6,2269,2270)"} true;
    assume {:print "$track_local(12,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<bag::Bag>.objects($t0) at ./sources/bag.move:67:23+10
    assume {:print "$at(6,2323,2333)"} true;
    $t1 := $objects#$2_bag_Bag($t0);

    // $t2 := vec_set::size<object::ID>($t1) on_abort goto L2 with $t3 at ./sources/bag.move:67:9+25
    call $t2 := $2_vec_set_size'$2_object_ID'($t1);
    if ($abort_flag) {
        assume {:print "$at(6,2309,2334)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(12,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/bag.move:67:9+25
    assume {:print "$track_return(12,7,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/bag.move:68:5+1
    assume {:print "$at(6,2339,2340)"} true;
L1:

    // return $t2 at ./sources/bag.move:68:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/bag.move:68:5+1
L2:

    // abort($t3) at ./sources/bag.move:68:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun bag::size [verification] at ./sources/bag.move:66:5+71
procedure {:timeLimit 40} $2_bag_size$verify(_$t0: $2_bag_Bag) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_vec_set_VecSet'$2_object_ID';
    var $t2: int;
    var $t3: int;
    var $t0: $2_bag_Bag;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:66:5+1
    assume {:print "$at(6,2269,2270)"} true;
    assume $IsValid'$2_bag_Bag'($t0);

    // trace_local[c]($t0) at ./sources/bag.move:66:5+1
    assume {:print "$track_local(12,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<bag::Bag>.objects($t0) at ./sources/bag.move:67:23+10
    assume {:print "$at(6,2323,2333)"} true;
    $t1 := $objects#$2_bag_Bag($t0);

    // $t2 := vec_set::size<object::ID>($t1) on_abort goto L2 with $t3 at ./sources/bag.move:67:9+25
    call $t2 := $2_vec_set_size'$2_object_ID'($t1);
    if ($abort_flag) {
        assume {:print "$at(6,2309,2334)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(12,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/bag.move:67:9+25
    assume {:print "$track_return(12,7,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/bag.move:68:5+1
    assume {:print "$at(6,2339,2340)"} true;
L1:

    // return $t2 at ./sources/bag.move:68:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/bag.move:68:5+1
L2:

    // abort($t3) at ./sources/bag.move:68:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun bag::new [baseline] at ./sources/bag.move:46:5+105
procedure {:inline 1} $2_bag_new(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_bag_Bag, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: $2_bag_Bag;
    var $t3: int;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/bag.move:46:5+1
    assume {:print "$at(6,1572,1573)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := 65536 at ./sources/bag.move:47:36+20
    assume {:print "$at(6,1650,1670)"} true;
    $t1 := 65536;
    assume $IsValid'u64'($t1);

    // $t2 := bag::new_with_max_capacity($t0, $t1) on_abort goto L2 with $t3 at ./sources/bag.move:47:9+48
    call $t2,$t0 := $2_bag_new_with_max_capacity($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(6,1623,1671)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(12,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/bag.move:47:9+48
    assume {:print "$track_return(12,3,0):", $t2} $t2 == $t2;

    // trace_local[ctx]($t0) at ./sources/bag.move:47:9+48
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/bag.move:48:5+1
    assume {:print "$at(6,1676,1677)"} true;
L1:

    // return $t2 at ./sources/bag.move:48:5+1
    $ret0 := $t2;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/bag.move:48:5+1
L2:

    // abort($t3) at ./sources/bag.move:48:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun bag::new [verification] at ./sources/bag.move:46:5+105
procedure {:timeLimit 40} $2_bag_new$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_bag_Bag, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: $2_bag_Bag;
    var $t3: int;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:46:5+1
    assume {:print "$at(6,1572,1573)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/bag.move:46:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := 65536 at ./sources/bag.move:47:36+20
    assume {:print "$at(6,1650,1670)"} true;
    $t1 := 65536;
    assume $IsValid'u64'($t1);

    // $t2 := bag::new_with_max_capacity($t0, $t1) on_abort goto L2 with $t3 at ./sources/bag.move:47:9+48
    call $t2,$t0 := $2_bag_new_with_max_capacity($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(6,1623,1671)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(12,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/bag.move:47:9+48
    assume {:print "$track_return(12,3,0):", $t2} $t2 == $t2;

    // trace_local[ctx]($t0) at ./sources/bag.move:47:9+48
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/bag.move:48:5+1
    assume {:print "$at(6,1676,1677)"} true;
L1:

    // return $t2 at ./sources/bag.move:48:5+1
    $ret0 := $t2;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/bag.move:48:5+1
L2:

    // abort($t3) at ./sources/bag.move:48:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun bag::transfer [verification] at ./sources/bag.move:106:5+102
procedure {:timeLimit 40} $2_bag_transfer$verify(_$t0: $2_bag_Bag, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_bag_Bag;
    var $t1: int;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:106:5+1
    assume {:print "$at(6,3627,3628)"} true;
    assume $IsValid'$2_bag_Bag'($t0);

    // assume WellFormed($t1) at ./sources/bag.move:106:5+1
    assume $IsValid'address'($t1);

    // trace_local[c]($t0) at ./sources/bag.move:106:5+1
    assume {:print "$track_local(12,8,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/bag.move:106:5+1
    assume {:print "$track_local(12,8,1):", $t1} $t1 == $t1;

    // transfer::transfer<bag::Bag>($t0, $t1) on_abort goto L2 with $t2 at ./sources/bag.move:107:9+32
    assume {:print "$at(6,3691,3723)"} true;
    call $2_transfer_transfer'$2_bag_Bag'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(6,3691,3723)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(12,8):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/bag.move:108:5+1
    assume {:print "$at(6,3728,3729)"} true;
L1:

    // return () at ./sources/bag.move:108:5+1
    return;

    // label L2 at ./sources/bag.move:108:5+1
L2:

    // abort($t2) at ./sources/bag.move:108:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun bag::transfer_to_object_id [verification] at ./sources/bag.move:110:5+144
procedure {:timeLimit 40} $2_bag_transfer_to_object_id$verify(_$t0: $2_bag_Bag, _$t1: $2_object_UID) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_bag_Bag;
    var $t1: $2_object_UID;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:110:5+1
    assume {:print "$at(6,3735,3736)"} true;
    assume $IsValid'$2_bag_Bag'($t0);

    // assume WellFormed($t1) at ./sources/bag.move:110:5+1
    assume $IsValid'$2_object_UID'($t1);

    // trace_local[obj]($t0) at ./sources/bag.move:110:5+1
    assume {:print "$track_local(12,9,0):", $t0} $t0 == $t0;

    // trace_local[owner_id]($t1) at ./sources/bag.move:110:5+1
    assume {:print "$track_local(12,9,1):", $t1} $t1 == $t1;

    // transfer::transfer_to_object_id<bag::Bag>($t0, $t1) on_abort goto L2 with $t2 at ./sources/bag.move:114:9+46
    assume {:print "$at(6,3827,3873)"} true;
    call $2_transfer_transfer_to_object_id'$2_bag_Bag'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(6,3827,3873)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(12,9):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/bag.move:115:5+1
    assume {:print "$at(6,3878,3879)"} true;
L1:

    // return () at ./sources/bag.move:115:5+1
    return;

    // label L2 at ./sources/bag.move:115:5+1
L2:

    // abort($t2) at ./sources/bag.move:115:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun bag::add [verification] at ./sources/bag.move:71:5+413
procedure {:timeLimit 40} $2_bag_add$verify(_$t0: $Mutation ($2_bag_Bag), _$t1: #0, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_typed_id_TypedID'$2_bag_Item'#0'', $ret1: $Mutation ($2_bag_Bag), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: $2_bag_Item'#0';
    var $t5: $2_typed_id_TypedID'$2_bag_Item'#0'';
    var $t6: $2_bag_Bag;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $2_object_UID;
    var $t15: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t16: $2_object_ID;
    var $t17: $2_bag_Item'#0';
    var $t18: $2_typed_id_TypedID'$2_bag_Item'#0'';
    var $t0: $Mutation ($2_bag_Bag);
    var $t1: #0;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'#0': #0;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_typed_id_TypedID'$2_bag_Item'#0''': $2_typed_id_TypedID'$2_bag_Item'#0'';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t15));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:71:5+1
    assume {:print "$at(6,2383,2384)"} true;
    assume $IsValid'$2_bag_Bag'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/bag.move:71:5+1
    assume $IsValid'#0'($t1);

    // assume WellFormed($t2) at ./sources/bag.move:71:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[c]($t0) at ./sources/bag.move:71:5+1
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,0,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // trace_local[value]($t1) at ./sources/bag.move:71:5+1
    assume {:print "$track_local(12,0,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/bag.move:71:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(12,0,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t0) at ./sources/bag.move:72:22+1
    assume {:print "$at(6,2493,2494)"} true;
    $t6 := $Dereference($t0);

    // $t7 := bag::size($t6) on_abort goto L3 with $t8 at ./sources/bag.move:72:17+7
    call $t7 := $2_bag_size($t6);
    if ($abort_flag) {
        assume {:print "$at(6,2488,2495)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t9 := 1 at ./sources/bag.move:72:27+1
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t7, $t9) on_abort goto L3 with $t8 at ./sources/bag.move:72:25+1
    call $t10 := $AddU64($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(6,2496,2497)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t11 := get_field<bag::Bag>.max_capacity($t0) at ./sources/bag.move:72:32+14
    $t11 := $max_capacity#$2_bag_Bag($Dereference($t0));

    // $t12 := <=($t10, $t11) at ./sources/bag.move:72:29+2
    call $t12 := $Le($t10, $t11);

    // if ($t12) goto L0 else goto L1 at ./sources/bag.move:72:9+60
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ./sources/bag.move:72:9+60
L1:

    // destroy($t2) at ./sources/bag.move:72:9+60

    // destroy($t0) at ./sources/bag.move:72:9+60

    // $t13 := 2 at ./sources/bag.move:72:48+20
    $t13 := 2;
    assume $IsValid'u64'($t13);

    // trace_abort($t13) at ./sources/bag.move:72:9+60
    assume {:print "$at(6,2480,2540)"} true;
    assume {:print "$track_abort(12,0):", $t13} $t13 == $t13;

    // $t8 := move($t13) at ./sources/bag.move:72:9+60
    $t8 := $t13;

    // goto L3 at ./sources/bag.move:72:9+60
    goto L3;

    // label L0 at ./sources/bag.move:73:30+3
    assume {:print "$at(6,2571,2574)"} true;
L0:

    // $t14 := object::new($t2) on_abort goto L3 with $t8 at ./sources/bag.move:73:18+16
    call $t14,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(6,2559,2575)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_local[id]($t14) at ./sources/bag.move:73:13+2
    assume {:print "$track_local(12,0,3):", $t14} $t14 == $t14;

    // $t15 := borrow_field<bag::Bag>.objects($t0) at ./sources/bag.move:74:25+14
    assume {:print "$at(6,2601,2615)"} true;
    $t15 := $ChildMutation($t0, 1, $objects#$2_bag_Bag($Dereference($t0)));

    // $t16 := object::uid_to_inner($t14) on_abort goto L3 with $t8 at ./sources/bag.move:74:41+25
    call $t16 := $2_object_uid_to_inner($t14);
    if ($abort_flag) {
        assume {:print "$at(6,2617,2642)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // vec_set::insert<object::ID>($t15, $t16) on_abort goto L3 with $t8 at ./sources/bag.move:74:9+58
    call $t15 := $2_vec_set_insert'$2_object_ID'($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(6,2585,2643)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // write_back[Reference($t0).objects (vec_set::VecSet<object::ID>)]($t15) at ./sources/bag.move:74:9+58
    $t0 := $UpdateMutation($t0, $Update'$2_bag_Bag'_objects($Dereference($t0), $Dereference($t15)));

    // trace_local[c]($t0) at ./sources/bag.move:74:9+58
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,0,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // $t17 := pack bag::Item<#0>($t14, $t1) at ./sources/bag.move:75:20+18
    assume {:print "$at(6,2664,2682)"} true;
    $t17 := $2_bag_Item'#0'($t14, $t1);

    // trace_local[item]($t17) at ./sources/bag.move:75:13+4
    assume {:print "$track_local(12,0,4):", $t17} $t17 == $t17;

    // $t18 := typed_id::new<bag::Item<#0>>($t17) on_abort goto L3 with $t8 at ./sources/bag.move:76:23+20
    assume {:print "$at(6,2706,2726)"} true;
    call $t18 := $2_typed_id_new'$2_bag_Item'#0''($t17);
    if ($abort_flag) {
        assume {:print "$at(6,2706,2726)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_local[item_id]($t18) at ./sources/bag.move:76:13+7
    assume {:print "$track_local(12,0,5):", $t18} $t18 == $t18;

    // transfer::transfer_to_object<bag::Item<#0>, bag::Bag>($t17, $t0) on_abort goto L3 with $t8 at ./sources/bag.move:77:9+37
    assume {:print "$at(6,2736,2773)"} true;
    call $t0 := $2_transfer_transfer_to_object'$2_bag_Item'#0'_$2_bag_Bag'($t17, $t0);
    if ($abort_flag) {
        assume {:print "$at(6,2736,2773)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t18) at ./sources/bag.move:78:9+7
    assume {:print "$at(6,2783,2790)"} true;
    assume {:print "$track_return(12,0,0):", $t18} $t18 == $t18;

    // trace_local[c]($t0) at ./sources/bag.move:78:9+7
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,0,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // trace_local[ctx]($t2) at ./sources/bag.move:78:9+7
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(12,0,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L2 at ./sources/bag.move:79:5+1
    assume {:print "$at(6,2795,2796)"} true;
L2:

    // return $t18 at ./sources/bag.move:79:5+1
    $ret0 := $t18;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L3 at ./sources/bag.move:79:5+1
L3:

    // abort($t8) at ./sources/bag.move:79:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun bag::create [verification] at ./sources/bag.move:61:5+114
procedure {:timeLimit 40} $2_bag_create$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: $2_bag_Bag;
    var $t2: int;
    var $t3: $2_tx_context_TxContext;
    var $t4: int;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:61:5+1
    assume {:print "$at(6,2112,2113)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/bag.move:61:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,2,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := bag::new($t0) on_abort goto L2 with $t2 at ./sources/bag.move:62:28+8
    assume {:print "$at(6,2186,2194)"} true;
    call $t1,$t0 := $2_bag_new($t0);
    if ($abort_flag) {
        assume {:print "$at(6,2186,2194)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(12,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := read_ref($t0) at ./sources/bag.move:62:57+3
    $t3 := $Dereference($t0);

    // $t4 := tx_context::sender($t3) on_abort goto L2 with $t2 at ./sources/bag.move:62:38+23
    call $t4 := $2_tx_context_sender($t3);
    if ($abort_flag) {
        assume {:print "$at(6,2196,2219)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(12,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // transfer::transfer<bag::Bag>($t1, $t4) on_abort goto L2 with $t2 at ./sources/bag.move:62:9+53
    call $2_transfer_transfer'$2_bag_Bag'($t1, $t4);
    if ($abort_flag) {
        assume {:print "$at(6,2167,2220)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(12,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_local[ctx]($t0) at ./sources/bag.move:62:9+53
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,2,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/bag.move:63:5+1
    assume {:print "$at(6,2225,2226)"} true;
L1:

    // return () at ./sources/bag.move:63:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/bag.move:63:5+1
L2:

    // abort($t2) at ./sources/bag.move:63:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun bag::new_with_max_capacity [baseline] at ./sources/bag.move:51:5+304
procedure {:inline 1} $2_bag_new_with_max_capacity(_$t0: $Mutation ($2_tx_context_TxContext), _$t1: int) returns ($ret0: $2_bag_Bag, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $2_object_UID;
    var $t10: $2_vec_set_VecSet'$2_object_ID';
    var $t11: $2_bag_Bag;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $t1: int;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/bag.move:51:5+1
    assume {:print "$at(6,1746,1747)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[max_capacity]($t1) at ./sources/bag.move:51:5+1
    assume {:print "$track_local(12,4,1):", $t1} $t1 == $t1;

    // $t3 := 65536 at ./sources/bag.move:52:33+20
    assume {:print "$at(6,1858,1878)"} true;
    $t3 := 65536;
    assume $IsValid'u64'($t3);

    // $t4 := <=($t1, $t3) at ./sources/bag.move:52:30+2
    call $t4 := $Le($t1, $t3);

    // if ($t4) goto L0 else goto L2 at ./sources/bag.move:52:17+56
    if ($t4) { goto L0; } else { goto L2; }

    // label L0 at ./sources/bag.move:52:57+12
L0:

    // $t5 := 0 at ./sources/bag.move:52:72+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t2 := >($t1, $t5) at ./sources/bag.move:52:70+1
    call $t2 := $Gt($t1, $t5);

    // goto L3 at ./sources/bag.move:52:17+56
    goto L3;

    // label L2 at ./sources/bag.move:52:17+56
L2:

    // $t6 := false at ./sources/bag.move:52:17+56
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/bag.move:52:17+56
    $t2 := $t6;

    // label L3 at ./sources/bag.move:52:17+56
L3:

    // if ($t2) goto L4 else goto L5 at ./sources/bag.move:52:9+86
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at ./sources/bag.move:52:9+86
L5:

    // destroy($t0) at ./sources/bag.move:52:9+86

    // $t7 := 1 at ./sources/bag.move:52:75+19
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/bag.move:52:9+86
    assume {:print "$at(6,1834,1920)"} true;
    assume {:print "$track_abort(12,4):", $t7} $t7 == $t7;

    // $t8 := move($t7) at ./sources/bag.move:52:9+86
    $t8 := $t7;

    // goto L7 at ./sources/bag.move:52:9+86
    goto L7;

    // label L4 at ./sources/bag.move:54:29+3
    assume {:print "$at(6,1964,1967)"} true;
L4:

    // $t9 := object::new($t0) on_abort goto L7 with $t8 at ./sources/bag.move:54:17+16
    call $t9,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(6,1952,1968)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t10 := vec_set::empty<object::ID>() on_abort goto L7 with $t8 at ./sources/bag.move:55:22+16
    assume {:print "$at(6,1991,2007)"} true;
    call $t10 := $2_vec_set_empty'$2_object_ID'();
    if ($abort_flag) {
        assume {:print "$at(6,1991,2007)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t11 := pack bag::Bag($t9, $t10, $t1) at ./sources/bag.move:53:9+114
    assume {:print "$at(6,1930,2044)"} true;
    $t11 := $2_bag_Bag($t9, $t10, $t1);

    // trace_return[0]($t11) at ./sources/bag.move:53:9+114
    assume {:print "$track_return(12,4,0):", $t11} $t11 == $t11;

    // trace_local[ctx]($t0) at ./sources/bag.move:53:9+114
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/bag.move:58:5+1
    assume {:print "$at(6,2049,2050)"} true;
L6:

    // return $t11 at ./sources/bag.move:58:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L7 at ./sources/bag.move:58:5+1
L7:

    // abort($t8) at ./sources/bag.move:58:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun bag::new_with_max_capacity [verification] at ./sources/bag.move:51:5+304
procedure {:timeLimit 40} $2_bag_new_with_max_capacity$verify(_$t0: $Mutation ($2_tx_context_TxContext), _$t1: int) returns ($ret0: $2_bag_Bag, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $2_object_UID;
    var $t10: $2_vec_set_VecSet'$2_object_ID';
    var $t11: $2_bag_Bag;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $t1: int;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:51:5+1
    assume {:print "$at(6,1746,1747)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/bag.move:51:5+1
    assume $IsValid'u64'($t1);

    // trace_local[ctx]($t0) at ./sources/bag.move:51:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[max_capacity]($t1) at ./sources/bag.move:51:5+1
    assume {:print "$track_local(12,4,1):", $t1} $t1 == $t1;

    // $t3 := 65536 at ./sources/bag.move:52:33+20
    assume {:print "$at(6,1858,1878)"} true;
    $t3 := 65536;
    assume $IsValid'u64'($t3);

    // $t4 := <=($t1, $t3) at ./sources/bag.move:52:30+2
    call $t4 := $Le($t1, $t3);

    // if ($t4) goto L0 else goto L2 at ./sources/bag.move:52:17+56
    if ($t4) { goto L0; } else { goto L2; }

    // label L0 at ./sources/bag.move:52:57+12
L0:

    // $t5 := 0 at ./sources/bag.move:52:72+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t2 := >($t1, $t5) at ./sources/bag.move:52:70+1
    call $t2 := $Gt($t1, $t5);

    // goto L3 at ./sources/bag.move:52:17+56
    goto L3;

    // label L2 at ./sources/bag.move:52:17+56
L2:

    // $t6 := false at ./sources/bag.move:52:17+56
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/bag.move:52:17+56
    $t2 := $t6;

    // label L3 at ./sources/bag.move:52:17+56
L3:

    // if ($t2) goto L4 else goto L5 at ./sources/bag.move:52:9+86
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at ./sources/bag.move:52:9+86
L5:

    // destroy($t0) at ./sources/bag.move:52:9+86

    // $t7 := 1 at ./sources/bag.move:52:75+19
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/bag.move:52:9+86
    assume {:print "$at(6,1834,1920)"} true;
    assume {:print "$track_abort(12,4):", $t7} $t7 == $t7;

    // $t8 := move($t7) at ./sources/bag.move:52:9+86
    $t8 := $t7;

    // goto L7 at ./sources/bag.move:52:9+86
    goto L7;

    // label L4 at ./sources/bag.move:54:29+3
    assume {:print "$at(6,1964,1967)"} true;
L4:

    // $t9 := object::new($t0) on_abort goto L7 with $t8 at ./sources/bag.move:54:17+16
    call $t9,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(6,1952,1968)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t10 := vec_set::empty<object::ID>() on_abort goto L7 with $t8 at ./sources/bag.move:55:22+16
    assume {:print "$at(6,1991,2007)"} true;
    call $t10 := $2_vec_set_empty'$2_object_ID'();
    if ($abort_flag) {
        assume {:print "$at(6,1991,2007)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(12,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t11 := pack bag::Bag($t9, $t10, $t1) at ./sources/bag.move:53:9+114
    assume {:print "$at(6,1930,2044)"} true;
    $t11 := $2_bag_Bag($t9, $t10, $t1);

    // trace_return[0]($t11) at ./sources/bag.move:53:9+114
    assume {:print "$track_return(12,4,0):", $t11} $t11 == $t11;

    // trace_local[ctx]($t0) at ./sources/bag.move:53:9+114
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(12,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/bag.move:58:5+1
    assume {:print "$at(6,2049,2050)"} true;
L6:

    // return $t11 at ./sources/bag.move:58:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L7 at ./sources/bag.move:58:5+1
L7:

    // abort($t8) at ./sources/bag.move:58:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun bag::remove_and_take [verification] at ./sources/bag.move:96:5+235
procedure {:timeLimit 40} $2_bag_remove_and_take$verify(_$t0: $Mutation ($2_bag_Bag), _$t1: $2_bag_Item'#0', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_bag_Bag), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: #0;
    var $t4: #0;
    var $t5: int;
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t0: $Mutation ($2_bag_Bag);
    var $t1: $2_bag_Item'#0';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'#0': #0;
    var $temp_0'$2_bag_Bag': $2_bag_Bag;
    var $temp_0'$2_bag_Item'#0'': $2_bag_Item'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/bag.move:96:5+1
    assume {:print "$at(6,3338,3339)"} true;
    assume $IsValid'$2_bag_Bag'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/bag.move:96:5+1
    assume $IsValid'$2_bag_Item'#0''($t1);

    // assume WellFormed($t2) at ./sources/bag.move:96:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[c]($t0) at ./sources/bag.move:96:5+1
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,6,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // trace_local[item]($t1) at ./sources/bag.move:96:5+1
    assume {:print "$track_local(12,6,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/bag.move:96:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(12,6,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := bag::remove<#0>($t0, $t1) on_abort goto L2 with $t5 at ./sources/bag.move:101:22+15
    assume {:print "$at(6,3490,3505)"} true;
    call $t4,$t0 := $2_bag_remove'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(6,3490,3505)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(12,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object]($t4) at ./sources/bag.move:101:13+6
    assume {:print "$track_local(12,6,3):", $t4} $t4 == $t4;

    // $t6 := read_ref($t2) at ./sources/bag.move:102:55+3
    assume {:print "$at(6,3561,3564)"} true;
    $t6 := $Dereference($t2);

    // $t7 := tx_context::sender($t6) on_abort goto L2 with $t5 at ./sources/bag.move:102:36+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(6,3542,3565)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(12,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // transfer::transfer<#0>($t4, $t7) on_abort goto L2 with $t5 at ./sources/bag.move:102:9+51
    call $2_transfer_transfer'#0'($t4, $t7);
    if ($abort_flag) {
        assume {:print "$at(6,3515,3566)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(12,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[c]($t0) at ./sources/bag.move:102:60+1
    $temp_0'$2_bag_Bag' := $Dereference($t0);
    assume {:print "$track_local(12,6,0):", $temp_0'$2_bag_Bag'} $temp_0'$2_bag_Bag' == $temp_0'$2_bag_Bag';

    // trace_local[ctx]($t2) at ./sources/bag.move:102:60+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(12,6,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/bag.move:103:5+1
    assume {:print "$at(6,3572,3573)"} true;
L1:

    // return () at ./sources/bag.move:103:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/bag.move:103:5+1
L2:

    // abort($t5) at ./sources/bag.move:103:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct balance::Balance<sui::SUI> at ./sources/balance.move:27:5+62
type {:datatype} $2_balance_Balance'$2_sui_SUI';
function {:constructor} $2_balance_Balance'$2_sui_SUI'($value: int): $2_balance_Balance'$2_sui_SUI';
function {:inline} $Update'$2_balance_Balance'$2_sui_SUI''_value(s: $2_balance_Balance'$2_sui_SUI', x: int): $2_balance_Balance'$2_sui_SUI' {
    $2_balance_Balance'$2_sui_SUI'(x)
}
function $IsValid'$2_balance_Balance'$2_sui_SUI''(s: $2_balance_Balance'$2_sui_SUI'): bool {
    $IsValid'u64'($value#$2_balance_Balance'$2_sui_SUI'(s))
}
function {:inline} $IsEqual'$2_balance_Balance'$2_sui_SUI''(s1: $2_balance_Balance'$2_sui_SUI', s2: $2_balance_Balance'$2_sui_SUI'): bool {
    s1 == s2
}

// struct balance::Balance<#0> at ./sources/balance.move:27:5+62
type {:datatype} $2_balance_Balance'#0';
function {:constructor} $2_balance_Balance'#0'($value: int): $2_balance_Balance'#0';
function {:inline} $Update'$2_balance_Balance'#0''_value(s: $2_balance_Balance'#0', x: int): $2_balance_Balance'#0' {
    $2_balance_Balance'#0'(x)
}
function $IsValid'$2_balance_Balance'#0''(s: $2_balance_Balance'#0'): bool {
    $IsValid'u64'($value#$2_balance_Balance'#0'(s))
}
function {:inline} $IsEqual'$2_balance_Balance'#0''(s1: $2_balance_Balance'#0', s2: $2_balance_Balance'#0'): bool {
    s1 == s2
}

// struct balance::Supply<sui::SUI> at ./sources/balance.move:19:5+61
type {:datatype} $2_balance_Supply'$2_sui_SUI';
function {:constructor} $2_balance_Supply'$2_sui_SUI'($value: int): $2_balance_Supply'$2_sui_SUI';
function {:inline} $Update'$2_balance_Supply'$2_sui_SUI''_value(s: $2_balance_Supply'$2_sui_SUI', x: int): $2_balance_Supply'$2_sui_SUI' {
    $2_balance_Supply'$2_sui_SUI'(x)
}
function $IsValid'$2_balance_Supply'$2_sui_SUI''(s: $2_balance_Supply'$2_sui_SUI'): bool {
    $IsValid'u64'($value#$2_balance_Supply'$2_sui_SUI'(s))
}
function {:inline} $IsEqual'$2_balance_Supply'$2_sui_SUI''(s1: $2_balance_Supply'$2_sui_SUI', s2: $2_balance_Supply'$2_sui_SUI'): bool {
    s1 == s2
}

// struct balance::Supply<#0> at ./sources/balance.move:19:5+61
type {:datatype} $2_balance_Supply'#0';
function {:constructor} $2_balance_Supply'#0'($value: int): $2_balance_Supply'#0';
function {:inline} $Update'$2_balance_Supply'#0''_value(s: $2_balance_Supply'#0', x: int): $2_balance_Supply'#0' {
    $2_balance_Supply'#0'(x)
}
function $IsValid'$2_balance_Supply'#0''(s: $2_balance_Supply'#0'): bool {
    $IsValid'u64'($value#$2_balance_Supply'#0'(s))
}
function {:inline} $IsEqual'$2_balance_Supply'#0''(s1: $2_balance_Supply'#0', s2: $2_balance_Supply'#0'): bool {
    s1 == s2
}

// fun balance::value<sui::SUI> [baseline] at ./sources/balance.move:32:5+70
procedure {:inline 1} $2_balance_value'$2_sui_SUI'(_$t0: $2_balance_Balance'$2_sui_SUI') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:32:5+1
    assume {:print "$at(55,1083,1084)"} true;
    assume {:print "$track_local(13,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:33:9+10
    assume {:print "$at(55,1137,1147)"} true;
    $t1 := $value#$2_balance_Balance'$2_sui_SUI'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:33:9+10
    assume {:print "$track_return(13,7,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:34:5+1
    assume {:print "$at(55,1152,1153)"} true;
L1:

    // return $t1 at ./sources/balance.move:34:5+1
    $ret0 := $t1;
    return;

}

// fun balance::value<#0> [baseline] at ./sources/balance.move:32:5+70
procedure {:inline 1} $2_balance_value'#0'(_$t0: $2_balance_Balance'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:32:5+1
    assume {:print "$at(55,1083,1084)"} true;
    assume {:print "$track_local(13,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:33:9+10
    assume {:print "$at(55,1137,1147)"} true;
    $t1 := $value#$2_balance_Balance'#0'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:33:9+10
    assume {:print "$track_return(13,7,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:34:5+1
    assume {:print "$at(55,1152,1153)"} true;
L1:

    // return $t1 at ./sources/balance.move:34:5+1
    $ret0 := $t1;
    return;

}

// fun balance::value [verification] at ./sources/balance.move:32:5+70
procedure {:timeLimit 40} $2_balance_value$verify(_$t0: $2_balance_Balance'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:32:5+1
    assume {:print "$at(55,1083,1084)"} true;
    assume $IsValid'$2_balance_Balance'#0''($t0);

    // trace_local[self]($t0) at ./sources/balance.move:32:5+1
    assume {:print "$track_local(13,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:33:9+10
    assume {:print "$at(55,1137,1147)"} true;
    $t1 := $value#$2_balance_Balance'#0'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:33:9+10
    assume {:print "$track_return(13,7,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:34:5+1
    assume {:print "$at(55,1152,1153)"} true;
L1:

    // return $t1 at ./sources/balance.move:34:5+1
    $ret0 := $t1;
    return;

}

// fun balance::create_supply<sui::SUI> [baseline] at ./sources/balance.move:42:5+93
procedure {:inline 1} $2_balance_create_supply'$2_sui_SUI'(_$t0: $2_sui_SUI) returns ($ret0: $2_balance_Supply'$2_sui_SUI')
{
    // declare local variables
    var $t1: int;
    var $t2: $2_balance_Supply'$2_sui_SUI';
    var $t0: $2_sui_SUI;
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';
    var $temp_0'$2_sui_SUI': $2_sui_SUI;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[_witness]($t0) at ./sources/balance.move:42:5+1
    assume {:print "$at(55,1317,1318)"} true;
    assume {:print "$track_local(13,0,0):", $t0} $t0 == $t0;

    // $t1 := 0 at ./sources/balance.move:43:25+1
    assume {:print "$at(55,1401,1402)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack balance::Supply<#0>($t1) at ./sources/balance.move:43:9+19
    $t2 := $2_balance_Supply'$2_sui_SUI'($t1);

    // trace_return[0]($t2) at ./sources/balance.move:43:9+19
    assume {:print "$track_return(13,0,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/balance.move:44:5+1
    assume {:print "$at(55,1409,1410)"} true;
L1:

    // return $t2 at ./sources/balance.move:44:5+1
    $ret0 := $t2;
    return;

}

// fun balance::create_supply<#0> [baseline] at ./sources/balance.move:42:5+93
procedure {:inline 1} $2_balance_create_supply'#0'(_$t0: #0) returns ($ret0: $2_balance_Supply'#0')
{
    // declare local variables
    var $t1: int;
    var $t2: $2_balance_Supply'#0';
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[_witness]($t0) at ./sources/balance.move:42:5+1
    assume {:print "$at(55,1317,1318)"} true;
    assume {:print "$track_local(13,0,0):", $t0} $t0 == $t0;

    // $t1 := 0 at ./sources/balance.move:43:25+1
    assume {:print "$at(55,1401,1402)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack balance::Supply<#0>($t1) at ./sources/balance.move:43:9+19
    $t2 := $2_balance_Supply'#0'($t1);

    // trace_return[0]($t2) at ./sources/balance.move:43:9+19
    assume {:print "$track_return(13,0,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/balance.move:44:5+1
    assume {:print "$at(55,1409,1410)"} true;
L1:

    // return $t2 at ./sources/balance.move:44:5+1
    $ret0 := $t2;
    return;

}

// fun balance::create_supply [verification] at ./sources/balance.move:42:5+93
procedure {:timeLimit 40} $2_balance_create_supply$verify(_$t0: #0) returns ($ret0: $2_balance_Supply'#0')
{
    // declare local variables
    var $t1: int;
    var $t2: $2_balance_Supply'#0';
    var $t0: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:42:5+1
    assume {:print "$at(55,1317,1318)"} true;
    assume $IsValid'#0'($t0);

    // trace_local[_witness]($t0) at ./sources/balance.move:42:5+1
    assume {:print "$track_local(13,0,0):", $t0} $t0 == $t0;

    // $t1 := 0 at ./sources/balance.move:43:25+1
    assume {:print "$at(55,1401,1402)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack balance::Supply<#0>($t1) at ./sources/balance.move:43:9+19
    $t2 := $2_balance_Supply'#0'($t1);

    // trace_return[0]($t2) at ./sources/balance.move:43:9+19
    assume {:print "$track_return(13,0,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/balance.move:44:5+1
    assume {:print "$at(55,1409,1410)"} true;
L1:

    // return $t2 at ./sources/balance.move:44:5+1
    $ret0 := $t2;
    return;

}

// fun balance::decrease_supply<#0> [baseline] at ./sources/balance.move:54:5+230
procedure {:inline 1} $2_balance_decrease_supply'#0'(_$t0: $Mutation ($2_balance_Supply'#0'), _$t1: $2_balance_Balance'#0') returns ($ret0: int, $ret1: $Mutation ($2_balance_Supply'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (int);
    var $t0: $Mutation ($2_balance_Supply'#0');
    var $t1: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:54:5+1
    assume {:print "$at(55,1780,1781)"} true;
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_local[balance]($t1) at ./sources/balance.move:54:5+1
    assume {:print "$track_local(13,1,1):", $t1} $t1 == $t1;

    // $t3 := unpack balance::Balance<#0>($t1) at ./sources/balance.move:55:13+17
    assume {:print "$at(55,1872,1889)"} true;
    $t3 := $value#$2_balance_Balance'#0'($t1);

    // trace_local[value]($t3) at ./sources/balance.move:55:23+5
    assume {:print "$track_local(13,1,2):", $t3} $t3 == $t3;

    // $t4 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:56:17+10
    assume {:print "$at(55,1917,1927)"} true;
    $t4 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t5 := >=($t4, $t3) at ./sources/balance.move:56:28+2
    call $t5 := $Ge($t4, $t3);

    // if ($t5) goto L0 else goto L1 at ./sources/balance.move:56:9+39
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:56:9+39
L1:

    // destroy($t0) at ./sources/balance.move:56:9+39

    // $t6 := 1 at ./sources/balance.move:56:38+9
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/balance.move:56:9+39
    assume {:print "$at(55,1909,1948)"} true;
    assume {:print "$track_abort(13,1):", $t6} $t6 == $t6;

    // $t7 := move($t6) at ./sources/balance.move:56:9+39
    $t7 := $t6;

    // goto L3 at ./sources/balance.move:56:9+39
    goto L3;

    // label L0 at ./sources/balance.move:57:22+4
    assume {:print "$at(55,1971,1975)"} true;
L0:

    // $t8 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:57:22+10
    $t8 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t9 := -($t8, $t3) on_abort goto L3 with $t7 at ./sources/balance.move:57:33+1
    call $t9 := $Sub($t8, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,1982,1983)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,1):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t10 := borrow_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:57:9+10
    $t10 := $ChildMutation($t0, 0, $value#$2_balance_Supply'#0'($Dereference($t0)));

    // write_ref($t10, $t9) at ./sources/balance.move:57:9+31
    $t10 := $UpdateMutation($t10, $t9);

    // write_back[Reference($t0).value (u64)]($t10) at ./sources/balance.move:57:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Supply'#0''_value($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/balance.move:57:9+31
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_return[0]($t3) at ./sources/balance.move:58:9+5
    assume {:print "$at(55,1999,2004)"} true;
    assume {:print "$track_return(13,1,0):", $t3} $t3 == $t3;

    // trace_local[self]($t0) at ./sources/balance.move:58:9+5
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // label L2 at ./sources/balance.move:59:5+1
    assume {:print "$at(55,2009,2010)"} true;
L2:

    // return $t3 at ./sources/balance.move:59:5+1
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:59:5+1
L3:

    // abort($t7) at ./sources/balance.move:59:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun balance::decrease_supply [verification] at ./sources/balance.move:54:5+230
procedure {:timeLimit 40} $2_balance_decrease_supply$verify(_$t0: $Mutation ($2_balance_Supply'#0'), _$t1: $2_balance_Balance'#0') returns ($ret0: int, $ret1: $Mutation ($2_balance_Supply'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (int);
    var $t0: $Mutation ($2_balance_Supply'#0');
    var $t1: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t10));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:54:5+1
    assume {:print "$at(55,1780,1781)"} true;
    assume $IsValid'$2_balance_Supply'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/balance.move:54:5+1
    assume $IsValid'$2_balance_Balance'#0''($t1);

    // trace_local[self]($t0) at ./sources/balance.move:54:5+1
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_local[balance]($t1) at ./sources/balance.move:54:5+1
    assume {:print "$track_local(13,1,1):", $t1} $t1 == $t1;

    // $t3 := unpack balance::Balance<#0>($t1) at ./sources/balance.move:55:13+17
    assume {:print "$at(55,1872,1889)"} true;
    $t3 := $value#$2_balance_Balance'#0'($t1);

    // trace_local[value]($t3) at ./sources/balance.move:55:23+5
    assume {:print "$track_local(13,1,2):", $t3} $t3 == $t3;

    // $t4 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:56:17+10
    assume {:print "$at(55,1917,1927)"} true;
    $t4 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t5 := >=($t4, $t3) at ./sources/balance.move:56:28+2
    call $t5 := $Ge($t4, $t3);

    // if ($t5) goto L0 else goto L1 at ./sources/balance.move:56:9+39
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:56:9+39
L1:

    // destroy($t0) at ./sources/balance.move:56:9+39

    // $t6 := 1 at ./sources/balance.move:56:38+9
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/balance.move:56:9+39
    assume {:print "$at(55,1909,1948)"} true;
    assume {:print "$track_abort(13,1):", $t6} $t6 == $t6;

    // $t7 := move($t6) at ./sources/balance.move:56:9+39
    $t7 := $t6;

    // goto L3 at ./sources/balance.move:56:9+39
    goto L3;

    // label L0 at ./sources/balance.move:57:22+4
    assume {:print "$at(55,1971,1975)"} true;
L0:

    // $t8 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:57:22+10
    $t8 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t9 := -($t8, $t3) on_abort goto L3 with $t7 at ./sources/balance.move:57:33+1
    call $t9 := $Sub($t8, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,1982,1983)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,1):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t10 := borrow_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:57:9+10
    $t10 := $ChildMutation($t0, 0, $value#$2_balance_Supply'#0'($Dereference($t0)));

    // write_ref($t10, $t9) at ./sources/balance.move:57:9+31
    $t10 := $UpdateMutation($t10, $t9);

    // write_back[Reference($t0).value (u64)]($t10) at ./sources/balance.move:57:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Supply'#0''_value($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/balance.move:57:9+31
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_return[0]($t3) at ./sources/balance.move:58:9+5
    assume {:print "$at(55,1999,2004)"} true;
    assume {:print "$track_return(13,1,0):", $t3} $t3 == $t3;

    // trace_local[self]($t0) at ./sources/balance.move:58:9+5
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,1,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // label L2 at ./sources/balance.move:59:5+1
    assume {:print "$at(55,2009,2010)"} true;
L2:

    // return $t3 at ./sources/balance.move:59:5+1
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:59:5+1
L3:

    // abort($t7) at ./sources/balance.move:59:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun balance::destroy_zero<sui::SUI> [baseline] at ./sources/balance.move:97:5+146
procedure {:inline 1} $2_balance_destroy_zero'$2_sui_SUI'(_$t0: $2_balance_Balance'$2_sui_SUI') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t0: $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/balance.move:97:5+1
    assume {:print "$at(55,3023,3024)"} true;
    assume {:print "$track_local(13,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:98:17+13
    assume {:print "$at(55,3089,3102)"} true;
    $t1 := $value#$2_balance_Balance'$2_sui_SUI'($t0);

    // $t2 := 0 at ./sources/balance.move:98:34+1
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := ==($t1, $t2) at ./sources/balance.move:98:31+2
    $t3 := $IsEqual'u64'($t1, $t2);

    // if ($t3) goto L0 else goto L1 at ./sources/balance.move:98:9+37
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:98:37+8
L1:

    // $t4 := 0 at ./sources/balance.move:98:37+8
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/balance.move:98:9+37
    assume {:print "$at(55,3081,3118)"} true;
    assume {:print "$track_abort(13,2):", $t4} $t4 == $t4;

    // goto L3 at ./sources/balance.move:98:9+37
    goto L3;

    // label L0 at ./sources/balance.move:99:36+7
    assume {:print "$at(55,3155,3162)"} true;
L0:

    // $t5 := unpack balance::Balance<#0>($t0) at ./sources/balance.move:99:13+20
    $t5 := $value#$2_balance_Balance'$2_sui_SUI'($t0);

    // destroy($t5) at ./sources/balance.move:99:30+1

    // label L2 at ./sources/balance.move:100:5+1
    assume {:print "$at(55,3168,3169)"} true;
L2:

    // return () at ./sources/balance.move:100:5+1
    return;

    // label L3 at ./sources/balance.move:100:5+1
L3:

    // abort($t4) at ./sources/balance.move:100:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun balance::destroy_zero<#0> [baseline] at ./sources/balance.move:97:5+146
procedure {:inline 1} $2_balance_destroy_zero'#0'(_$t0: $2_balance_Balance'#0') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t0: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/balance.move:97:5+1
    assume {:print "$at(55,3023,3024)"} true;
    assume {:print "$track_local(13,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:98:17+13
    assume {:print "$at(55,3089,3102)"} true;
    $t1 := $value#$2_balance_Balance'#0'($t0);

    // $t2 := 0 at ./sources/balance.move:98:34+1
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := ==($t1, $t2) at ./sources/balance.move:98:31+2
    $t3 := $IsEqual'u64'($t1, $t2);

    // if ($t3) goto L0 else goto L1 at ./sources/balance.move:98:9+37
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:98:37+8
L1:

    // $t4 := 0 at ./sources/balance.move:98:37+8
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/balance.move:98:9+37
    assume {:print "$at(55,3081,3118)"} true;
    assume {:print "$track_abort(13,2):", $t4} $t4 == $t4;

    // goto L3 at ./sources/balance.move:98:9+37
    goto L3;

    // label L0 at ./sources/balance.move:99:36+7
    assume {:print "$at(55,3155,3162)"} true;
L0:

    // $t5 := unpack balance::Balance<#0>($t0) at ./sources/balance.move:99:13+20
    $t5 := $value#$2_balance_Balance'#0'($t0);

    // destroy($t5) at ./sources/balance.move:99:30+1

    // label L2 at ./sources/balance.move:100:5+1
    assume {:print "$at(55,3168,3169)"} true;
L2:

    // return () at ./sources/balance.move:100:5+1
    return;

    // label L3 at ./sources/balance.move:100:5+1
L3:

    // abort($t4) at ./sources/balance.move:100:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun balance::destroy_zero [verification] at ./sources/balance.move:97:5+146
procedure {:timeLimit 40} $2_balance_destroy_zero$verify(_$t0: $2_balance_Balance'#0') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t0: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:97:5+1
    assume {:print "$at(55,3023,3024)"} true;
    assume $IsValid'$2_balance_Balance'#0''($t0);

    // trace_local[balance]($t0) at ./sources/balance.move:97:5+1
    assume {:print "$track_local(13,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:98:17+13
    assume {:print "$at(55,3089,3102)"} true;
    $t1 := $value#$2_balance_Balance'#0'($t0);

    // $t2 := 0 at ./sources/balance.move:98:34+1
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := ==($t1, $t2) at ./sources/balance.move:98:31+2
    $t3 := $IsEqual'u64'($t1, $t2);

    // if ($t3) goto L0 else goto L1 at ./sources/balance.move:98:9+37
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:98:37+8
L1:

    // $t4 := 0 at ./sources/balance.move:98:37+8
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/balance.move:98:9+37
    assume {:print "$at(55,3081,3118)"} true;
    assume {:print "$track_abort(13,2):", $t4} $t4 == $t4;

    // goto L3 at ./sources/balance.move:98:9+37
    goto L3;

    // label L0 at ./sources/balance.move:99:36+7
    assume {:print "$at(55,3155,3162)"} true;
L0:

    // $t5 := unpack balance::Balance<#0>($t0) at ./sources/balance.move:99:13+20
    $t5 := $value#$2_balance_Balance'#0'($t0);

    // destroy($t5) at ./sources/balance.move:99:30+1

    // label L2 at ./sources/balance.move:100:5+1
    assume {:print "$at(55,3168,3169)"} true;
L2:

    // assert Not(Neq<u64>(select balance::Balance.value($t0), 0)) at ./sources/balance.move:103:9+43
    assume {:print "$at(55,3203,3246)"} true;
    assert {:msg "assert_failed(55,3203,3246): function does not abort under this condition"}
      !!$IsEqual'u64'($value#$2_balance_Balance'#0'($t0), 0);

    // return () at ./sources/balance.move:103:9+43
    return;

    // label L3 at ./sources/balance.move:100:5+1
    assume {:print "$at(55,3168,3169)"} true;
L3:

    // assert Neq<u64>(select balance::Balance.value($t0), 0) at ./sources/balance.move:102:5+77
    assume {:print "$at(55,3175,3252)"} true;
    assert {:msg "assert_failed(55,3175,3252): abort not covered by any of the `aborts_if` clauses"}
      !$IsEqual'u64'($value#$2_balance_Balance'#0'($t0), 0);

    // assert And(Neq<u64>(select balance::Balance.value($t0), 0), Eq(0, $t4)) at ./sources/balance.move:102:5+77
    assert {:msg "assert_failed(55,3175,3252): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (!$IsEqual'u64'($value#$2_balance_Balance'#0'($t0), 0) && $IsEqual'num'(0, $t4));

    // abort($t4) at ./sources/balance.move:102:5+77
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun balance::increase_supply<sui::SUI> [baseline] at ./sources/balance.move:47:5+226
procedure {:inline 1} $2_balance_increase_supply'$2_sui_SUI'(_$t0: $Mutation ($2_balance_Supply'$2_sui_SUI'), _$t1: int) returns ($ret0: $2_balance_Balance'$2_sui_SUI', $ret1: $Mutation ($2_balance_Supply'$2_sui_SUI'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (int);
    var $t11: $2_balance_Balance'$2_sui_SUI';
    var $t0: $Mutation ($2_balance_Supply'$2_sui_SUI');
    var $t1: int;
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:47:5+1
    assume {:print "$at(55,1498,1499)"} true;
    $temp_0'$2_balance_Supply'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'$2_sui_SUI''} $temp_0'$2_balance_Supply'$2_sui_SUI'' == $temp_0'$2_balance_Supply'$2_sui_SUI'';

    // trace_local[value]($t1) at ./sources/balance.move:47:5+1
    assume {:print "$track_local(13,3,1):", $t1} $t1 == $t1;

    // $t2 := 18446744073709551615 at ./sources/balance.move:48:26+23
    assume {:print "$at(55,1601,1624)"} true;
    $t2 := 18446744073709551615;
    assume $IsValid'u64'($t2);

    // $t3 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:48:52+10
    $t3 := $value#$2_balance_Supply'$2_sui_SUI'($Dereference($t0));

    // $t4 := -($t2, $t3) on_abort goto L3 with $t5 at ./sources/balance.move:48:50+1
    call $t4 := $Sub($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,1625,1626)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,3):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := <($t1, $t4) at ./sources/balance.move:48:23+1
    call $t6 := $Lt($t1, $t4);

    // if ($t6) goto L0 else goto L1 at ./sources/balance.move:48:9+66
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:48:9+66
L1:

    // destroy($t0) at ./sources/balance.move:48:9+66

    // $t7 := 1 at ./sources/balance.move:48:65+9
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/balance.move:48:9+66
    assume {:print "$at(55,1584,1650)"} true;
    assume {:print "$track_abort(13,3):", $t7} $t7 == $t7;

    // $t5 := move($t7) at ./sources/balance.move:48:9+66
    $t5 := $t7;

    // goto L3 at ./sources/balance.move:48:9+66
    goto L3;

    // label L0 at ./sources/balance.move:49:22+4
    assume {:print "$at(55,1673,1677)"} true;
L0:

    // $t8 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:49:22+10
    $t8 := $value#$2_balance_Supply'$2_sui_SUI'($Dereference($t0));

    // $t9 := +($t8, $t1) on_abort goto L3 with $t5 at ./sources/balance.move:49:33+1
    call $t9 := $AddU64($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(55,1684,1685)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,3):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t10 := borrow_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:49:9+10
    $t10 := $ChildMutation($t0, 0, $value#$2_balance_Supply'$2_sui_SUI'($Dereference($t0)));

    // write_ref($t10, $t9) at ./sources/balance.move:49:9+31
    $t10 := $UpdateMutation($t10, $t9);

    // write_back[Reference($t0).value (u64)]($t10) at ./sources/balance.move:49:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Supply'$2_sui_SUI''_value($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/balance.move:49:9+31
    $temp_0'$2_balance_Supply'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'$2_sui_SUI''} $temp_0'$2_balance_Supply'$2_sui_SUI'' == $temp_0'$2_balance_Supply'$2_sui_SUI'';

    // $t11 := pack balance::Balance<#0>($t1) at ./sources/balance.move:50:9+17
    assume {:print "$at(55,1701,1718)"} true;
    $t11 := $2_balance_Balance'$2_sui_SUI'($t1);

    // trace_return[0]($t11) at ./sources/balance.move:50:9+17
    assume {:print "$track_return(13,3,0):", $t11} $t11 == $t11;

    // trace_local[self]($t0) at ./sources/balance.move:50:9+17
    $temp_0'$2_balance_Supply'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'$2_sui_SUI''} $temp_0'$2_balance_Supply'$2_sui_SUI'' == $temp_0'$2_balance_Supply'$2_sui_SUI'';

    // label L2 at ./sources/balance.move:51:5+1
    assume {:print "$at(55,1723,1724)"} true;
L2:

    // return $t11 at ./sources/balance.move:51:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:51:5+1
L3:

    // abort($t5) at ./sources/balance.move:51:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun balance::increase_supply<#0> [baseline] at ./sources/balance.move:47:5+226
procedure {:inline 1} $2_balance_increase_supply'#0'(_$t0: $Mutation ($2_balance_Supply'#0'), _$t1: int) returns ($ret0: $2_balance_Balance'#0', $ret1: $Mutation ($2_balance_Supply'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (int);
    var $t11: $2_balance_Balance'#0';
    var $t0: $Mutation ($2_balance_Supply'#0');
    var $t1: int;
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:47:5+1
    assume {:print "$at(55,1498,1499)"} true;
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_local[value]($t1) at ./sources/balance.move:47:5+1
    assume {:print "$track_local(13,3,1):", $t1} $t1 == $t1;

    // $t2 := 18446744073709551615 at ./sources/balance.move:48:26+23
    assume {:print "$at(55,1601,1624)"} true;
    $t2 := 18446744073709551615;
    assume $IsValid'u64'($t2);

    // $t3 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:48:52+10
    $t3 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t4 := -($t2, $t3) on_abort goto L3 with $t5 at ./sources/balance.move:48:50+1
    call $t4 := $Sub($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,1625,1626)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,3):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := <($t1, $t4) at ./sources/balance.move:48:23+1
    call $t6 := $Lt($t1, $t4);

    // if ($t6) goto L0 else goto L1 at ./sources/balance.move:48:9+66
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:48:9+66
L1:

    // destroy($t0) at ./sources/balance.move:48:9+66

    // $t7 := 1 at ./sources/balance.move:48:65+9
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/balance.move:48:9+66
    assume {:print "$at(55,1584,1650)"} true;
    assume {:print "$track_abort(13,3):", $t7} $t7 == $t7;

    // $t5 := move($t7) at ./sources/balance.move:48:9+66
    $t5 := $t7;

    // goto L3 at ./sources/balance.move:48:9+66
    goto L3;

    // label L0 at ./sources/balance.move:49:22+4
    assume {:print "$at(55,1673,1677)"} true;
L0:

    // $t8 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:49:22+10
    $t8 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t9 := +($t8, $t1) on_abort goto L3 with $t5 at ./sources/balance.move:49:33+1
    call $t9 := $AddU64($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(55,1684,1685)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,3):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t10 := borrow_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:49:9+10
    $t10 := $ChildMutation($t0, 0, $value#$2_balance_Supply'#0'($Dereference($t0)));

    // write_ref($t10, $t9) at ./sources/balance.move:49:9+31
    $t10 := $UpdateMutation($t10, $t9);

    // write_back[Reference($t0).value (u64)]($t10) at ./sources/balance.move:49:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Supply'#0''_value($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/balance.move:49:9+31
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // $t11 := pack balance::Balance<#0>($t1) at ./sources/balance.move:50:9+17
    assume {:print "$at(55,1701,1718)"} true;
    $t11 := $2_balance_Balance'#0'($t1);

    // trace_return[0]($t11) at ./sources/balance.move:50:9+17
    assume {:print "$track_return(13,3,0):", $t11} $t11 == $t11;

    // trace_local[self]($t0) at ./sources/balance.move:50:9+17
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // label L2 at ./sources/balance.move:51:5+1
    assume {:print "$at(55,1723,1724)"} true;
L2:

    // return $t11 at ./sources/balance.move:51:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:51:5+1
L3:

    // abort($t5) at ./sources/balance.move:51:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun balance::increase_supply [verification] at ./sources/balance.move:47:5+226
procedure {:timeLimit 40} $2_balance_increase_supply$verify(_$t0: $Mutation ($2_balance_Supply'#0'), _$t1: int) returns ($ret0: $2_balance_Balance'#0', $ret1: $Mutation ($2_balance_Supply'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (int);
    var $t11: $2_balance_Balance'#0';
    var $t0: $Mutation ($2_balance_Supply'#0');
    var $t1: int;
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t10));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:47:5+1
    assume {:print "$at(55,1498,1499)"} true;
    assume $IsValid'$2_balance_Supply'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/balance.move:47:5+1
    assume $IsValid'u64'($t1);

    // trace_local[self]($t0) at ./sources/balance.move:47:5+1
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_local[value]($t1) at ./sources/balance.move:47:5+1
    assume {:print "$track_local(13,3,1):", $t1} $t1 == $t1;

    // $t2 := 18446744073709551615 at ./sources/balance.move:48:26+23
    assume {:print "$at(55,1601,1624)"} true;
    $t2 := 18446744073709551615;
    assume $IsValid'u64'($t2);

    // $t3 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:48:52+10
    $t3 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t4 := -($t2, $t3) on_abort goto L3 with $t5 at ./sources/balance.move:48:50+1
    call $t4 := $Sub($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,1625,1626)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,3):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := <($t1, $t4) at ./sources/balance.move:48:23+1
    call $t6 := $Lt($t1, $t4);

    // if ($t6) goto L0 else goto L1 at ./sources/balance.move:48:9+66
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:48:9+66
L1:

    // destroy($t0) at ./sources/balance.move:48:9+66

    // $t7 := 1 at ./sources/balance.move:48:65+9
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/balance.move:48:9+66
    assume {:print "$at(55,1584,1650)"} true;
    assume {:print "$track_abort(13,3):", $t7} $t7 == $t7;

    // $t5 := move($t7) at ./sources/balance.move:48:9+66
    $t5 := $t7;

    // goto L3 at ./sources/balance.move:48:9+66
    goto L3;

    // label L0 at ./sources/balance.move:49:22+4
    assume {:print "$at(55,1673,1677)"} true;
L0:

    // $t8 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:49:22+10
    $t8 := $value#$2_balance_Supply'#0'($Dereference($t0));

    // $t9 := +($t8, $t1) on_abort goto L3 with $t5 at ./sources/balance.move:49:33+1
    call $t9 := $AddU64($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(55,1684,1685)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,3):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t10 := borrow_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:49:9+10
    $t10 := $ChildMutation($t0, 0, $value#$2_balance_Supply'#0'($Dereference($t0)));

    // write_ref($t10, $t9) at ./sources/balance.move:49:9+31
    $t10 := $UpdateMutation($t10, $t9);

    // write_back[Reference($t0).value (u64)]($t10) at ./sources/balance.move:49:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Supply'#0''_value($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/balance.move:49:9+31
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // $t11 := pack balance::Balance<#0>($t1) at ./sources/balance.move:50:9+17
    assume {:print "$at(55,1701,1718)"} true;
    $t11 := $2_balance_Balance'#0'($t1);

    // trace_return[0]($t11) at ./sources/balance.move:50:9+17
    assume {:print "$track_return(13,3,0):", $t11} $t11 == $t11;

    // trace_local[self]($t0) at ./sources/balance.move:50:9+17
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,3,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // label L2 at ./sources/balance.move:51:5+1
    assume {:print "$at(55,1723,1724)"} true;
L2:

    // return $t11 at ./sources/balance.move:51:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:51:5+1
L3:

    // abort($t5) at ./sources/balance.move:51:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun balance::join<sui::SUI> [baseline] at ./sources/balance.move:72:5+176
procedure {:inline 1} $2_balance_join'$2_sui_SUI'(_$t0: $Mutation ($2_balance_Balance'$2_sui_SUI'), _$t1: $2_balance_Balance'$2_sui_SUI') returns ($ret0: int, $ret1: $Mutation ($2_balance_Balance'$2_sui_SUI'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: int;
    var $t0: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t7));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:72:5+1
    assume {:print "$at(55,2256,2257)"} true;
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[balance]($t1) at ./sources/balance.move:72:5+1
    assume {:print "$track_local(13,4,1):", $t1} $t1 == $t1;

    // $t3 := unpack balance::Balance<#0>($t1) at ./sources/balance.move:73:13+17
    assume {:print "$at(55,2338,2355)"} true;
    $t3 := $value#$2_balance_Balance'$2_sui_SUI'($t1);

    // trace_local[value]($t3) at ./sources/balance.move:73:23+5
    assume {:print "$track_local(13,4,2):", $t3} $t3 == $t3;

    // $t4 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:74:22+10
    assume {:print "$at(55,2388,2398)"} true;
    $t4 := $value#$2_balance_Balance'$2_sui_SUI'($Dereference($t0));

    // $t5 := +($t4, $t3) on_abort goto L2 with $t6 at ./sources/balance.move:74:33+1
    call $t5 := $AddU64($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,2399,2400)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,4):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:74:9+10
    $t7 := $ChildMutation($t0, 0, $value#$2_balance_Balance'$2_sui_SUI'($Dereference($t0)));

    // write_ref($t7, $t5) at ./sources/balance.move:74:9+31
    $t7 := $UpdateMutation($t7, $t5);

    // write_back[Reference($t0).value (u64)]($t7) at ./sources/balance.move:74:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'$2_sui_SUI''_value($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./sources/balance.move:74:9+31
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // $t8 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:75:9+10
    assume {:print "$at(55,2416,2426)"} true;
    $t8 := $value#$2_balance_Balance'$2_sui_SUI'($Dereference($t0));

    // trace_return[0]($t8) at ./sources/balance.move:75:9+10
    assume {:print "$track_return(13,4,0):", $t8} $t8 == $t8;

    // trace_local[self]($t0) at ./sources/balance.move:75:9+10
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // label L1 at ./sources/balance.move:76:5+1
    assume {:print "$at(55,2431,2432)"} true;
L1:

    // return $t8 at ./sources/balance.move:76:5+1
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/balance.move:76:5+1
L2:

    // abort($t6) at ./sources/balance.move:76:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun balance::join<#0> [baseline] at ./sources/balance.move:72:5+176
procedure {:inline 1} $2_balance_join'#0'(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: $2_balance_Balance'#0') returns ($ret0: int, $ret1: $Mutation ($2_balance_Balance'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: int;
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t7));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:72:5+1
    assume {:print "$at(55,2256,2257)"} true;
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[balance]($t1) at ./sources/balance.move:72:5+1
    assume {:print "$track_local(13,4,1):", $t1} $t1 == $t1;

    // $t3 := unpack balance::Balance<#0>($t1) at ./sources/balance.move:73:13+17
    assume {:print "$at(55,2338,2355)"} true;
    $t3 := $value#$2_balance_Balance'#0'($t1);

    // trace_local[value]($t3) at ./sources/balance.move:73:23+5
    assume {:print "$track_local(13,4,2):", $t3} $t3 == $t3;

    // $t4 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:74:22+10
    assume {:print "$at(55,2388,2398)"} true;
    $t4 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // $t5 := +($t4, $t3) on_abort goto L2 with $t6 at ./sources/balance.move:74:33+1
    call $t5 := $AddU64($t4, $t3);
    if ($abort_flag) {
        assume {:print "$at(55,2399,2400)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,4):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:74:9+10
    $t7 := $ChildMutation($t0, 0, $value#$2_balance_Balance'#0'($Dereference($t0)));

    // write_ref($t7, $t5) at ./sources/balance.move:74:9+31
    $t7 := $UpdateMutation($t7, $t5);

    // write_back[Reference($t0).value (u64)]($t7) at ./sources/balance.move:74:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'#0''_value($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./sources/balance.move:74:9+31
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // $t8 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:75:9+10
    assume {:print "$at(55,2416,2426)"} true;
    $t8 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // trace_return[0]($t8) at ./sources/balance.move:75:9+10
    assume {:print "$track_return(13,4,0):", $t8} $t8 == $t8;

    // trace_local[self]($t0) at ./sources/balance.move:75:9+10
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // label L1 at ./sources/balance.move:76:5+1
    assume {:print "$at(55,2431,2432)"} true;
L1:

    // return $t8 at ./sources/balance.move:76:5+1
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/balance.move:76:5+1
L2:

    // abort($t6) at ./sources/balance.move:76:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun balance::join [verification] at ./sources/balance.move:72:5+176
procedure {:timeLimit 40} $2_balance_join$verify(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: $2_balance_Balance'#0') returns ($ret0: int, $ret1: $Mutation ($2_balance_Balance'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: $2_balance_Balance'#0';
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: int;
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:72:5+1
    assume {:print "$at(55,2256,2257)"} true;
    assume $IsValid'$2_balance_Balance'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/balance.move:72:5+1
    assume $IsValid'$2_balance_Balance'#0''($t1);

    // $t3 := read_ref($t0) at ./sources/balance.move:72:5+1
    $t3 := $Dereference($t0);

    // trace_local[self]($t0) at ./sources/balance.move:72:5+1
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[balance]($t1) at ./sources/balance.move:72:5+1
    assume {:print "$track_local(13,4,1):", $t1} $t1 == $t1;

    // $t4 := unpack balance::Balance<#0>($t1) at ./sources/balance.move:73:13+17
    assume {:print "$at(55,2338,2355)"} true;
    $t4 := $value#$2_balance_Balance'#0'($t1);

    // trace_local[value]($t4) at ./sources/balance.move:73:23+5
    assume {:print "$track_local(13,4,2):", $t4} $t4 == $t4;

    // $t5 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:74:22+10
    assume {:print "$at(55,2388,2398)"} true;
    $t5 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // $t6 := +($t5, $t4) on_abort goto L2 with $t7 at ./sources/balance.move:74:33+1
    call $t6 := $AddU64($t5, $t4);
    if ($abort_flag) {
        assume {:print "$at(55,2399,2400)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(13,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := borrow_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:74:9+10
    $t8 := $ChildMutation($t0, 0, $value#$2_balance_Balance'#0'($Dereference($t0)));

    // write_ref($t8, $t6) at ./sources/balance.move:74:9+31
    $t8 := $UpdateMutation($t8, $t6);

    // write_back[Reference($t0).value (u64)]($t8) at ./sources/balance.move:74:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'#0''_value($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/balance.move:74:9+31
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // $t9 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:75:9+10
    assume {:print "$at(55,2416,2426)"} true;
    $t9 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // trace_return[0]($t9) at ./sources/balance.move:75:9+10
    assume {:print "$track_return(13,4,0):", $t9} $t9 == $t9;

    // trace_local[self]($t0) at ./sources/balance.move:75:9+10
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,4,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // label L1 at ./sources/balance.move:76:5+1
    assume {:print "$at(55,2431,2432)"} true;
L1:

    // assert Eq<u64>(select balance::Balance.value($t0), Add(select balance::Balance.value($t3), select balance::Balance.value($t1))) at ./sources/balance.move:79:9+54
    assume {:print "$at(55,2458,2512)"} true;
    assert {:msg "assert_failed(55,2458,2512): post-condition does not hold"}
      $IsEqual'u64'($value#$2_balance_Balance'#0'($Dereference($t0)), ($value#$2_balance_Balance'#0'($t3) + $value#$2_balance_Balance'#0'($t1)));

    // assert Eq<u64>($t9, select balance::Balance.value($t0)) at ./sources/balance.move:80:9+29
    assume {:print "$at(55,2521,2550)"} true;
    assert {:msg "assert_failed(55,2521,2550): post-condition does not hold"}
      $IsEqual'u64'($t9, $value#$2_balance_Balance'#0'($Dereference($t0)));

    // return $t9 at ./sources/balance.move:80:9+29
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/balance.move:76:5+1
    assume {:print "$at(55,2431,2432)"} true;
L2:

    // abort($t7) at ./sources/balance.move:76:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun balance::split<sui::SUI> [baseline] at ./sources/balance.move:84:5+191
procedure {:inline 1} $2_balance_split'$2_sui_SUI'(_$t0: $Mutation ($2_balance_Balance'$2_sui_SUI'), _$t1: int) returns ($ret0: $2_balance_Balance'$2_sui_SUI', $ret1: $Mutation ($2_balance_Balance'$2_sui_SUI'))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: $2_balance_Balance'$2_sui_SUI';
    var $t0: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t1: int;
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:84:5+1
    assume {:print "$at(55,2620,2621)"} true;
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[value]($t1) at ./sources/balance.move:84:5+1
    assume {:print "$track_local(13,5,1):", $t1} $t1 == $t1;

    // $t2 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:85:17+10
    assume {:print "$at(55,2705,2715)"} true;
    $t2 := $value#$2_balance_Balance'$2_sui_SUI'($Dereference($t0));

    // $t3 := >=($t2, $t1) at ./sources/balance.move:85:28+2
    call $t3 := $Ge($t2, $t1);

    // if ($t3) goto L0 else goto L1 at ./sources/balance.move:85:9+40
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:85:9+40
L1:

    // destroy($t0) at ./sources/balance.move:85:9+40

    // $t4 := 2 at ./sources/balance.move:85:38+10
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/balance.move:85:9+40
    assume {:print "$at(55,2697,2737)"} true;
    assume {:print "$track_abort(13,5):", $t4} $t4 == $t4;

    // $t5 := move($t4) at ./sources/balance.move:85:9+40
    $t5 := $t4;

    // goto L3 at ./sources/balance.move:85:9+40
    goto L3;

    // label L0 at ./sources/balance.move:86:22+4
    assume {:print "$at(55,2760,2764)"} true;
L0:

    // $t6 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:86:22+10
    $t6 := $value#$2_balance_Balance'$2_sui_SUI'($Dereference($t0));

    // $t7 := -($t6, $t1) on_abort goto L3 with $t5 at ./sources/balance.move:86:33+1
    call $t7 := $Sub($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(55,2771,2772)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,5):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := borrow_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:86:9+10
    $t8 := $ChildMutation($t0, 0, $value#$2_balance_Balance'$2_sui_SUI'($Dereference($t0)));

    // write_ref($t8, $t7) at ./sources/balance.move:86:9+31
    $t8 := $UpdateMutation($t8, $t7);

    // write_back[Reference($t0).value (u64)]($t8) at ./sources/balance.move:86:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'$2_sui_SUI''_value($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/balance.move:86:9+31
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // $t9 := pack balance::Balance<#0>($t1) at ./sources/balance.move:87:9+17
    assume {:print "$at(55,2788,2805)"} true;
    $t9 := $2_balance_Balance'$2_sui_SUI'($t1);

    // trace_return[0]($t9) at ./sources/balance.move:87:9+17
    assume {:print "$track_return(13,5,0):", $t9} $t9 == $t9;

    // trace_local[self]($t0) at ./sources/balance.move:87:9+17
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // label L2 at ./sources/balance.move:88:5+1
    assume {:print "$at(55,2810,2811)"} true;
L2:

    // return $t9 at ./sources/balance.move:88:5+1
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:88:5+1
L3:

    // abort($t5) at ./sources/balance.move:88:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun balance::split<#0> [baseline] at ./sources/balance.move:84:5+191
procedure {:inline 1} $2_balance_split'#0'(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: int) returns ($ret0: $2_balance_Balance'#0', $ret1: $Mutation ($2_balance_Balance'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: $2_balance_Balance'#0';
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: int;
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/balance.move:84:5+1
    assume {:print "$at(55,2620,2621)"} true;
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[value]($t1) at ./sources/balance.move:84:5+1
    assume {:print "$track_local(13,5,1):", $t1} $t1 == $t1;

    // $t2 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:85:17+10
    assume {:print "$at(55,2705,2715)"} true;
    $t2 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // $t3 := >=($t2, $t1) at ./sources/balance.move:85:28+2
    call $t3 := $Ge($t2, $t1);

    // if ($t3) goto L0 else goto L1 at ./sources/balance.move:85:9+40
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:85:9+40
L1:

    // destroy($t0) at ./sources/balance.move:85:9+40

    // $t4 := 2 at ./sources/balance.move:85:38+10
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/balance.move:85:9+40
    assume {:print "$at(55,2697,2737)"} true;
    assume {:print "$track_abort(13,5):", $t4} $t4 == $t4;

    // $t5 := move($t4) at ./sources/balance.move:85:9+40
    $t5 := $t4;

    // goto L3 at ./sources/balance.move:85:9+40
    goto L3;

    // label L0 at ./sources/balance.move:86:22+4
    assume {:print "$at(55,2760,2764)"} true;
L0:

    // $t6 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:86:22+10
    $t6 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // $t7 := -($t6, $t1) on_abort goto L3 with $t5 at ./sources/balance.move:86:33+1
    call $t7 := $Sub($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(55,2771,2772)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(13,5):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := borrow_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:86:9+10
    $t8 := $ChildMutation($t0, 0, $value#$2_balance_Balance'#0'($Dereference($t0)));

    // write_ref($t8, $t7) at ./sources/balance.move:86:9+31
    $t8 := $UpdateMutation($t8, $t7);

    // write_back[Reference($t0).value (u64)]($t8) at ./sources/balance.move:86:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'#0''_value($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/balance.move:86:9+31
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // $t9 := pack balance::Balance<#0>($t1) at ./sources/balance.move:87:9+17
    assume {:print "$at(55,2788,2805)"} true;
    $t9 := $2_balance_Balance'#0'($t1);

    // trace_return[0]($t9) at ./sources/balance.move:87:9+17
    assume {:print "$track_return(13,5,0):", $t9} $t9 == $t9;

    // trace_local[self]($t0) at ./sources/balance.move:87:9+17
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // label L2 at ./sources/balance.move:88:5+1
    assume {:print "$at(55,2810,2811)"} true;
L2:

    // return $t9 at ./sources/balance.move:88:5+1
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:88:5+1
L3:

    // abort($t5) at ./sources/balance.move:88:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun balance::split [verification] at ./sources/balance.move:84:5+191
procedure {:timeLimit 40} $2_balance_split$verify(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: int) returns ($ret0: $2_balance_Balance'#0', $ret1: $Mutation ($2_balance_Balance'#0'))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $2_balance_Balance'#0';
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: int;
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:84:5+1
    assume {:print "$at(55,2620,2621)"} true;
    assume $IsValid'$2_balance_Balance'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/balance.move:84:5+1
    assume $IsValid'u64'($t1);

    // $t2 := read_ref($t0) at ./sources/balance.move:84:5+1
    $t2 := $Dereference($t0);

    // trace_local[self]($t0) at ./sources/balance.move:84:5+1
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[value]($t1) at ./sources/balance.move:84:5+1
    assume {:print "$track_local(13,5,1):", $t1} $t1 == $t1;

    // $t3 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:85:17+10
    assume {:print "$at(55,2705,2715)"} true;
    $t3 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // $t4 := >=($t3, $t1) at ./sources/balance.move:85:28+2
    call $t4 := $Ge($t3, $t1);

    // if ($t4) goto L0 else goto L1 at ./sources/balance.move:85:9+40
    if ($t4) { goto L0; } else { goto L1; }

    // label L1 at ./sources/balance.move:85:9+40
L1:

    // destroy($t0) at ./sources/balance.move:85:9+40

    // $t5 := 2 at ./sources/balance.move:85:38+10
    $t5 := 2;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at ./sources/balance.move:85:9+40
    assume {:print "$at(55,2697,2737)"} true;
    assume {:print "$track_abort(13,5):", $t5} $t5 == $t5;

    // $t6 := move($t5) at ./sources/balance.move:85:9+40
    $t6 := $t5;

    // goto L3 at ./sources/balance.move:85:9+40
    goto L3;

    // label L0 at ./sources/balance.move:86:22+4
    assume {:print "$at(55,2760,2764)"} true;
L0:

    // $t7 := get_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:86:22+10
    $t7 := $value#$2_balance_Balance'#0'($Dereference($t0));

    // $t8 := -($t7, $t1) on_abort goto L3 with $t6 at ./sources/balance.move:86:33+1
    call $t8 := $Sub($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(55,2771,2772)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,5):", $t6} $t6 == $t6;
        goto L3;
    }

    // $t9 := borrow_field<balance::Balance<#0>>.value($t0) at ./sources/balance.move:86:9+10
    $t9 := $ChildMutation($t0, 0, $value#$2_balance_Balance'#0'($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/balance.move:86:9+31
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).value (u64)]($t9) at ./sources/balance.move:86:9+31
    $t0 := $UpdateMutation($t0, $Update'$2_balance_Balance'#0''_value($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/balance.move:86:9+31
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // $t10 := pack balance::Balance<#0>($t1) at ./sources/balance.move:87:9+17
    assume {:print "$at(55,2788,2805)"} true;
    $t10 := $2_balance_Balance'#0'($t1);

    // trace_return[0]($t10) at ./sources/balance.move:87:9+17
    assume {:print "$track_return(13,5,0):", $t10} $t10 == $t10;

    // trace_local[self]($t0) at ./sources/balance.move:87:9+17
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(13,5,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // label L2 at ./sources/balance.move:88:5+1
    assume {:print "$at(55,2810,2811)"} true;
L2:

    // assert Not(Lt(select balance::Balance.value($t2), $t1)) at ./sources/balance.move:91:9+45
    assume {:print "$at(55,2838,2883)"} true;
    assert {:msg "assert_failed(55,2838,2883): function does not abort under this condition"}
      !($value#$2_balance_Balance'#0'($t2) < $t1);

    // assert Eq<u64>(select balance::Balance.value($t0), Sub(select balance::Balance.value($t2), $t1)) at ./sources/balance.move:92:9+46
    assume {:print "$at(55,2892,2938)"} true;
    assert {:msg "assert_failed(55,2892,2938): post-condition does not hold"}
      $IsEqual'u64'($value#$2_balance_Balance'#0'($Dereference($t0)), ($value#$2_balance_Balance'#0'($t2) - $t1));

    // assert Eq<u64>(select balance::Balance.value($t10), $t1) at ./sources/balance.move:93:9+30
    assume {:print "$at(55,2947,2977)"} true;
    assert {:msg "assert_failed(55,2947,2977): post-condition does not hold"}
      $IsEqual'u64'($value#$2_balance_Balance'#0'($t10), $t1);

    // return $t10 at ./sources/balance.move:93:9+30
    $ret0 := $t10;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/balance.move:88:5+1
    assume {:print "$at(55,2810,2811)"} true;
L3:

    // assert Lt(select balance::Balance.value($t2), $t1) at ./sources/balance.move:90:5+166
    assume {:print "$at(55,2817,2983)"} true;
    assert {:msg "assert_failed(55,2817,2983): abort not covered by any of the `aborts_if` clauses"}
      ($value#$2_balance_Balance'#0'($t2) < $t1);

    // assert And(Lt(select balance::Balance.value($t2), $t1), Eq(2, $t6)) at ./sources/balance.move:90:5+166
    assert {:msg "assert_failed(55,2817,2983): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($value#$2_balance_Balance'#0'($t2) < $t1) && $IsEqual'num'(2, $t6));

    // abort($t6) at ./sources/balance.move:90:5+166
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun balance::supply_value<#0> [baseline] at ./sources/balance.move:37:5+80
procedure {:inline 1} $2_balance_supply_value'#0'(_$t0: $2_balance_Supply'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_balance_Supply'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[supply]($t0) at ./sources/balance.move:37:5+1
    assume {:print "$at(55,1191,1192)"} true;
    assume {:print "$track_local(13,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:38:9+12
    assume {:print "$at(55,1253,1265)"} true;
    $t1 := $value#$2_balance_Supply'#0'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:38:9+12
    assume {:print "$track_return(13,6,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:39:5+1
    assume {:print "$at(55,1270,1271)"} true;
L1:

    // return $t1 at ./sources/balance.move:39:5+1
    $ret0 := $t1;
    return;

}

// fun balance::supply_value [verification] at ./sources/balance.move:37:5+80
procedure {:timeLimit 40} $2_balance_supply_value$verify(_$t0: $2_balance_Supply'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_balance_Supply'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/balance.move:37:5+1
    assume {:print "$at(55,1191,1192)"} true;
    assume $IsValid'$2_balance_Supply'#0''($t0);

    // trace_local[supply]($t0) at ./sources/balance.move:37:5+1
    assume {:print "$track_local(13,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<balance::Supply<#0>>.value($t0) at ./sources/balance.move:38:9+12
    assume {:print "$at(55,1253,1265)"} true;
    $t1 := $value#$2_balance_Supply'#0'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:38:9+12
    assume {:print "$track_return(13,6,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:39:5+1
    assume {:print "$at(55,1270,1271)"} true;
L1:

    // return $t1 at ./sources/balance.move:39:5+1
    $ret0 := $t1;
    return;

}

// fun balance::zero<sui::SUI> [baseline] at ./sources/balance.move:62:5+69
procedure {:inline 1} $2_balance_zero'$2_sui_SUI'() returns ($ret0: $2_balance_Balance'$2_sui_SUI')
{
    // declare local variables
    var $t0: int;
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';

    // bytecode translation starts here
    // $t0 := 0 at ./sources/balance.move:63:26+1
    assume {:print "$at(55,2122,2123)"} true;
    $t0 := 0;
    assume $IsValid'u64'($t0);

    // $t1 := pack balance::Balance<#0>($t0) at ./sources/balance.move:63:9+20
    $t1 := $2_balance_Balance'$2_sui_SUI'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:63:9+20
    assume {:print "$track_return(13,8,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:64:5+1
    assume {:print "$at(55,2130,2131)"} true;
L1:

    // return $t1 at ./sources/balance.move:64:5+1
    $ret0 := $t1;
    return;

}

// fun balance::zero<#0> [baseline] at ./sources/balance.move:62:5+69
procedure {:inline 1} $2_balance_zero'#0'() returns ($ret0: $2_balance_Balance'#0')
{
    // declare local variables
    var $t0: int;
    var $t1: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';

    // bytecode translation starts here
    // $t0 := 0 at ./sources/balance.move:63:26+1
    assume {:print "$at(55,2122,2123)"} true;
    $t0 := 0;
    assume $IsValid'u64'($t0);

    // $t1 := pack balance::Balance<#0>($t0) at ./sources/balance.move:63:9+20
    $t1 := $2_balance_Balance'#0'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:63:9+20
    assume {:print "$track_return(13,8,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:64:5+1
    assume {:print "$at(55,2130,2131)"} true;
L1:

    // return $t1 at ./sources/balance.move:64:5+1
    $ret0 := $t1;
    return;

}

// fun balance::zero [verification] at ./sources/balance.move:62:5+69
procedure {:timeLimit 40} $2_balance_zero$verify() returns ($ret0: $2_balance_Balance'#0')
{
    // declare local variables
    var $t0: int;
    var $t1: $2_balance_Balance'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := 0 at ./sources/balance.move:63:26+1
    assume {:print "$at(55,2122,2123)"} true;
    $t0 := 0;
    assume $IsValid'u64'($t0);

    // $t1 := pack balance::Balance<#0>($t0) at ./sources/balance.move:63:9+20
    $t1 := $2_balance_Balance'#0'($t0);

    // trace_return[0]($t1) at ./sources/balance.move:63:9+20
    assume {:print "$track_return(13,8,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/balance.move:64:5+1
    assume {:print "$at(55,2130,2131)"} true;
L1:

    // assert Not(false) at ./sources/balance.move:67:9+16
    assume {:print "$at(55,2157,2173)"} true;
    assert {:msg "assert_failed(55,2157,2173): function does not abort under this condition"}
      !false;

    // assert Eq<u64>(select balance::Balance.value($t1), 0) at ./sources/balance.move:68:9+26
    assume {:print "$at(55,2182,2208)"} true;
    assert {:msg "assert_failed(55,2182,2208): post-condition does not hold"}
      $IsEqual'u64'($value#$2_balance_Balance'#0'($t1), 0);

    // return $t1 at ./sources/balance.move:68:9+26
    $ret0 := $t1;
    return;

}

// struct coin::Coin<sui::SUI> at ./sources/coin.move:12:5+90
type {:datatype} $2_coin_Coin'$2_sui_SUI';
function {:constructor} $2_coin_Coin'$2_sui_SUI'($id: $2_object_UID, $balance: $2_balance_Balance'$2_sui_SUI'): $2_coin_Coin'$2_sui_SUI';
function {:inline} $Update'$2_coin_Coin'$2_sui_SUI''_id(s: $2_coin_Coin'$2_sui_SUI', x: $2_object_UID): $2_coin_Coin'$2_sui_SUI' {
    $2_coin_Coin'$2_sui_SUI'(x, $balance#$2_coin_Coin'$2_sui_SUI'(s))
}
function {:inline} $Update'$2_coin_Coin'$2_sui_SUI''_balance(s: $2_coin_Coin'$2_sui_SUI', x: $2_balance_Balance'$2_sui_SUI'): $2_coin_Coin'$2_sui_SUI' {
    $2_coin_Coin'$2_sui_SUI'($id#$2_coin_Coin'$2_sui_SUI'(s), x)
}
function $IsValid'$2_coin_Coin'$2_sui_SUI''(s: $2_coin_Coin'$2_sui_SUI'): bool {
    $IsValid'$2_object_UID'($id#$2_coin_Coin'$2_sui_SUI'(s))
      && $IsValid'$2_balance_Balance'$2_sui_SUI''($balance#$2_coin_Coin'$2_sui_SUI'(s))
}
function {:inline} $IsEqual'$2_coin_Coin'$2_sui_SUI''(s1: $2_coin_Coin'$2_sui_SUI', s2: $2_coin_Coin'$2_sui_SUI'): bool {
    s1 == s2
}
var $2_coin_Coin'$2_sui_SUI'_$memory: $Memory $2_coin_Coin'$2_sui_SUI';

// struct coin::Coin<#0> at ./sources/coin.move:12:5+90
type {:datatype} $2_coin_Coin'#0';
function {:constructor} $2_coin_Coin'#0'($id: $2_object_UID, $balance: $2_balance_Balance'#0'): $2_coin_Coin'#0';
function {:inline} $Update'$2_coin_Coin'#0''_id(s: $2_coin_Coin'#0', x: $2_object_UID): $2_coin_Coin'#0' {
    $2_coin_Coin'#0'(x, $balance#$2_coin_Coin'#0'(s))
}
function {:inline} $Update'$2_coin_Coin'#0''_balance(s: $2_coin_Coin'#0', x: $2_balance_Balance'#0'): $2_coin_Coin'#0' {
    $2_coin_Coin'#0'($id#$2_coin_Coin'#0'(s), x)
}
function $IsValid'$2_coin_Coin'#0''(s: $2_coin_Coin'#0'): bool {
    $IsValid'$2_object_UID'($id#$2_coin_Coin'#0'(s))
      && $IsValid'$2_balance_Balance'#0''($balance#$2_coin_Coin'#0'(s))
}
function {:inline} $IsEqual'$2_coin_Coin'#0''(s1: $2_coin_Coin'#0', s2: $2_coin_Coin'#0'): bool {
    s1 == s2
}
var $2_coin_Coin'#0'_$memory: $Memory $2_coin_Coin'#0';

// struct coin::TreasuryCap<#0> at ./sources/coin.move:19:5+101
type {:datatype} $2_coin_TreasuryCap'#0';
function {:constructor} $2_coin_TreasuryCap'#0'($id: $2_object_UID, $total_supply: $2_balance_Supply'#0'): $2_coin_TreasuryCap'#0';
function {:inline} $Update'$2_coin_TreasuryCap'#0''_id(s: $2_coin_TreasuryCap'#0', x: $2_object_UID): $2_coin_TreasuryCap'#0' {
    $2_coin_TreasuryCap'#0'(x, $total_supply#$2_coin_TreasuryCap'#0'(s))
}
function {:inline} $Update'$2_coin_TreasuryCap'#0''_total_supply(s: $2_coin_TreasuryCap'#0', x: $2_balance_Supply'#0'): $2_coin_TreasuryCap'#0' {
    $2_coin_TreasuryCap'#0'($id#$2_coin_TreasuryCap'#0'(s), x)
}
function $IsValid'$2_coin_TreasuryCap'#0''(s: $2_coin_TreasuryCap'#0'): bool {
    $IsValid'$2_object_UID'($id#$2_coin_TreasuryCap'#0'(s))
      && $IsValid'$2_balance_Supply'#0''($total_supply#$2_coin_TreasuryCap'#0'(s))
}
function {:inline} $IsEqual'$2_coin_TreasuryCap'#0''(s1: $2_coin_TreasuryCap'#0', s2: $2_coin_TreasuryCap'#0'): bool {
    s1 == s2
}
var $2_coin_TreasuryCap'#0'_$memory: $Memory $2_coin_TreasuryCap'#0';

// fun coin::transfer<sui::SUI> [baseline] at ./sources/coin.move:101:5+109
procedure {:inline 1} $2_coin_transfer'$2_sui_SUI'(_$t0: $2_coin_Coin'$2_sui_SUI', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_coin_Coin'$2_sui_SUI';
    var $t1: int;
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[c]($t0) at ./sources/coin.move:101:5+1
    assume {:print "$at(8,3171,3172)"} true;
    assume {:print "$track_local(14,22,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/coin.move:101:5+1
    assume {:print "$track_local(14,22,1):", $t1} $t1 == $t1;

    // transfer::transfer<coin::Coin<#0>>($t0, $t1) on_abort goto L2 with $t2 at ./sources/coin.move:102:9+32
    assume {:print "$at(8,3242,3274)"} true;
    call $2_transfer_transfer'$2_coin_Coin'$2_sui_SUI''($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3242,3274)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(14,22):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/coin.move:103:5+1
    assume {:print "$at(8,3279,3280)"} true;
L1:

    // return () at ./sources/coin.move:103:5+1
    return;

    // label L2 at ./sources/coin.move:103:5+1
L2:

    // abort($t2) at ./sources/coin.move:103:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun coin::transfer<#0> [baseline] at ./sources/coin.move:101:5+109
procedure {:inline 1} $2_coin_transfer'#0'(_$t0: $2_coin_Coin'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_coin_Coin'#0';
    var $t1: int;
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[c]($t0) at ./sources/coin.move:101:5+1
    assume {:print "$at(8,3171,3172)"} true;
    assume {:print "$track_local(14,22,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/coin.move:101:5+1
    assume {:print "$track_local(14,22,1):", $t1} $t1 == $t1;

    // transfer::transfer<coin::Coin<#0>>($t0, $t1) on_abort goto L2 with $t2 at ./sources/coin.move:102:9+32
    assume {:print "$at(8,3242,3274)"} true;
    call $2_transfer_transfer'$2_coin_Coin'#0''($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3242,3274)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(14,22):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/coin.move:103:5+1
    assume {:print "$at(8,3279,3280)"} true;
L1:

    // return () at ./sources/coin.move:103:5+1
    return;

    // label L2 at ./sources/coin.move:103:5+1
L2:

    // abort($t2) at ./sources/coin.move:103:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun coin::transfer [verification] at ./sources/coin.move:101:5+109
procedure {:timeLimit 40} $2_coin_transfer$verify(_$t0: $2_coin_Coin'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_coin_Coin'#0';
    var $t1: int;
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:101:5+1
    assume {:print "$at(8,3171,3172)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // assume WellFormed($t1) at ./sources/coin.move:101:5+1
    assume $IsValid'address'($t1);

    // trace_local[c]($t0) at ./sources/coin.move:101:5+1
    assume {:print "$track_local(14,22,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/coin.move:101:5+1
    assume {:print "$track_local(14,22,1):", $t1} $t1 == $t1;

    // transfer::transfer<coin::Coin<#0>>($t0, $t1) on_abort goto L2 with $t2 at ./sources/coin.move:102:9+32
    assume {:print "$at(8,3242,3274)"} true;
    call $2_transfer_transfer'$2_coin_Coin'#0''($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,3242,3274)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(14,22):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/coin.move:103:5+1
    assume {:print "$at(8,3279,3280)"} true;
L1:

    // return () at ./sources/coin.move:103:5+1
    return;

    // label L2 at ./sources/coin.move:103:5+1
L2:

    // abort($t2) at ./sources/coin.move:103:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun coin::value<sui::SUI> [baseline] at ./sources/coin.move:56:5+86
procedure {:inline 1} $2_coin_value'$2_sui_SUI'(_$t0: $2_coin_Coin'$2_sui_SUI') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: int;
    var $t3: int;
    var $t0: $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/coin.move:56:5+1
    assume {:print "$at(8,1797,1798)"} true;
    assume {:print "$track_local(14,26,0):", $t0} $t0 == $t0;

    // $t1 := get_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:57:24+13
    assume {:print "$at(8,1863,1876)"} true;
    $t1 := $balance#$2_coin_Coin'$2_sui_SUI'($t0);

    // $t2 := balance::value<#0>($t1) on_abort goto L2 with $t3 at ./sources/coin.move:57:9+29
    call $t2 := $2_balance_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,1848,1877)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,26):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/coin.move:57:9+29
    assume {:print "$track_return(14,26,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/coin.move:58:5+1
    assume {:print "$at(8,1882,1883)"} true;
L1:

    // return $t2 at ./sources/coin.move:58:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/coin.move:58:5+1
L2:

    // abort($t3) at ./sources/coin.move:58:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::value [verification] at ./sources/coin.move:56:5+86
procedure {:timeLimit 40} $2_coin_value$verify(_$t0: $2_coin_Coin'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t2: int;
    var $t3: int;
    var $t0: $2_coin_Coin'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:56:5+1
    assume {:print "$at(8,1797,1798)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // trace_local[self]($t0) at ./sources/coin.move:56:5+1
    assume {:print "$track_local(14,26,0):", $t0} $t0 == $t0;

    // $t1 := get_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:57:24+13
    assume {:print "$at(8,1863,1876)"} true;
    $t1 := $balance#$2_coin_Coin'#0'($t0);

    // $t2 := balance::value<#0>($t1) on_abort goto L2 with $t3 at ./sources/coin.move:57:9+29
    call $t2 := $2_balance_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,1848,1877)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,26):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/coin.move:57:9+29
    assume {:print "$track_return(14,26,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/coin.move:58:5+1
    assume {:print "$at(8,1882,1883)"} true;
L1:

    // return $t2 at ./sources/coin.move:58:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/coin.move:58:5+1
L2:

    // abort($t3) at ./sources/coin.move:58:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::balance [verification] at ./sources/coin.move:61:5+80
procedure {:timeLimit 40} $2_coin_balance$verify(_$t0: $2_coin_Coin'#0') returns ($ret0: $2_balance_Balance'#0')
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t0: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:61:5+1
    assume {:print "$at(8,1947,1948)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // trace_local[coin]($t0) at ./sources/coin.move:61:5+1
    assume {:print "$track_local(14,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:62:9+13
    assume {:print "$at(8,2008,2021)"} true;
    $t1 := $balance#$2_coin_Coin'#0'($t0);

    // trace_return[0]($t1) at ./sources/coin.move:62:9+13
    assume {:print "$track_return(14,0,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/coin.move:63:5+1
    assume {:print "$at(8,2026,2027)"} true;
L1:

    // return $t1 at ./sources/coin.move:63:5+1
    $ret0 := $t1;
    return;

}

// fun coin::destroy_zero [verification] at ./sources/coin.move:132:5+151
procedure {:timeLimit 40} $2_coin_destroy_zero$verify(_$t0: $2_coin_Coin'#0') returns ()
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t2: $2_object_UID;
    var $t3: $2_object_UID;
    var $t4: $2_balance_Balance'#0';
    var $t5: int;
    var $t0: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:132:5+1
    assume {:print "$at(8,4212,4213)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // trace_local[c]($t0) at ./sources/coin.move:132:5+1
    assume {:print "$track_local(14,5,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack coin::Coin<#0>($t0) at ./sources/coin.move:133:13+20
    assume {:print "$at(8,4265,4285)"} true;
    $t3 := $id#$2_coin_Coin'#0'($t0);
    $t4 := $balance#$2_coin_Coin'#0'($t0);

    // trace_local[balance]($t4) at ./sources/coin.move:133:24+7
    assume {:print "$track_local(14,5,1):", $t4} $t4 == $t4;

    // trace_local[id]($t3) at ./sources/coin.move:133:20+2
    assume {:print "$track_local(14,5,2):", $t3} $t3 == $t3;

    // object::delete($t3) on_abort goto L2 with $t5 at ./sources/coin.move:134:9+18
    assume {:print "$at(8,4299,4317)"} true;
    call $2_object_delete($t3);
    if ($abort_flag) {
        assume {:print "$at(8,4299,4317)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,5):", $t5} $t5 == $t5;
        goto L2;
    }

    // balance::destroy_zero<#0>($t4) on_abort goto L2 with $t5 at ./sources/coin.move:135:9+30
    assume {:print "$at(8,4327,4357)"} true;
    call $2_balance_destroy_zero'#0'($t4);
    if ($abort_flag) {
        assume {:print "$at(8,4327,4357)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,5):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at ./sources/coin.move:136:5+1
    assume {:print "$at(8,4362,4363)"} true;
L1:

    // return () at ./sources/coin.move:136:5+1
    return;

    // label L2 at ./sources/coin.move:136:5+1
L2:

    // abort($t5) at ./sources/coin.move:136:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::join<#0> [baseline] at ./sources/coin.move:112:5+181
procedure {:inline 1} $2_coin_join'#0'(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: $2_coin_Coin'#0') returns ($ret0: $Mutation ($2_coin_Coin'#0'))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: $2_object_UID;
    var $t4: $2_object_UID;
    var $t5: $2_balance_Balance'#0';
    var $t6: int;
    var $t7: $Mutation ($2_balance_Balance'#0');
    var $t8: int;
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t7));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/coin.move:112:5+1
    assume {:print "$at(8,3563,3564)"} true;
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,8,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[c]($t1) at ./sources/coin.move:112:5+1
    assume {:print "$track_local(14,8,1):", $t1} $t1 == $t1;

    // ($t4, $t5) := unpack coin::Coin<#0>($t1) at ./sources/coin.move:113:13+20
    assume {:print "$at(8,3634,3654)"} true;
    $t4 := $id#$2_coin_Coin'#0'($t1);
    $t5 := $balance#$2_coin_Coin'#0'($t1);

    // trace_local[balance]($t5) at ./sources/coin.move:113:24+7
    assume {:print "$track_local(14,8,2):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/coin.move:113:20+2
    assume {:print "$track_local(14,8,3):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t6 at ./sources/coin.move:114:9+18
    assume {:print "$at(8,3668,3686)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(8,3668,3686)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,8):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:115:23+17
    assume {:print "$at(8,3710,3727)"} true;
    $t7 := $ChildMutation($t0, 1, $balance#$2_coin_Coin'#0'($Dereference($t0)));

    // $t8 := balance::join<#0>($t7, $t5) on_abort goto L2 with $t6 at ./sources/coin.move:115:9+41
    call $t8,$t7 := $2_balance_join'#0'($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,3696,3737)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,8):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).balance (balance::Balance<#0>)]($t7) at ./sources/coin.move:115:9+41
    $t0 := $UpdateMutation($t0, $Update'$2_coin_Coin'#0''_balance($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./sources/coin.move:115:9+41
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,8,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // destroy($t8) at ./sources/coin.move:115:9+41

    // trace_local[self]($t0) at ./sources/coin.move:115:50+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,8,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // label L1 at ./sources/coin.move:116:5+1
    assume {:print "$at(8,3743,3744)"} true;
L1:

    // return () at ./sources/coin.move:116:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/coin.move:116:5+1
L2:

    // abort($t6) at ./sources/coin.move:116:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun coin::join [verification] at ./sources/coin.move:112:5+181
procedure {:timeLimit 40} $2_coin_join$verify(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: $2_coin_Coin'#0') returns ($ret0: $Mutation ($2_coin_Coin'#0'))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: $2_object_UID;
    var $t4: $2_object_UID;
    var $t5: $2_balance_Balance'#0';
    var $t6: int;
    var $t7: $Mutation ($2_balance_Balance'#0');
    var $t8: int;
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:112:5+1
    assume {:print "$at(8,3563,3564)"} true;
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:112:5+1
    assume $IsValid'$2_coin_Coin'#0''($t1);

    // trace_local[self]($t0) at ./sources/coin.move:112:5+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,8,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[c]($t1) at ./sources/coin.move:112:5+1
    assume {:print "$track_local(14,8,1):", $t1} $t1 == $t1;

    // ($t4, $t5) := unpack coin::Coin<#0>($t1) at ./sources/coin.move:113:13+20
    assume {:print "$at(8,3634,3654)"} true;
    $t4 := $id#$2_coin_Coin'#0'($t1);
    $t5 := $balance#$2_coin_Coin'#0'($t1);

    // trace_local[balance]($t5) at ./sources/coin.move:113:24+7
    assume {:print "$track_local(14,8,2):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/coin.move:113:20+2
    assume {:print "$track_local(14,8,3):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t6 at ./sources/coin.move:114:9+18
    assume {:print "$at(8,3668,3686)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(8,3668,3686)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,8):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:115:23+17
    assume {:print "$at(8,3710,3727)"} true;
    $t7 := $ChildMutation($t0, 1, $balance#$2_coin_Coin'#0'($Dereference($t0)));

    // $t8 := balance::join<#0>($t7, $t5) on_abort goto L2 with $t6 at ./sources/coin.move:115:9+41
    call $t8,$t7 := $2_balance_join'#0'($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,3696,3737)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,8):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).balance (balance::Balance<#0>)]($t7) at ./sources/coin.move:115:9+41
    $t0 := $UpdateMutation($t0, $Update'$2_coin_Coin'#0''_balance($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./sources/coin.move:115:9+41
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,8,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // destroy($t8) at ./sources/coin.move:115:9+41

    // trace_local[self]($t0) at ./sources/coin.move:115:50+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,8,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // label L1 at ./sources/coin.move:116:5+1
    assume {:print "$at(8,3743,3744)"} true;
L1:

    // return () at ./sources/coin.move:116:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/coin.move:116:5+1
L2:

    // abort($t6) at ./sources/coin.move:116:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun coin::split<#0> [baseline] at ./sources/coin.move:219:5+223
procedure {:inline 1} $2_coin_split'#0'(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_coin_Coin'#0'), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $Mutation ($2_balance_Balance'#0');
    var $t4: $2_coin_Coin'#0';
    var $t5: int;
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/coin.move:219:5+1
    assume {:print "$at(8,7368,7369)"} true;
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,15,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[split_amount]($t1) at ./sources/coin.move:219:5+1
    assume {:print "$track_local(14,15,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:219:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,15,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := borrow_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:221:18+17
    assume {:print "$at(8,7501,7518)"} true;
    $t3 := $ChildMutation($t0, 1, $balance#$2_coin_Coin'#0'($Dereference($t0)));

    // $t4 := coin::take<#0>($t3, $t1, $t2) on_abort goto L2 with $t5 at ./sources/coin.move:221:13+42
    call $t4,$t3,$t2 := $2_coin_take'#0'($t3, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,7496,7538)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,15):", $t5} $t5 == $t5;
        goto L2;
    }

    // write_back[Reference($t0).balance (balance::Balance<#0>)]($t3) at ./sources/coin.move:221:13+42
    $t0 := $UpdateMutation($t0, $Update'$2_coin_Coin'#0''_balance($Dereference($t0), $Dereference($t3)));

    // trace_local[self]($t0) at ./sources/coin.move:221:13+42
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,15,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // $t6 := read_ref($t2) at ./sources/coin.move:222:32+3
    assume {:print "$at(8,7571,7574)"} true;
    $t6 := $Dereference($t2);

    // $t7 := tx_context::sender($t6) on_abort goto L2 with $t5 at ./sources/coin.move:222:13+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(8,7552,7575)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,15):", $t5} $t5 == $t5;
        goto L2;
    }

    // transfer::transfer<coin::Coin<#0>>($t4, $t7) on_abort goto L2 with $t5 at ./sources/coin.move:220:9+121
    assume {:print "$at(8,7464,7585)"} true;
    call $2_transfer_transfer'$2_coin_Coin'#0''($t4, $t7);
    if ($abort_flag) {
        assume {:print "$at(8,7464,7585)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,15):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/coin.move:220:9+121
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,15,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:220:9+121
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,15,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:224:5+1
    assume {:print "$at(8,7590,7591)"} true;
L1:

    // return () at ./sources/coin.move:224:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/coin.move:224:5+1
L2:

    // abort($t5) at ./sources/coin.move:224:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::split [verification] at ./sources/coin.move:219:5+223
procedure {:timeLimit 40} $2_coin_split$verify(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_coin_Coin'#0'), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $Mutation ($2_balance_Balance'#0');
    var $t4: $2_coin_Coin'#0';
    var $t5: int;
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:219:5+1
    assume {:print "$at(8,7368,7369)"} true;
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:219:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/coin.move:219:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/coin.move:219:5+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,15,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[split_amount]($t1) at ./sources/coin.move:219:5+1
    assume {:print "$track_local(14,15,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:219:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,15,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := borrow_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:221:18+17
    assume {:print "$at(8,7501,7518)"} true;
    $t3 := $ChildMutation($t0, 1, $balance#$2_coin_Coin'#0'($Dereference($t0)));

    // $t4 := coin::take<#0>($t3, $t1, $t2) on_abort goto L2 with $t5 at ./sources/coin.move:221:13+42
    call $t4,$t3,$t2 := $2_coin_take'#0'($t3, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,7496,7538)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,15):", $t5} $t5 == $t5;
        goto L2;
    }

    // write_back[Reference($t0).balance (balance::Balance<#0>)]($t3) at ./sources/coin.move:221:13+42
    $t0 := $UpdateMutation($t0, $Update'$2_coin_Coin'#0''_balance($Dereference($t0), $Dereference($t3)));

    // trace_local[self]($t0) at ./sources/coin.move:221:13+42
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,15,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // $t6 := read_ref($t2) at ./sources/coin.move:222:32+3
    assume {:print "$at(8,7571,7574)"} true;
    $t6 := $Dereference($t2);

    // $t7 := tx_context::sender($t6) on_abort goto L2 with $t5 at ./sources/coin.move:222:13+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(8,7552,7575)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,15):", $t5} $t5 == $t5;
        goto L2;
    }

    // transfer::transfer<coin::Coin<#0>>($t4, $t7) on_abort goto L2 with $t5 at ./sources/coin.move:220:9+121
    assume {:print "$at(8,7464,7585)"} true;
    call $2_transfer_transfer'$2_coin_Coin'#0''($t4, $t7);
    if ($abort_flag) {
        assume {:print "$at(8,7464,7585)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,15):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/coin.move:220:9+121
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,15,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:220:9+121
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,15,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:224:5+1
    assume {:print "$at(8,7590,7591)"} true;
L1:

    // return () at ./sources/coin.move:224:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/coin.move:224:5+1
L2:

    // abort($t5) at ./sources/coin.move:224:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::supply [verification] at ./sources/coin.move:44:5+102
procedure {:timeLimit 40} $2_coin_supply$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0')) returns ($ret0: $2_balance_Supply'#0', $ret1: $Mutation ($2_coin_TreasuryCap'#0'))
{
    // declare local variables
    var $t1: $2_balance_Supply'#0';
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:44:5+1
    assume {:print "$at(8,1407,1408)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // trace_local[treasury]($t0) at ./sources/coin.move:44:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,18,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // $t1 := get_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:45:9+22
    assume {:print "$at(8,1481,1503)"} true;
    $t1 := $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0));

    // trace_return[0]($t1) at ./sources/coin.move:45:9+22
    assume {:print "$track_return(14,18,0):", $t1} $t1 == $t1;

    // trace_local[treasury]($t0) at ./sources/coin.move:45:9+22
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,18,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // label L1 at ./sources/coin.move:46:5+1
    assume {:print "$at(8,1508,1509)"} true;
L1:

    // return $t1 at ./sources/coin.move:46:5+1
    $ret0 := $t1;
    $ret1 := $t0;
    return;

}

// fun coin::zero [verification] at ./sources/coin.move:142:5+120
procedure {:timeLimit 40} $2_coin_zero$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: int;
    var $t3: $2_balance_Balance'#0';
    var $t4: $2_coin_Coin'#0';
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:142:5+1
    assume {:print "$at(8,4567,4568)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/coin.move:142:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(14,27,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := object::new($t0) on_abort goto L2 with $t2 at ./sources/coin.move:143:20+16
    assume {:print "$at(8,4637,4653)"} true;
    call $t1,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(8,4637,4653)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(14,27):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := balance::zero<#0>() on_abort goto L2 with $t2 at ./sources/coin.move:143:47+15
    call $t3 := $2_balance_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(8,4664,4679)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(14,27):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := pack coin::Coin<#0>($t1, $t3) at ./sources/coin.move:143:9+55
    $t4 := $2_coin_Coin'#0'($t1, $t3);

    // trace_return[0]($t4) at ./sources/coin.move:143:9+55
    assume {:print "$track_return(14,27,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t0) at ./sources/coin.move:143:9+55
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(14,27,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:144:5+1
    assume {:print "$at(8,4686,4687)"} true;
L1:

    // return $t4 at ./sources/coin.move:144:5+1
    $ret0 := $t4;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/coin.move:144:5+1
L2:

    // abort($t2) at ./sources/coin.move:144:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun coin::balance_mut [verification] at ./sources/coin.move:66:5+96
procedure {:timeLimit 40} $2_coin_balance_mut$verify(_$t0: $Mutation ($2_coin_Coin'#0')) returns ($ret0: $Mutation ($2_balance_Balance'#0'), $ret1: $Mutation ($2_coin_Coin'#0'))
{
    // declare local variables
    var $t1: $Mutation ($2_balance_Balance'#0');
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:66:5+1
    assume {:print "$at(8,2091,2092)"} true;
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // trace_local[coin]($t0) at ./sources/coin.move:66:5+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,1,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // $t1 := borrow_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:67:9+17
    assume {:print "$at(8,2164,2181)"} true;
    $t1 := $ChildMutation($t0, 1, $balance#$2_coin_Coin'#0'($Dereference($t0)));

    // trace_return[0]($t1) at ./sources/coin.move:67:9+17
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t1);
    assume {:print "$track_return(14,1,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[coin]($t0) at ./sources/coin.move:67:9+17
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,1,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[coin]($t0) at ./sources/coin.move:67:9+17
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,1,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // label L1 at ./sources/coin.move:68:5+1
    assume {:print "$at(8,2186,2187)"} true;
L1:

    // return $t1 at ./sources/coin.move:68:5+1
    $ret0 := $t1;
    $ret1 := $t0;
    return;

}

// fun coin::burn<#0> [baseline] at ./sources/coin.move:184:5+200
procedure {:inline 1} $2_coin_burn'#0'(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: $2_coin_Coin'#0') returns ($ret0: int, $ret1: $Mutation ($2_coin_TreasuryCap'#0'))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: $2_object_UID;
    var $t4: $2_object_UID;
    var $t5: $2_balance_Balance'#0';
    var $t6: int;
    var $t7: $Mutation ($2_balance_Supply'#0');
    var $t8: int;
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t7));

    // bytecode translation starts here
    // trace_local[cap]($t0) at ./sources/coin.move:184:5+1
    assume {:print "$at(8,6052,6053)"} true;
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,2,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[c]($t1) at ./sources/coin.move:184:5+1
    assume {:print "$track_local(14,2,1):", $t1} $t1 == $t1;

    // ($t4, $t5) := unpack coin::Coin<#0>($t1) at ./sources/coin.move:185:13+20
    assume {:print "$at(8,6128,6148)"} true;
    $t4 := $id#$2_coin_Coin'#0'($t1);
    $t5 := $balance#$2_coin_Coin'#0'($t1);

    // trace_local[balance]($t5) at ./sources/coin.move:185:24+7
    assume {:print "$track_local(14,2,2):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/coin.move:185:20+2
    assume {:print "$track_local(14,2,3):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t6 at ./sources/coin.move:186:9+18
    assume {:print "$at(8,6162,6180)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(8,6162,6180)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:187:34+21
    assume {:print "$at(8,6215,6236)"} true;
    $t7 := $ChildMutation($t0, 1, $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0)));

    // $t8 := balance::decrease_supply<#0>($t7, $t5) on_abort goto L2 with $t6 at ./sources/coin.move:187:9+56
    call $t8,$t7 := $2_balance_decrease_supply'#0'($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,6190,6246)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).total_supply (balance::Supply<#0>)]($t7) at ./sources/coin.move:187:9+56
    $t0 := $UpdateMutation($t0, $Update'$2_coin_TreasuryCap'#0''_total_supply($Dereference($t0), $Dereference($t7)));

    // trace_local[cap]($t0) at ./sources/coin.move:187:9+56
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,2,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_return[0]($t8) at ./sources/coin.move:187:9+56
    assume {:print "$track_return(14,2,0):", $t8} $t8 == $t8;

    // trace_local[cap]($t0) at ./sources/coin.move:187:9+56
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,2,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // label L1 at ./sources/coin.move:188:5+1
    assume {:print "$at(8,6251,6252)"} true;
L1:

    // return $t8 at ./sources/coin.move:188:5+1
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/coin.move:188:5+1
L2:

    // abort($t6) at ./sources/coin.move:188:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun coin::burn [verification] at ./sources/coin.move:184:5+200
procedure {:timeLimit 40} $2_coin_burn$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: $2_coin_Coin'#0') returns ($ret0: int, $ret1: $Mutation ($2_coin_TreasuryCap'#0'))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: $2_object_UID;
    var $t4: $2_object_UID;
    var $t5: $2_balance_Balance'#0';
    var $t6: int;
    var $t7: $Mutation ($2_balance_Supply'#0');
    var $t8: int;
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t7));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:184:5+1
    assume {:print "$at(8,6052,6053)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:184:5+1
    assume $IsValid'$2_coin_Coin'#0''($t1);

    // trace_local[cap]($t0) at ./sources/coin.move:184:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,2,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[c]($t1) at ./sources/coin.move:184:5+1
    assume {:print "$track_local(14,2,1):", $t1} $t1 == $t1;

    // ($t4, $t5) := unpack coin::Coin<#0>($t1) at ./sources/coin.move:185:13+20
    assume {:print "$at(8,6128,6148)"} true;
    $t4 := $id#$2_coin_Coin'#0'($t1);
    $t5 := $balance#$2_coin_Coin'#0'($t1);

    // trace_local[balance]($t5) at ./sources/coin.move:185:24+7
    assume {:print "$track_local(14,2,2):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/coin.move:185:20+2
    assume {:print "$track_local(14,2,3):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t6 at ./sources/coin.move:186:9+18
    assume {:print "$at(8,6162,6180)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(8,6162,6180)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := borrow_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:187:34+21
    assume {:print "$at(8,6215,6236)"} true;
    $t7 := $ChildMutation($t0, 1, $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0)));

    // $t8 := balance::decrease_supply<#0>($t7, $t5) on_abort goto L2 with $t6 at ./sources/coin.move:187:9+56
    call $t8,$t7 := $2_balance_decrease_supply'#0'($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,6190,6246)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).total_supply (balance::Supply<#0>)]($t7) at ./sources/coin.move:187:9+56
    $t0 := $UpdateMutation($t0, $Update'$2_coin_TreasuryCap'#0''_total_supply($Dereference($t0), $Dereference($t7)));

    // trace_local[cap]($t0) at ./sources/coin.move:187:9+56
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,2,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_return[0]($t8) at ./sources/coin.move:187:9+56
    assume {:print "$track_return(14,2,0):", $t8} $t8 == $t8;

    // trace_local[cap]($t0) at ./sources/coin.move:187:9+56
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,2,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // label L1 at ./sources/coin.move:188:5+1
    assume {:print "$at(8,6251,6252)"} true;
L1:

    // return $t8 at ./sources/coin.move:188:5+1
    $ret0 := $t8;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/coin.move:188:5+1
L2:

    // abort($t6) at ./sources/coin.move:188:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun coin::burn_ [verification] at ./sources/coin.move:205:5+95
procedure {:timeLimit 40} $2_coin_burn_$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: $2_coin_Coin'#0') returns ($ret0: $Mutation ($2_coin_TreasuryCap'#0'))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: $2_coin_Coin'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:205:5+1
    assume {:print "$at(8,6804,6805)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:205:5+1
    assume $IsValid'$2_coin_Coin'#0''($t1);

    // trace_local[c]($t0) at ./sources/coin.move:205:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,3,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[coin]($t1) at ./sources/coin.move:205:5+1
    assume {:print "$track_local(14,3,1):", $t1} $t1 == $t1;

    // $t2 := coin::burn<#0>($t0, $t1) on_abort goto L2 with $t3 at ./sources/coin.move:206:9+13
    assume {:print "$at(8,6879,6892)"} true;
    call $t2,$t0 := $2_coin_burn'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,6879,6892)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // destroy($t2) at ./sources/coin.move:206:9+13

    // trace_local[c]($t0) at ./sources/coin.move:206:22+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,3,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // label L1 at ./sources/coin.move:207:5+1
    assume {:print "$at(8,6898,6899)"} true;
L1:

    // return () at ./sources/coin.move:207:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/coin.move:207:5+1
L2:

    // abort($t3) at ./sources/coin.move:207:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::create_currency [verification] at ./sources/coin.move:152:5+238
procedure {:timeLimit 40} $2_coin_create_currency$verify(_$t0: #0, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_TreasuryCap'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_balance_Supply'#0';
    var $t5: $2_coin_TreasuryCap'#0';
    var $t0: #0;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'#0': #0;
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:152:5+1
    assume {:print "$at(8,5042,5043)"} true;
    assume $IsValid'#0'($t0);

    // assume WellFormed($t1) at ./sources/coin.move:152:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[witness]($t0) at ./sources/coin.move:152:5+1
    assume {:print "$track_local(14,4,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/coin.move:152:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,4,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/coin.move:157:17+16
    assume {:print "$at(8,5189,5205)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(8,5189,5205)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := balance::create_supply<#0>($t0) on_abort goto L2 with $t3 at ./sources/coin.move:158:27+31
    assume {:print "$at(8,5233,5264)"} true;
    call $t4 := $2_balance_create_supply'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(8,5233,5264)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := pack coin::TreasuryCap<#0>($t2, $t4) at ./sources/coin.move:156:9+115
    assume {:print "$at(8,5159,5274)"} true;
    $t5 := $2_coin_TreasuryCap'#0'($t2, $t4);

    // trace_return[0]($t5) at ./sources/coin.move:156:9+115
    assume {:print "$track_return(14,4,0):", $t5} $t5 == $t5;

    // trace_local[ctx]($t1) at ./sources/coin.move:156:9+115
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,4,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:160:5+1
    assume {:print "$at(8,5279,5280)"} true;
L1:

    // return $t5 at ./sources/coin.move:160:5+1
    $ret0 := $t5;
    $ret1 := $t1;
    return;

    // label L2 at ./sources/coin.move:160:5+1
L2:

    // abort($t3) at ./sources/coin.move:160:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::from_balance<sui::SUI> [baseline] at ./sources/coin.move:71:5+132
procedure {:inline 1} $2_coin_from_balance'$2_sui_SUI'(_$t0: $2_balance_Balance'$2_sui_SUI', _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'$2_sui_SUI', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_coin_Coin'$2_sui_SUI';
    var $t0: $2_balance_Balance'$2_sui_SUI';
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/coin.move:71:5+1
    assume {:print "$at(8,2253,2254)"} true;
    assume {:print "$track_local(14,6,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/coin.move:71:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,6,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/coin.move:72:20+16
    assume {:print "$at(8,2352,2368)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2352,2368)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack coin::Coin<#0>($t2, $t0) at ./sources/coin.move:72:9+38
    $t4 := $2_coin_Coin'$2_sui_SUI'($t2, $t0);

    // trace_return[0]($t4) at ./sources/coin.move:72:9+38
    assume {:print "$track_return(14,6,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t1) at ./sources/coin.move:72:9+38
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,6,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:73:5+1
    assume {:print "$at(8,2384,2385)"} true;
L1:

    // return $t4 at ./sources/coin.move:73:5+1
    $ret0 := $t4;
    $ret1 := $t1;
    return;

    // label L2 at ./sources/coin.move:73:5+1
L2:

    // abort($t3) at ./sources/coin.move:73:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::from_balance<#0> [baseline] at ./sources/coin.move:71:5+132
procedure {:inline 1} $2_coin_from_balance'#0'(_$t0: $2_balance_Balance'#0', _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_coin_Coin'#0';
    var $t0: $2_balance_Balance'#0';
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/coin.move:71:5+1
    assume {:print "$at(8,2253,2254)"} true;
    assume {:print "$track_local(14,6,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/coin.move:71:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,6,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/coin.move:72:20+16
    assume {:print "$at(8,2352,2368)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2352,2368)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack coin::Coin<#0>($t2, $t0) at ./sources/coin.move:72:9+38
    $t4 := $2_coin_Coin'#0'($t2, $t0);

    // trace_return[0]($t4) at ./sources/coin.move:72:9+38
    assume {:print "$track_return(14,6,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t1) at ./sources/coin.move:72:9+38
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,6,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:73:5+1
    assume {:print "$at(8,2384,2385)"} true;
L1:

    // return $t4 at ./sources/coin.move:73:5+1
    $ret0 := $t4;
    $ret1 := $t1;
    return;

    // label L2 at ./sources/coin.move:73:5+1
L2:

    // abort($t3) at ./sources/coin.move:73:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::from_balance [verification] at ./sources/coin.move:71:5+132
procedure {:timeLimit 40} $2_coin_from_balance$verify(_$t0: $2_balance_Balance'#0', _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_coin_Coin'#0';
    var $t0: $2_balance_Balance'#0';
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:71:5+1
    assume {:print "$at(8,2253,2254)"} true;
    assume $IsValid'$2_balance_Balance'#0''($t0);

    // assume WellFormed($t1) at ./sources/coin.move:71:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[balance]($t0) at ./sources/coin.move:71:5+1
    assume {:print "$track_local(14,6,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/coin.move:71:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,6,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/coin.move:72:20+16
    assume {:print "$at(8,2352,2368)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(8,2352,2368)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack coin::Coin<#0>($t2, $t0) at ./sources/coin.move:72:9+38
    $t4 := $2_coin_Coin'#0'($t2, $t0);

    // trace_return[0]($t4) at ./sources/coin.move:72:9+38
    assume {:print "$track_return(14,6,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t1) at ./sources/coin.move:72:9+38
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,6,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:73:5+1
    assume {:print "$at(8,2384,2385)"} true;
L1:

    // return $t4 at ./sources/coin.move:73:5+1
    $ret0 := $t4;
    $ret1 := $t1;
    return;

    // label L2 at ./sources/coin.move:73:5+1
L2:

    // abort($t3) at ./sources/coin.move:73:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::into_balance<sui::SUI> [baseline] at ./sources/coin.move:76:5+146
procedure {:inline 1} $2_coin_into_balance'$2_sui_SUI'(_$t0: $2_coin_Coin'$2_sui_SUI') returns ($ret0: $2_balance_Balance'$2_sui_SUI')
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $2_object_UID;
    var $t3: $2_object_UID;
    var $t4: $2_balance_Balance'$2_sui_SUI';
    var $t5: int;
    var $t0: $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at ./sources/coin.move:76:5+1
    assume {:print "$at(8,2445,2446)"} true;
    assume {:print "$track_local(14,7,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack coin::Coin<#0>($t0) at ./sources/coin.move:77:13+20
    assume {:print "$at(8,2513,2533)"} true;
    $t3 := $id#$2_coin_Coin'$2_sui_SUI'($t0);
    $t4 := $balance#$2_coin_Coin'$2_sui_SUI'($t0);

    // trace_local[balance]($t4) at ./sources/coin.move:77:24+7
    assume {:print "$track_local(14,7,1):", $t4} $t4 == $t4;

    // trace_local[id]($t3) at ./sources/coin.move:77:20+2
    assume {:print "$track_local(14,7,2):", $t3} $t3 == $t3;

    // object::delete($t3) on_abort goto L2 with $t5 at ./sources/coin.move:78:9+18
    assume {:print "$at(8,2550,2568)"} true;
    call $2_object_delete($t3);
    if ($abort_flag) {
        assume {:print "$at(8,2550,2568)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/coin.move:79:9+7
    assume {:print "$at(8,2578,2585)"} true;
    assume {:print "$track_return(14,7,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/coin.move:80:5+1
    assume {:print "$at(8,2590,2591)"} true;
L1:

    // return $t4 at ./sources/coin.move:80:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/coin.move:80:5+1
L2:

    // abort($t5) at ./sources/coin.move:80:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::into_balance<#0> [baseline] at ./sources/coin.move:76:5+146
procedure {:inline 1} $2_coin_into_balance'#0'(_$t0: $2_coin_Coin'#0') returns ($ret0: $2_balance_Balance'#0')
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t2: $2_object_UID;
    var $t3: $2_object_UID;
    var $t4: $2_balance_Balance'#0';
    var $t5: int;
    var $t0: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at ./sources/coin.move:76:5+1
    assume {:print "$at(8,2445,2446)"} true;
    assume {:print "$track_local(14,7,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack coin::Coin<#0>($t0) at ./sources/coin.move:77:13+20
    assume {:print "$at(8,2513,2533)"} true;
    $t3 := $id#$2_coin_Coin'#0'($t0);
    $t4 := $balance#$2_coin_Coin'#0'($t0);

    // trace_local[balance]($t4) at ./sources/coin.move:77:24+7
    assume {:print "$track_local(14,7,1):", $t4} $t4 == $t4;

    // trace_local[id]($t3) at ./sources/coin.move:77:20+2
    assume {:print "$track_local(14,7,2):", $t3} $t3 == $t3;

    // object::delete($t3) on_abort goto L2 with $t5 at ./sources/coin.move:78:9+18
    assume {:print "$at(8,2550,2568)"} true;
    call $2_object_delete($t3);
    if ($abort_flag) {
        assume {:print "$at(8,2550,2568)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/coin.move:79:9+7
    assume {:print "$at(8,2578,2585)"} true;
    assume {:print "$track_return(14,7,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/coin.move:80:5+1
    assume {:print "$at(8,2590,2591)"} true;
L1:

    // return $t4 at ./sources/coin.move:80:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/coin.move:80:5+1
L2:

    // abort($t5) at ./sources/coin.move:80:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::into_balance [verification] at ./sources/coin.move:76:5+146
procedure {:timeLimit 40} $2_coin_into_balance$verify(_$t0: $2_coin_Coin'#0') returns ($ret0: $2_balance_Balance'#0')
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t2: $2_object_UID;
    var $t3: $2_object_UID;
    var $t4: $2_balance_Balance'#0';
    var $t5: int;
    var $t0: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:76:5+1
    assume {:print "$at(8,2445,2446)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // trace_local[coin]($t0) at ./sources/coin.move:76:5+1
    assume {:print "$track_local(14,7,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack coin::Coin<#0>($t0) at ./sources/coin.move:77:13+20
    assume {:print "$at(8,2513,2533)"} true;
    $t3 := $id#$2_coin_Coin'#0'($t0);
    $t4 := $balance#$2_coin_Coin'#0'($t0);

    // trace_local[balance]($t4) at ./sources/coin.move:77:24+7
    assume {:print "$track_local(14,7,1):", $t4} $t4 == $t4;

    // trace_local[id]($t3) at ./sources/coin.move:77:20+2
    assume {:print "$track_local(14,7,2):", $t3} $t3 == $t3;

    // object::delete($t3) on_abort goto L2 with $t5 at ./sources/coin.move:78:9+18
    assume {:print "$at(8,2550,2568)"} true;
    call $2_object_delete($t3);
    if ($abort_flag) {
        assume {:print "$at(8,2550,2568)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/coin.move:79:9+7
    assume {:print "$at(8,2578,2585)"} true;
    assume {:print "$track_return(14,7,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/coin.move:80:5+1
    assume {:print "$at(8,2590,2591)"} true;
L1:

    // return $t4 at ./sources/coin.move:80:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/coin.move:80:5+1
L2:

    // abort($t5) at ./sources/coin.move:80:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::join_vec [verification] at ./sources/coin.move:119:5+370
procedure {:timeLimit 40} $2_coin_join_vec$verify(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: Vec ($2_coin_Coin'#0')) returns ($ret0: $Mutation ($2_coin_Coin'#0'))
{
    // declare local variables
    var $t2: $2_coin_Coin'#0';
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: Vec ($2_coin_Coin'#0');
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $2_coin_Coin'#0';
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation (Vec ($2_coin_Coin'#0'));
    var $t14: Vec ($2_coin_Coin'#0');
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: Vec ($2_coin_Coin'#0');
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'u64': int;
    var $temp_0'vec'$2_coin_Coin'#0''': Vec ($2_coin_Coin'#0');
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t13));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:119:5+1
    assume {:print "$at(8,3797,3798)"} true;
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:119:5+1
    assume $IsValid'vec'$2_coin_Coin'#0'''($t1);

    // trace_local[self]($t0) at ./sources/coin.move:119:5+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,9,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[coins]($t1) at ./sources/coin.move:119:5+1
    assume {:print "$track_local(14,9,1):", $t1} $t1 == $t1;

    // $t5 := 0 at ./sources/coin.move:120:17+1
    assume {:print "$at(8,3888,3889)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // trace_local[i]($t5) at ./sources/coin.move:120:13+1
    assume {:print "$track_local(14,9,3):", $t5} $t5 == $t5;

    // $t6 := copy($t1) at ./sources/coin.move:121:34+6
    assume {:print "$at(8,3924,3930)"} true;
    $t6 := $t1;

    // $t7 := vector::length<coin::Coin<#0>>($t6) on_abort goto L6 with $t8 at ./sources/coin.move:121:19+22
    call $t7 := $1_vector_length'$2_coin_Coin'#0''($t6);
    if ($abort_flag) {
        assume {:print "$at(8,3909,3931)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(14,9):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_local[len]($t7) at ./sources/coin.move:121:13+3
    assume {:print "$track_local(14,9,4):", $t7} $t7 == $t7;

    // label L3 at ./sources/coin.move:122:16+1
    assume {:print "$at(8,3948,3949)"} true;
L3:

    // havoc[val]($t1) at ./sources/coin.move:122:16+1
    havoc $t1;
    assume $IsValid'vec'$2_coin_Coin'#0'''($t1);

    // havoc[val]($t5) at ./sources/coin.move:122:16+1
    havoc $t5;
    assume $IsValid'u64'($t5);

    // havoc[val]($t9) at ./sources/coin.move:122:16+1
    havoc $t9;
    assume $IsValid'bool'($t9);

    // havoc[val]($t10) at ./sources/coin.move:122:16+1
    havoc $t10;
    assume $IsValid'$2_coin_Coin'#0''($t10);

    // havoc[val]($t11) at ./sources/coin.move:122:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/coin.move:122:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[mut]($t0) at ./sources/coin.move:122:16+1
    havoc $temp_0'$2_coin_Coin'#0'';
    $t0 := $UpdateMutation($t0, $temp_0'$2_coin_Coin'#0'');
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // havoc[mut_all]($t13) at ./sources/coin.move:122:16+1
    havoc $t13;
    assume $IsValid'vec'$2_coin_Coin'#0'''($Dereference($t13));

    // trace_local[self]($t0) at ./sources/coin.move:122:16+1
    assume {:print "$info(): enter loop, variable(s) self, coins, i havocked and reassigned"} true;
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,9,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[coins]($t1) at ./sources/coin.move:122:16+1
    assume {:print "$track_local(14,9,1):", $t1} $t1 == $t1;

    // trace_local[i]($t5) at ./sources/coin.move:122:16+1
    assume {:print "$track_local(14,9,3):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at ./sources/coin.move:122:16+1
    assume !$abort_flag;

    // $t9 := <($t5, $t7) at ./sources/coin.move:122:18+1
    call $t9 := $Lt($t5, $t7);

    // if ($t9) goto L0 else goto L2 at ./sources/coin.move:122:9+133
    if ($t9) { goto L0; } else { goto L2; }

    // label L0 at ./sources/coin.move:123:39+10
    assume {:print "$at(8,3997,4007)"} true;
L0:

    // $t13 := borrow_local($t1) at ./sources/coin.move:123:39+10
    $t13 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t10 := vector::remove<coin::Coin<#0>>($t13, $t5) on_abort goto L6 with $t8 at ./sources/coin.move:123:24+29
    call $t10,$t13 := $1_vector_remove'$2_coin_Coin'#0''($t13, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,3982,4011)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(14,9):", $t8} $t8 == $t8;
        goto L6;
    }

    // write_back[LocalRoot($t1)@]($t13) at ./sources/coin.move:123:24+29
    $t1 := $Dereference($t13);

    // trace_local[coins]($t1) at ./sources/coin.move:123:24+29
    assume {:print "$track_local(14,9,1):", $t1} $t1 == $t1;

    // trace_local[coin]($t10) at ./sources/coin.move:123:17+4
    assume {:print "$track_local(14,9,2):", $t10} $t10 == $t10;

    // coin::join<#0>($t0, $t10) on_abort goto L6 with $t8 at ./sources/coin.move:124:13+16
    assume {:print "$at(8,4025,4041)"} true;
    call $t0 := $2_coin_join'#0'($t0, $t10);
    if ($abort_flag) {
        assume {:print "$at(8,4025,4041)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(14,9):", $t8} $t8 == $t8;
        goto L6;
    }

    // $t11 := 1 at ./sources/coin.move:125:21+1
    assume {:print "$at(8,4063,4064)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t5, $t11) on_abort goto L6 with $t8 at ./sources/coin.move:125:19+1
    call $t12 := $AddU64($t5, $t11);
    if ($abort_flag) {
        assume {:print "$at(8,4061,4062)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(14,9):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_local[i]($t12) at ./sources/coin.move:125:13+1
    assume {:print "$track_local(14,9,3):", $t12} $t12 == $t12;

    // goto L4 at ./sources/coin.move:125:13+9
    goto L4;

    // label L2 at ./sources/coin.move:128:9+28
    assume {:print "$at(8,4133,4161)"} true;
L2:

    // destroy($t0) at ./sources/coin.move:128:9+28

    // $t14 := move($t1) at ./sources/coin.move:128:31+5
    $t14 := $t1;

    // vector::destroy_empty<coin::Coin<#0>>($t14) on_abort goto L6 with $t8 at ./sources/coin.move:128:9+28
    call $1_vector_destroy_empty'$2_coin_Coin'#0''($t14);
    if ($abort_flag) {
        assume {:print "$at(8,4133,4161)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(14,9):", $t8} $t8 == $t8;
        goto L6;
    }

    // trace_local[self]($t0) at ./sources/coin.move:128:9+28
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,9,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // goto L5 at ./sources/coin.move:128:9+28
    goto L5;

    // label L4 at ./sources/coin.move:128:9+28
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/coin.move:128:9+28
    assume false;
    return;

    // label L5 at ./sources/coin.move:129:5+1
    assume {:print "$at(8,4166,4167)"} true;
L5:

    // return () at ./sources/coin.move:129:5+1
    $ret0 := $t0;
    return;

    // label L6 at ./sources/coin.move:129:5+1
L6:

    // abort($t8) at ./sources/coin.move:129:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun coin::keep [verification] at ./sources/coin.move:106:5+100
procedure {:timeLimit 40} $2_coin_keep$verify(_$t0: $2_coin_Coin'#0', _$t1: $2_tx_context_TxContext) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: $2_coin_Coin'#0';
    var $t1: $2_tx_context_TxContext;
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:106:5+1
    assume {:print "$at(8,3348,3349)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // assume WellFormed($t1) at ./sources/coin.move:106:5+1
    assume $IsValid'$2_tx_context_TxContext'($t1);

    // trace_local[c]($t0) at ./sources/coin.move:106:5+1
    assume {:print "$track_local(14,10,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/coin.move:106:5+1
    assume {:print "$track_local(14,10,1):", $t1} $t1 == $t1;

    // $t2 := tx_context::sender($t1) on_abort goto L2 with $t3 at ./sources/coin.move:107:21+23
    assume {:print "$at(8,3418,3441)"} true;
    call $t2 := $2_tx_context_sender($t1);
    if ($abort_flag) {
        assume {:print "$at(8,3418,3441)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // coin::transfer<#0>($t0, $t2) on_abort goto L2 with $t3 at ./sources/coin.move:107:9+36
    call $2_coin_transfer'#0'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,3406,3442)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at ./sources/coin.move:108:5+1
    assume {:print "$at(8,3447,3448)"} true;
L1:

    // return () at ./sources/coin.move:108:5+1
    return;

    // label L2 at ./sources/coin.move:108:5+1
L2:

    // abort($t3) at ./sources/coin.move:108:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::mint<#0> [baseline] at ./sources/coin.move:164:5+244
procedure {:inline 1} $2_coin_mint'#0'(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_coin_TreasuryCap'#0'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: int;
    var $t5: $Mutation ($2_balance_Supply'#0');
    var $t6: $2_balance_Balance'#0';
    var $t7: $2_coin_Coin'#0';
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));

    // bytecode translation starts here
    // trace_local[cap]($t0) at ./sources/coin.move:164:5+1
    assume {:print "$at(8,5383,5384)"} true;
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,11,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[value]($t1) at ./sources/coin.move:164:5+1
    assume {:print "$track_local(14,11,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:164:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,11,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := object::new($t2) on_abort goto L2 with $t4 at ./sources/coin.move:168:17+16
    assume {:print "$at(8,5518,5534)"} true;
    call $t3,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,5518,5534)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:169:47+21
    assume {:print "$at(8,5582,5603)"} true;
    $t5 := $ChildMutation($t0, 1, $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0)));

    // $t6 := balance::increase_supply<#0>($t5, $t1) on_abort goto L2 with $t4 at ./sources/coin.move:169:22+54
    call $t6,$t5 := $2_balance_increase_supply'#0'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5557,5611)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // write_back[Reference($t0).total_supply (balance::Supply<#0>)]($t5) at ./sources/coin.move:169:22+54
    $t0 := $UpdateMutation($t0, $Update'$2_coin_TreasuryCap'#0''_total_supply($Dereference($t0), $Dereference($t5)));

    // trace_local[cap]($t0) at ./sources/coin.move:169:22+54
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,11,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // $t7 := pack coin::Coin<#0>($t3, $t6) at ./sources/coin.move:167:9+126
    assume {:print "$at(8,5495,5621)"} true;
    $t7 := $2_coin_Coin'#0'($t3, $t6);

    // trace_return[0]($t7) at ./sources/coin.move:167:9+126
    assume {:print "$track_return(14,11,0):", $t7} $t7 == $t7;

    // trace_local[cap]($t0) at ./sources/coin.move:167:9+126
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,11,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:167:9+126
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,11,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:171:5+1
    assume {:print "$at(8,5626,5627)"} true;
L1:

    // return $t7 at ./sources/coin.move:171:5+1
    $ret0 := $t7;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/coin.move:171:5+1
L2:

    // abort($t4) at ./sources/coin.move:171:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun coin::mint [verification] at ./sources/coin.move:164:5+244
procedure {:timeLimit 40} $2_coin_mint$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_coin_TreasuryCap'#0'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: int;
    var $t5: $Mutation ($2_balance_Supply'#0');
    var $t6: $2_balance_Balance'#0';
    var $t7: $2_coin_Coin'#0';
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:164:5+1
    assume {:print "$at(8,5383,5384)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:164:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/coin.move:164:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[cap]($t0) at ./sources/coin.move:164:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,11,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[value]($t1) at ./sources/coin.move:164:5+1
    assume {:print "$track_local(14,11,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:164:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,11,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := object::new($t2) on_abort goto L2 with $t4 at ./sources/coin.move:168:17+16
    assume {:print "$at(8,5518,5534)"} true;
    call $t3,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,5518,5534)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:169:47+21
    assume {:print "$at(8,5582,5603)"} true;
    $t5 := $ChildMutation($t0, 1, $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0)));

    // $t6 := balance::increase_supply<#0>($t5, $t1) on_abort goto L2 with $t4 at ./sources/coin.move:169:22+54
    call $t6,$t5 := $2_balance_increase_supply'#0'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5557,5611)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // write_back[Reference($t0).total_supply (balance::Supply<#0>)]($t5) at ./sources/coin.move:169:22+54
    $t0 := $UpdateMutation($t0, $Update'$2_coin_TreasuryCap'#0''_total_supply($Dereference($t0), $Dereference($t5)));

    // trace_local[cap]($t0) at ./sources/coin.move:169:22+54
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,11,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // $t7 := pack coin::Coin<#0>($t3, $t6) at ./sources/coin.move:167:9+126
    assume {:print "$at(8,5495,5621)"} true;
    $t7 := $2_coin_Coin'#0'($t3, $t6);

    // trace_return[0]($t7) at ./sources/coin.move:167:9+126
    assume {:print "$track_return(14,11,0):", $t7} $t7 == $t7;

    // trace_local[cap]($t0) at ./sources/coin.move:167:9+126
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,11,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:167:9+126
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,11,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:171:5+1
    assume {:print "$at(8,5626,5627)"} true;
L1:

    // return $t7 at ./sources/coin.move:171:5+1
    $ret0 := $t7;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/coin.move:171:5+1
L2:

    // abort($t4) at ./sources/coin.move:171:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun coin::mint_and_transfer [verification] at ./sources/coin.move:198:5+197
procedure {:timeLimit 40} $2_coin_mint_and_transfer$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: int, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_coin_TreasuryCap'#0'), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_coin_Coin'#0';
    var $t5: int;
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:198:5+1
    assume {:print "$at(8,6534,6535)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:198:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/coin.move:198:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at ./sources/coin.move:198:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[c]($t0) at ./sources/coin.move:198:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,12,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[amount]($t1) at ./sources/coin.move:198:5+1
    assume {:print "$track_local(14,12,1):", $t1} $t1 == $t1;

    // trace_local[recipient]($t2) at ./sources/coin.move:198:5+1
    assume {:print "$track_local(14,12,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/coin.move:198:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(14,12,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := coin::mint<#0>($t0, $t1, $t3) on_abort goto L2 with $t5 at ./sources/coin.move:201:28+20
    assume {:print "$at(8,6693,6713)"} true;
    call $t4,$t0,$t3 := $2_coin_mint'#0'($t0, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(8,6693,6713)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,12):", $t5} $t5 == $t5;
        goto L2;
    }

    // transfer::transfer<coin::Coin<#0>>($t4, $t2) on_abort goto L2 with $t5 at ./sources/coin.move:201:9+51
    call $2_transfer_transfer'$2_coin_Coin'#0''($t4, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,6674,6725)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,12):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[c]($t0) at ./sources/coin.move:201:9+51
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,12,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[ctx]($t3) at ./sources/coin.move:201:9+51
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(14,12,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:202:5+1
    assume {:print "$at(8,6730,6731)"} true;
L1:

    // return () at ./sources/coin.move:202:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/coin.move:202:5+1
L2:

    // abort($t5) at ./sources/coin.move:202:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::mint_balance [verification] at ./sources/coin.move:176:5+161
procedure {:timeLimit 40} $2_coin_mint_balance$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0'), _$t1: int) returns ($ret0: $2_balance_Balance'#0', $ret1: $Mutation ($2_coin_TreasuryCap'#0'))
{
    // declare local variables
    var $t2: $Mutation ($2_balance_Supply'#0');
    var $t3: $2_balance_Balance'#0';
    var $t4: int;
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $t1: int;
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:176:5+1
    assume {:print "$at(8,5796,5797)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:176:5+1
    assume $IsValid'u64'($t1);

    // trace_local[cap]($t0) at ./sources/coin.move:176:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,13,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[value]($t1) at ./sources/coin.move:176:5+1
    assume {:print "$track_local(14,13,1):", $t1} $t1 == $t1;

    // $t2 := borrow_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:179:34+21
    assume {:print "$at(8,5922,5943)"} true;
    $t2 := $ChildMutation($t0, 1, $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0)));

    // $t3 := balance::increase_supply<#0>($t2, $t1) on_abort goto L2 with $t4 at ./sources/coin.move:179:9+54
    call $t3,$t2 := $2_balance_increase_supply'#0'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,5897,5951)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // write_back[Reference($t0).total_supply (balance::Supply<#0>)]($t2) at ./sources/coin.move:179:9+54
    $t0 := $UpdateMutation($t0, $Update'$2_coin_TreasuryCap'#0''_total_supply($Dereference($t0), $Dereference($t2)));

    // trace_local[cap]($t0) at ./sources/coin.move:179:9+54
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,13,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_return[0]($t3) at ./sources/coin.move:179:9+54
    assume {:print "$track_return(14,13,0):", $t3} $t3 == $t3;

    // trace_local[cap]($t0) at ./sources/coin.move:179:9+54
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,13,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // label L1 at ./sources/coin.move:180:5+1
    assume {:print "$at(8,5956,5957)"} true;
L1:

    // return $t3 at ./sources/coin.move:180:5+1
    $ret0 := $t3;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/coin.move:180:5+1
L2:

    // abort($t4) at ./sources/coin.move:180:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun coin::put [verification] at ./sources/coin.move:94:5+118
procedure {:timeLimit 40} $2_coin_put$verify(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: $2_coin_Coin'#0') returns ($ret0: $Mutation ($2_balance_Balance'#0'))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: int;
    var $t4: int;
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: $2_coin_Coin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:94:5+1
    assume {:print "$at(8,2965,2966)"} true;
    assume $IsValid'$2_balance_Balance'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:94:5+1
    assume $IsValid'$2_coin_Coin'#0''($t1);

    // trace_local[balance]($t0) at ./sources/coin.move:94:5+1
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,14,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[coin]($t1) at ./sources/coin.move:94:5+1
    assume {:print "$track_local(14,14,1):", $t1} $t1 == $t1;

    // $t2 := coin::into_balance<#0>($t1) on_abort goto L2 with $t3 at ./sources/coin.move:95:32+18
    assume {:print "$at(8,3057,3075)"} true;
    call $t2 := $2_coin_into_balance'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,3057,3075)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := balance::join<#0>($t0, $t2) on_abort goto L2 with $t3 at ./sources/coin.move:95:9+42
    call $t4,$t0 := $2_balance_join'#0'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,3034,3076)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // destroy($t4) at ./sources/coin.move:95:9+42

    // trace_local[balance]($t0) at ./sources/coin.move:95:51+1
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,14,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // label L1 at ./sources/coin.move:96:5+1
    assume {:print "$at(8,3082,3083)"} true;
L1:

    // return () at ./sources/coin.move:96:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/coin.move:96:5+1
L2:

    // abort($t3) at ./sources/coin.move:96:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::split_and_transfer [verification] at ./sources/coin.move:211:5+204
procedure {:timeLimit 40} $2_coin_split_and_transfer$verify(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: int, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_coin_Coin'#0'), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $Mutation ($2_balance_Balance'#0');
    var $t5: $2_coin_Coin'#0';
    var $t6: int;
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:211:5+1
    assume {:print "$at(8,7032,7033)"} true;
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:211:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/coin.move:211:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at ./sources/coin.move:211:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[c]($t0) at ./sources/coin.move:211:5+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,16,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[amount]($t1) at ./sources/coin.move:211:5+1
    assume {:print "$track_local(14,16,1):", $t1} $t1 == $t1;

    // trace_local[recipient]($t2) at ./sources/coin.move:211:5+1
    assume {:print "$track_local(14,16,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/coin.move:211:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(14,16,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := borrow_field<coin::Coin<#0>>.balance($t0) at ./sources/coin.move:214:33+14
    assume {:print "$at(8,7190,7204)"} true;
    $t4 := $ChildMutation($t0, 1, $balance#$2_coin_Coin'#0'($Dereference($t0)));

    // $t5 := coin::take<#0>($t4, $t1, $t3) on_abort goto L2 with $t6 at ./sources/coin.move:214:28+33
    call $t5,$t4,$t3 := $2_coin_take'#0'($t4, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(8,7185,7218)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,16):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).balance (balance::Balance<#0>)]($t4) at ./sources/coin.move:214:28+33
    $t0 := $UpdateMutation($t0, $Update'$2_coin_Coin'#0''_balance($Dereference($t0), $Dereference($t4)));

    // trace_local[c]($t0) at ./sources/coin.move:214:28+33
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,16,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // transfer::transfer<coin::Coin<#0>>($t5, $t2) on_abort goto L2 with $t6 at ./sources/coin.move:214:9+64
    call $2_transfer_transfer'$2_coin_Coin'#0''($t5, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,7166,7230)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(14,16):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[c]($t0) at ./sources/coin.move:214:9+64
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,16,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[ctx]($t3) at ./sources/coin.move:214:9+64
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(14,16,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:215:5+1
    assume {:print "$at(8,7235,7236)"} true;
L1:

    // return () at ./sources/coin.move:215:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/coin.move:215:5+1
L2:

    // abort($t6) at ./sources/coin.move:215:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun coin::split_vec [verification] at ./sources/coin.move:228:5+301
procedure {:timeLimit 40} $2_coin_split_vec$verify(_$t0: $Mutation ($2_coin_Coin'#0'), _$t1: Vec (int), _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_coin_Coin'#0'), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t0: $Mutation ($2_coin_Coin'#0');
    var $t1: Vec (int);
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:228:5+1
    assume {:print "$at(8,7737,7738)"} true;
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:228:5+1
    assume $IsValid'vec'u64''($t1);

    // assume WellFormed($t2) at ./sources/coin.move:228:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/coin.move:228:5+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,17,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[split_amounts]($t1) at ./sources/coin.move:228:5+1
    assume {:print "$track_local(14,17,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:228:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,17,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := 0 at ./sources/coin.move:229:17+1
    assume {:print "$at(8,7854,7855)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // trace_local[i]($t5) at ./sources/coin.move:229:13+1
    assume {:print "$track_local(14,17,3):", $t5} $t5 == $t5;

    // $t6 := vector::length<u64>($t1) on_abort goto L6 with $t7 at ./sources/coin.move:230:19+30
    assume {:print "$at(8,7875,7905)"} true;
    call $t6 := $1_vector_length'u64'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,7875,7905)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(14,17):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[len]($t6) at ./sources/coin.move:230:13+3
    assume {:print "$track_local(14,17,4):", $t6} $t6 == $t6;

    // label L3 at ./sources/coin.move:231:16+1
    assume {:print "$at(8,7922,7923)"} true;
L3:

    // havoc[val]($t5) at ./sources/coin.move:231:16+1
    havoc $t5;
    assume $IsValid'u64'($t5);

    // havoc[val]($t8) at ./sources/coin.move:231:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/coin.move:231:16+1
    havoc $t9;
    assume $IsValid'u64'($t9);

    // havoc[val]($t10) at ./sources/coin.move:231:16+1
    havoc $t10;
    assume $IsValid'u64'($t10);

    // havoc[val]($t11) at ./sources/coin.move:231:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[mut]($t0) at ./sources/coin.move:231:16+1
    havoc $temp_0'$2_coin_Coin'#0'';
    $t0 := $UpdateMutation($t0, $temp_0'$2_coin_Coin'#0'');
    assume $IsValid'$2_coin_Coin'#0''($Dereference($t0));

    // havoc[mut]($t2) at ./sources/coin.move:231:16+1
    havoc $temp_0'$2_tx_context_TxContext';
    $t2 := $UpdateMutation($t2, $temp_0'$2_tx_context_TxContext');
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/coin.move:231:16+1
    assume {:print "$info(): enter loop, variable(s) self, ctx, i havocked and reassigned"} true;
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,17,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:231:16+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,17,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[i]($t5) at ./sources/coin.move:231:16+1
    assume {:print "$track_local(14,17,3):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at ./sources/coin.move:231:16+1
    assume !$abort_flag;

    // $t8 := <($t5, $t6) at ./sources/coin.move:231:18+1
    call $t8 := $Lt($t5, $t6);

    // if ($t8) goto L0 else goto L2 at ./sources/coin.move:231:9+116
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/coin.move:232:19+4
    assume {:print "$at(8,7951,7955)"} true;
L0:

    // $t9 := vector::borrow<u64>($t1, $t5) on_abort goto L6 with $t7 at ./sources/coin.move:232:26+33
    call $t9 := $1_vector_borrow'u64'($t1, $t5);
    if ($abort_flag) {
        assume {:print "$at(8,7958,7991)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(14,17):", $t7} $t7 == $t7;
        goto L6;
    }

    // coin::split<#0>($t0, $t9, $t2) on_abort goto L6 with $t7 at ./sources/coin.move:232:13+52
    call $t0,$t2 := $2_coin_split'#0'($t0, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(8,7945,7997)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(14,17):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t10 := 1 at ./sources/coin.move:233:21+1
    assume {:print "$at(8,8019,8020)"} true;
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := +($t5, $t10) on_abort goto L6 with $t7 at ./sources/coin.move:233:19+1
    call $t11 := $AddU64($t5, $t10);
    if ($abort_flag) {
        assume {:print "$at(8,8017,8018)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(14,17):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[i]($t11) at ./sources/coin.move:233:13+1
    assume {:print "$track_local(14,17,3):", $t11} $t11 == $t11;

    // goto L4 at ./sources/coin.move:233:22+1
    goto L4;

    // label L2 at ./sources/coin.move:234:10+1
    assume {:print "$at(8,8031,8032)"} true;
L2:

    // destroy($t0) at ./sources/coin.move:234:10+1

    // destroy($t2) at ./sources/coin.move:234:10+1

    // trace_local[self]($t0) at ./sources/coin.move:234:10+1
    $temp_0'$2_coin_Coin'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,17,0):", $temp_0'$2_coin_Coin'#0''} $temp_0'$2_coin_Coin'#0'' == $temp_0'$2_coin_Coin'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:234:10+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,17,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/coin.move:234:10+1
    goto L5;

    // label L4 at ./sources/coin.move:234:10+1
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/coin.move:234:10+1
    assume false;
    return;

    // label L5 at ./sources/coin.move:235:5+1
    assume {:print "$at(8,8037,8038)"} true;
L5:

    // return () at ./sources/coin.move:235:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L6 at ./sources/coin.move:235:5+1
L6:

    // abort($t7) at ./sources/coin.move:235:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun coin::supply_mut [verification] at ./sources/coin.move:49:5+114
procedure {:timeLimit 40} $2_coin_supply_mut$verify(_$t0: $Mutation ($2_coin_TreasuryCap'#0')) returns ($ret0: $Mutation ($2_balance_Supply'#0'), $ret1: $Mutation ($2_coin_TreasuryCap'#0'))
{
    // declare local variables
    var $t1: $Mutation ($2_balance_Supply'#0');
    var $t0: $Mutation ($2_coin_TreasuryCap'#0');
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:49:5+1
    assume {:print "$at(8,1573,1574)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($Dereference($t0));

    // trace_local[treasury]($t0) at ./sources/coin.move:49:5+1
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,19,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // $t1 := borrow_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:50:9+26
    assume {:print "$at(8,1655,1681)"} true;
    $t1 := $ChildMutation($t0, 1, $total_supply#$2_coin_TreasuryCap'#0'($Dereference($t0)));

    // trace_return[0]($t1) at ./sources/coin.move:50:9+26
    $temp_0'$2_balance_Supply'#0'' := $Dereference($t1);
    assume {:print "$track_return(14,19,0):", $temp_0'$2_balance_Supply'#0''} $temp_0'$2_balance_Supply'#0'' == $temp_0'$2_balance_Supply'#0'';

    // trace_local[treasury]($t0) at ./sources/coin.move:50:9+26
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,19,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // trace_local[treasury]($t0) at ./sources/coin.move:50:9+26
    $temp_0'$2_coin_TreasuryCap'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,19,0):", $temp_0'$2_coin_TreasuryCap'#0''} $temp_0'$2_coin_TreasuryCap'#0'' == $temp_0'$2_coin_TreasuryCap'#0'';

    // label L1 at ./sources/coin.move:51:5+1
    assume {:print "$at(8,1686,1687)"} true;
L1:

    // return $t1 at ./sources/coin.move:51:5+1
    $ret0 := $t1;
    $ret1 := $t0;
    return;

}

// fun coin::take<#0> [baseline] at ./sources/coin.move:84:5+220
procedure {:inline 1} $2_coin_take'#0'(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_balance_Balance'#0'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: int;
    var $t5: $2_balance_Balance'#0';
    var $t6: $2_coin_Coin'#0';
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/coin.move:84:5+1
    assume {:print "$at(8,2694,2695)"} true;
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,20,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[value]($t1) at ./sources/coin.move:84:5+1
    assume {:print "$track_local(14,20,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:84:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,20,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := object::new($t2) on_abort goto L2 with $t4 at ./sources/coin.move:88:17+16
    assume {:print "$at(8,2829,2845)"} true;
    call $t3,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,2829,2845)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,20):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := balance::split<#0>($t0, $t1) on_abort goto L2 with $t4 at ./sources/coin.move:89:22+30
    assume {:print "$at(8,2868,2898)"} true;
    call $t5,$t0 := $2_balance_split'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,2868,2898)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,20):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := pack coin::Coin<#0>($t3, $t5) at ./sources/coin.move:87:9+102
    assume {:print "$at(8,2806,2908)"} true;
    $t6 := $2_coin_Coin'#0'($t3, $t5);

    // trace_return[0]($t6) at ./sources/coin.move:87:9+102
    assume {:print "$track_return(14,20,0):", $t6} $t6 == $t6;

    // trace_local[balance]($t0) at ./sources/coin.move:87:9+102
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,20,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:87:9+102
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,20,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:91:5+1
    assume {:print "$at(8,2913,2914)"} true;
L1:

    // return $t6 at ./sources/coin.move:91:5+1
    $ret0 := $t6;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/coin.move:91:5+1
L2:

    // abort($t4) at ./sources/coin.move:91:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun coin::take [verification] at ./sources/coin.move:84:5+220
procedure {:timeLimit 40} $2_coin_take$verify(_$t0: $Mutation ($2_balance_Balance'#0'), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_Coin'#0', $ret1: $Mutation ($2_balance_Balance'#0'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: int;
    var $t5: $2_balance_Balance'#0';
    var $t6: $2_coin_Coin'#0';
    var $t0: $Mutation ($2_balance_Balance'#0');
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:84:5+1
    assume {:print "$at(8,2694,2695)"} true;
    assume $IsValid'$2_balance_Balance'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/coin.move:84:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/coin.move:84:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[balance]($t0) at ./sources/coin.move:84:5+1
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,20,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[value]($t1) at ./sources/coin.move:84:5+1
    assume {:print "$track_local(14,20,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/coin.move:84:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,20,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := object::new($t2) on_abort goto L2 with $t4 at ./sources/coin.move:88:17+16
    assume {:print "$at(8,2829,2845)"} true;
    call $t3,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(8,2829,2845)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,20):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := balance::split<#0>($t0, $t1) on_abort goto L2 with $t4 at ./sources/coin.move:89:22+30
    assume {:print "$at(8,2868,2898)"} true;
    call $t5,$t0 := $2_balance_split'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,2868,2898)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(14,20):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := pack coin::Coin<#0>($t3, $t5) at ./sources/coin.move:87:9+102
    assume {:print "$at(8,2806,2908)"} true;
    $t6 := $2_coin_Coin'#0'($t3, $t5);

    // trace_return[0]($t6) at ./sources/coin.move:87:9+102
    assume {:print "$track_return(14,20,0):", $t6} $t6 == $t6;

    // trace_local[balance]($t0) at ./sources/coin.move:87:9+102
    $temp_0'$2_balance_Balance'#0'' := $Dereference($t0);
    assume {:print "$track_local(14,20,0):", $temp_0'$2_balance_Balance'#0''} $temp_0'$2_balance_Balance'#0'' == $temp_0'$2_balance_Balance'#0'';

    // trace_local[ctx]($t2) at ./sources/coin.move:87:9+102
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(14,20,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:91:5+1
    assume {:print "$at(8,2913,2914)"} true;
L1:

    // return $t6 at ./sources/coin.move:91:5+1
    $ret0 := $t6;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/coin.move:91:5+1
L2:

    // abort($t4) at ./sources/coin.move:91:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun coin::total_supply [verification] at ./sources/coin.move:27:5+110
procedure {:timeLimit 40} $2_coin_total_supply$verify(_$t0: $2_coin_TreasuryCap'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Supply'#0';
    var $t2: int;
    var $t3: int;
    var $t0: $2_coin_TreasuryCap'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:27:5+1
    assume {:print "$at(8,761,762)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($t0);

    // trace_local[cap]($t0) at ./sources/coin.move:27:5+1
    assume {:print "$track_local(14,21,0):", $t0} $t0 == $t0;

    // $t1 := get_field<coin::TreasuryCap<#0>>.total_supply($t0) at ./sources/coin.move:28:31+17
    assume {:print "$at(8,847,864)"} true;
    $t1 := $total_supply#$2_coin_TreasuryCap'#0'($t0);

    // $t2 := balance::supply_value<#0>($t1) on_abort goto L2 with $t3 at ./sources/coin.move:28:9+40
    call $t2 := $2_balance_supply_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(8,825,865)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,21):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/coin.move:28:9+40
    assume {:print "$track_return(14,21,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/coin.move:29:5+1
    assume {:print "$at(8,870,871)"} true;
L1:

    // return $t2 at ./sources/coin.move:29:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/coin.move:29:5+1
L2:

    // abort($t3) at ./sources/coin.move:29:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::transfer_cap [verification] at ./sources/coin.move:191:5+114
procedure {:timeLimit 40} $2_coin_transfer_cap$verify(_$t0: $2_coin_TreasuryCap'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_coin_TreasuryCap'#0';
    var $t1: int;
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:191:5+1
    assume {:print "$at(8,6308,6309)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($t0);

    // assume WellFormed($t1) at ./sources/coin.move:191:5+1
    assume $IsValid'address'($t1);

    // trace_local[c]($t0) at ./sources/coin.move:191:5+1
    assume {:print "$track_local(14,23,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/coin.move:191:5+1
    assume {:print "$track_local(14,23,1):", $t1} $t1 == $t1;

    // transfer::transfer<coin::TreasuryCap<#0>>($t0, $t1) on_abort goto L2 with $t2 at ./sources/coin.move:192:9+32
    assume {:print "$at(8,6384,6416)"} true;
    call $2_transfer_transfer'$2_coin_TreasuryCap'#0''($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(8,6384,6416)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(14,23):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/coin.move:193:5+1
    assume {:print "$at(8,6421,6422)"} true;
L1:

    // return () at ./sources/coin.move:193:5+1
    return;

    // label L2 at ./sources/coin.move:193:5+1
L2:

    // abort($t2) at ./sources/coin.move:193:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun coin::treasury_from_supply [verification] at ./sources/coin.move:32:5+163
procedure {:timeLimit 40} $2_coin_treasury_from_supply$verify(_$t0: $2_balance_Supply'#0', _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_coin_TreasuryCap'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_coin_TreasuryCap'#0';
    var $t0: $2_balance_Supply'#0';
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:32:5+1
    assume {:print "$at(8,936,937)"} true;
    assume $IsValid'$2_balance_Supply'#0''($t0);

    // assume WellFormed($t1) at ./sources/coin.move:32:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[total_supply]($t0) at ./sources/coin.move:32:5+1
    assume {:print "$track_local(14,24,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/coin.move:32:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,24,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/coin.move:33:27+16
    assume {:print "$at(8,1061,1077)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(8,1061,1077)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(14,24):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack coin::TreasuryCap<#0>($t2, $t0) at ./sources/coin.move:33:9+50
    $t4 := $2_coin_TreasuryCap'#0'($t2, $t0);

    // trace_return[0]($t4) at ./sources/coin.move:33:9+50
    assume {:print "$track_return(14,24,0):", $t4} $t4 == $t4;

    // trace_local[ctx]($t1) at ./sources/coin.move:33:9+50
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(14,24,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/coin.move:34:5+1
    assume {:print "$at(8,1098,1099)"} true;
L1:

    // return $t4 at ./sources/coin.move:34:5+1
    $ret0 := $t4;
    $ret1 := $t1;
    return;

    // label L2 at ./sources/coin.move:34:5+1
L2:

    // abort($t3) at ./sources/coin.move:34:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::treasury_into_supply [verification] at ./sources/coin.move:37:5+185
procedure {:timeLimit 40} $2_coin_treasury_into_supply$verify(_$t0: $2_coin_TreasuryCap'#0') returns ($ret0: $2_balance_Supply'#0')
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: $2_balance_Supply'#0';
    var $t3: $2_object_UID;
    var $t4: $2_balance_Supply'#0';
    var $t5: int;
    var $t0: $2_coin_TreasuryCap'#0';
    var $temp_0'$2_balance_Supply'#0'': $2_balance_Supply'#0';
    var $temp_0'$2_coin_TreasuryCap'#0'': $2_coin_TreasuryCap'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/coin.move:37:5+1
    assume {:print "$at(8,1156,1157)"} true;
    assume $IsValid'$2_coin_TreasuryCap'#0''($t0);

    // trace_local[treasury]($t0) at ./sources/coin.move:37:5+1
    assume {:print "$track_local(14,25,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack coin::TreasuryCap<#0>($t0) at ./sources/coin.move:38:13+32
    assume {:print "$at(8,1242,1274)"} true;
    $t3 := $id#$2_coin_TreasuryCap'#0'($t0);
    $t4 := $total_supply#$2_coin_TreasuryCap'#0'($t0);

    // trace_local[total_supply]($t4) at ./sources/coin.move:38:31+12
    assume {:print "$track_local(14,25,2):", $t4} $t4 == $t4;

    // trace_local[id]($t3) at ./sources/coin.move:38:27+2
    assume {:print "$track_local(14,25,1):", $t3} $t3 == $t3;

    // object::delete($t3) on_abort goto L2 with $t5 at ./sources/coin.move:39:9+18
    assume {:print "$at(8,1295,1313)"} true;
    call $2_object_delete($t3);
    if ($abort_flag) {
        assume {:print "$at(8,1295,1313)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(14,25):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at ./sources/coin.move:40:9+12
    assume {:print "$at(8,1323,1335)"} true;
    assume {:print "$track_return(14,25,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/coin.move:41:5+1
    assume {:print "$at(8,1340,1341)"} true;
L1:

    // return $t4 at ./sources/coin.move:41:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/coin.move:41:5+1
L2:

    // abort($t5) at ./sources/coin.move:41:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct collection::Item<#0> at ./sources/collection.move:43:5+72
type {:datatype} $2_collection_Item'#0';
function {:constructor} $2_collection_Item'#0'($id: $2_object_UID, $value: #0): $2_collection_Item'#0';
function {:inline} $Update'$2_collection_Item'#0''_id(s: $2_collection_Item'#0', x: $2_object_UID): $2_collection_Item'#0' {
    $2_collection_Item'#0'(x, $value#$2_collection_Item'#0'(s))
}
function {:inline} $Update'$2_collection_Item'#0''_value(s: $2_collection_Item'#0', x: #0): $2_collection_Item'#0' {
    $2_collection_Item'#0'($id#$2_collection_Item'#0'(s), x)
}
function $IsValid'$2_collection_Item'#0''(s: $2_collection_Item'#0'): bool {
    $IsValid'$2_object_UID'($id#$2_collection_Item'#0'(s))
      && $IsValid'#0'($value#$2_collection_Item'#0'(s))
}
function {:inline} $IsEqual'$2_collection_Item'#0''(s1: $2_collection_Item'#0', s2: $2_collection_Item'#0'): bool {
    s1 == s2
}
var $2_collection_Item'#0'_$memory: $Memory $2_collection_Item'#0';

// struct collection::Collection<#0> at ./sources/collection.move:37:5+124
type {:datatype} $2_collection_Collection'#0';
function {:constructor} $2_collection_Collection'#0'($id: $2_object_UID, $objects: $2_vec_set_VecSet'$2_object_ID', $max_capacity: int): $2_collection_Collection'#0';
function {:inline} $Update'$2_collection_Collection'#0''_id(s: $2_collection_Collection'#0', x: $2_object_UID): $2_collection_Collection'#0' {
    $2_collection_Collection'#0'(x, $objects#$2_collection_Collection'#0'(s), $max_capacity#$2_collection_Collection'#0'(s))
}
function {:inline} $Update'$2_collection_Collection'#0''_objects(s: $2_collection_Collection'#0', x: $2_vec_set_VecSet'$2_object_ID'): $2_collection_Collection'#0' {
    $2_collection_Collection'#0'($id#$2_collection_Collection'#0'(s), x, $max_capacity#$2_collection_Collection'#0'(s))
}
function {:inline} $Update'$2_collection_Collection'#0''_max_capacity(s: $2_collection_Collection'#0', x: int): $2_collection_Collection'#0' {
    $2_collection_Collection'#0'($id#$2_collection_Collection'#0'(s), $objects#$2_collection_Collection'#0'(s), x)
}
function $IsValid'$2_collection_Collection'#0''(s: $2_collection_Collection'#0'): bool {
    $IsValid'$2_object_UID'($id#$2_collection_Collection'#0'(s))
      && $IsValid'$2_vec_set_VecSet'$2_object_ID''($objects#$2_collection_Collection'#0'(s))
      && $IsValid'u64'($max_capacity#$2_collection_Collection'#0'(s))
}
function {:inline} $IsEqual'$2_collection_Collection'#0''(s1: $2_collection_Collection'#0', s2: $2_collection_Collection'#0'): bool {
    $IsEqual'$2_object_UID'($id#$2_collection_Collection'#0'(s1), $id#$2_collection_Collection'#0'(s2))
    && $IsEqual'$2_vec_set_VecSet'$2_object_ID''($objects#$2_collection_Collection'#0'(s1), $objects#$2_collection_Collection'#0'(s2))
    && $IsEqual'u64'($max_capacity#$2_collection_Collection'#0'(s1), $max_capacity#$2_collection_Collection'#0'(s2))}
var $2_collection_Collection'#0'_$memory: $Memory $2_collection_Collection'#0';

// fun collection::contains [verification] at ./sources/collection.move:93:5+113
procedure {:timeLimit 40} $2_collection_contains$verify(_$t0: $2_collection_Collection'#0', _$t1: $2_object_ID) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $2_vec_set_VecSet'$2_object_ID';
    var $t3: bool;
    var $t4: int;
    var $t0: $2_collection_Collection'#0';
    var $t1: $2_object_ID;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_object_ID': $2_object_ID;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:93:5+1
    assume {:print "$at(3,3363,3364)"} true;
    assume $IsValid'$2_collection_Collection'#0''($t0);

    // assume WellFormed($t1) at ./sources/collection.move:93:5+1
    assume $IsValid'$2_object_ID'($t1);

    // trace_local[c]($t0) at ./sources/collection.move:93:5+1
    assume {:print "$track_local(15,1,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at ./sources/collection.move:93:5+1
    assume {:print "$track_local(15,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<collection::Collection<#0>>.objects($t0) at ./sources/collection.move:94:27+10
    assume {:print "$at(3,3455,3465)"} true;
    $t2 := $objects#$2_collection_Collection'#0'($t0);

    // $t3 := vec_set::contains<object::ID>($t2, $t1) on_abort goto L2 with $t4 at ./sources/collection.move:94:9+33
    call $t3 := $2_vec_set_contains'$2_object_ID'($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,3437,3470)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(15,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/collection.move:94:9+33
    assume {:print "$track_return(15,1,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/collection.move:95:5+1
    assume {:print "$at(3,3475,3476)"} true;
L1:

    // return $t3 at ./sources/collection.move:95:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/collection.move:95:5+1
L2:

    // abort($t4) at ./sources/collection.move:95:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun collection::remove<#0> [baseline] at ./sources/collection.move:99:5+225
procedure {:inline 1} $2_collection_remove'#0'(_$t0: $Mutation ($2_collection_Collection'#0'), _$t1: $2_collection_Item'#0') returns ($ret0: #0, $ret1: $Mutation ($2_collection_Collection'#0'))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: #0;
    var $t4: $2_object_UID;
    var $t5: #0;
    var $t6: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t7: $2_object_ID;
    var $t8: int;
    var $t0: $Mutation ($2_collection_Collection'#0');
    var $t1: $2_collection_Item'#0';
    var $temp_0'#0': #0;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t6));

    // bytecode translation starts here
    // trace_local[c]($t0) at ./sources/collection.move:99:5+1
    assume {:print "$at(3,3582,3583)"} true;
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,5,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // trace_local[item]($t1) at ./sources/collection.move:99:5+1
    assume {:print "$track_local(15,5,1):", $t1} $t1 == $t1;

    // ($t4, $t5) := unpack collection::Item<#0>($t1) at ./sources/collection.move:100:13+18
    assume {:print "$at(3,3665,3683)"} true;
    $t4 := $id#$2_collection_Item'#0'($t1);
    $t5 := $value#$2_collection_Item'#0'($t1);

    // trace_local[value]($t5) at ./sources/collection.move:100:24+5
    assume {:print "$track_local(15,5,3):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/collection.move:100:20+2
    assume {:print "$track_local(15,5,2):", $t4} $t4 == $t4;

    // $t6 := borrow_field<collection::Collection<#0>>.objects($t0) at ./sources/collection.move:101:25+14
    assume {:print "$at(3,3716,3730)"} true;
    $t6 := $ChildMutation($t0, 1, $objects#$2_collection_Collection'#0'($Dereference($t0)));

    // $t7 := object::uid_as_inner($t4) on_abort goto L2 with $t8 at ./sources/collection.move:101:41+25
    call $t7 := $2_object_uid_as_inner($t4);
    if ($abort_flag) {
        assume {:print "$at(3,3732,3757)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,5):", $t8} $t8 == $t8;
        goto L2;
    }

    // vec_set::remove<object::ID>($t6, $t7) on_abort goto L2 with $t8 at ./sources/collection.move:101:9+58
    call $t6 := $2_vec_set_remove'$2_object_ID'($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(3,3700,3758)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,5):", $t8} $t8 == $t8;
        goto L2;
    }

    // write_back[Reference($t0).objects (vec_set::VecSet<object::ID>)]($t6) at ./sources/collection.move:101:9+58
    $t0 := $UpdateMutation($t0, $Update'$2_collection_Collection'#0''_objects($Dereference($t0), $Dereference($t6)));

    // trace_local[c]($t0) at ./sources/collection.move:101:9+58
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,5,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // object::delete($t4) on_abort goto L2 with $t8 at ./sources/collection.move:102:9+18
    assume {:print "$at(3,3768,3786)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(3,3768,3786)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,5):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/collection.move:103:9+5
    assume {:print "$at(3,3796,3801)"} true;
    assume {:print "$track_return(15,5,0):", $t5} $t5 == $t5;

    // trace_local[c]($t0) at ./sources/collection.move:103:9+5
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,5,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // label L1 at ./sources/collection.move:104:5+1
    assume {:print "$at(3,3806,3807)"} true;
L1:

    // return $t5 at ./sources/collection.move:104:5+1
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/collection.move:104:5+1
L2:

    // abort($t8) at ./sources/collection.move:104:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun collection::remove [verification] at ./sources/collection.move:99:5+225
procedure {:timeLimit 40} $2_collection_remove$verify(_$t0: $Mutation ($2_collection_Collection'#0'), _$t1: $2_collection_Item'#0') returns ($ret0: #0, $ret1: $Mutation ($2_collection_Collection'#0'))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: #0;
    var $t4: $2_object_UID;
    var $t5: #0;
    var $t6: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t7: $2_object_ID;
    var $t8: int;
    var $t0: $Mutation ($2_collection_Collection'#0');
    var $t1: $2_collection_Item'#0';
    var $temp_0'#0': #0;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t6));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:99:5+1
    assume {:print "$at(3,3582,3583)"} true;
    assume $IsValid'$2_collection_Collection'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/collection.move:99:5+1
    assume $IsValid'$2_collection_Item'#0''($t1);

    // trace_local[c]($t0) at ./sources/collection.move:99:5+1
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,5,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // trace_local[item]($t1) at ./sources/collection.move:99:5+1
    assume {:print "$track_local(15,5,1):", $t1} $t1 == $t1;

    // ($t4, $t5) := unpack collection::Item<#0>($t1) at ./sources/collection.move:100:13+18
    assume {:print "$at(3,3665,3683)"} true;
    $t4 := $id#$2_collection_Item'#0'($t1);
    $t5 := $value#$2_collection_Item'#0'($t1);

    // trace_local[value]($t5) at ./sources/collection.move:100:24+5
    assume {:print "$track_local(15,5,3):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/collection.move:100:20+2
    assume {:print "$track_local(15,5,2):", $t4} $t4 == $t4;

    // $t6 := borrow_field<collection::Collection<#0>>.objects($t0) at ./sources/collection.move:101:25+14
    assume {:print "$at(3,3716,3730)"} true;
    $t6 := $ChildMutation($t0, 1, $objects#$2_collection_Collection'#0'($Dereference($t0)));

    // $t7 := object::uid_as_inner($t4) on_abort goto L2 with $t8 at ./sources/collection.move:101:41+25
    call $t7 := $2_object_uid_as_inner($t4);
    if ($abort_flag) {
        assume {:print "$at(3,3732,3757)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,5):", $t8} $t8 == $t8;
        goto L2;
    }

    // vec_set::remove<object::ID>($t6, $t7) on_abort goto L2 with $t8 at ./sources/collection.move:101:9+58
    call $t6 := $2_vec_set_remove'$2_object_ID'($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(3,3700,3758)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,5):", $t8} $t8 == $t8;
        goto L2;
    }

    // write_back[Reference($t0).objects (vec_set::VecSet<object::ID>)]($t6) at ./sources/collection.move:101:9+58
    $t0 := $UpdateMutation($t0, $Update'$2_collection_Collection'#0''_objects($Dereference($t0), $Dereference($t6)));

    // trace_local[c]($t0) at ./sources/collection.move:101:9+58
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,5,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // object::delete($t4) on_abort goto L2 with $t8 at ./sources/collection.move:102:9+18
    assume {:print "$at(3,3768,3786)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(3,3768,3786)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,5):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/collection.move:103:9+5
    assume {:print "$at(3,3796,3801)"} true;
    assume {:print "$track_return(15,5,0):", $t5} $t5 == $t5;

    // trace_local[c]($t0) at ./sources/collection.move:103:9+5
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,5,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // label L1 at ./sources/collection.move:104:5+1
    assume {:print "$at(3,3806,3807)"} true;
L1:

    // return $t5 at ./sources/collection.move:104:5+1
    $ret0 := $t5;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/collection.move:104:5+1
L2:

    // abort($t8) at ./sources/collection.move:104:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun collection::size<#0> [baseline] at ./sources/collection.move:72:5+91
procedure {:inline 1} $2_collection_size'#0'(_$t0: $2_collection_Collection'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_vec_set_VecSet'$2_object_ID';
    var $t2: int;
    var $t3: int;
    var $t0: $2_collection_Collection'#0';
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[c]($t0) at ./sources/collection.move:72:5+1
    assume {:print "$at(3,2654,2655)"} true;
    assume {:print "$track_local(15,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<collection::Collection<#0>>.objects($t0) at ./sources/collection.move:73:23+10
    assume {:print "$at(3,2728,2738)"} true;
    $t1 := $objects#$2_collection_Collection'#0'($t0);

    // $t2 := vec_set::size<object::ID>($t1) on_abort goto L2 with $t3 at ./sources/collection.move:73:9+25
    call $t2 := $2_vec_set_size'$2_object_ID'($t1);
    if ($abort_flag) {
        assume {:print "$at(3,2714,2739)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(15,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/collection.move:73:9+25
    assume {:print "$track_return(15,7,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/collection.move:74:5+1
    assume {:print "$at(3,2744,2745)"} true;
L1:

    // return $t2 at ./sources/collection.move:74:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/collection.move:74:5+1
L2:

    // abort($t3) at ./sources/collection.move:74:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun collection::size [verification] at ./sources/collection.move:72:5+91
procedure {:timeLimit 40} $2_collection_size$verify(_$t0: $2_collection_Collection'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_vec_set_VecSet'$2_object_ID';
    var $t2: int;
    var $t3: int;
    var $t0: $2_collection_Collection'#0';
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:72:5+1
    assume {:print "$at(3,2654,2655)"} true;
    assume $IsValid'$2_collection_Collection'#0''($t0);

    // trace_local[c]($t0) at ./sources/collection.move:72:5+1
    assume {:print "$track_local(15,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<collection::Collection<#0>>.objects($t0) at ./sources/collection.move:73:23+10
    assume {:print "$at(3,2728,2738)"} true;
    $t1 := $objects#$2_collection_Collection'#0'($t0);

    // $t2 := vec_set::size<object::ID>($t1) on_abort goto L2 with $t3 at ./sources/collection.move:73:9+25
    call $t2 := $2_vec_set_size'$2_object_ID'($t1);
    if ($abort_flag) {
        assume {:print "$at(3,2714,2739)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(15,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/collection.move:73:9+25
    assume {:print "$track_return(15,7,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/collection.move:74:5+1
    assume {:print "$at(3,2744,2745)"} true;
L1:

    // return $t2 at ./sources/collection.move:74:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/collection.move:74:5+1
L2:

    // abort($t3) at ./sources/collection.move:74:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun collection::new<#0> [baseline] at ./sources/collection.move:49:5+125
procedure {:inline 1} $2_collection_new'#0'(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_collection_Collection'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: $2_collection_Collection'#0';
    var $t3: int;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/collection.move:49:5+1
    assume {:print "$at(3,1853,1854)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := 65536 at ./sources/collection.move:50:36+20
    assume {:print "$at(3,1951,1971)"} true;
    $t1 := 65536;
    assume $IsValid'u64'($t1);

    // $t2 := collection::new_with_max_capacity<#0>($t0, $t1) on_abort goto L2 with $t3 at ./sources/collection.move:50:9+48
    call $t2,$t0 := $2_collection_new_with_max_capacity'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,1924,1972)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(15,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/collection.move:50:9+48
    assume {:print "$track_return(15,3,0):", $t2} $t2 == $t2;

    // trace_local[ctx]($t0) at ./sources/collection.move:50:9+48
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/collection.move:51:5+1
    assume {:print "$at(3,1977,1978)"} true;
L1:

    // return $t2 at ./sources/collection.move:51:5+1
    $ret0 := $t2;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/collection.move:51:5+1
L2:

    // abort($t3) at ./sources/collection.move:51:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun collection::new [verification] at ./sources/collection.move:49:5+125
procedure {:timeLimit 40} $2_collection_new$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_collection_Collection'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: int;
    var $t2: $2_collection_Collection'#0';
    var $t3: int;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:49:5+1
    assume {:print "$at(3,1853,1854)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/collection.move:49:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := 65536 at ./sources/collection.move:50:36+20
    assume {:print "$at(3,1951,1971)"} true;
    $t1 := 65536;
    assume $IsValid'u64'($t1);

    // $t2 := collection::new_with_max_capacity<#0>($t0, $t1) on_abort goto L2 with $t3 at ./sources/collection.move:50:9+48
    call $t2,$t0 := $2_collection_new_with_max_capacity'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,1924,1972)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(15,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/collection.move:50:9+48
    assume {:print "$track_return(15,3,0):", $t2} $t2 == $t2;

    // trace_local[ctx]($t0) at ./sources/collection.move:50:9+48
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,3,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/collection.move:51:5+1
    assume {:print "$at(3,1977,1978)"} true;
L1:

    // return $t2 at ./sources/collection.move:51:5+1
    $ret0 := $t2;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/collection.move:51:5+1
L2:

    // abort($t3) at ./sources/collection.move:51:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun collection::transfer [verification] at ./sources/collection.move:117:5+128
procedure {:timeLimit 40} $2_collection_transfer$verify(_$t0: $2_collection_Collection'#0', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_collection_Collection'#0';
    var $t1: int;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:117:5+1
    assume {:print "$at(3,4202,4203)"} true;
    assume $IsValid'$2_collection_Collection'#0''($t0);

    // assume WellFormed($t1) at ./sources/collection.move:117:5+1
    assume $IsValid'address'($t1);

    // trace_local[c]($t0) at ./sources/collection.move:117:5+1
    assume {:print "$track_local(15,8,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/collection.move:117:5+1
    assume {:print "$track_local(15,8,1):", $t1} $t1 == $t1;

    // transfer::transfer<collection::Collection<#0>>($t0, $t1) on_abort goto L2 with $t2 at ./sources/collection.move:118:9+32
    assume {:print "$at(3,4292,4324)"} true;
    call $2_transfer_transfer'$2_collection_Collection'#0''($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,4292,4324)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(15,8):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/collection.move:119:5+1
    assume {:print "$at(3,4329,4330)"} true;
L1:

    // return () at ./sources/collection.move:119:5+1
    return;

    // label L2 at ./sources/collection.move:119:5+1
L2:

    // abort($t2) at ./sources/collection.move:119:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun collection::transfer_to_object_id [verification] at ./sources/collection.move:121:5+170
procedure {:timeLimit 40} $2_collection_transfer_to_object_id$verify(_$t0: $2_collection_Collection'#0', _$t1: $2_object_UID) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_collection_Collection'#0';
    var $t1: $2_object_UID;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:121:5+1
    assume {:print "$at(3,4336,4337)"} true;
    assume $IsValid'$2_collection_Collection'#0''($t0);

    // assume WellFormed($t1) at ./sources/collection.move:121:5+1
    assume $IsValid'$2_object_UID'($t1);

    // trace_local[obj]($t0) at ./sources/collection.move:121:5+1
    assume {:print "$track_local(15,9,0):", $t0} $t0 == $t0;

    // trace_local[owner_id]($t1) at ./sources/collection.move:121:5+1
    assume {:print "$track_local(15,9,1):", $t1} $t1 == $t1;

    // transfer::transfer_to_object_id<collection::Collection<#0>>($t0, $t1) on_abort goto L2 with $t2 at ./sources/collection.move:125:9+46
    assume {:print "$at(3,4454,4500)"} true;
    call $2_transfer_transfer_to_object_id'$2_collection_Collection'#0''($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,4454,4500)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(15,9):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/collection.move:126:5+1
    assume {:print "$at(3,4505,4506)"} true;
L1:

    // return () at ./sources/collection.move:126:5+1
    return;

    // label L2 at ./sources/collection.move:126:5+1
L2:

    // abort($t2) at ./sources/collection.move:126:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun collection::add [verification] at ./sources/collection.move:77:5+454
procedure {:timeLimit 40} $2_collection_add$verify(_$t0: $Mutation ($2_collection_Collection'#0'), _$t1: #0, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_typed_id_TypedID'$2_collection_Item'#0'', $ret1: $Mutation ($2_collection_Collection'#0'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: $2_collection_Item'#0';
    var $t5: $2_typed_id_TypedID'$2_collection_Item'#0'';
    var $t6: $2_collection_Collection'#0';
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: $2_object_UID;
    var $t15: $Mutation ($2_vec_set_VecSet'$2_object_ID');
    var $t16: $2_object_ID;
    var $t17: $2_collection_Item'#0';
    var $t18: $2_typed_id_TypedID'$2_collection_Item'#0'';
    var $t0: $Mutation ($2_collection_Collection'#0');
    var $t1: #0;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'#0': #0;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_typed_id_TypedID'$2_collection_Item'#0''': $2_typed_id_TypedID'$2_collection_Item'#0'';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t15));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:77:5+1
    assume {:print "$at(3,2792,2793)"} true;
    assume $IsValid'$2_collection_Collection'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/collection.move:77:5+1
    assume $IsValid'#0'($t1);

    // assume WellFormed($t2) at ./sources/collection.move:77:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[c]($t0) at ./sources/collection.move:77:5+1
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,0,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // trace_local[value]($t1) at ./sources/collection.move:77:5+1
    assume {:print "$track_local(15,0,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/collection.move:77:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(15,0,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t0) at ./sources/collection.move:82:22+1
    assume {:print "$at(3,2943,2944)"} true;
    $t6 := $Dereference($t0);

    // $t7 := collection::size<#0>($t6) on_abort goto L3 with $t8 at ./sources/collection.move:82:17+7
    call $t7 := $2_collection_size'#0'($t6);
    if ($abort_flag) {
        assume {:print "$at(3,2938,2945)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t9 := 1 at ./sources/collection.move:82:27+1
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t7, $t9) on_abort goto L3 with $t8 at ./sources/collection.move:82:25+1
    call $t10 := $AddU64($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(3,2946,2947)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t11 := get_field<collection::Collection<#0>>.max_capacity($t0) at ./sources/collection.move:82:32+14
    $t11 := $max_capacity#$2_collection_Collection'#0'($Dereference($t0));

    // $t12 := <=($t10, $t11) at ./sources/collection.move:82:29+2
    call $t12 := $Le($t10, $t11);

    // if ($t12) goto L0 else goto L1 at ./sources/collection.move:82:9+60
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at ./sources/collection.move:82:9+60
L1:

    // destroy($t2) at ./sources/collection.move:82:9+60

    // destroy($t0) at ./sources/collection.move:82:9+60

    // $t13 := 1 at ./sources/collection.move:82:48+20
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // trace_abort($t13) at ./sources/collection.move:82:9+60
    assume {:print "$at(3,2930,2990)"} true;
    assume {:print "$track_abort(15,0):", $t13} $t13 == $t13;

    // $t8 := move($t13) at ./sources/collection.move:82:9+60
    $t8 := $t13;

    // goto L3 at ./sources/collection.move:82:9+60
    goto L3;

    // label L0 at ./sources/collection.move:83:30+3
    assume {:print "$at(3,3021,3024)"} true;
L0:

    // $t14 := object::new($t2) on_abort goto L3 with $t8 at ./sources/collection.move:83:18+16
    call $t14,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(3,3009,3025)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_local[id]($t14) at ./sources/collection.move:83:13+2
    assume {:print "$track_local(15,0,3):", $t14} $t14 == $t14;

    // $t15 := borrow_field<collection::Collection<#0>>.objects($t0) at ./sources/collection.move:84:25+14
    assume {:print "$at(3,3051,3065)"} true;
    $t15 := $ChildMutation($t0, 1, $objects#$2_collection_Collection'#0'($Dereference($t0)));

    // $t16 := object::uid_to_inner($t14) on_abort goto L3 with $t8 at ./sources/collection.move:84:41+25
    call $t16 := $2_object_uid_to_inner($t14);
    if ($abort_flag) {
        assume {:print "$at(3,3067,3092)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // vec_set::insert<object::ID>($t15, $t16) on_abort goto L3 with $t8 at ./sources/collection.move:84:9+58
    call $t15 := $2_vec_set_insert'$2_object_ID'($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(3,3035,3093)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // write_back[Reference($t0).objects (vec_set::VecSet<object::ID>)]($t15) at ./sources/collection.move:84:9+58
    $t0 := $UpdateMutation($t0, $Update'$2_collection_Collection'#0''_objects($Dereference($t0), $Dereference($t15)));

    // trace_local[c]($t0) at ./sources/collection.move:84:9+58
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,0,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // $t17 := pack collection::Item<#0>($t14, $t1) at ./sources/collection.move:85:20+18
    assume {:print "$at(3,3114,3132)"} true;
    $t17 := $2_collection_Item'#0'($t14, $t1);

    // trace_local[item]($t17) at ./sources/collection.move:85:13+4
    assume {:print "$track_local(15,0,4):", $t17} $t17 == $t17;

    // $t18 := typed_id::new<collection::Item<#0>>($t17) on_abort goto L3 with $t8 at ./sources/collection.move:86:23+20
    assume {:print "$at(3,3156,3176)"} true;
    call $t18 := $2_typed_id_new'$2_collection_Item'#0''($t17);
    if ($abort_flag) {
        assume {:print "$at(3,3156,3176)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_local[item_id]($t18) at ./sources/collection.move:86:13+7
    assume {:print "$track_local(15,0,5):", $t18} $t18 == $t18;

    // transfer::transfer_to_object<collection::Item<#0>, collection::Collection<#0>>($t17, $t0) on_abort goto L3 with $t8 at ./sources/collection.move:87:9+37
    assume {:print "$at(3,3186,3223)"} true;
    call $t0 := $2_transfer_transfer_to_object'$2_collection_Item'#0'_$2_collection_Collection'#0''($t17, $t0);
    if ($abort_flag) {
        assume {:print "$at(3,3186,3223)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,0):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t18) at ./sources/collection.move:88:9+7
    assume {:print "$at(3,3233,3240)"} true;
    assume {:print "$track_return(15,0,0):", $t18} $t18 == $t18;

    // trace_local[c]($t0) at ./sources/collection.move:88:9+7
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,0,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // trace_local[ctx]($t2) at ./sources/collection.move:88:9+7
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(15,0,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L2 at ./sources/collection.move:89:5+1
    assume {:print "$at(3,3245,3246)"} true;
L2:

    // return $t18 at ./sources/collection.move:89:5+1
    $ret0 := $t18;
    $ret1 := $t0;
    $ret2 := $t2;
    return;

    // label L3 at ./sources/collection.move:89:5+1
L3:

    // abort($t8) at ./sources/collection.move:89:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun collection::create [verification] at ./sources/collection.move:67:5+127
procedure {:timeLimit 40} $2_collection_create$verify(_$t0: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t1: $2_collection_Collection'#0';
    var $t2: int;
    var $t3: $2_tx_context_TxContext;
    var $t4: int;
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:67:5+1
    assume {:print "$at(3,2477,2478)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // trace_local[ctx]($t0) at ./sources/collection.move:67:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,2,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t1 := collection::new<#0>($t0) on_abort goto L2 with $t2 at ./sources/collection.move:68:28+11
    assume {:print "$at(3,2561,2572)"} true;
    call $t1,$t0 := $2_collection_new'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(3,2561,2572)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(15,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := read_ref($t0) at ./sources/collection.move:68:60+3
    $t3 := $Dereference($t0);

    // $t4 := tx_context::sender($t3) on_abort goto L2 with $t2 at ./sources/collection.move:68:41+23
    call $t4 := $2_tx_context_sender($t3);
    if ($abort_flag) {
        assume {:print "$at(3,2574,2597)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(15,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // transfer::transfer<collection::Collection<#0>>($t1, $t4) on_abort goto L2 with $t2 at ./sources/collection.move:68:9+56
    call $2_transfer_transfer'$2_collection_Collection'#0''($t1, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,2542,2598)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(15,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_local[ctx]($t0) at ./sources/collection.move:68:9+56
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,2,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/collection.move:69:5+1
    assume {:print "$at(3,2603,2604)"} true;
L1:

    // return () at ./sources/collection.move:69:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/collection.move:69:5+1
L2:

    // abort($t2) at ./sources/collection.move:69:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun collection::new_with_max_capacity<#0> [baseline] at ./sources/collection.move:54:5+354
procedure {:inline 1} $2_collection_new_with_max_capacity'#0'(_$t0: $Mutation ($2_tx_context_TxContext), _$t1: int) returns ($ret0: $2_collection_Collection'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $2_object_UID;
    var $t10: $2_vec_set_VecSet'$2_object_ID';
    var $t11: $2_collection_Collection'#0';
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $t1: int;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[ctx]($t0) at ./sources/collection.move:54:5+1
    assume {:print "$at(3,2054,2055)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[max_capacity]($t1) at ./sources/collection.move:54:5+1
    assume {:print "$track_local(15,4,1):", $t1} $t1 == $t1;

    // $t3 := 65536 at ./sources/collection.move:58:33+20
    assume {:print "$at(3,2209,2229)"} true;
    $t3 := 65536;
    assume $IsValid'u64'($t3);

    // $t4 := <=($t1, $t3) at ./sources/collection.move:58:30+2
    call $t4 := $Le($t1, $t3);

    // if ($t4) goto L0 else goto L2 at ./sources/collection.move:58:17+56
    if ($t4) { goto L0; } else { goto L2; }

    // label L0 at ./sources/collection.move:58:57+12
L0:

    // $t5 := 0 at ./sources/collection.move:58:72+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t2 := >($t1, $t5) at ./sources/collection.move:58:70+1
    call $t2 := $Gt($t1, $t5);

    // goto L3 at ./sources/collection.move:58:17+56
    goto L3;

    // label L2 at ./sources/collection.move:58:17+56
L2:

    // $t6 := false at ./sources/collection.move:58:17+56
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/collection.move:58:17+56
    $t2 := $t6;

    // label L3 at ./sources/collection.move:58:17+56
L3:

    // if ($t2) goto L4 else goto L5 at ./sources/collection.move:58:9+86
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at ./sources/collection.move:58:9+86
L5:

    // destroy($t0) at ./sources/collection.move:58:9+86

    // $t7 := 0 at ./sources/collection.move:58:75+19
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/collection.move:58:9+86
    assume {:print "$at(3,2185,2271)"} true;
    assume {:print "$track_abort(15,4):", $t7} $t7 == $t7;

    // $t8 := move($t7) at ./sources/collection.move:58:9+86
    $t8 := $t7;

    // goto L7 at ./sources/collection.move:58:9+86
    goto L7;

    // label L4 at ./sources/collection.move:60:29+3
    assume {:print "$at(3,2322,2325)"} true;
L4:

    // $t9 := object::new($t0) on_abort goto L7 with $t8 at ./sources/collection.move:60:17+16
    call $t9,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(3,2310,2326)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t10 := vec_set::empty<object::ID>() on_abort goto L7 with $t8 at ./sources/collection.move:61:22+16
    assume {:print "$at(3,2349,2365)"} true;
    call $t10 := $2_vec_set_empty'$2_object_ID'();
    if ($abort_flag) {
        assume {:print "$at(3,2349,2365)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t11 := pack collection::Collection<#0>($t9, $t10, $t1) at ./sources/collection.move:59:9+121
    assume {:print "$at(3,2281,2402)"} true;
    $t11 := $2_collection_Collection'#0'($t9, $t10, $t1);

    // trace_return[0]($t11) at ./sources/collection.move:59:9+121
    assume {:print "$track_return(15,4,0):", $t11} $t11 == $t11;

    // trace_local[ctx]($t0) at ./sources/collection.move:59:9+121
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/collection.move:64:5+1
    assume {:print "$at(3,2407,2408)"} true;
L6:

    // return $t11 at ./sources/collection.move:64:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L7 at ./sources/collection.move:64:5+1
L7:

    // abort($t8) at ./sources/collection.move:64:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun collection::new_with_max_capacity [verification] at ./sources/collection.move:54:5+354
procedure {:timeLimit 40} $2_collection_new_with_max_capacity$verify(_$t0: $Mutation ($2_tx_context_TxContext), _$t1: int) returns ($ret0: $2_collection_Collection'#0', $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $2_object_UID;
    var $t10: $2_vec_set_VecSet'$2_object_ID';
    var $t11: $2_collection_Collection'#0';
    var $t0: $Mutation ($2_tx_context_TxContext);
    var $t1: int;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:54:5+1
    assume {:print "$at(3,2054,2055)"} true;
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/collection.move:54:5+1
    assume $IsValid'u64'($t1);

    // trace_local[ctx]($t0) at ./sources/collection.move:54:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[max_capacity]($t1) at ./sources/collection.move:54:5+1
    assume {:print "$track_local(15,4,1):", $t1} $t1 == $t1;

    // $t3 := 65536 at ./sources/collection.move:58:33+20
    assume {:print "$at(3,2209,2229)"} true;
    $t3 := 65536;
    assume $IsValid'u64'($t3);

    // $t4 := <=($t1, $t3) at ./sources/collection.move:58:30+2
    call $t4 := $Le($t1, $t3);

    // if ($t4) goto L0 else goto L2 at ./sources/collection.move:58:17+56
    if ($t4) { goto L0; } else { goto L2; }

    // label L0 at ./sources/collection.move:58:57+12
L0:

    // $t5 := 0 at ./sources/collection.move:58:72+1
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t2 := >($t1, $t5) at ./sources/collection.move:58:70+1
    call $t2 := $Gt($t1, $t5);

    // goto L3 at ./sources/collection.move:58:17+56
    goto L3;

    // label L2 at ./sources/collection.move:58:17+56
L2:

    // $t6 := false at ./sources/collection.move:58:17+56
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t2 := $t6 at ./sources/collection.move:58:17+56
    $t2 := $t6;

    // label L3 at ./sources/collection.move:58:17+56
L3:

    // if ($t2) goto L4 else goto L5 at ./sources/collection.move:58:9+86
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at ./sources/collection.move:58:9+86
L5:

    // destroy($t0) at ./sources/collection.move:58:9+86

    // $t7 := 0 at ./sources/collection.move:58:75+19
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/collection.move:58:9+86
    assume {:print "$at(3,2185,2271)"} true;
    assume {:print "$track_abort(15,4):", $t7} $t7 == $t7;

    // $t8 := move($t7) at ./sources/collection.move:58:9+86
    $t8 := $t7;

    // goto L7 at ./sources/collection.move:58:9+86
    goto L7;

    // label L4 at ./sources/collection.move:60:29+3
    assume {:print "$at(3,2322,2325)"} true;
L4:

    // $t9 := object::new($t0) on_abort goto L7 with $t8 at ./sources/collection.move:60:17+16
    call $t9,$t0 := $2_object_new($t0);
    if ($abort_flag) {
        assume {:print "$at(3,2310,2326)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t10 := vec_set::empty<object::ID>() on_abort goto L7 with $t8 at ./sources/collection.move:61:22+16
    assume {:print "$at(3,2349,2365)"} true;
    call $t10 := $2_vec_set_empty'$2_object_ID'();
    if ($abort_flag) {
        assume {:print "$at(3,2349,2365)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(15,4):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t11 := pack collection::Collection<#0>($t9, $t10, $t1) at ./sources/collection.move:59:9+121
    assume {:print "$at(3,2281,2402)"} true;
    $t11 := $2_collection_Collection'#0'($t9, $t10, $t1);

    // trace_return[0]($t11) at ./sources/collection.move:59:9+121
    assume {:print "$track_return(15,4,0):", $t11} $t11 == $t11;

    // trace_local[ctx]($t0) at ./sources/collection.move:59:9+121
    $temp_0'$2_tx_context_TxContext' := $Dereference($t0);
    assume {:print "$track_local(15,4,0):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/collection.move:64:5+1
    assume {:print "$at(3,2407,2408)"} true;
L6:

    // return $t11 at ./sources/collection.move:64:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L7 at ./sources/collection.move:64:5+1
L7:

    // abort($t8) at ./sources/collection.move:64:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun collection::remove_and_take [verification] at ./sources/collection.move:107:5+245
procedure {:timeLimit 40} $2_collection_remove_and_take$verify(_$t0: $Mutation ($2_collection_Collection'#0'), _$t1: $2_collection_Item'#0', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_collection_Collection'#0'), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: #0;
    var $t4: #0;
    var $t5: int;
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t0: $Mutation ($2_collection_Collection'#0');
    var $t1: $2_collection_Item'#0';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'#0': #0;
    var $temp_0'$2_collection_Collection'#0'': $2_collection_Collection'#0';
    var $temp_0'$2_collection_Item'#0'': $2_collection_Item'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/collection.move:107:5+1
    assume {:print "$at(3,3896,3897)"} true;
    assume $IsValid'$2_collection_Collection'#0''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/collection.move:107:5+1
    assume $IsValid'$2_collection_Item'#0''($t1);

    // assume WellFormed($t2) at ./sources/collection.move:107:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[c]($t0) at ./sources/collection.move:107:5+1
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,6,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // trace_local[item]($t1) at ./sources/collection.move:107:5+1
    assume {:print "$track_local(15,6,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/collection.move:107:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(15,6,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := collection::remove<#0>($t0, $t1) on_abort goto L2 with $t5 at ./sources/collection.move:112:22+15
    assume {:print "$at(3,4058,4073)"} true;
    call $t4,$t0 := $2_collection_remove'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,4058,4073)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(15,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object]($t4) at ./sources/collection.move:112:13+6
    assume {:print "$track_local(15,6,3):", $t4} $t4 == $t4;

    // $t6 := read_ref($t2) at ./sources/collection.move:113:55+3
    assume {:print "$at(3,4129,4132)"} true;
    $t6 := $Dereference($t2);

    // $t7 := tx_context::sender($t6) on_abort goto L2 with $t5 at ./sources/collection.move:113:36+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(3,4110,4133)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(15,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // transfer::transfer<#0>($t4, $t7) on_abort goto L2 with $t5 at ./sources/collection.move:113:9+51
    call $2_transfer_transfer'#0'($t4, $t7);
    if ($abort_flag) {
        assume {:print "$at(3,4083,4134)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(15,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[c]($t0) at ./sources/collection.move:113:60+1
    $temp_0'$2_collection_Collection'#0'' := $Dereference($t0);
    assume {:print "$track_local(15,6,0):", $temp_0'$2_collection_Collection'#0''} $temp_0'$2_collection_Collection'#0'' == $temp_0'$2_collection_Collection'#0'';

    // trace_local[ctx]($t2) at ./sources/collection.move:113:60+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(15,6,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/collection.move:114:5+1
    assume {:print "$at(3,4140,4141)"} true;
L1:

    // return () at ./sources/collection.move:114:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/collection.move:114:5+1
L2:

    // abort($t5) at ./sources/collection.move:114:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct sui::SUI at ./sources/sui.move:12:5+22
type {:datatype} $2_sui_SUI;
function {:constructor} $2_sui_SUI($dummy_field: bool): $2_sui_SUI;
function {:inline} $Update'$2_sui_SUI'_dummy_field(s: $2_sui_SUI, x: bool): $2_sui_SUI {
    $2_sui_SUI(x)
}
function $IsValid'$2_sui_SUI'(s: $2_sui_SUI): bool {
    $IsValid'bool'($dummy_field#$2_sui_SUI(s))
}
function {:inline} $IsEqual'$2_sui_SUI'(s1: $2_sui_SUI, s2: $2_sui_SUI): bool {
    s1 == s2
}

// fun sui::new [baseline] at ./sources/sui.move:16:5+84
procedure {:inline 1} $2_sui_new() returns ($ret0: $2_balance_Supply'$2_sui_SUI')
{
    // declare local variables
    var $t0: bool;
    var $t1: $2_sui_SUI;
    var $t2: $2_balance_Supply'$2_sui_SUI';
    var $t3: int;
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';

    // bytecode translation starts here
    // $t0 := false at ./sources/sui.move:17:32+6
    assume {:print "$at(60,487,493)"} true;
    $t0 := false;
    assume $IsValid'bool'($t0);

    // $t1 := pack sui::SUI($t0) at ./sources/sui.move:17:32+6
    $t1 := $2_sui_SUI($t0);

    // $t2 := balance::create_supply<sui::SUI>($t1) on_abort goto L2 with $t3 at ./sources/sui.move:17:9+30
    call $t2 := $2_balance_create_supply'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(60,464,494)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(16,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/sui.move:17:9+30
    assume {:print "$track_return(16,0,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/sui.move:18:5+1
    assume {:print "$at(60,499,500)"} true;
L1:

    // return $t2 at ./sources/sui.move:18:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/sui.move:18:5+1
L2:

    // abort($t3) at ./sources/sui.move:18:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun sui::new [verification] at ./sources/sui.move:16:5+84
procedure {:timeLimit 40} $2_sui_new$verify() returns ($ret0: $2_balance_Supply'$2_sui_SUI')
{
    // declare local variables
    var $t0: bool;
    var $t1: $2_sui_SUI;
    var $t2: $2_balance_Supply'$2_sui_SUI';
    var $t3: int;
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := false at ./sources/sui.move:17:32+6
    assume {:print "$at(60,487,493)"} true;
    $t0 := false;
    assume $IsValid'bool'($t0);

    // $t1 := pack sui::SUI($t0) at ./sources/sui.move:17:32+6
    $t1 := $2_sui_SUI($t0);

    // $t2 := balance::create_supply<sui::SUI>($t1) on_abort goto L2 with $t3 at ./sources/sui.move:17:9+30
    call $t2 := $2_balance_create_supply'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(60,464,494)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(16,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/sui.move:17:9+30
    assume {:print "$track_return(16,0,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/sui.move:18:5+1
    assume {:print "$at(60,499,500)"} true;
L1:

    // return $t2 at ./sources/sui.move:18:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/sui.move:18:5+1
L2:

    // abort($t3) at ./sources/sui.move:18:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun sui::transfer [verification] at ./sources/sui.move:21:5+110
procedure {:timeLimit 40} $2_sui_transfer$verify(_$t0: $2_coin_Coin'$2_sui_SUI', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_coin_Coin'$2_sui_SUI';
    var $t1: int;
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/sui.move:21:5+1
    assume {:print "$at(60,538,539)"} true;
    assume $IsValid'$2_coin_Coin'$2_sui_SUI''($t0);

    // assume WellFormed($t1) at ./sources/sui.move:21:5+1
    assume $IsValid'address'($t1);

    // trace_local[c]($t0) at ./sources/sui.move:21:5+1
    assume {:print "$track_local(16,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/sui.move:21:5+1
    assume {:print "$track_local(16,1,1):", $t1} $t1 == $t1;

    // coin::transfer<sui::SUI>($t0, $t1) on_abort goto L2 with $t2 at ./sources/sui.move:22:9+28
    assume {:print "$at(60,614,642)"} true;
    call $2_coin_transfer'$2_sui_SUI'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(60,614,642)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(16,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/sui.move:23:5+1
    assume {:print "$at(60,647,648)"} true;
L1:

    // return () at ./sources/sui.move:23:5+1
    return;

    // label L2 at ./sources/sui.move:23:5+1
L2:

    // abort($t2) at ./sources/sui.move:23:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct epoch_time_lock::EpochTimeLock at ./sources/epoch_time_lock.move:14:5+57
type {:datatype} $2_epoch_time_lock_EpochTimeLock;
function {:constructor} $2_epoch_time_lock_EpochTimeLock($epoch: int): $2_epoch_time_lock_EpochTimeLock;
function {:inline} $Update'$2_epoch_time_lock_EpochTimeLock'_epoch(s: $2_epoch_time_lock_EpochTimeLock, x: int): $2_epoch_time_lock_EpochTimeLock {
    $2_epoch_time_lock_EpochTimeLock(x)
}
function $IsValid'$2_epoch_time_lock_EpochTimeLock'(s: $2_epoch_time_lock_EpochTimeLock): bool {
    $IsValid'u64'($epoch#$2_epoch_time_lock_EpochTimeLock(s))
}
function {:inline} $IsEqual'$2_epoch_time_lock_EpochTimeLock'(s1: $2_epoch_time_lock_EpochTimeLock, s2: $2_epoch_time_lock_EpochTimeLock): bool {
    s1 == s2
}

// fun epoch_time_lock::epoch [baseline] at ./sources/epoch_time_lock.move:31:5+70
procedure {:inline 1} $2_epoch_time_lock_epoch(_$t0: $2_epoch_time_lock_EpochTimeLock) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[lock]($t0) at ./sources/epoch_time_lock.move:31:5+1
    assume {:print "$at(46,1174,1175)"} true;
    assume {:print "$track_local(17,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<epoch_time_lock::EpochTimeLock>.epoch($t0) at ./sources/epoch_time_lock.move:32:9+10
    assume {:print "$at(46,1228,1238)"} true;
    $t1 := $epoch#$2_epoch_time_lock_EpochTimeLock($t0);

    // trace_return[0]($t1) at ./sources/epoch_time_lock.move:32:9+10
    assume {:print "$track_return(17,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/epoch_time_lock.move:33:5+1
    assume {:print "$at(46,1243,1244)"} true;
L1:

    // return $t1 at ./sources/epoch_time_lock.move:33:5+1
    $ret0 := $t1;
    return;

}

// fun epoch_time_lock::epoch [verification] at ./sources/epoch_time_lock.move:31:5+70
procedure {:timeLimit 40} $2_epoch_time_lock_epoch$verify(_$t0: $2_epoch_time_lock_EpochTimeLock) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/epoch_time_lock.move:31:5+1
    assume {:print "$at(46,1174,1175)"} true;
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t0);

    // trace_local[lock]($t0) at ./sources/epoch_time_lock.move:31:5+1
    assume {:print "$track_local(17,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<epoch_time_lock::EpochTimeLock>.epoch($t0) at ./sources/epoch_time_lock.move:32:9+10
    assume {:print "$at(46,1228,1238)"} true;
    $t1 := $epoch#$2_epoch_time_lock_EpochTimeLock($t0);

    // trace_return[0]($t1) at ./sources/epoch_time_lock.move:32:9+10
    assume {:print "$track_return(17,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/epoch_time_lock.move:33:5+1
    assume {:print "$at(46,1243,1244)"} true;
L1:

    // return $t1 at ./sources/epoch_time_lock.move:33:5+1
    $ret0 := $t1;
    return;

}

// fun epoch_time_lock::new [baseline] at ./sources/epoch_time_lock.move:19:5+175
procedure {:inline 1} $2_epoch_time_lock_new(_$t0: int, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_epoch_time_lock_EpochTimeLock, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_tx_context_TxContext;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: $2_epoch_time_lock_EpochTimeLock;
    var $t0: int;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[epoch]($t0) at ./sources/epoch_time_lock.move:19:5+1
    assume {:print "$at(46,671,672)"} true;
    assume {:print "$track_local(17,2,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:19:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,2,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := read_ref($t1) at ./sources/epoch_time_lock.move:20:35+3
    assume {:print "$at(46,771,774)"} true;
    $t2 := $Dereference($t1);

    // $t3 := tx_context::epoch($t2) on_abort goto L4 with $t4 at ./sources/epoch_time_lock.move:20:17+22
    call $t3 := $2_tx_context_epoch($t2);
    if ($abort_flag) {
        assume {:print "$at(46,753,775)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,2):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := <($t3, $t0) at ./sources/epoch_time_lock.move:20:40+1
    call $t5 := $Lt($t3, $t0);

    // if ($t5) goto L0 else goto L2 at ./sources/epoch_time_lock.move:20:9+62
    if ($t5) { goto L0; } else { goto L2; }

    // label L1 at ./sources/epoch_time_lock.move:20:49+21
L1:

    // $t6 := 0 at ./sources/epoch_time_lock.move:20:49+21
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/epoch_time_lock.move:20:9+62
    assume {:print "$at(46,745,807)"} true;
    assume {:print "$track_abort(17,2):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/epoch_time_lock.move:20:9+62
    $t4 := $t6;

    // goto L4 at ./sources/epoch_time_lock.move:20:9+62
    goto L4;

    // label L0 at ./sources/epoch_time_lock.move:21:25+5
    assume {:print "$at(46,833,838)"} true;
L0:

    // $t7 := pack epoch_time_lock::EpochTimeLock($t0) at ./sources/epoch_time_lock.move:21:9+23
    $t7 := $2_epoch_time_lock_EpochTimeLock($t0);

    // trace_return[0]($t7) at ./sources/epoch_time_lock.move:21:9+23
    assume {:print "$track_return(17,2,0):", $t7} $t7 == $t7;

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:21:9+23
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,2,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L3 at ./sources/epoch_time_lock.move:21:9+23
    goto L3;

    // label L2 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L2:

    // destroy($t1) at <internal>:1:1+10

    // goto L1 at <internal>:1:1+10
    goto L1;

    // label L3 at ./sources/epoch_time_lock.move:22:5+1
    assume {:print "$at(46,845,846)"} true;
L3:

    // return $t7 at ./sources/epoch_time_lock.move:22:5+1
    $ret0 := $t7;
    $ret1 := $t1;
    return;

    // label L4 at ./sources/epoch_time_lock.move:22:5+1
L4:

    // abort($t4) at ./sources/epoch_time_lock.move:22:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun epoch_time_lock::new [verification] at ./sources/epoch_time_lock.move:19:5+175
procedure {:timeLimit 40} $2_epoch_time_lock_new$verify(_$t0: int, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_epoch_time_lock_EpochTimeLock, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_tx_context_TxContext;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: $2_epoch_time_lock_EpochTimeLock;
    var $t0: int;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/epoch_time_lock.move:19:5+1
    assume {:print "$at(46,671,672)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/epoch_time_lock.move:19:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[epoch]($t0) at ./sources/epoch_time_lock.move:19:5+1
    assume {:print "$track_local(17,2,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:19:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,2,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := read_ref($t1) at ./sources/epoch_time_lock.move:20:35+3
    assume {:print "$at(46,771,774)"} true;
    $t2 := $Dereference($t1);

    // $t3 := tx_context::epoch($t2) on_abort goto L4 with $t4 at ./sources/epoch_time_lock.move:20:17+22
    call $t3 := $2_tx_context_epoch($t2);
    if ($abort_flag) {
        assume {:print "$at(46,753,775)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(17,2):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := <($t3, $t0) at ./sources/epoch_time_lock.move:20:40+1
    call $t5 := $Lt($t3, $t0);

    // if ($t5) goto L0 else goto L2 at ./sources/epoch_time_lock.move:20:9+62
    if ($t5) { goto L0; } else { goto L2; }

    // label L1 at ./sources/epoch_time_lock.move:20:49+21
L1:

    // $t6 := 0 at ./sources/epoch_time_lock.move:20:49+21
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/epoch_time_lock.move:20:9+62
    assume {:print "$at(46,745,807)"} true;
    assume {:print "$track_abort(17,2):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/epoch_time_lock.move:20:9+62
    $t4 := $t6;

    // goto L4 at ./sources/epoch_time_lock.move:20:9+62
    goto L4;

    // label L0 at ./sources/epoch_time_lock.move:21:25+5
    assume {:print "$at(46,833,838)"} true;
L0:

    // $t7 := pack epoch_time_lock::EpochTimeLock($t0) at ./sources/epoch_time_lock.move:21:9+23
    $t7 := $2_epoch_time_lock_EpochTimeLock($t0);

    // trace_return[0]($t7) at ./sources/epoch_time_lock.move:21:9+23
    assume {:print "$track_return(17,2,0):", $t7} $t7 == $t7;

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:21:9+23
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,2,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L3 at ./sources/epoch_time_lock.move:21:9+23
    goto L3;

    // label L2 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L2:

    // destroy($t1) at <internal>:1:1+10

    // goto L1 at <internal>:1:1+10
    goto L1;

    // label L3 at ./sources/epoch_time_lock.move:22:5+1
    assume {:print "$at(46,845,846)"} true;
L3:

    // return $t7 at ./sources/epoch_time_lock.move:22:5+1
    $ret0 := $t7;
    $ret1 := $t1;
    return;

    // label L4 at ./sources/epoch_time_lock.move:22:5+1
L4:

    // abort($t4) at ./sources/epoch_time_lock.move:22:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun epoch_time_lock::destroy [baseline] at ./sources/epoch_time_lock.move:25:5+183
procedure {:inline 1} $2_epoch_time_lock_destroy(_$t0: $2_epoch_time_lock_EpochTimeLock, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_tx_context_TxContext;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t0: $2_epoch_time_lock_EpochTimeLock;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[lock]($t0) at ./sources/epoch_time_lock.move:25:5+1
    assume {:print "$at(46,948,949)"} true;
    assume {:print "$track_local(17,0,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:25:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := unpack epoch_time_lock::EpochTimeLock($t0) at ./sources/epoch_time_lock.move:26:13+23
    assume {:print "$at(46,1023,1046)"} true;
    $t3 := $epoch#$2_epoch_time_lock_EpochTimeLock($t0);

    // trace_local[epoch]($t3) at ./sources/epoch_time_lock.move:26:29+5
    assume {:print "$track_local(17,0,2):", $t3} $t3 == $t3;

    // $t4 := read_ref($t1) at ./sources/epoch_time_lock.move:27:35+3
    assume {:print "$at(46,1089,1092)"} true;
    $t4 := $Dereference($t1);

    // $t5 := tx_context::epoch($t4) on_abort goto L4 with $t6 at ./sources/epoch_time_lock.move:27:17+22
    call $t5 := $2_tx_context_epoch($t4);
    if ($abort_flag) {
        assume {:print "$at(46,1071,1093)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,0):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := >=($t5, $t3) at ./sources/epoch_time_lock.move:27:40+2
    call $t7 := $Ge($t5, $t3);

    // if ($t7) goto L0 else goto L2 at ./sources/epoch_time_lock.move:27:9+61
    if ($t7) { goto L0; } else { goto L2; }

    // label L1 at ./sources/epoch_time_lock.move:27:50+19
L1:

    // $t8 := 1 at ./sources/epoch_time_lock.move:27:50+19
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/epoch_time_lock.move:27:9+61
    assume {:print "$at(46,1063,1124)"} true;
    assume {:print "$track_abort(17,0):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./sources/epoch_time_lock.move:27:9+61
    $t6 := $t8;

    // goto L4 at ./sources/epoch_time_lock.move:27:9+61
    goto L4;

    // label L0 at ./sources/epoch_time_lock.move:27:70+1
L0:

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:27:70+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L3 at ./sources/epoch_time_lock.move:27:70+1
    goto L3;

    // label L2 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L2:

    // destroy($t1) at <internal>:1:1+10

    // goto L1 at <internal>:1:1+10
    goto L1;

    // label L3 at ./sources/epoch_time_lock.move:28:5+1
    assume {:print "$at(46,1130,1131)"} true;
L3:

    // return () at ./sources/epoch_time_lock.move:28:5+1
    $ret0 := $t1;
    return;

    // label L4 at ./sources/epoch_time_lock.move:28:5+1
L4:

    // abort($t6) at ./sources/epoch_time_lock.move:28:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun epoch_time_lock::destroy [verification] at ./sources/epoch_time_lock.move:25:5+183
procedure {:timeLimit 40} $2_epoch_time_lock_destroy$verify(_$t0: $2_epoch_time_lock_EpochTimeLock, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_tx_context_TxContext;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t0: $2_epoch_time_lock_EpochTimeLock;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/epoch_time_lock.move:25:5+1
    assume {:print "$at(46,948,949)"} true;
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t0);

    // assume WellFormed($t1) at ./sources/epoch_time_lock.move:25:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[lock]($t0) at ./sources/epoch_time_lock.move:25:5+1
    assume {:print "$track_local(17,0,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:25:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := unpack epoch_time_lock::EpochTimeLock($t0) at ./sources/epoch_time_lock.move:26:13+23
    assume {:print "$at(46,1023,1046)"} true;
    $t3 := $epoch#$2_epoch_time_lock_EpochTimeLock($t0);

    // trace_local[epoch]($t3) at ./sources/epoch_time_lock.move:26:29+5
    assume {:print "$track_local(17,0,2):", $t3} $t3 == $t3;

    // $t4 := read_ref($t1) at ./sources/epoch_time_lock.move:27:35+3
    assume {:print "$at(46,1089,1092)"} true;
    $t4 := $Dereference($t1);

    // $t5 := tx_context::epoch($t4) on_abort goto L4 with $t6 at ./sources/epoch_time_lock.move:27:17+22
    call $t5 := $2_tx_context_epoch($t4);
    if ($abort_flag) {
        assume {:print "$at(46,1071,1093)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(17,0):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t7 := >=($t5, $t3) at ./sources/epoch_time_lock.move:27:40+2
    call $t7 := $Ge($t5, $t3);

    // if ($t7) goto L0 else goto L2 at ./sources/epoch_time_lock.move:27:9+61
    if ($t7) { goto L0; } else { goto L2; }

    // label L1 at ./sources/epoch_time_lock.move:27:50+19
L1:

    // $t8 := 1 at ./sources/epoch_time_lock.move:27:50+19
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // trace_abort($t8) at ./sources/epoch_time_lock.move:27:9+61
    assume {:print "$at(46,1063,1124)"} true;
    assume {:print "$track_abort(17,0):", $t8} $t8 == $t8;

    // $t6 := move($t8) at ./sources/epoch_time_lock.move:27:9+61
    $t6 := $t8;

    // goto L4 at ./sources/epoch_time_lock.move:27:9+61
    goto L4;

    // label L0 at ./sources/epoch_time_lock.move:27:70+1
L0:

    // trace_local[ctx]($t1) at ./sources/epoch_time_lock.move:27:70+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(17,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L3 at ./sources/epoch_time_lock.move:27:70+1
    goto L3;

    // label L2 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L2:

    // destroy($t1) at <internal>:1:1+10

    // goto L1 at <internal>:1:1+10
    goto L1;

    // label L3 at ./sources/epoch_time_lock.move:28:5+1
    assume {:print "$at(46,1130,1131)"} true;
L3:

    // return () at ./sources/epoch_time_lock.move:28:5+1
    $ret0 := $t1;
    return;

    // label L4 at ./sources/epoch_time_lock.move:28:5+1
L4:

    // abort($t6) at ./sources/epoch_time_lock.move:28:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct locked_coin::LockedCoin<sui::SUI> at ./sources/locked_coin.move:16:5+139
type {:datatype} $2_locked_coin_LockedCoin'$2_sui_SUI';
function {:constructor} $2_locked_coin_LockedCoin'$2_sui_SUI'($id: $2_object_UID, $balance: $2_balance_Balance'$2_sui_SUI', $locked_until_epoch: $2_epoch_time_lock_EpochTimeLock): $2_locked_coin_LockedCoin'$2_sui_SUI';
function {:inline} $Update'$2_locked_coin_LockedCoin'$2_sui_SUI''_id(s: $2_locked_coin_LockedCoin'$2_sui_SUI', x: $2_object_UID): $2_locked_coin_LockedCoin'$2_sui_SUI' {
    $2_locked_coin_LockedCoin'$2_sui_SUI'(x, $balance#$2_locked_coin_LockedCoin'$2_sui_SUI'(s), $locked_until_epoch#$2_locked_coin_LockedCoin'$2_sui_SUI'(s))
}
function {:inline} $Update'$2_locked_coin_LockedCoin'$2_sui_SUI''_balance(s: $2_locked_coin_LockedCoin'$2_sui_SUI', x: $2_balance_Balance'$2_sui_SUI'): $2_locked_coin_LockedCoin'$2_sui_SUI' {
    $2_locked_coin_LockedCoin'$2_sui_SUI'($id#$2_locked_coin_LockedCoin'$2_sui_SUI'(s), x, $locked_until_epoch#$2_locked_coin_LockedCoin'$2_sui_SUI'(s))
}
function {:inline} $Update'$2_locked_coin_LockedCoin'$2_sui_SUI''_locked_until_epoch(s: $2_locked_coin_LockedCoin'$2_sui_SUI', x: $2_epoch_time_lock_EpochTimeLock): $2_locked_coin_LockedCoin'$2_sui_SUI' {
    $2_locked_coin_LockedCoin'$2_sui_SUI'($id#$2_locked_coin_LockedCoin'$2_sui_SUI'(s), $balance#$2_locked_coin_LockedCoin'$2_sui_SUI'(s), x)
}
function $IsValid'$2_locked_coin_LockedCoin'$2_sui_SUI''(s: $2_locked_coin_LockedCoin'$2_sui_SUI'): bool {
    $IsValid'$2_object_UID'($id#$2_locked_coin_LockedCoin'$2_sui_SUI'(s))
      && $IsValid'$2_balance_Balance'$2_sui_SUI''($balance#$2_locked_coin_LockedCoin'$2_sui_SUI'(s))
      && $IsValid'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_locked_coin_LockedCoin'$2_sui_SUI'(s))
}
function {:inline} $IsEqual'$2_locked_coin_LockedCoin'$2_sui_SUI''(s1: $2_locked_coin_LockedCoin'$2_sui_SUI', s2: $2_locked_coin_LockedCoin'$2_sui_SUI'): bool {
    s1 == s2
}
var $2_locked_coin_LockedCoin'$2_sui_SUI'_$memory: $Memory $2_locked_coin_LockedCoin'$2_sui_SUI';

// struct locked_coin::LockedCoin<#0> at ./sources/locked_coin.move:16:5+139
type {:datatype} $2_locked_coin_LockedCoin'#0';
function {:constructor} $2_locked_coin_LockedCoin'#0'($id: $2_object_UID, $balance: $2_balance_Balance'#0', $locked_until_epoch: $2_epoch_time_lock_EpochTimeLock): $2_locked_coin_LockedCoin'#0';
function {:inline} $Update'$2_locked_coin_LockedCoin'#0''_id(s: $2_locked_coin_LockedCoin'#0', x: $2_object_UID): $2_locked_coin_LockedCoin'#0' {
    $2_locked_coin_LockedCoin'#0'(x, $balance#$2_locked_coin_LockedCoin'#0'(s), $locked_until_epoch#$2_locked_coin_LockedCoin'#0'(s))
}
function {:inline} $Update'$2_locked_coin_LockedCoin'#0''_balance(s: $2_locked_coin_LockedCoin'#0', x: $2_balance_Balance'#0'): $2_locked_coin_LockedCoin'#0' {
    $2_locked_coin_LockedCoin'#0'($id#$2_locked_coin_LockedCoin'#0'(s), x, $locked_until_epoch#$2_locked_coin_LockedCoin'#0'(s))
}
function {:inline} $Update'$2_locked_coin_LockedCoin'#0''_locked_until_epoch(s: $2_locked_coin_LockedCoin'#0', x: $2_epoch_time_lock_EpochTimeLock): $2_locked_coin_LockedCoin'#0' {
    $2_locked_coin_LockedCoin'#0'($id#$2_locked_coin_LockedCoin'#0'(s), $balance#$2_locked_coin_LockedCoin'#0'(s), x)
}
function $IsValid'$2_locked_coin_LockedCoin'#0''(s: $2_locked_coin_LockedCoin'#0'): bool {
    $IsValid'$2_object_UID'($id#$2_locked_coin_LockedCoin'#0'(s))
      && $IsValid'$2_balance_Balance'#0''($balance#$2_locked_coin_LockedCoin'#0'(s))
      && $IsValid'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_locked_coin_LockedCoin'#0'(s))
}
function {:inline} $IsEqual'$2_locked_coin_LockedCoin'#0''(s1: $2_locked_coin_LockedCoin'#0', s2: $2_locked_coin_LockedCoin'#0'): bool {
    s1 == s2
}
var $2_locked_coin_LockedCoin'#0'_$memory: $Memory $2_locked_coin_LockedCoin'#0';

// fun locked_coin::value<sui::SUI> [baseline] at ./sources/locked_coin.move:40:5+92
procedure {:inline 1} $2_locked_coin_value'$2_sui_SUI'(_$t0: $2_locked_coin_LockedCoin'$2_sui_SUI') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: int;
    var $t3: int;
    var $t0: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/locked_coin.move:40:5+1
    assume {:print "$at(10,1335,1336)"} true;
    assume {:print "$track_local(18,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<locked_coin::LockedCoin<#0>>.balance($t0) at ./sources/locked_coin.move:41:24+13
    assume {:print "$at(10,1407,1420)"} true;
    $t1 := $balance#$2_locked_coin_LockedCoin'$2_sui_SUI'($t0);

    // $t2 := balance::value<#0>($t1) on_abort goto L2 with $t3 at ./sources/locked_coin.move:41:9+29
    call $t2 := $2_balance_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(10,1392,1421)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(18,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/locked_coin.move:41:9+29
    assume {:print "$track_return(18,4,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/locked_coin.move:42:5+1
    assume {:print "$at(10,1426,1427)"} true;
L1:

    // return $t2 at ./sources/locked_coin.move:42:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/locked_coin.move:42:5+1
L2:

    // abort($t3) at ./sources/locked_coin.move:42:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun locked_coin::value [verification] at ./sources/locked_coin.move:40:5+92
procedure {:timeLimit 40} $2_locked_coin_value$verify(_$t0: $2_locked_coin_LockedCoin'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t2: int;
    var $t3: int;
    var $t0: $2_locked_coin_LockedCoin'#0';
    var $temp_0'$2_locked_coin_LockedCoin'#0'': $2_locked_coin_LockedCoin'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/locked_coin.move:40:5+1
    assume {:print "$at(10,1335,1336)"} true;
    assume $IsValid'$2_locked_coin_LockedCoin'#0''($t0);

    // trace_local[self]($t0) at ./sources/locked_coin.move:40:5+1
    assume {:print "$track_local(18,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<locked_coin::LockedCoin<#0>>.balance($t0) at ./sources/locked_coin.move:41:24+13
    assume {:print "$at(10,1407,1420)"} true;
    $t1 := $balance#$2_locked_coin_LockedCoin'#0'($t0);

    // $t2 := balance::value<#0>($t1) on_abort goto L2 with $t3 at ./sources/locked_coin.move:41:9+29
    call $t2 := $2_balance_value'#0'($t1);
    if ($abort_flag) {
        assume {:print "$at(10,1392,1421)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(18,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/locked_coin.move:41:9+29
    assume {:print "$track_return(18,4,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/locked_coin.move:42:5+1
    assume {:print "$at(10,1426,1427)"} true;
L1:

    // return $t2 at ./sources/locked_coin.move:42:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/locked_coin.move:42:5+1
L2:

    // abort($t3) at ./sources/locked_coin.move:42:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun locked_coin::into_balance<sui::SUI> [baseline] at ./sources/locked_coin.move:33:5+225
procedure {:inline 1} $2_locked_coin_into_balance'$2_sui_SUI'(_$t0: $2_locked_coin_LockedCoin'$2_sui_SUI') returns ($ret0: $2_balance_Balance'$2_sui_SUI', $ret1: $2_epoch_time_lock_EpochTimeLock)
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $2_object_UID;
    var $t3: $2_epoch_time_lock_EpochTimeLock;
    var $t4: $2_object_UID;
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: $2_epoch_time_lock_EpochTimeLock;
    var $t7: int;
    var $t0: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at ./sources/locked_coin.move:33:5+1
    assume {:print "$at(10,1054,1055)"} true;
    assume {:print "$track_local(18,0,0):", $t0} $t0 == $t0;

    // ($t4, $t5, $t6) := unpack locked_coin::LockedCoin<#0>($t0) at ./sources/locked_coin.move:34:13+46
    assume {:print "$at(10,1153,1199)"} true;
    $t4 := $id#$2_locked_coin_LockedCoin'$2_sui_SUI'($t0);
    $t5 := $balance#$2_locked_coin_LockedCoin'$2_sui_SUI'($t0);
    $t6 := $locked_until_epoch#$2_locked_coin_LockedCoin'$2_sui_SUI'($t0);

    // trace_local[locked_until_epoch]($t6) at ./sources/locked_coin.move:34:30+18
    assume {:print "$track_local(18,0,3):", $t6} $t6 == $t6;

    // trace_local[balance]($t5) at ./sources/locked_coin.move:34:50+7
    assume {:print "$track_local(18,0,1):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/locked_coin.move:34:26+2
    assume {:print "$track_local(18,0,2):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t7 at ./sources/locked_coin.move:35:9+18
    assume {:print "$at(10,1216,1234)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(10,1216,1234)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,0):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/locked_coin.move:36:9+29
    assume {:print "$at(10,1244,1273)"} true;
    assume {:print "$track_return(18,0,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at ./sources/locked_coin.move:36:9+29
    assume {:print "$track_return(18,0,1):", $t6} $t6 == $t6;

    // label L1 at ./sources/locked_coin.move:37:5+1
    assume {:print "$at(10,1278,1279)"} true;
L1:

    // return ($t5, $t6) at ./sources/locked_coin.move:37:5+1
    $ret0 := $t5;
    $ret1 := $t6;
    return;

    // label L2 at ./sources/locked_coin.move:37:5+1
L2:

    // abort($t7) at ./sources/locked_coin.move:37:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun locked_coin::into_balance [verification] at ./sources/locked_coin.move:33:5+225
procedure {:timeLimit 40} $2_locked_coin_into_balance$verify(_$t0: $2_locked_coin_LockedCoin'#0') returns ($ret0: $2_balance_Balance'#0', $ret1: $2_epoch_time_lock_EpochTimeLock)
{
    // declare local variables
    var $t1: $2_balance_Balance'#0';
    var $t2: $2_object_UID;
    var $t3: $2_epoch_time_lock_EpochTimeLock;
    var $t4: $2_object_UID;
    var $t5: $2_balance_Balance'#0';
    var $t6: $2_epoch_time_lock_EpochTimeLock;
    var $t7: int;
    var $t0: $2_locked_coin_LockedCoin'#0';
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'#0'': $2_locked_coin_LockedCoin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/locked_coin.move:33:5+1
    assume {:print "$at(10,1054,1055)"} true;
    assume $IsValid'$2_locked_coin_LockedCoin'#0''($t0);

    // trace_local[coin]($t0) at ./sources/locked_coin.move:33:5+1
    assume {:print "$track_local(18,0,0):", $t0} $t0 == $t0;

    // ($t4, $t5, $t6) := unpack locked_coin::LockedCoin<#0>($t0) at ./sources/locked_coin.move:34:13+46
    assume {:print "$at(10,1153,1199)"} true;
    $t4 := $id#$2_locked_coin_LockedCoin'#0'($t0);
    $t5 := $balance#$2_locked_coin_LockedCoin'#0'($t0);
    $t6 := $locked_until_epoch#$2_locked_coin_LockedCoin'#0'($t0);

    // trace_local[locked_until_epoch]($t6) at ./sources/locked_coin.move:34:30+18
    assume {:print "$track_local(18,0,3):", $t6} $t6 == $t6;

    // trace_local[balance]($t5) at ./sources/locked_coin.move:34:50+7
    assume {:print "$track_local(18,0,1):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/locked_coin.move:34:26+2
    assume {:print "$track_local(18,0,2):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t7 at ./sources/locked_coin.move:35:9+18
    assume {:print "$at(10,1216,1234)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(10,1216,1234)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,0):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t5) at ./sources/locked_coin.move:36:9+29
    assume {:print "$at(10,1244,1273)"} true;
    assume {:print "$track_return(18,0,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at ./sources/locked_coin.move:36:9+29
    assume {:print "$track_return(18,0,1):", $t6} $t6 == $t6;

    // label L1 at ./sources/locked_coin.move:37:5+1
    assume {:print "$at(10,1278,1279)"} true;
L1:

    // return ($t5, $t6) at ./sources/locked_coin.move:37:5+1
    $ret0 := $t5;
    $ret1 := $t6;
    return;

    // label L2 at ./sources/locked_coin.move:37:5+1
L2:

    // abort($t7) at ./sources/locked_coin.move:37:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun locked_coin::lock_coin [verification] at ./sources/locked_coin.move:47:5+278
procedure {:timeLimit 40} $2_locked_coin_lock_coin$verify(_$t0: $2_coin_Coin'#0', _$t1: int, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_balance_Balance'#0';
    var $t5: $2_balance_Balance'#0';
    var $t6: int;
    var $t7: $2_epoch_time_lock_EpochTimeLock;
    var $t0: $2_coin_Coin'#0';
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/locked_coin.move:47:5+1
    assume {:print "$at(10,1677,1678)"} true;
    assume $IsValid'$2_coin_Coin'#0''($t0);

    // assume WellFormed($t1) at ./sources/locked_coin.move:47:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/locked_coin.move:47:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/locked_coin.move:47:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[coin]($t0) at ./sources/locked_coin.move:47:5+1
    assume {:print "$track_local(18,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/locked_coin.move:47:5+1
    assume {:print "$track_local(18,1,1):", $t1} $t1 == $t1;

    // trace_local[locked_until_epoch]($t2) at ./sources/locked_coin.move:47:5+1
    assume {:print "$track_local(18,1,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:47:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := coin::into_balance<#0>($t0) on_abort goto L2 with $t6 at ./sources/locked_coin.move:50:23+24
    assume {:print "$at(10,1826,1850)"} true;
    call $t5 := $2_coin_into_balance'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(10,1826,1850)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[balance]($t5) at ./sources/locked_coin.move:50:13+7
    assume {:print "$track_local(18,1,4):", $t5} $t5 == $t5;

    // $t7 := epoch_time_lock::new($t2, $t3) on_abort goto L2 with $t6 at ./sources/locked_coin.move:51:35+45
    assume {:print "$at(10,1886,1931)"} true;
    call $t7,$t3 := $2_epoch_time_lock_new($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(10,1886,1931)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // locked_coin::new_from_balance<#0>($t5, $t7, $t1, $t3) on_abort goto L2 with $t6 at ./sources/locked_coin.move:51:9+88
    call $t3 := $2_locked_coin_new_from_balance'#0'($t5, $t7, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(10,1860,1948)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:51:97+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/locked_coin.move:52:5+1
    assume {:print "$at(10,1954,1955)"} true;
L1:

    // return () at ./sources/locked_coin.move:52:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/locked_coin.move:52:5+1
L2:

    // abort($t6) at ./sources/locked_coin.move:52:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun locked_coin::new_from_balance<sui::SUI> [baseline] at ./sources/locked_coin.move:23:5+315
procedure {:inline 1} $2_locked_coin_new_from_balance'$2_sui_SUI'(_$t0: $2_balance_Balance'$2_sui_SUI', _$t1: $2_epoch_time_lock_EpochTimeLock, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t0: $2_balance_Balance'$2_sui_SUI';
    var $t1: $2_epoch_time_lock_EpochTimeLock;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/locked_coin.move:23:5+1
    assume {:print "$at(10,673,674)"} true;
    assume {:print "$track_local(18,2,0):", $t0} $t0 == $t0;

    // trace_local[locked_until_epoch]($t1) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,1):", $t1} $t1 == $t1;

    // trace_local[owner]($t2) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:23:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := object::new($t3) on_abort goto L2 with $t6 at ./sources/locked_coin.move:25:17+16
    assume {:print "$at(10,854,870)"} true;
    call $t5,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(10,854,870)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := pack locked_coin::LockedCoin<#0>($t5, $t0, $t1) at ./sources/locked_coin.move:24:27+108
    assume {:print "$at(10,825,933)"} true;
    $t7 := $2_locked_coin_LockedCoin'$2_sui_SUI'($t5, $t0, $t1);

    // trace_local[locked_coin]($t7) at ./sources/locked_coin.move:24:13+11
    assume {:print "$track_local(18,2,4):", $t7} $t7 == $t7;

    // transfer::transfer<locked_coin::LockedCoin<#0>>($t7, $t2) on_abort goto L2 with $t6 at ./sources/locked_coin.move:29:9+38
    assume {:print "$at(10,943,981)"} true;
    call $2_transfer_transfer'$2_locked_coin_LockedCoin'$2_sui_SUI''($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,943,981)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:29:47+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/locked_coin.move:30:5+1
    assume {:print "$at(10,987,988)"} true;
L1:

    // return () at ./sources/locked_coin.move:30:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/locked_coin.move:30:5+1
L2:

    // abort($t6) at ./sources/locked_coin.move:30:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun locked_coin::new_from_balance<#0> [baseline] at ./sources/locked_coin.move:23:5+315
procedure {:inline 1} $2_locked_coin_new_from_balance'#0'(_$t0: $2_balance_Balance'#0', _$t1: $2_epoch_time_lock_EpochTimeLock, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_locked_coin_LockedCoin'#0';
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: $2_locked_coin_LockedCoin'#0';
    var $t0: $2_balance_Balance'#0';
    var $t1: $2_epoch_time_lock_EpochTimeLock;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'#0'': $2_locked_coin_LockedCoin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/locked_coin.move:23:5+1
    assume {:print "$at(10,673,674)"} true;
    assume {:print "$track_local(18,2,0):", $t0} $t0 == $t0;

    // trace_local[locked_until_epoch]($t1) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,1):", $t1} $t1 == $t1;

    // trace_local[owner]($t2) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:23:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := object::new($t3) on_abort goto L2 with $t6 at ./sources/locked_coin.move:25:17+16
    assume {:print "$at(10,854,870)"} true;
    call $t5,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(10,854,870)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := pack locked_coin::LockedCoin<#0>($t5, $t0, $t1) at ./sources/locked_coin.move:24:27+108
    assume {:print "$at(10,825,933)"} true;
    $t7 := $2_locked_coin_LockedCoin'#0'($t5, $t0, $t1);

    // trace_local[locked_coin]($t7) at ./sources/locked_coin.move:24:13+11
    assume {:print "$track_local(18,2,4):", $t7} $t7 == $t7;

    // transfer::transfer<locked_coin::LockedCoin<#0>>($t7, $t2) on_abort goto L2 with $t6 at ./sources/locked_coin.move:29:9+38
    assume {:print "$at(10,943,981)"} true;
    call $2_transfer_transfer'$2_locked_coin_LockedCoin'#0''($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,943,981)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:29:47+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/locked_coin.move:30:5+1
    assume {:print "$at(10,987,988)"} true;
L1:

    // return () at ./sources/locked_coin.move:30:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/locked_coin.move:30:5+1
L2:

    // abort($t6) at ./sources/locked_coin.move:30:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun locked_coin::new_from_balance [verification] at ./sources/locked_coin.move:23:5+315
procedure {:timeLimit 40} $2_locked_coin_new_from_balance$verify(_$t0: $2_balance_Balance'#0', _$t1: $2_epoch_time_lock_EpochTimeLock, _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_locked_coin_LockedCoin'#0';
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: $2_locked_coin_LockedCoin'#0';
    var $t0: $2_balance_Balance'#0';
    var $t1: $2_epoch_time_lock_EpochTimeLock;
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'#0'': $2_locked_coin_LockedCoin'#0';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/locked_coin.move:23:5+1
    assume {:print "$at(10,673,674)"} true;
    assume $IsValid'$2_balance_Balance'#0''($t0);

    // assume WellFormed($t1) at ./sources/locked_coin.move:23:5+1
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t1);

    // assume WellFormed($t2) at ./sources/locked_coin.move:23:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at ./sources/locked_coin.move:23:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[balance]($t0) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,0):", $t0} $t0 == $t0;

    // trace_local[locked_until_epoch]($t1) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,1):", $t1} $t1 == $t1;

    // trace_local[owner]($t2) at ./sources/locked_coin.move:23:5+1
    assume {:print "$track_local(18,2,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:23:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := object::new($t3) on_abort goto L2 with $t6 at ./sources/locked_coin.move:25:17+16
    assume {:print "$at(10,854,870)"} true;
    call $t5,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(10,854,870)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := pack locked_coin::LockedCoin<#0>($t5, $t0, $t1) at ./sources/locked_coin.move:24:27+108
    assume {:print "$at(10,825,933)"} true;
    $t7 := $2_locked_coin_LockedCoin'#0'($t5, $t0, $t1);

    // trace_local[locked_coin]($t7) at ./sources/locked_coin.move:24:13+11
    assume {:print "$track_local(18,2,4):", $t7} $t7 == $t7;

    // transfer::transfer<locked_coin::LockedCoin<#0>>($t7, $t2) on_abort goto L2 with $t6 at ./sources/locked_coin.move:29:9+38
    assume {:print "$at(10,943,981)"} true;
    call $2_transfer_transfer'$2_locked_coin_LockedCoin'#0''($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(10,943,981)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/locked_coin.move:29:47+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(18,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/locked_coin.move:30:5+1
    assume {:print "$at(10,987,988)"} true;
L1:

    // return () at ./sources/locked_coin.move:30:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/locked_coin.move:30:5+1
L2:

    // abort($t6) at ./sources/locked_coin.move:30:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun locked_coin::unlock_coin [verification] at ./sources/locked_coin.move:57:5+361
procedure {:timeLimit 40} $2_locked_coin_unlock_coin$verify(_$t0: $2_locked_coin_LockedCoin'#0', _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_balance_Balance'#0';
    var $t3: $2_coin_Coin'#0';
    var $t4: $2_object_UID;
    var $t5: $2_epoch_time_lock_EpochTimeLock;
    var $t6: $2_object_UID;
    var $t7: $2_balance_Balance'#0';
    var $t8: $2_epoch_time_lock_EpochTimeLock;
    var $t9: int;
    var $t10: $2_coin_Coin'#0';
    var $t11: $2_tx_context_TxContext;
    var $t12: int;
    var $t0: $2_locked_coin_LockedCoin'#0';
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'#0'': $2_balance_Balance'#0';
    var $temp_0'$2_coin_Coin'#0'': $2_coin_Coin'#0';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'#0'': $2_locked_coin_LockedCoin'#0';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/locked_coin.move:57:5+1
    assume {:print "$at(10,2203,2204)"} true;
    assume $IsValid'$2_locked_coin_LockedCoin'#0''($t0);

    // assume WellFormed($t1) at ./sources/locked_coin.move:57:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[locked_coin]($t0) at ./sources/locked_coin.move:57:5+1
    assume {:print "$track_local(18,3,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/locked_coin.move:57:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(18,3,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // ($t6, $t7, $t8) := unpack locked_coin::LockedCoin<#0>($t0) at ./sources/locked_coin.move:58:13+46
    assume {:print "$at(10,2298,2344)"} true;
    $t6 := $id#$2_locked_coin_LockedCoin'#0'($t0);
    $t7 := $balance#$2_locked_coin_LockedCoin'#0'($t0);
    $t8 := $locked_until_epoch#$2_locked_coin_LockedCoin'#0'($t0);

    // trace_local[locked_until_epoch]($t8) at ./sources/locked_coin.move:58:39+18
    assume {:print "$track_local(18,3,5):", $t8} $t8 == $t8;

    // trace_local[balance]($t7) at ./sources/locked_coin.move:58:30+7
    assume {:print "$track_local(18,3,2):", $t7} $t7 == $t7;

    // trace_local[id]($t6) at ./sources/locked_coin.move:58:26+2
    assume {:print "$track_local(18,3,4):", $t6} $t6 == $t6;

    // object::delete($t6) on_abort goto L2 with $t9 at ./sources/locked_coin.move:59:9+18
    assume {:print "$at(10,2368,2386)"} true;
    call $2_object_delete($t6);
    if ($abort_flag) {
        assume {:print "$at(10,2368,2386)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // epoch_time_lock::destroy($t8, $t1) on_abort goto L2 with $t9 at ./sources/locked_coin.move:60:9+49
    assume {:print "$at(10,2396,2445)"} true;
    call $t1 := $2_epoch_time_lock_destroy($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,2396,2445)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t10 := coin::from_balance<#0>($t7, $t1) on_abort goto L2 with $t9 at ./sources/locked_coin.move:61:20+32
    assume {:print "$at(10,2466,2498)"} true;
    call $t10,$t1 := $2_coin_from_balance'#0'($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(10,2466,2498)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[coin]($t10) at ./sources/locked_coin.move:61:13+4
    assume {:print "$track_local(18,3,3):", $t10} $t10 == $t10;

    // $t11 := read_ref($t1) at ./sources/locked_coin.move:62:53+3
    assume {:print "$at(10,2552,2555)"} true;
    $t11 := $Dereference($t1);

    // $t12 := tx_context::sender($t11) on_abort goto L2 with $t9 at ./sources/locked_coin.move:62:34+23
    call $t12 := $2_tx_context_sender($t11);
    if ($abort_flag) {
        assume {:print "$at(10,2533,2556)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // transfer::transfer<coin::Coin<#0>>($t10, $t12) on_abort goto L2 with $t9 at ./sources/locked_coin.move:62:9+49
    call $2_transfer_transfer'$2_coin_Coin'#0''($t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(10,2508,2557)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(18,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/locked_coin.move:62:58+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(18,3,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/locked_coin.move:63:5+1
    assume {:print "$at(10,2563,2564)"} true;
L1:

    // return () at ./sources/locked_coin.move:63:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/locked_coin.move:63:5+1
L2:

    // abort($t9) at ./sources/locked_coin.move:63:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// struct delegation::Delegation at ./sources/governance/delegation.move:25:5+1292
type {:datatype} $2_delegation_Delegation;
function {:constructor} $2_delegation_Delegation($id: $2_object_UID, $active_delegation: $1_option_Option'$2_balance_Balance'$2_sui_SUI'', $ending_epoch: $1_option_Option'u64', $delegate_amount: int, $next_reward_unclaimed_epoch: int, $coin_locked_until_epoch: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', $validator_address: int): $2_delegation_Delegation;
function {:inline} $Update'$2_delegation_Delegation'_id(s: $2_delegation_Delegation, x: $2_object_UID): $2_delegation_Delegation {
    $2_delegation_Delegation(x, $active_delegation#$2_delegation_Delegation(s), $ending_epoch#$2_delegation_Delegation(s), $delegate_amount#$2_delegation_Delegation(s), $next_reward_unclaimed_epoch#$2_delegation_Delegation(s), $coin_locked_until_epoch#$2_delegation_Delegation(s), $validator_address#$2_delegation_Delegation(s))
}
function {:inline} $Update'$2_delegation_Delegation'_active_delegation(s: $2_delegation_Delegation, x: $1_option_Option'$2_balance_Balance'$2_sui_SUI''): $2_delegation_Delegation {
    $2_delegation_Delegation($id#$2_delegation_Delegation(s), x, $ending_epoch#$2_delegation_Delegation(s), $delegate_amount#$2_delegation_Delegation(s), $next_reward_unclaimed_epoch#$2_delegation_Delegation(s), $coin_locked_until_epoch#$2_delegation_Delegation(s), $validator_address#$2_delegation_Delegation(s))
}
function {:inline} $Update'$2_delegation_Delegation'_ending_epoch(s: $2_delegation_Delegation, x: $1_option_Option'u64'): $2_delegation_Delegation {
    $2_delegation_Delegation($id#$2_delegation_Delegation(s), $active_delegation#$2_delegation_Delegation(s), x, $delegate_amount#$2_delegation_Delegation(s), $next_reward_unclaimed_epoch#$2_delegation_Delegation(s), $coin_locked_until_epoch#$2_delegation_Delegation(s), $validator_address#$2_delegation_Delegation(s))
}
function {:inline} $Update'$2_delegation_Delegation'_delegate_amount(s: $2_delegation_Delegation, x: int): $2_delegation_Delegation {
    $2_delegation_Delegation($id#$2_delegation_Delegation(s), $active_delegation#$2_delegation_Delegation(s), $ending_epoch#$2_delegation_Delegation(s), x, $next_reward_unclaimed_epoch#$2_delegation_Delegation(s), $coin_locked_until_epoch#$2_delegation_Delegation(s), $validator_address#$2_delegation_Delegation(s))
}
function {:inline} $Update'$2_delegation_Delegation'_next_reward_unclaimed_epoch(s: $2_delegation_Delegation, x: int): $2_delegation_Delegation {
    $2_delegation_Delegation($id#$2_delegation_Delegation(s), $active_delegation#$2_delegation_Delegation(s), $ending_epoch#$2_delegation_Delegation(s), $delegate_amount#$2_delegation_Delegation(s), x, $coin_locked_until_epoch#$2_delegation_Delegation(s), $validator_address#$2_delegation_Delegation(s))
}
function {:inline} $Update'$2_delegation_Delegation'_coin_locked_until_epoch(s: $2_delegation_Delegation, x: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): $2_delegation_Delegation {
    $2_delegation_Delegation($id#$2_delegation_Delegation(s), $active_delegation#$2_delegation_Delegation(s), $ending_epoch#$2_delegation_Delegation(s), $delegate_amount#$2_delegation_Delegation(s), $next_reward_unclaimed_epoch#$2_delegation_Delegation(s), x, $validator_address#$2_delegation_Delegation(s))
}
function {:inline} $Update'$2_delegation_Delegation'_validator_address(s: $2_delegation_Delegation, x: int): $2_delegation_Delegation {
    $2_delegation_Delegation($id#$2_delegation_Delegation(s), $active_delegation#$2_delegation_Delegation(s), $ending_epoch#$2_delegation_Delegation(s), $delegate_amount#$2_delegation_Delegation(s), $next_reward_unclaimed_epoch#$2_delegation_Delegation(s), $coin_locked_until_epoch#$2_delegation_Delegation(s), x)
}
function $IsValid'$2_delegation_Delegation'(s: $2_delegation_Delegation): bool {
    $IsValid'$2_object_UID'($id#$2_delegation_Delegation(s))
      && $IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($active_delegation#$2_delegation_Delegation(s))
      && $IsValid'$1_option_Option'u64''($ending_epoch#$2_delegation_Delegation(s))
      && $IsValid'u64'($delegate_amount#$2_delegation_Delegation(s))
      && $IsValid'u64'($next_reward_unclaimed_epoch#$2_delegation_Delegation(s))
      && $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($coin_locked_until_epoch#$2_delegation_Delegation(s))
      && $IsValid'address'($validator_address#$2_delegation_Delegation(s))
}
function {:inline} $IsEqual'$2_delegation_Delegation'(s1: $2_delegation_Delegation, s2: $2_delegation_Delegation): bool {
    $IsEqual'$2_object_UID'($id#$2_delegation_Delegation(s1), $id#$2_delegation_Delegation(s2))
    && $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($active_delegation#$2_delegation_Delegation(s1), $active_delegation#$2_delegation_Delegation(s2))
    && $IsEqual'$1_option_Option'u64''($ending_epoch#$2_delegation_Delegation(s1), $ending_epoch#$2_delegation_Delegation(s2))
    && $IsEqual'u64'($delegate_amount#$2_delegation_Delegation(s1), $delegate_amount#$2_delegation_Delegation(s2))
    && $IsEqual'u64'($next_reward_unclaimed_epoch#$2_delegation_Delegation(s1), $next_reward_unclaimed_epoch#$2_delegation_Delegation(s2))
    && $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($coin_locked_until_epoch#$2_delegation_Delegation(s1), $coin_locked_until_epoch#$2_delegation_Delegation(s2))
    && $IsEqual'address'($validator_address#$2_delegation_Delegation(s1), $validator_address#$2_delegation_Delegation(s2))}
var $2_delegation_Delegation_$memory: $Memory $2_delegation_Delegation;

// fun delegation::transfer [verification] at ./sources/governance/delegation.move:177:5+115
procedure {:timeLimit 40} $2_delegation_transfer$verify(_$t0: $2_delegation_Delegation, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_delegation_Delegation;
    var $t1: int;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:177:5+1
    assume {:print "$at(23,7069,7070)"} true;
    assume ($IsValid'$2_delegation_Delegation'($t0) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($t0))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($t0))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($t0))) <= 1)));

    // assume WellFormed($t1) at ./sources/governance/delegation.move:177:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/delegation.move:177:5+1
    assume {:print "$track_local(19,8,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/governance/delegation.move:177:5+1
    assume {:print "$track_local(19,8,1):", $t1} $t1 == $t1;

    // transfer::transfer<delegation::Delegation>($t0, $t1) on_abort goto L2 with $t2 at ./sources/governance/delegation.move:178:9+35
    assume {:print "$at(23,7143,7178)"} true;
    call $2_transfer_transfer'$2_delegation_Delegation'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(23,7143,7178)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(19,8):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/governance/delegation.move:179:5+1
    assume {:print "$at(23,7183,7184)"} true;
L1:

    // return () at ./sources/governance/delegation.move:179:5+1
    return;

    // label L2 at ./sources/governance/delegation.move:179:5+1
L2:

    // abort($t2) at ./sources/governance/delegation.move:179:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun delegation::create [baseline] at ./sources/governance/delegation.move:49:5+642
procedure {:inline 1} $2_delegation_create(_$t0: int, _$t1: int, _$t2: $2_coin_Coin'$2_sui_SUI', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: $2_delegation_Delegation;
    var $t6: int;
    var $t7: int;
    var $t8: $2_object_UID;
    var $t9: $2_balance_Balance'$2_sui_SUI';
    var $t10: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t11: $1_option_Option'u64';
    var $t12: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t13: $2_delegation_Delegation;
    var $t14: $2_tx_context_TxContext;
    var $t15: int;
    var $t0: int;
    var $t1: int;
    var $t2: $2_coin_Coin'$2_sui_SUI';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[starting_epoch]($t0) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$at(23,2355,2356)"} true;
    assume {:print "$track_local(19,3,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$track_local(19,3,1):", $t1} $t1 == $t1;

    // trace_local[stake]($t2) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$track_local(19,3,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:49:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,3,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := coin::value<sui::SUI>($t2) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:55:31+19
    assume {:print "$at(23,2540,2559)"} true;
    call $t6 := $2_coin_value'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,2540,2559)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[delegate_amount]($t6) at ./sources/governance/delegation.move:55:13+15
    assume {:print "$track_local(19,3,4):", $t6} $t6 == $t6;

    // $t8 := object::new($t3) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:57:17+16
    assume {:print "$at(23,2615,2631)"} true;
    call $t8,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(23,2615,2631)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t9 := coin::into_balance<sui::SUI>($t2) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:58:45+25
    assume {:print "$at(23,2677,2702)"} true;
    call $t9 := $2_coin_into_balance'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,2677,2702)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t10 := opaque begin: option::some<balance::Balance<sui::SUI>>($t9) at ./sources/governance/delegation.move:58:32+39

    // assume And(WellFormed($t10), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t10)), 1)) at ./sources/governance/delegation.move:58:32+39
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t10) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($t10)) <= 1));

    // assume Eq<option::Option<balance::Balance<sui::SUI>>>($t10, option::spec_some<balance::Balance<sui::SUI>>($t9)) at ./sources/governance/delegation.move:58:32+39
    assume $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t10, $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''($t9));

    // $t10 := opaque end: option::some<balance::Balance<sui::SUI>>($t9) at ./sources/governance/delegation.move:58:32+39

    // $t11 := opaque begin: option::none<u64>() at ./sources/governance/delegation.move:59:27+14
    assume {:print "$at(23,2731,2745)"} true;

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/delegation.move:59:27+14
    assume ($IsValid'$1_option_Option'u64''($t11) && (LenVec($vec#$1_option_Option'u64'($t11)) <= 1));

    // assume Eq<option::Option<u64>>($t11, option::spec_none<u64>()) at ./sources/governance/delegation.move:59:27+14
    assume $IsEqual'$1_option_Option'u64''($t11, $1_option_spec_none'u64'());

    // $t11 := opaque end: option::none<u64>() at ./sources/governance/delegation.move:59:27+14

    // $t12 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:62:38+14
    assume {:print "$at(23,2870,2884)"} true;

    // assume And(WellFormed($t12), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t12)), 1)) at ./sources/governance/delegation.move:62:38+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t12) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t12)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t12, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/delegation.move:62:38+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t12, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t12 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:62:38+14

    // $t13 := pack delegation::Delegation($t8, $t10, $t11, $t6, $t0, $t12, $t1) at ./sources/governance/delegation.move:56:26+340
    assume {:print "$at(23,2586,2926)"} true;
    $t13 := $2_delegation_Delegation($t8, $t10, $t11, $t6, $t0, $t12, $t1);

    // trace_local[delegation]($t13) at ./sources/governance/delegation.move:56:13+10
    assume {:print "$track_local(19,3,5):", $t13} $t13 == $t13;

    // $t14 := read_ref($t3) at ./sources/governance/delegation.move:65:59+3
    assume {:print "$at(23,2986,2989)"} true;
    $t14 := $Dereference($t3);

    // $t15 := tx_context::sender($t14) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:65:40+23
    call $t15 := $2_tx_context_sender($t14);
    if ($abort_flag) {
        assume {:print "$at(23,2967,2990)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // transfer::transfer<delegation::Delegation>($t13, $t15) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:65:9+55
    call $2_transfer_transfer'$2_delegation_Delegation'($t13, $t15);
    if ($abort_flag) {
        assume {:print "$at(23,2936,2991)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:65:9+55
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,3,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/delegation.move:66:5+1
    assume {:print "$at(23,2996,2997)"} true;
L1:

    // return () at ./sources/governance/delegation.move:66:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/delegation.move:66:5+1
L2:

    // abort($t7) at ./sources/governance/delegation.move:66:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun delegation::create [verification] at ./sources/governance/delegation.move:49:5+642
procedure {:timeLimit 40} $2_delegation_create$verify(_$t0: int, _$t1: int, _$t2: $2_coin_Coin'$2_sui_SUI', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: $2_delegation_Delegation;
    var $t6: int;
    var $t7: int;
    var $t8: $2_object_UID;
    var $t9: $2_balance_Balance'$2_sui_SUI';
    var $t10: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t11: $1_option_Option'u64';
    var $t12: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t13: $2_delegation_Delegation;
    var $t14: $2_tx_context_TxContext;
    var $t15: int;
    var $t0: int;
    var $t1: int;
    var $t2: $2_coin_Coin'$2_sui_SUI';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$at(23,2355,2356)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/governance/delegation.move:49:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/governance/delegation.move:49:5+1
    assume $IsValid'$2_coin_Coin'$2_sui_SUI''($t2);

    // assume WellFormed($t3) at ./sources/governance/delegation.move:49:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[starting_epoch]($t0) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$track_local(19,3,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$track_local(19,3,1):", $t1} $t1 == $t1;

    // trace_local[stake]($t2) at ./sources/governance/delegation.move:49:5+1
    assume {:print "$track_local(19,3,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:49:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,3,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := coin::value<sui::SUI>($t2) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:55:31+19
    assume {:print "$at(23,2540,2559)"} true;
    call $t6 := $2_coin_value'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,2540,2559)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[delegate_amount]($t6) at ./sources/governance/delegation.move:55:13+15
    assume {:print "$track_local(19,3,4):", $t6} $t6 == $t6;

    // $t8 := object::new($t3) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:57:17+16
    assume {:print "$at(23,2615,2631)"} true;
    call $t8,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(23,2615,2631)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t9 := coin::into_balance<sui::SUI>($t2) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:58:45+25
    assume {:print "$at(23,2677,2702)"} true;
    call $t9 := $2_coin_into_balance'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,2677,2702)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t10 := opaque begin: option::some<balance::Balance<sui::SUI>>($t9) at ./sources/governance/delegation.move:58:32+39

    // assume And(WellFormed($t10), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t10)), 1)) at ./sources/governance/delegation.move:58:32+39
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t10) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($t10)) <= 1));

    // assume Eq<option::Option<balance::Balance<sui::SUI>>>($t10, option::spec_some<balance::Balance<sui::SUI>>($t9)) at ./sources/governance/delegation.move:58:32+39
    assume $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t10, $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''($t9));

    // $t10 := opaque end: option::some<balance::Balance<sui::SUI>>($t9) at ./sources/governance/delegation.move:58:32+39

    // $t11 := opaque begin: option::none<u64>() at ./sources/governance/delegation.move:59:27+14
    assume {:print "$at(23,2731,2745)"} true;

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/delegation.move:59:27+14
    assume ($IsValid'$1_option_Option'u64''($t11) && (LenVec($vec#$1_option_Option'u64'($t11)) <= 1));

    // assume Eq<option::Option<u64>>($t11, option::spec_none<u64>()) at ./sources/governance/delegation.move:59:27+14
    assume $IsEqual'$1_option_Option'u64''($t11, $1_option_spec_none'u64'());

    // $t11 := opaque end: option::none<u64>() at ./sources/governance/delegation.move:59:27+14

    // $t12 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:62:38+14
    assume {:print "$at(23,2870,2884)"} true;

    // assume And(WellFormed($t12), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t12)), 1)) at ./sources/governance/delegation.move:62:38+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t12) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t12)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t12, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/delegation.move:62:38+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t12, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t12 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:62:38+14

    // $t13 := pack delegation::Delegation($t8, $t10, $t11, $t6, $t0, $t12, $t1) at ./sources/governance/delegation.move:56:26+340
    assume {:print "$at(23,2586,2926)"} true;
    $t13 := $2_delegation_Delegation($t8, $t10, $t11, $t6, $t0, $t12, $t1);

    // trace_local[delegation]($t13) at ./sources/governance/delegation.move:56:13+10
    assume {:print "$track_local(19,3,5):", $t13} $t13 == $t13;

    // $t14 := read_ref($t3) at ./sources/governance/delegation.move:65:59+3
    assume {:print "$at(23,2986,2989)"} true;
    $t14 := $Dereference($t3);

    // $t15 := tx_context::sender($t14) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:65:40+23
    call $t15 := $2_tx_context_sender($t14);
    if ($abort_flag) {
        assume {:print "$at(23,2967,2990)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // transfer::transfer<delegation::Delegation>($t13, $t15) on_abort goto L2 with $t7 at ./sources/governance/delegation.move:65:9+55
    call $2_transfer_transfer'$2_delegation_Delegation'($t13, $t15);
    if ($abort_flag) {
        assume {:print "$at(23,2936,2991)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(19,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:65:9+55
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,3,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/delegation.move:66:5+1
    assume {:print "$at(23,2996,2997)"} true;
L1:

    // return () at ./sources/governance/delegation.move:66:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/delegation.move:66:5+1
L2:

    // abort($t7) at ./sources/governance/delegation.move:66:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun delegation::burn [verification] at ./sources/governance/delegation.move:158:5+603
procedure {:timeLimit 40} $2_delegation_burn$verify(_$t0: $2_delegation_Delegation) returns ()
{
    // declare local variables
    var $t1: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $2_object_UID;
    var $t12: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t13: $1_option_Option'u64';
    var $t14: int;
    var $t15: int;
    var $t16: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''': $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:158:5+1
    assume {:print "$at(23,6460,6461)"} true;
    assume ($IsValid'$2_delegation_Delegation'($t0) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($t0))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($t0))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($t0))) <= 1)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:158:5+1
    assume {:print "$track_local(19,0,0):", $t0} $t0 == $t0;

    // $t7 := delegation::is_active($t0) on_abort goto L5 with $t8 at ./sources/governance/delegation.move:159:18+16
    assume {:print "$at(23,6519,6535)"} true;
    call $t7 := $2_delegation_is_active($t0);
    if ($abort_flag) {
        assume {:print "$at(23,6519,6535)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,0):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t9 := !($t7) at ./sources/governance/delegation.move:159:17+1
    call $t9 := $Not($t7);

    // if ($t9) goto L0 else goto L1 at ./sources/governance/delegation.move:159:9+29
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/delegation.move:159:36+1
L1:

    // $t10 := 0 at ./sources/governance/delegation.move:159:36+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/delegation.move:159:9+29
    assume {:print "$at(23,6510,6539)"} true;
    assume {:print "$track_abort(19,0):", $t10} $t10 == $t10;

    // $t8 := move($t10) at ./sources/governance/delegation.move:159:9+29
    $t8 := $t10;

    // goto L5 at ./sources/governance/delegation.move:159:9+29
    goto L5;

    // label L0 at ./sources/governance/delegation.move:169:13+4
    assume {:print "$at(23,6796,6800)"} true;
L0:

    // ($t11, $t12, $t13, $t14, $t15, $t16, $t17) := unpack delegation::Delegation($t0) at ./sources/governance/delegation.move:161:13+239
    assume {:print "$at(23,6554,6793)"} true;
    $t11 := $id#$2_delegation_Delegation($t0);
    $t12 := $active_delegation#$2_delegation_Delegation($t0);
    $t13 := $ending_epoch#$2_delegation_Delegation($t0);
    $t14 := $delegate_amount#$2_delegation_Delegation($t0);
    $t15 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($t0);
    $t16 := $coin_locked_until_epoch#$2_delegation_Delegation($t0);
    $t17 := $validator_address#$2_delegation_Delegation($t0);

    // destroy($t17) at ./sources/governance/delegation.move:168:32+1
    assume {:print "$at(23,6781,6782)"} true;

    // trace_local[coin_locked_until_epoch]($t16) at ./sources/governance/delegation.move:167:13+23
    assume {:print "$at(23,6725,6748)"} true;
    assume {:print "$track_local(19,0,2):", $t16} $t16 == $t16;

    // trace_local[next_reward_unclaimed_epoch]($t15) at ./sources/governance/delegation.move:166:13+27
    assume {:print "$at(23,6684,6711)"} true;
    assume {:print "$track_local(19,0,6):", $t15} $t15 == $t15;

    // destroy($t14) at ./sources/governance/delegation.move:165:30+1
    assume {:print "$at(23,6669,6670)"} true;

    // trace_local[ending_epoch]($t13) at ./sources/governance/delegation.move:164:13+12
    assume {:print "$at(23,6626,6638)"} true;
    assume {:print "$track_local(19,0,3):", $t13} $t13 == $t13;

    // trace_local[active_delegation]($t12) at ./sources/governance/delegation.move:163:13+17
    assume {:print "$at(23,6595,6612)"} true;
    assume {:print "$track_local(19,0,1):", $t12} $t12 == $t12;

    // trace_local[id]($t11) at ./sources/governance/delegation.move:162:13+2
    assume {:print "$at(23,6579,6581)"} true;
    assume {:print "$track_local(19,0,5):", $t11} $t11 == $t11;

    // object::delete($t11) on_abort goto L5 with $t8 at ./sources/governance/delegation.move:170:9+18
    assume {:print "$at(23,6810,6828)"} true;
    call $2_object_delete($t11);
    if ($abort_flag) {
        assume {:print "$at(23,6810,6828)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,0):", $t8} $t8 == $t8;
        goto L5;
    }

    // opaque begin: option::destroy_none<balance::Balance<sui::SUI>>($t12) at ./sources/governance/delegation.move:171:9+39
    assume {:print "$at(23,6838,6877)"} true;

    // assume Identical($t18, option::$is_some<balance::Balance<sui::SUI>>($t12)) at ./sources/governance/delegation.move:171:9+39
    assume ($t18 == $1_option_$is_some'$2_balance_Balance'$2_sui_SUI''($t12));

    // if ($t18) goto L7 else goto L6 at ./sources/governance/delegation.move:171:9+39
    if ($t18) { goto L7; } else { goto L6; }

    // label L7 at ./sources/governance/delegation.move:171:9+39
L7:

    // assume And(option::$is_some<balance::Balance<sui::SUI>>($t12), Eq(7, $t8)) at ./sources/governance/delegation.move:171:9+39
    assume ($1_option_$is_some'$2_balance_Balance'$2_sui_SUI''($t12) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:171:9+39
    assume {:print "$at(23,6838,6877)"} true;
    assume {:print "$track_abort(19,0):", $t8} $t8 == $t8;

    // goto L5 at ./sources/governance/delegation.move:171:9+39
    goto L5;

    // label L6 at ./sources/governance/delegation.move:171:9+39
L6:

    // opaque end: option::destroy_none<balance::Balance<sui::SUI>>($t12) at ./sources/governance/delegation.move:171:9+39

    // opaque begin: option::destroy_none<epoch_time_lock::EpochTimeLock>($t16) at ./sources/governance/delegation.move:172:9+45
    assume {:print "$at(23,6887,6932)"} true;

    // assume Identical($t19, option::$is_some<epoch_time_lock::EpochTimeLock>($t16)) at ./sources/governance/delegation.move:172:9+45
    assume ($t19 == $1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t16));

    // if ($t19) goto L9 else goto L8 at ./sources/governance/delegation.move:172:9+45
    if ($t19) { goto L9; } else { goto L8; }

    // label L9 at ./sources/governance/delegation.move:172:9+45
L9:

    // assume And(option::$is_some<epoch_time_lock::EpochTimeLock>($t16), Eq(7, $t8)) at ./sources/governance/delegation.move:172:9+45
    assume ($1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t16) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:172:9+45
    assume {:print "$at(23,6887,6932)"} true;
    assume {:print "$track_abort(19,0):", $t8} $t8 == $t8;

    // goto L5 at ./sources/governance/delegation.move:172:9+45
    goto L5;

    // label L8 at ./sources/governance/delegation.move:172:9+45
L8:

    // opaque end: option::destroy_none<epoch_time_lock::EpochTimeLock>($t16) at ./sources/governance/delegation.move:172:9+45

    // $t20 := opaque begin: option::borrow<u64>($t13) at ./sources/governance/delegation.move:173:29+29
    assume {:print "$at(23,6962,6991)"} true;

    // assume Identical($t21, option::$is_none<u64>($t13)) at ./sources/governance/delegation.move:173:29+29
    assume ($t21 == $1_option_$is_none'u64'($t13));

    // if ($t21) goto L11 else goto L10 at ./sources/governance/delegation.move:173:29+29
    if ($t21) { goto L11; } else { goto L10; }

    // label L11 at ./sources/governance/delegation.move:173:29+29
L11:

    // assume And(option::$is_none<u64>($t13), Eq(7, $t8)) at ./sources/governance/delegation.move:173:29+29
    assume ($1_option_$is_none'u64'($t13) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:173:29+29
    assume {:print "$at(23,6962,6991)"} true;
    assume {:print "$track_abort(19,0):", $t8} $t8 == $t8;

    // goto L5 at ./sources/governance/delegation.move:173:29+29
    goto L5;

    // label L10 at ./sources/governance/delegation.move:173:29+29
L10:

    // assume WellFormed($t20) at ./sources/governance/delegation.move:173:29+29
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, option::$borrow<u64>($t13)) at ./sources/governance/delegation.move:173:29+29
    assume $IsEqual'u64'($t20, $1_option_$borrow'u64'($t13));

    // $t20 := opaque end: option::borrow<u64>($t13) at ./sources/governance/delegation.move:173:29+29

    // trace_local[ending_epoch#1]($t20) at ./sources/governance/delegation.move:173:13+12
    assume {:print "$track_local(19,0,4):", $t20} $t20 == $t20;

    // $t22 := ==($t15, $t20) at ./sources/governance/delegation.move:174:45+2
    assume {:print "$at(23,7037,7039)"} true;
    $t22 := $IsEqual'u64'($t15, $t20);

    // if ($t22) goto L2 else goto L3 at ./sources/governance/delegation.move:174:9+55
    if ($t22) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/delegation.move:174:62+1
L3:

    // $t23 := 0 at ./sources/governance/delegation.move:174:62+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // trace_abort($t23) at ./sources/governance/delegation.move:174:9+55
    assume {:print "$at(23,7001,7056)"} true;
    assume {:print "$track_abort(19,0):", $t23} $t23 == $t23;

    // $t8 := move($t23) at ./sources/governance/delegation.move:174:9+55
    $t8 := $t23;

    // goto L5 at ./sources/governance/delegation.move:174:9+55
    goto L5;

    // label L2 at ./sources/governance/delegation.move:174:64+1
L2:

    // label L4 at ./sources/governance/delegation.move:175:5+1
    assume {:print "$at(23,7062,7063)"} true;
L4:

    // return () at ./sources/governance/delegation.move:175:5+1
    return;

    // label L5 at ./sources/governance/delegation.move:175:5+1
L5:

    // abort($t8) at ./sources/governance/delegation.move:175:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun delegation::can_claim_reward [baseline] at ./sources/governance/delegation.move:183:5+468
procedure {:inline 1} $2_delegation_can_claim_reward(_$t0: $2_delegation_Delegation, _$t1: int, _$t2: int) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: $1_option_Option'u64';
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: bool;
    var $t0: $2_delegation_Delegation;
    var $t1: int;
    var $t2: int;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$at(23,7327,7328)"} true;
    assume {:print "$track_local(19,1,0):", $t0} $t0 == $t0;

    // trace_local[epoch_to_claim]($t1) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$track_local(19,1,1):", $t1} $t1 == $t1;

    // trace_local[validator]($t2) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$track_local(19,1,2):", $t2} $t2 == $t2;

    // $t5 := get_field<delegation::Delegation>.validator_address($t0) at ./sources/governance/delegation.move:188:26+22
    assume {:print "$at(23,7479,7501)"} true;
    $t5 := $validator_address#$2_delegation_Delegation($t0);

    // $t6 := !=($t2, $t5) at ./sources/governance/delegation.move:188:23+2
    $t6 := !$IsEqual'address'($t2, $t5);

    // if ($t6) goto L0 else goto L2 at ./sources/governance/delegation.move:188:13+101
    if ($t6) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/delegation.move:188:13+101
L0:

    // $t7 := true at ./sources/governance/delegation.move:188:13+101
    $t7 := true;
    assume $IsValid'bool'($t7);

    // $t3 := $t7 at ./sources/governance/delegation.move:188:13+101
    $t3 := $t7;

    // goto L3 at ./sources/governance/delegation.move:188:13+101
    goto L3;

    // label L2 at ./sources/governance/delegation.move:189:13+4
    assume {:print "$at(23,7518,7522)"} true;
L2:

    // $t8 := get_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:189:13+32
    $t8 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($t0);

    // $t3 := >($t8, $t1) at ./sources/governance/delegation.move:189:46+1
    call $t3 := $Gt($t8, $t1);

    // label L3 at ./sources/governance/delegation.move:188:13+101
    assume {:print "$at(23,7466,7567)"} true;
L3:

    // if ($t3) goto L4 else goto L6 at ./sources/governance/delegation.move:188:9+152
    if ($t3) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/delegation.move:191:13+12
    assume {:print "$at(23,7592,7604)"} true;
L4:

    // destroy($t0) at ./sources/governance/delegation.move:191:13+12

    // $t9 := false at ./sources/governance/delegation.move:191:20+5
    $t9 := false;
    assume $IsValid'bool'($t9);

    // trace_return[0]($t9) at ./sources/governance/delegation.move:191:13+12
    assume {:print "$track_return(19,1,0):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ./sources/governance/delegation.move:191:13+12
    $t10 := $t9;

    // goto L10 at ./sources/governance/delegation.move:191:13+12
    goto L10;

    // label L6 at ./sources/governance/delegation.move:193:24+4
    assume {:print "$at(23,7640,7644)"} true;
L6:

    // $t11 := delegation::is_active($t0) on_abort goto L11 with $t12 at ./sources/governance/delegation.move:193:14+15
    call $t11 := $2_delegation_is_active($t0);
    if ($abort_flag) {
        assume {:print "$at(23,7630,7645)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,1):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t13 := !($t11) at ./sources/governance/delegation.move:193:13+1
    call $t13 := $Not($t11);

    // if ($t13) goto L7 else goto L9 at ./sources/governance/delegation.move:193:9+150
    if ($t13) { goto L7; } else { goto L9; }

    // label L7 at ./sources/governance/delegation.move:194:49+4
    assume {:print "$at(23,7697,7701)"} true;
L7:

    // $t14 := get_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:194:48+18
    $t14 := $ending_epoch#$2_delegation_Delegation($t0);

    // $t15 := opaque begin: option::borrow<u64>($t14) at ./sources/governance/delegation.move:194:33+34

    // assume Identical($t16, option::$is_none<u64>($t14)) at ./sources/governance/delegation.move:194:33+34
    assume ($t16 == $1_option_$is_none'u64'($t14));

    // if ($t16) goto L13 else goto L12 at ./sources/governance/delegation.move:194:33+34
    if ($t16) { goto L13; } else { goto L12; }

    // label L13 at ./sources/governance/delegation.move:194:33+34
L13:

    // assume And(option::$is_none<u64>($t14), Eq(7, $t12)) at ./sources/governance/delegation.move:194:33+34
    assume ($1_option_$is_none'u64'($t14) && $IsEqual'num'(7, $t12));

    // trace_abort($t12) at ./sources/governance/delegation.move:194:33+34
    assume {:print "$at(23,7681,7715)"} true;
    assume {:print "$track_abort(19,1):", $t12} $t12 == $t12;

    // goto L11 at ./sources/governance/delegation.move:194:33+34
    goto L11;

    // label L12 at ./sources/governance/delegation.move:194:33+34
L12:

    // assume WellFormed($t15) at ./sources/governance/delegation.move:194:33+34
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, option::$borrow<u64>($t14)) at ./sources/governance/delegation.move:194:33+34
    assume $IsEqual'u64'($t15, $1_option_$borrow'u64'($t14));

    // $t15 := opaque end: option::borrow<u64>($t14) at ./sources/governance/delegation.move:194:33+34

    // trace_local[ending_epoch]($t15) at ./sources/governance/delegation.move:194:17+12
    assume {:print "$track_local(19,1,4):", $t15} $t15 == $t15;

    // $t17 := >($t15, $t1) at ./sources/governance/delegation.move:195:33+1
    assume {:print "$at(23,7749,7750)"} true;
    call $t17 := $Gt($t15, $t1);

    // trace_return[0]($t17) at ./sources/governance/delegation.move:195:13+36
    assume {:print "$track_return(19,1,0):", $t17} $t17 == $t17;

    // $t10 := move($t17) at ./sources/governance/delegation.move:195:13+36
    $t10 := $t17;

    // goto L10 at ./sources/governance/delegation.move:195:13+36
    goto L10;

    // label L9 at ./sources/governance/delegation.move:193:9+150
    assume {:print "$at(23,7625,7775)"} true;
L9:

    // destroy($t0) at ./sources/governance/delegation.move:193:9+150

    // $t18 := true at ./sources/governance/delegation.move:197:9+4
    assume {:print "$at(23,7785,7789)"} true;
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_return[0]($t18) at ./sources/governance/delegation.move:197:9+4
    assume {:print "$track_return(19,1,0):", $t18} $t18 == $t18;

    // $t10 := move($t18) at ./sources/governance/delegation.move:197:9+4
    $t10 := $t18;

    // label L10 at ./sources/governance/delegation.move:198:5+1
    assume {:print "$at(23,7794,7795)"} true;
L10:

    // return $t10 at ./sources/governance/delegation.move:198:5+1
    $ret0 := $t10;
    return;

    // label L11 at ./sources/governance/delegation.move:198:5+1
L11:

    // abort($t12) at ./sources/governance/delegation.move:198:5+1
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun delegation::can_claim_reward [verification] at ./sources/governance/delegation.move:183:5+468
procedure {:timeLimit 40} $2_delegation_can_claim_reward$verify(_$t0: $2_delegation_Delegation, _$t1: int, _$t2: int) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: $1_option_Option'u64';
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: bool;
    var $t0: $2_delegation_Delegation;
    var $t1: int;
    var $t2: int;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$at(23,7327,7328)"} true;
    assume ($IsValid'$2_delegation_Delegation'($t0) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($t0))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($t0))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($t0))) <= 1)));

    // assume WellFormed($t1) at ./sources/governance/delegation.move:183:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/delegation.move:183:5+1
    assume $IsValid'address'($t2);

    // trace_local[self]($t0) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$track_local(19,1,0):", $t0} $t0 == $t0;

    // trace_local[epoch_to_claim]($t1) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$track_local(19,1,1):", $t1} $t1 == $t1;

    // trace_local[validator]($t2) at ./sources/governance/delegation.move:183:5+1
    assume {:print "$track_local(19,1,2):", $t2} $t2 == $t2;

    // $t5 := get_field<delegation::Delegation>.validator_address($t0) at ./sources/governance/delegation.move:188:26+22
    assume {:print "$at(23,7479,7501)"} true;
    $t5 := $validator_address#$2_delegation_Delegation($t0);

    // $t6 := !=($t2, $t5) at ./sources/governance/delegation.move:188:23+2
    $t6 := !$IsEqual'address'($t2, $t5);

    // if ($t6) goto L0 else goto L2 at ./sources/governance/delegation.move:188:13+101
    if ($t6) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/delegation.move:188:13+101
L0:

    // $t7 := true at ./sources/governance/delegation.move:188:13+101
    $t7 := true;
    assume $IsValid'bool'($t7);

    // $t3 := $t7 at ./sources/governance/delegation.move:188:13+101
    $t3 := $t7;

    // goto L3 at ./sources/governance/delegation.move:188:13+101
    goto L3;

    // label L2 at ./sources/governance/delegation.move:189:13+4
    assume {:print "$at(23,7518,7522)"} true;
L2:

    // $t8 := get_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:189:13+32
    $t8 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($t0);

    // $t3 := >($t8, $t1) at ./sources/governance/delegation.move:189:46+1
    call $t3 := $Gt($t8, $t1);

    // label L3 at ./sources/governance/delegation.move:188:13+101
    assume {:print "$at(23,7466,7567)"} true;
L3:

    // if ($t3) goto L4 else goto L6 at ./sources/governance/delegation.move:188:9+152
    if ($t3) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/delegation.move:191:13+12
    assume {:print "$at(23,7592,7604)"} true;
L4:

    // destroy($t0) at ./sources/governance/delegation.move:191:13+12

    // $t9 := false at ./sources/governance/delegation.move:191:20+5
    $t9 := false;
    assume $IsValid'bool'($t9);

    // trace_return[0]($t9) at ./sources/governance/delegation.move:191:13+12
    assume {:print "$track_return(19,1,0):", $t9} $t9 == $t9;

    // $t10 := move($t9) at ./sources/governance/delegation.move:191:13+12
    $t10 := $t9;

    // goto L10 at ./sources/governance/delegation.move:191:13+12
    goto L10;

    // label L6 at ./sources/governance/delegation.move:193:24+4
    assume {:print "$at(23,7640,7644)"} true;
L6:

    // $t11 := delegation::is_active($t0) on_abort goto L11 with $t12 at ./sources/governance/delegation.move:193:14+15
    call $t11 := $2_delegation_is_active($t0);
    if ($abort_flag) {
        assume {:print "$at(23,7630,7645)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,1):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t13 := !($t11) at ./sources/governance/delegation.move:193:13+1
    call $t13 := $Not($t11);

    // if ($t13) goto L7 else goto L9 at ./sources/governance/delegation.move:193:9+150
    if ($t13) { goto L7; } else { goto L9; }

    // label L7 at ./sources/governance/delegation.move:194:49+4
    assume {:print "$at(23,7697,7701)"} true;
L7:

    // $t14 := get_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:194:48+18
    $t14 := $ending_epoch#$2_delegation_Delegation($t0);

    // $t15 := opaque begin: option::borrow<u64>($t14) at ./sources/governance/delegation.move:194:33+34

    // assume Identical($t16, option::$is_none<u64>($t14)) at ./sources/governance/delegation.move:194:33+34
    assume ($t16 == $1_option_$is_none'u64'($t14));

    // if ($t16) goto L13 else goto L12 at ./sources/governance/delegation.move:194:33+34
    if ($t16) { goto L13; } else { goto L12; }

    // label L13 at ./sources/governance/delegation.move:194:33+34
L13:

    // assume And(option::$is_none<u64>($t14), Eq(7, $t12)) at ./sources/governance/delegation.move:194:33+34
    assume ($1_option_$is_none'u64'($t14) && $IsEqual'num'(7, $t12));

    // trace_abort($t12) at ./sources/governance/delegation.move:194:33+34
    assume {:print "$at(23,7681,7715)"} true;
    assume {:print "$track_abort(19,1):", $t12} $t12 == $t12;

    // goto L11 at ./sources/governance/delegation.move:194:33+34
    goto L11;

    // label L12 at ./sources/governance/delegation.move:194:33+34
L12:

    // assume WellFormed($t15) at ./sources/governance/delegation.move:194:33+34
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, option::$borrow<u64>($t14)) at ./sources/governance/delegation.move:194:33+34
    assume $IsEqual'u64'($t15, $1_option_$borrow'u64'($t14));

    // $t15 := opaque end: option::borrow<u64>($t14) at ./sources/governance/delegation.move:194:33+34

    // trace_local[ending_epoch]($t15) at ./sources/governance/delegation.move:194:17+12
    assume {:print "$track_local(19,1,4):", $t15} $t15 == $t15;

    // $t17 := >($t15, $t1) at ./sources/governance/delegation.move:195:33+1
    assume {:print "$at(23,7749,7750)"} true;
    call $t17 := $Gt($t15, $t1);

    // trace_return[0]($t17) at ./sources/governance/delegation.move:195:13+36
    assume {:print "$track_return(19,1,0):", $t17} $t17 == $t17;

    // $t10 := move($t17) at ./sources/governance/delegation.move:195:13+36
    $t10 := $t17;

    // goto L10 at ./sources/governance/delegation.move:195:13+36
    goto L10;

    // label L9 at ./sources/governance/delegation.move:193:9+150
    assume {:print "$at(23,7625,7775)"} true;
L9:

    // destroy($t0) at ./sources/governance/delegation.move:193:9+150

    // $t18 := true at ./sources/governance/delegation.move:197:9+4
    assume {:print "$at(23,7785,7789)"} true;
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_return[0]($t18) at ./sources/governance/delegation.move:197:9+4
    assume {:print "$track_return(19,1,0):", $t18} $t18 == $t18;

    // $t10 := move($t18) at ./sources/governance/delegation.move:197:9+4
    $t10 := $t18;

    // label L10 at ./sources/governance/delegation.move:198:5+1
    assume {:print "$at(23,7794,7795)"} true;
L10:

    // return $t10 at ./sources/governance/delegation.move:198:5+1
    $ret0 := $t10;
    return;

    // label L11 at ./sources/governance/delegation.move:198:5+1
L11:

    // abort($t12) at ./sources/governance/delegation.move:198:5+1
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun delegation::validator [baseline] at ./sources/governance/delegation.move:200:5+87
procedure {:inline 1} $2_delegation_validator(_$t0: $2_delegation_Delegation) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:200:5+1
    assume {:print "$at(23,7801,7802)"} true;
    assume {:print "$track_local(19,10,0):", $t0} $t0 == $t0;

    // $t1 := get_field<delegation::Delegation>.validator_address($t0) at ./sources/governance/delegation.move:201:9+22
    assume {:print "$at(23,7860,7882)"} true;
    $t1 := $validator_address#$2_delegation_Delegation($t0);

    // trace_return[0]($t1) at ./sources/governance/delegation.move:201:9+22
    assume {:print "$track_return(19,10,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/delegation.move:202:5+1
    assume {:print "$at(23,7887,7888)"} true;
L1:

    // return $t1 at ./sources/governance/delegation.move:202:5+1
    $ret0 := $t1;
    return;

}

// fun delegation::validator [verification] at ./sources/governance/delegation.move:200:5+87
procedure {:timeLimit 40} $2_delegation_validator$verify(_$t0: $2_delegation_Delegation) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:200:5+1
    assume {:print "$at(23,7801,7802)"} true;
    assume ($IsValid'$2_delegation_Delegation'($t0) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($t0))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($t0))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($t0))) <= 1)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:200:5+1
    assume {:print "$track_local(19,10,0):", $t0} $t0 == $t0;

    // $t1 := get_field<delegation::Delegation>.validator_address($t0) at ./sources/governance/delegation.move:201:9+22
    assume {:print "$at(23,7860,7882)"} true;
    $t1 := $validator_address#$2_delegation_Delegation($t0);

    // trace_return[0]($t1) at ./sources/governance/delegation.move:201:9+22
    assume {:print "$track_return(19,10,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/delegation.move:202:5+1
    assume {:print "$at(23,7887,7888)"} true;
L1:

    // return $t1 at ./sources/governance/delegation.move:202:5+1
    $ret0 := $t1;
    return;

}

// fun delegation::claim_reward [baseline] at ./sources/governance/delegation.move:145:5+328
procedure {:inline 1} $2_delegation_claim_reward(_$t0: $Mutation ($2_delegation_Delegation), _$t1: $2_balance_Balance'$2_sui_SUI', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_delegation_Delegation), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_tx_context_TxContext;
    var $t5: int;
    var $t6: int;
    var $t7: $2_coin_Coin'$2_sui_SUI';
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation (int);
    var $t0: $Mutation ($2_delegation_Delegation);
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t11));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:145:5+1
    assume {:print "$at(23,5990,5991)"} true;
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,2,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[reward]($t1) at ./sources/governance/delegation.move:145:5+1
    assume {:print "$track_local(19,2,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:145:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,2,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := read_ref($t2) at ./sources/governance/delegation.move:150:41+3
    assume {:print "$at(23,6161,6164)"} true;
    $t4 := $Dereference($t2);

    // $t5 := tx_context::sender($t4) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:150:22+23
    call $t5 := $2_tx_context_sender($t4);
    if ($abort_flag) {
        assume {:print "$at(23,6142,6165)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[sender]($t5) at ./sources/governance/delegation.move:150:13+6
    assume {:print "$track_local(19,2,3):", $t5} $t5 == $t5;

    // $t7 := coin::from_balance<sui::SUI>($t1, $t2) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:151:24+31
    assume {:print "$at(23,6190,6221)"} true;
    call $t7,$t2 := $2_coin_from_balance'$2_sui_SUI'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(23,6190,6221)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // coin::transfer<sui::SUI>($t7, $t5) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:151:9+55
    call $2_coin_transfer'$2_sui_SUI'($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(23,6175,6230)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t8 := get_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:152:44+32
    assume {:print "$at(23,6275,6307)"} true;
    $t8 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t9 := 1 at ./sources/governance/delegation.move:152:79+1
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t8, $t9) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:152:77+1
    call $t10 := $AddU64($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(23,6308,6309)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t11 := borrow_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:152:9+32
    $t11 := $ChildMutation($t0, 4, $next_reward_unclaimed_epoch#$2_delegation_Delegation($Dereference($t0)));

    // write_ref($t11, $t10) at ./sources/governance/delegation.move:152:9+71
    $t11 := $UpdateMutation($t11, $t10);

    // write_back[Reference($t0).next_reward_unclaimed_epoch (u64)]($t11) at ./sources/governance/delegation.move:152:9+71
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_next_reward_unclaimed_epoch($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:152:9+71
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,2,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[self]($t0) at ./sources/governance/delegation.move:152:80+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,2,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:152:80+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,2,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/delegation.move:153:5+1
    assume {:print "$at(23,6317,6318)"} true;
L1:

    // return () at ./sources/governance/delegation.move:153:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/governance/delegation.move:153:5+1
L2:

    // abort($t6) at ./sources/governance/delegation.move:153:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun delegation::claim_reward [verification] at ./sources/governance/delegation.move:145:5+328
procedure {:timeLimit 40} $2_delegation_claim_reward$verify(_$t0: $Mutation ($2_delegation_Delegation), _$t1: $2_balance_Balance'$2_sui_SUI', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_delegation_Delegation), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: $2_tx_context_TxContext;
    var $t5: int;
    var $t6: int;
    var $t7: $2_coin_Coin'$2_sui_SUI';
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation (int);
    var $t0: $Mutation ($2_delegation_Delegation);
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t11));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:145:5+1
    assume {:print "$at(23,5990,5991)"} true;
    assume ($IsValid'$2_delegation_Delegation'($Dereference($t0)) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($Dereference($t0)))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($Dereference($t0)))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)))) <= 1)));

    // assume WellFormed($t1) at ./sources/governance/delegation.move:145:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t1);

    // assume WellFormed($t2) at ./sources/governance/delegation.move:145:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:145:5+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,2,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[reward]($t1) at ./sources/governance/delegation.move:145:5+1
    assume {:print "$track_local(19,2,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:145:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,2,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := read_ref($t2) at ./sources/governance/delegation.move:150:41+3
    assume {:print "$at(23,6161,6164)"} true;
    $t4 := $Dereference($t2);

    // $t5 := tx_context::sender($t4) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:150:22+23
    call $t5 := $2_tx_context_sender($t4);
    if ($abort_flag) {
        assume {:print "$at(23,6142,6165)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[sender]($t5) at ./sources/governance/delegation.move:150:13+6
    assume {:print "$track_local(19,2,3):", $t5} $t5 == $t5;

    // $t7 := coin::from_balance<sui::SUI>($t1, $t2) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:151:24+31
    assume {:print "$at(23,6190,6221)"} true;
    call $t7,$t2 := $2_coin_from_balance'$2_sui_SUI'($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(23,6190,6221)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // coin::transfer<sui::SUI>($t7, $t5) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:151:9+55
    call $2_coin_transfer'$2_sui_SUI'($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(23,6175,6230)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t8 := get_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:152:44+32
    assume {:print "$at(23,6275,6307)"} true;
    $t8 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t9 := 1 at ./sources/governance/delegation.move:152:79+1
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t8, $t9) on_abort goto L2 with $t6 at ./sources/governance/delegation.move:152:77+1
    call $t10 := $AddU64($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(23,6308,6309)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(19,2):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t11 := borrow_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:152:9+32
    $t11 := $ChildMutation($t0, 4, $next_reward_unclaimed_epoch#$2_delegation_Delegation($Dereference($t0)));

    // write_ref($t11, $t10) at ./sources/governance/delegation.move:152:9+71
    $t11 := $UpdateMutation($t11, $t10);

    // write_back[Reference($t0).next_reward_unclaimed_epoch (u64)]($t11) at ./sources/governance/delegation.move:152:9+71
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_next_reward_unclaimed_epoch($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:152:9+71
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,2,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[self]($t0) at ./sources/governance/delegation.move:152:80+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,2,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:152:80+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,2,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/delegation.move:153:5+1
    assume {:print "$at(23,6317,6318)"} true;
L1:

    // return () at ./sources/governance/delegation.move:153:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/governance/delegation.move:153:5+1
L2:

    // abort($t6) at ./sources/governance/delegation.move:153:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun delegation::create_from_locked_coin [baseline] at ./sources/governance/delegation.move:68:5+734
procedure {:inline 1} $2_delegation_create_from_locked_coin(_$t0: int, _$t1: int, _$t2: $2_locked_coin_LockedCoin'$2_sui_SUI', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_balance_Balance'$2_sui_SUI';
    var $t5: int;
    var $t6: $2_delegation_Delegation;
    var $t7: $2_epoch_time_lock_EpochTimeLock;
    var $t8: int;
    var $t9: int;
    var $t10: $2_balance_Balance'$2_sui_SUI';
    var $t11: $2_epoch_time_lock_EpochTimeLock;
    var $t12: $2_object_UID;
    var $t13: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t16: $2_delegation_Delegation;
    var $t17: $2_tx_context_TxContext;
    var $t18: int;
    var $t0: int;
    var $t1: int;
    var $t2: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[starting_epoch]($t0) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$at(23,3003,3004)"} true;
    assume {:print "$track_local(19,4,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$track_local(19,4,1):", $t1} $t1 == $t1;

    // trace_local[stake]($t2) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$track_local(19,4,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:68:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := locked_coin::value<sui::SUI>($t2) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:74:31+26
    assume {:print "$at(23,3211,3237)"} true;
    call $t8 := $2_locked_coin_value'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,3211,3237)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[delegate_amount]($t8) at ./sources/governance/delegation.move:74:13+15
    assume {:print "$track_local(19,4,5):", $t8} $t8 == $t8;

    // ($t10, $t11) := locked_coin::into_balance<sui::SUI>($t2) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:75:37+32
    assume {:print "$at(23,3275,3307)"} true;
    call $t10,$t11 := $2_locked_coin_into_balance'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,3275,3307)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[epoch_lock]($t11) at ./sources/governance/delegation.move:75:23+10
    assume {:print "$track_local(19,4,7):", $t11} $t11 == $t11;

    // trace_local[balance]($t10) at ./sources/governance/delegation.move:75:14+7
    assume {:print "$track_local(19,4,4):", $t10} $t10 == $t10;

    // $t12 := object::new($t3) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:77:17+16
    assume {:print "$at(23,3363,3379)"} true;
    call $t12,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(23,3363,3379)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t13 := opaque begin: option::some<balance::Balance<sui::SUI>>($t10) at ./sources/governance/delegation.move:78:32+21
    assume {:print "$at(23,3412,3433)"} true;

    // assume And(WellFormed($t13), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t13)), 1)) at ./sources/governance/delegation.move:78:32+21
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t13) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($t13)) <= 1));

    // assume Eq<option::Option<balance::Balance<sui::SUI>>>($t13, option::spec_some<balance::Balance<sui::SUI>>($t10)) at ./sources/governance/delegation.move:78:32+21
    assume $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t13, $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''($t10));

    // $t13 := opaque end: option::some<balance::Balance<sui::SUI>>($t10) at ./sources/governance/delegation.move:78:32+21

    // $t14 := opaque begin: option::none<u64>() at ./sources/governance/delegation.move:79:27+14
    assume {:print "$at(23,3461,3475)"} true;

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec($t14)), 1)) at ./sources/governance/delegation.move:79:27+14
    assume ($IsValid'$1_option_Option'u64''($t14) && (LenVec($vec#$1_option_Option'u64'($t14)) <= 1));

    // assume Eq<option::Option<u64>>($t14, option::spec_none<u64>()) at ./sources/governance/delegation.move:79:27+14
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_none'u64'());

    // $t14 := opaque end: option::none<u64>() at ./sources/governance/delegation.move:79:27+14

    // $t15 := opaque begin: option::some<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/delegation.move:82:38+24
    assume {:print "$at(23,3600,3624)"} true;

    // assume And(WellFormed($t15), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t15)), 1)) at ./sources/governance/delegation.move:82:38+24
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t15) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t15)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t15, option::spec_some<epoch_time_lock::EpochTimeLock>($t11)) at ./sources/governance/delegation.move:82:38+24
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t15, $1_option_spec_some'$2_epoch_time_lock_EpochTimeLock'($t11));

    // $t15 := opaque end: option::some<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/delegation.move:82:38+24

    // $t16 := pack delegation::Delegation($t12, $t13, $t14, $t8, $t0, $t15, $t1) at ./sources/governance/delegation.move:76:26+332
    assume {:print "$at(23,3334,3666)"} true;
    $t16 := $2_delegation_Delegation($t12, $t13, $t14, $t8, $t0, $t15, $t1);

    // trace_local[delegation]($t16) at ./sources/governance/delegation.move:76:13+10
    assume {:print "$track_local(19,4,6):", $t16} $t16 == $t16;

    // $t17 := read_ref($t3) at ./sources/governance/delegation.move:85:59+3
    assume {:print "$at(23,3726,3729)"} true;
    $t17 := $Dereference($t3);

    // $t18 := tx_context::sender($t17) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:85:40+23
    call $t18 := $2_tx_context_sender($t17);
    if ($abort_flag) {
        assume {:print "$at(23,3707,3730)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // transfer::transfer<delegation::Delegation>($t16, $t18) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:85:9+55
    call $2_transfer_transfer'$2_delegation_Delegation'($t16, $t18);
    if ($abort_flag) {
        assume {:print "$at(23,3676,3731)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:85:9+55
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/delegation.move:86:5+1
    assume {:print "$at(23,3736,3737)"} true;
L1:

    // return () at ./sources/governance/delegation.move:86:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/delegation.move:86:5+1
L2:

    // abort($t9) at ./sources/governance/delegation.move:86:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun delegation::create_from_locked_coin [verification] at ./sources/governance/delegation.move:68:5+734
procedure {:timeLimit 40} $2_delegation_create_from_locked_coin$verify(_$t0: int, _$t1: int, _$t2: $2_locked_coin_LockedCoin'$2_sui_SUI', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_balance_Balance'$2_sui_SUI';
    var $t5: int;
    var $t6: $2_delegation_Delegation;
    var $t7: $2_epoch_time_lock_EpochTimeLock;
    var $t8: int;
    var $t9: int;
    var $t10: $2_balance_Balance'$2_sui_SUI';
    var $t11: $2_epoch_time_lock_EpochTimeLock;
    var $t12: $2_object_UID;
    var $t13: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t16: $2_delegation_Delegation;
    var $t17: $2_tx_context_TxContext;
    var $t18: int;
    var $t0: int;
    var $t1: int;
    var $t2: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$at(23,3003,3004)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/governance/delegation.move:68:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/governance/delegation.move:68:5+1
    assume $IsValid'$2_locked_coin_LockedCoin'$2_sui_SUI''($t2);

    // assume WellFormed($t3) at ./sources/governance/delegation.move:68:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[starting_epoch]($t0) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$track_local(19,4,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$track_local(19,4,1):", $t1} $t1 == $t1;

    // trace_local[stake]($t2) at ./sources/governance/delegation.move:68:5+1
    assume {:print "$track_local(19,4,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:68:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := locked_coin::value<sui::SUI>($t2) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:74:31+26
    assume {:print "$at(23,3211,3237)"} true;
    call $t8 := $2_locked_coin_value'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,3211,3237)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[delegate_amount]($t8) at ./sources/governance/delegation.move:74:13+15
    assume {:print "$track_local(19,4,5):", $t8} $t8 == $t8;

    // ($t10, $t11) := locked_coin::into_balance<sui::SUI>($t2) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:75:37+32
    assume {:print "$at(23,3275,3307)"} true;
    call $t10,$t11 := $2_locked_coin_into_balance'$2_sui_SUI'($t2);
    if ($abort_flag) {
        assume {:print "$at(23,3275,3307)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[epoch_lock]($t11) at ./sources/governance/delegation.move:75:23+10
    assume {:print "$track_local(19,4,7):", $t11} $t11 == $t11;

    // trace_local[balance]($t10) at ./sources/governance/delegation.move:75:14+7
    assume {:print "$track_local(19,4,4):", $t10} $t10 == $t10;

    // $t12 := object::new($t3) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:77:17+16
    assume {:print "$at(23,3363,3379)"} true;
    call $t12,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(23,3363,3379)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t13 := opaque begin: option::some<balance::Balance<sui::SUI>>($t10) at ./sources/governance/delegation.move:78:32+21
    assume {:print "$at(23,3412,3433)"} true;

    // assume And(WellFormed($t13), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t13)), 1)) at ./sources/governance/delegation.move:78:32+21
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t13) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($t13)) <= 1));

    // assume Eq<option::Option<balance::Balance<sui::SUI>>>($t13, option::spec_some<balance::Balance<sui::SUI>>($t10)) at ./sources/governance/delegation.move:78:32+21
    assume $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t13, $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''($t10));

    // $t13 := opaque end: option::some<balance::Balance<sui::SUI>>($t10) at ./sources/governance/delegation.move:78:32+21

    // $t14 := opaque begin: option::none<u64>() at ./sources/governance/delegation.move:79:27+14
    assume {:print "$at(23,3461,3475)"} true;

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec($t14)), 1)) at ./sources/governance/delegation.move:79:27+14
    assume ($IsValid'$1_option_Option'u64''($t14) && (LenVec($vec#$1_option_Option'u64'($t14)) <= 1));

    // assume Eq<option::Option<u64>>($t14, option::spec_none<u64>()) at ./sources/governance/delegation.move:79:27+14
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_none'u64'());

    // $t14 := opaque end: option::none<u64>() at ./sources/governance/delegation.move:79:27+14

    // $t15 := opaque begin: option::some<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/delegation.move:82:38+24
    assume {:print "$at(23,3600,3624)"} true;

    // assume And(WellFormed($t15), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t15)), 1)) at ./sources/governance/delegation.move:82:38+24
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t15) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t15)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t15, option::spec_some<epoch_time_lock::EpochTimeLock>($t11)) at ./sources/governance/delegation.move:82:38+24
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t15, $1_option_spec_some'$2_epoch_time_lock_EpochTimeLock'($t11));

    // $t15 := opaque end: option::some<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/delegation.move:82:38+24

    // $t16 := pack delegation::Delegation($t12, $t13, $t14, $t8, $t0, $t15, $t1) at ./sources/governance/delegation.move:76:26+332
    assume {:print "$at(23,3334,3666)"} true;
    $t16 := $2_delegation_Delegation($t12, $t13, $t14, $t8, $t0, $t15, $t1);

    // trace_local[delegation]($t16) at ./sources/governance/delegation.move:76:13+10
    assume {:print "$track_local(19,4,6):", $t16} $t16 == $t16;

    // $t17 := read_ref($t3) at ./sources/governance/delegation.move:85:59+3
    assume {:print "$at(23,3726,3729)"} true;
    $t17 := $Dereference($t3);

    // $t18 := tx_context::sender($t17) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:85:40+23
    call $t18 := $2_tx_context_sender($t17);
    if ($abort_flag) {
        assume {:print "$at(23,3707,3730)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // transfer::transfer<delegation::Delegation>($t16, $t18) on_abort goto L2 with $t9 at ./sources/governance/delegation.move:85:9+55
    call $2_transfer_transfer'$2_delegation_Delegation'($t16, $t18);
    if ($abort_flag) {
        assume {:print "$at(23,3676,3731)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,4):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/governance/delegation.move:85:9+55
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(19,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/delegation.move:86:5+1
    assume {:print "$at(23,3736,3737)"} true;
L1:

    // return () at ./sources/governance/delegation.move:86:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/delegation.move:86:5+1
L2:

    // abort($t9) at ./sources/governance/delegation.move:86:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun delegation::delegate_amount [baseline] at ./sources/governance/delegation.move:204:5+87
procedure {:inline 1} $2_delegation_delegate_amount(_$t0: $2_delegation_Delegation) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:204:5+1
    assume {:print "$at(23,7894,7895)"} true;
    assume {:print "$track_local(19,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<delegation::Delegation>.delegate_amount($t0) at ./sources/governance/delegation.move:205:9+20
    assume {:print "$at(23,7955,7975)"} true;
    $t1 := $delegate_amount#$2_delegation_Delegation($t0);

    // trace_return[0]($t1) at ./sources/governance/delegation.move:205:9+20
    assume {:print "$track_return(19,5,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/delegation.move:206:5+1
    assume {:print "$at(23,7980,7981)"} true;
L1:

    // return $t1 at ./sources/governance/delegation.move:206:5+1
    $ret0 := $t1;
    return;

}

// fun delegation::delegate_amount [verification] at ./sources/governance/delegation.move:204:5+87
procedure {:timeLimit 40} $2_delegation_delegate_amount$verify(_$t0: $2_delegation_Delegation) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:204:5+1
    assume {:print "$at(23,7894,7895)"} true;
    assume ($IsValid'$2_delegation_Delegation'($t0) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($t0))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($t0))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($t0))) <= 1)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:204:5+1
    assume {:print "$track_local(19,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<delegation::Delegation>.delegate_amount($t0) at ./sources/governance/delegation.move:205:9+20
    assume {:print "$at(23,7955,7975)"} true;
    $t1 := $delegate_amount#$2_delegation_Delegation($t0);

    // trace_return[0]($t1) at ./sources/governance/delegation.move:205:9+20
    assume {:print "$track_return(19,5,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/delegation.move:206:5+1
    assume {:print "$at(23,7980,7981)"} true;
L1:

    // return $t1 at ./sources/governance/delegation.move:206:5+1
    $ret0 := $t1;
    return;

}

// fun delegation::is_active [baseline] at ./sources/governance/delegation.move:208:5+141
procedure {:inline 1} $2_delegation_is_active(_$t0: $2_delegation_Delegation) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t3: bool;
    var $t4: $1_option_Option'u64';
    var $t5: bool;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:208:5+1
    assume {:print "$at(23,7987,7988)"} true;
    assume {:print "$track_local(19,6,0):", $t0} $t0 == $t0;

    // $t2 := get_field<delegation::Delegation>.active_delegation($t0) at ./sources/governance/delegation.move:209:25+23
    assume {:print "$at(23,8059,8082)"} true;
    $t2 := $active_delegation#$2_delegation_Delegation($t0);

    // $t3 := opaque begin: option::is_some<balance::Balance<sui::SUI>>($t2) at ./sources/governance/delegation.move:209:9+40

    // assume WellFormed($t3) at ./sources/governance/delegation.move:209:9+40
    assume $IsValid'bool'($t3);

    // assume Eq<bool>($t3, option::$is_some<balance::Balance<sui::SUI>>($t2)) at ./sources/governance/delegation.move:209:9+40
    assume $IsEqual'bool'($t3, $1_option_$is_some'$2_balance_Balance'$2_sui_SUI''($t2));

    // $t3 := opaque end: option::is_some<balance::Balance<sui::SUI>>($t2) at ./sources/governance/delegation.move:209:9+40

    // if ($t3) goto L0 else goto L2 at ./sources/governance/delegation.move:209:9+79
    if ($t3) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/delegation.move:209:70+4
L0:

    // $t4 := get_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:209:69+18
    $t4 := $ending_epoch#$2_delegation_Delegation($t0);

    // $t1 := opaque begin: option::is_none<u64>($t4) at ./sources/governance/delegation.move:209:53+35

    // assume WellFormed($t1) at ./sources/governance/delegation.move:209:53+35
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, option::$is_none<u64>($t4)) at ./sources/governance/delegation.move:209:53+35
    assume $IsEqual'bool'($t1, $1_option_$is_none'u64'($t4));

    // $t1 := opaque end: option::is_none<u64>($t4) at ./sources/governance/delegation.move:209:53+35

    // goto L3 at ./sources/governance/delegation.move:209:9+79
    goto L3;

    // label L2 at ./sources/governance/delegation.move:209:9+79
L2:

    // destroy($t0) at ./sources/governance/delegation.move:209:9+79

    // $t5 := false at ./sources/governance/delegation.move:209:9+79
    $t5 := false;
    assume $IsValid'bool'($t5);

    // $t1 := $t5 at ./sources/governance/delegation.move:209:9+79
    $t1 := $t5;

    // label L3 at ./sources/governance/delegation.move:209:9+79
L3:

    // trace_return[0]($t1) at ./sources/governance/delegation.move:209:9+79
    assume {:print "$track_return(19,6,0):", $t1} $t1 == $t1;

    // label L4 at ./sources/governance/delegation.move:210:5+1
    assume {:print "$at(23,8127,8128)"} true;
L4:

    // return $t1 at ./sources/governance/delegation.move:210:5+1
    $ret0 := $t1;
    return;

}

// fun delegation::is_active [verification] at ./sources/governance/delegation.move:208:5+141
procedure {:timeLimit 40} $2_delegation_is_active$verify(_$t0: $2_delegation_Delegation) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t3: bool;
    var $t4: $1_option_Option'u64';
    var $t5: bool;
    var $t0: $2_delegation_Delegation;
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:208:5+1
    assume {:print "$at(23,7987,7988)"} true;
    assume ($IsValid'$2_delegation_Delegation'($t0) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($t0))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($t0))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($t0))) <= 1)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:208:5+1
    assume {:print "$track_local(19,6,0):", $t0} $t0 == $t0;

    // $t2 := get_field<delegation::Delegation>.active_delegation($t0) at ./sources/governance/delegation.move:209:25+23
    assume {:print "$at(23,8059,8082)"} true;
    $t2 := $active_delegation#$2_delegation_Delegation($t0);

    // $t3 := opaque begin: option::is_some<balance::Balance<sui::SUI>>($t2) at ./sources/governance/delegation.move:209:9+40

    // assume WellFormed($t3) at ./sources/governance/delegation.move:209:9+40
    assume $IsValid'bool'($t3);

    // assume Eq<bool>($t3, option::$is_some<balance::Balance<sui::SUI>>($t2)) at ./sources/governance/delegation.move:209:9+40
    assume $IsEqual'bool'($t3, $1_option_$is_some'$2_balance_Balance'$2_sui_SUI''($t2));

    // $t3 := opaque end: option::is_some<balance::Balance<sui::SUI>>($t2) at ./sources/governance/delegation.move:209:9+40

    // if ($t3) goto L0 else goto L2 at ./sources/governance/delegation.move:209:9+79
    if ($t3) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/delegation.move:209:70+4
L0:

    // $t4 := get_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:209:69+18
    $t4 := $ending_epoch#$2_delegation_Delegation($t0);

    // $t1 := opaque begin: option::is_none<u64>($t4) at ./sources/governance/delegation.move:209:53+35

    // assume WellFormed($t1) at ./sources/governance/delegation.move:209:53+35
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, option::$is_none<u64>($t4)) at ./sources/governance/delegation.move:209:53+35
    assume $IsEqual'bool'($t1, $1_option_$is_none'u64'($t4));

    // $t1 := opaque end: option::is_none<u64>($t4) at ./sources/governance/delegation.move:209:53+35

    // goto L3 at ./sources/governance/delegation.move:209:9+79
    goto L3;

    // label L2 at ./sources/governance/delegation.move:209:9+79
L2:

    // destroy($t0) at ./sources/governance/delegation.move:209:9+79

    // $t5 := false at ./sources/governance/delegation.move:209:9+79
    $t5 := false;
    assume $IsValid'bool'($t5);

    // $t1 := $t5 at ./sources/governance/delegation.move:209:9+79
    $t1 := $t5;

    // label L3 at ./sources/governance/delegation.move:209:9+79
L3:

    // trace_return[0]($t1) at ./sources/governance/delegation.move:209:9+79
    assume {:print "$track_return(19,6,0):", $t1} $t1 == $t1;

    // label L4 at ./sources/governance/delegation.move:210:5+1
    assume {:print "$at(23,8127,8128)"} true;
L4:

    // return $t1 at ./sources/governance/delegation.move:210:5+1
    $ret0 := $t1;
    return;

}

// fun delegation::switch_delegation [baseline] at ./sources/governance/delegation.move:113:5+1114
procedure {:inline 1} $2_delegation_switch_delegation(_$t0: $Mutation ($2_delegation_Delegation), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_delegation_Delegation), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t4: $2_balance_Balance'$2_sui_SUI';
    var $t5: int;
    var $t6: int;
    var $t7: $2_delegation_Delegation;
    var $t8: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t9: $2_delegation_Delegation;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $2_tx_context_TxContext;
    var $t14: int;
    var $t15: $Mutation ($1_option_Option'$2_balance_Balance'$2_sui_SUI'');
    var $t16: $2_balance_Balance'$2_sui_SUI';
    var $t17: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t18: bool;
    var $t19: int;
    var $t20: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t21: bool;
    var $t22: $Mutation ($1_option_Option'$2_epoch_time_lock_EpochTimeLock');
    var $t23: $2_epoch_time_lock_EpochTimeLock;
    var $t24: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t25: bool;
    var $t26: $1_option_Option'u64';
    var $t27: $Mutation ($1_option_Option'u64');
    var $t28: $2_object_UID;
    var $t29: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t30: $1_option_Option'u64';
    var $t31: int;
    var $t32: int;
    var $t33: $2_delegation_Delegation;
    var $t34: $2_tx_context_TxContext;
    var $t35: int;
    var $t0: $Mutation ($2_delegation_Delegation);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''': $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t27));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:113:5+1
    assume {:print "$at(23,4798,4799)"} true;
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[new_validator_address]($t1) at ./sources/governance/delegation.move:113:5+1
    assume {:print "$track_local(19,7,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:113:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,7,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := read_ref($t0) at ./sources/governance/delegation.move:118:27+4
    assume {:print "$at(23,4970,4974)"} true;
    $t9 := $Dereference($t0);

    // $t10 := delegation::is_active($t9) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:118:17+15
    call $t10 := $2_delegation_is_active($t9);
    if ($abort_flag) {
        assume {:print "$at(23,4960,4975)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // if ($t10) goto L0 else goto L1 at ./sources/governance/delegation.move:118:9+27
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/delegation.move:118:9+27
L1:

    // destroy($t0) at ./sources/governance/delegation.move:118:9+27

    // destroy($t2) at ./sources/governance/delegation.move:118:9+27

    // $t12 := 0 at ./sources/governance/delegation.move:118:34+1
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/governance/delegation.move:118:9+27
    assume {:print "$at(23,4952,4979)"} true;
    assume {:print "$track_abort(19,7):", $t12} $t12 == $t12;

    // $t11 := move($t12) at ./sources/governance/delegation.move:118:9+27
    $t11 := $t12;

    // goto L7 at ./sources/governance/delegation.move:118:9+27
    goto L7;

    // label L0 at ./sources/governance/delegation.move:119:47+3
    assume {:print "$at(23,5027,5030)"} true;
L0:

    // $t13 := read_ref($t2) at ./sources/governance/delegation.move:119:47+3
    $t13 := $Dereference($t2);

    // $t14 := tx_context::epoch($t13) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:119:29+22
    call $t14 := $2_tx_context_epoch($t13);
    if ($abort_flag) {
        assume {:print "$at(23,5009,5031)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[current_epoch]($t14) at ./sources/governance/delegation.move:119:13+13
    assume {:print "$track_local(19,7,5):", $t14} $t14 == $t14;

    // $t15 := borrow_field<delegation::Delegation>.active_delegation($t0) at ./sources/governance/delegation.move:120:39+27
    assume {:print "$at(23,5071,5098)"} true;
    $t15 := $ChildMutation($t0, 1, $active_delegation#$2_delegation_Delegation($Dereference($t0)));

    // $t16 := opaque begin: option::extract<balance::Balance<sui::SUI>>($t15) at ./sources/governance/delegation.move:120:23+44

    // $t17 := read_ref($t15) at ./sources/governance/delegation.move:120:23+44
    $t17 := $Dereference($t15);

    // assume Identical($t18, option::$is_none<balance::Balance<sui::SUI>>($t15)) at ./sources/governance/delegation.move:120:23+44
    assume ($t18 == $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t15)));

    // if ($t18) goto L12 else goto L8 at ./sources/governance/delegation.move:120:23+44
    if ($t18) { goto L12; } else { goto L8; }

    // label L9 at ./sources/governance/delegation.move:120:23+44
L9:

    // assume And(option::$is_none<balance::Balance<sui::SUI>>($t15), Eq(7, $t11)) at ./sources/governance/delegation.move:120:23+44
    assume ($1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t15)) && $IsEqual'num'(7, $t11));

    // trace_abort($t11) at ./sources/governance/delegation.move:120:23+44
    assume {:print "$at(23,5055,5099)"} true;
    assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;

    // goto L7 at ./sources/governance/delegation.move:120:23+44
    goto L7;

    // label L8 at ./sources/governance/delegation.move:120:23+44
L8:

    // havoc[mut]($t15) at ./sources/governance/delegation.move:120:23+44
    havoc $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''';
    $t15 := $UpdateMutation($t15, $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''');
    assume $IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t15));

    // assume And(WellFormed($t15), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t15)), 1)) at ./sources/governance/delegation.move:120:23+44
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t15)) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($Dereference($t15))) <= 1));

    // assume WellFormed($t16) at ./sources/governance/delegation.move:120:23+44
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t16);

    // assume Eq<balance::Balance<sui::SUI>>($t16, option::$borrow<balance::Balance<sui::SUI>>($t17)) at ./sources/governance/delegation.move:120:23+44
    assume $IsEqual'$2_balance_Balance'$2_sui_SUI''($t16, $1_option_$borrow'$2_balance_Balance'$2_sui_SUI''($t17));

    // assume option::$is_none<balance::Balance<sui::SUI>>($t15) at ./sources/governance/delegation.move:120:23+44
    assume $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t15));

    // $t16 := opaque end: option::extract<balance::Balance<sui::SUI>>($t15) at ./sources/governance/delegation.move:120:23+44

    // write_back[Reference($t0).active_delegation (option::Option<balance::Balance<sui::SUI>>)]($t15) at ./sources/governance/delegation.move:120:23+44
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_active_delegation($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:120:23+44
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[balance]($t16) at ./sources/governance/delegation.move:120:13+7
    assume {:print "$track_local(19,7,4):", $t16} $t16 == $t16;

    // $t19 := balance::value<sui::SUI>($t16) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:121:31+24
    assume {:print "$at(23,5131,5155)"} true;
    call $t19 := $2_balance_value'$2_sui_SUI'($t16);
    if ($abort_flag) {
        assume {:print "$at(23,5131,5155)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[delegate_amount]($t19) at ./sources/governance/delegation.move:121:13+15
    assume {:print "$track_local(19,7,6):", $t19} $t19 == $t19;

    // $t20 := get_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:124:33+29
    assume {:print "$at(23,5219,5248)"} true;
    $t20 := $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t21 := opaque begin: option::is_some<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/delegation.move:124:17+46

    // assume WellFormed($t21) at ./sources/governance/delegation.move:124:17+46
    assume $IsValid'bool'($t21);

    // assume Eq<bool>($t21, option::$is_some<epoch_time_lock::EpochTimeLock>($t20)) at ./sources/governance/delegation.move:124:17+46
    assume $IsEqual'bool'($t21, $1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t20));

    // $t21 := opaque end: option::is_some<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/delegation.move:124:17+46

    // if ($t21) goto L2 else goto L4 at ./sources/governance/delegation.move:124:13+200
    if ($t21) { goto L2; } else { goto L4; }

    // label L2 at ./sources/governance/delegation.move:125:51+4
    assume {:print "$at(23,5303,5307)"} true;
L2:

    // $t22 := borrow_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:125:46+33
    $t22 := $ChildMutation($t0, 5, $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)));

    // $t23 := opaque begin: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:125:30+50

    // $t24 := read_ref($t22) at ./sources/governance/delegation.move:125:30+50
    $t24 := $Dereference($t22);

    // assume Identical($t25, option::$is_none<epoch_time_lock::EpochTimeLock>($t22)) at ./sources/governance/delegation.move:125:30+50
    assume ($t25 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)));

    // if ($t25) goto L13 else goto L10 at ./sources/governance/delegation.move:125:30+50
    if ($t25) { goto L13; } else { goto L10; }

    // label L11 at ./sources/governance/delegation.move:125:30+50
L11:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t22), Eq(7, $t11)) at ./sources/governance/delegation.move:125:30+50
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)) && $IsEqual'num'(7, $t11));

    // trace_abort($t11) at ./sources/governance/delegation.move:125:30+50
    assume {:print "$at(23,5282,5332)"} true;
    assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;

    // goto L7 at ./sources/governance/delegation.move:125:30+50
    goto L7;

    // label L10 at ./sources/governance/delegation.move:125:30+50
L10:

    // havoc[mut]($t22) at ./sources/governance/delegation.move:125:30+50
    havoc $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'');
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22));

    // assume And(WellFormed($t22), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t22)), 1)) at ./sources/governance/delegation.move:125:30+50
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22))) <= 1));

    // assume WellFormed($t23) at ./sources/governance/delegation.move:125:30+50
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t23);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t23, option::$borrow<epoch_time_lock::EpochTimeLock>($t24)) at ./sources/governance/delegation.move:125:30+50
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t23, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t24));

    // assume option::$is_none<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:125:30+50
    assume $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22));

    // $t23 := opaque end: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:125:30+50

    // write_back[Reference($t0).coin_locked_until_epoch (option::Option<epoch_time_lock::EpochTimeLock>)]($t22) at ./sources/governance/delegation.move:125:30+50
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_coin_locked_until_epoch($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:125:30+50
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // $t3 := opaque begin: option::some<epoch_time_lock::EpochTimeLock>($t23) at ./sources/governance/delegation.move:125:17+64

    // assume And(WellFormed($t3), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t3)), 1)) at ./sources/governance/delegation.move:125:17+64
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t3)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t3, option::spec_some<epoch_time_lock::EpochTimeLock>($t23)) at ./sources/governance/delegation.move:125:17+64
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3, $1_option_spec_some'$2_epoch_time_lock_EpochTimeLock'($t23));

    // $t3 := opaque end: option::some<epoch_time_lock::EpochTimeLock>($t23) at ./sources/governance/delegation.move:125:17+64

    // goto L5 at ./sources/governance/delegation.move:124:13+200
    assume {:print "$at(23,5199,5399)"} true;
    goto L5;

    // label L4 at ./sources/governance/delegation.move:127:17+14
    assume {:print "$at(23,5371,5385)"} true;
L4:

    // $t3 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:127:17+14

    // assume And(WellFormed($t3), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t3)), 1)) at ./sources/governance/delegation.move:127:17+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t3)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t3, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/delegation.move:127:17+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t3 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:127:17+14

    // label L5 at ./sources/governance/delegation.move:124:13+200
    assume {:print "$at(23,5199,5399)"} true;
L5:

    // trace_local[new_epoch_lock]($t3) at ./sources/governance/delegation.move:123:13+14
    assume {:print "$at(23,5170,5184)"} true;
    assume {:print "$track_local(19,7,8):", $t3} $t3 == $t3;

    // $t26 := opaque begin: option::some<u64>($t14) at ./sources/governance/delegation.move:130:29+27
    assume {:print "$at(23,5430,5457)"} true;

    // assume And(WellFormed($t26), Le(Len<u64>(select option::Option.vec($t26)), 1)) at ./sources/governance/delegation.move:130:29+27
    assume ($IsValid'$1_option_Option'u64''($t26) && (LenVec($vec#$1_option_Option'u64'($t26)) <= 1));

    // assume Eq<option::Option<u64>>($t26, option::spec_some<u64>($t14)) at ./sources/governance/delegation.move:130:29+27
    assume $IsEqual'$1_option_Option'u64''($t26, $1_option_spec_some'u64'($t14));

    // $t26 := opaque end: option::some<u64>($t14) at ./sources/governance/delegation.move:130:29+27

    // $t27 := borrow_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:130:9+17
    $t27 := $ChildMutation($t0, 2, $ending_epoch#$2_delegation_Delegation($Dereference($t0)));

    // write_ref($t27, $t26) at ./sources/governance/delegation.move:130:9+47
    $t27 := $UpdateMutation($t27, $t26);

    // write_back[Reference($t0).ending_epoch (option::Option<u64>)]($t27) at ./sources/governance/delegation.move:130:9+47
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_ending_epoch($Dereference($t0), $Dereference($t27)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:130:9+47
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // $t28 := object::new($t2) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:133:17+16
    assume {:print "$at(23,5518,5534)"} true;
    call $t28,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(23,5518,5534)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t29 := opaque begin: option::some<balance::Balance<sui::SUI>>($t16) at ./sources/governance/delegation.move:134:32+21
    assume {:print "$at(23,5567,5588)"} true;

    // assume And(WellFormed($t29), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t29)), 1)) at ./sources/governance/delegation.move:134:32+21
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t29) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($t29)) <= 1));

    // assume Eq<option::Option<balance::Balance<sui::SUI>>>($t29, option::spec_some<balance::Balance<sui::SUI>>($t16)) at ./sources/governance/delegation.move:134:32+21
    assume $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t29, $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''($t16));

    // $t29 := opaque end: option::some<balance::Balance<sui::SUI>>($t16) at ./sources/governance/delegation.move:134:32+21

    // $t30 := opaque begin: option::none<u64>() at ./sources/governance/delegation.move:135:27+14
    assume {:print "$at(23,5616,5630)"} true;

    // assume And(WellFormed($t30), Le(Len<u64>(select option::Option.vec($t30)), 1)) at ./sources/governance/delegation.move:135:27+14
    assume ($IsValid'$1_option_Option'u64''($t30) && (LenVec($vec#$1_option_Option'u64'($t30)) <= 1));

    // assume Eq<option::Option<u64>>($t30, option::spec_none<u64>()) at ./sources/governance/delegation.move:135:27+14
    assume $IsEqual'$1_option_Option'u64''($t30, $1_option_spec_none'u64'());

    // $t30 := opaque end: option::none<u64>() at ./sources/governance/delegation.move:135:27+14

    // $t31 := 1 at ./sources/governance/delegation.move:137:58+1
    assume {:print "$at(23,5718,5719)"} true;
    $t31 := 1;
    assume $IsValid'u64'($t31);

    // $t32 := +($t14, $t31) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:137:56+1
    call $t32 := $AddU64($t14, $t31);
    if ($abort_flag) {
        assume {:print "$at(23,5716,5717)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t33 := pack delegation::Delegation($t28, $t29, $t30, $t19, $t32, $t3, $t1) at ./sources/governance/delegation.move:132:30+348
    assume {:print "$at(23,5489,5837)"} true;
    $t33 := $2_delegation_Delegation($t28, $t29, $t30, $t19, $t32, $t3, $t1);

    // trace_local[new_delegation]($t33) at ./sources/governance/delegation.move:132:13+14
    assume {:print "$track_local(19,7,7):", $t33} $t33 == $t33;

    // $t34 := read_ref($t2) at ./sources/governance/delegation.move:141:63+3
    assume {:print "$at(23,5901,5904)"} true;
    $t34 := $Dereference($t2);

    // $t35 := tx_context::sender($t34) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:141:44+23
    call $t35 := $2_tx_context_sender($t34);
    if ($abort_flag) {
        assume {:print "$at(23,5882,5905)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // transfer::transfer<delegation::Delegation>($t33, $t35) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:141:9+59
    call $2_transfer_transfer'$2_delegation_Delegation'($t33, $t35);
    if ($abort_flag) {
        assume {:print "$at(23,5847,5906)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[self]($t0) at ./sources/governance/delegation.move:141:9+59
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:141:9+59
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,7,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/governance/delegation.move:142:5+1
    assume {:print "$at(23,5911,5912)"} true;
L6:

    // return () at ./sources/governance/delegation.move:142:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L7 at ./sources/governance/delegation.move:142:5+1
L7:

    // abort($t11) at ./sources/governance/delegation.move:142:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

    // label L13 at <internal>:1:1+10
L13:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L11 at <internal>:1:1+10
    goto L11;

}

// fun delegation::switch_delegation [verification] at ./sources/governance/delegation.move:113:5+1114
procedure {:timeLimit 40} $2_delegation_switch_delegation$verify(_$t0: $Mutation ($2_delegation_Delegation), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_delegation_Delegation), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t4: $2_balance_Balance'$2_sui_SUI';
    var $t5: int;
    var $t6: int;
    var $t7: $2_delegation_Delegation;
    var $t8: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t9: $2_delegation_Delegation;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: $2_tx_context_TxContext;
    var $t14: int;
    var $t15: $Mutation ($1_option_Option'$2_balance_Balance'$2_sui_SUI'');
    var $t16: $2_balance_Balance'$2_sui_SUI';
    var $t17: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t18: bool;
    var $t19: int;
    var $t20: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t21: bool;
    var $t22: $Mutation ($1_option_Option'$2_epoch_time_lock_EpochTimeLock');
    var $t23: $2_epoch_time_lock_EpochTimeLock;
    var $t24: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t25: bool;
    var $t26: $1_option_Option'u64';
    var $t27: $Mutation ($1_option_Option'u64');
    var $t28: $2_object_UID;
    var $t29: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t30: $1_option_Option'u64';
    var $t31: int;
    var $t32: int;
    var $t33: $2_delegation_Delegation;
    var $t34: $2_tx_context_TxContext;
    var $t35: int;
    var $t0: $Mutation ($2_delegation_Delegation);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''': $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:113:5+1
    assume {:print "$at(23,4798,4799)"} true;
    assume ($IsValid'$2_delegation_Delegation'($Dereference($t0)) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($Dereference($t0)))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($Dereference($t0)))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)))) <= 1)));

    // assume WellFormed($t1) at ./sources/governance/delegation.move:113:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/governance/delegation.move:113:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:113:5+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[new_validator_address]($t1) at ./sources/governance/delegation.move:113:5+1
    assume {:print "$track_local(19,7,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:113:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,7,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := read_ref($t0) at ./sources/governance/delegation.move:118:27+4
    assume {:print "$at(23,4970,4974)"} true;
    $t9 := $Dereference($t0);

    // $t10 := delegation::is_active($t9) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:118:17+15
    call $t10 := $2_delegation_is_active($t9);
    if ($abort_flag) {
        assume {:print "$at(23,4960,4975)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // if ($t10) goto L0 else goto L1 at ./sources/governance/delegation.move:118:9+27
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/delegation.move:118:9+27
L1:

    // destroy($t0) at ./sources/governance/delegation.move:118:9+27

    // destroy($t2) at ./sources/governance/delegation.move:118:9+27

    // $t12 := 0 at ./sources/governance/delegation.move:118:34+1
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/governance/delegation.move:118:9+27
    assume {:print "$at(23,4952,4979)"} true;
    assume {:print "$track_abort(19,7):", $t12} $t12 == $t12;

    // $t11 := move($t12) at ./sources/governance/delegation.move:118:9+27
    $t11 := $t12;

    // goto L7 at ./sources/governance/delegation.move:118:9+27
    goto L7;

    // label L0 at ./sources/governance/delegation.move:119:47+3
    assume {:print "$at(23,5027,5030)"} true;
L0:

    // $t13 := read_ref($t2) at ./sources/governance/delegation.move:119:47+3
    $t13 := $Dereference($t2);

    // $t14 := tx_context::epoch($t13) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:119:29+22
    call $t14 := $2_tx_context_epoch($t13);
    if ($abort_flag) {
        assume {:print "$at(23,5009,5031)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[current_epoch]($t14) at ./sources/governance/delegation.move:119:13+13
    assume {:print "$track_local(19,7,5):", $t14} $t14 == $t14;

    // $t15 := borrow_field<delegation::Delegation>.active_delegation($t0) at ./sources/governance/delegation.move:120:39+27
    assume {:print "$at(23,5071,5098)"} true;
    $t15 := $ChildMutation($t0, 1, $active_delegation#$2_delegation_Delegation($Dereference($t0)));

    // $t16 := opaque begin: option::extract<balance::Balance<sui::SUI>>($t15) at ./sources/governance/delegation.move:120:23+44

    // $t17 := read_ref($t15) at ./sources/governance/delegation.move:120:23+44
    $t17 := $Dereference($t15);

    // assume Identical($t18, option::$is_none<balance::Balance<sui::SUI>>($t15)) at ./sources/governance/delegation.move:120:23+44
    assume ($t18 == $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t15)));

    // if ($t18) goto L12 else goto L8 at ./sources/governance/delegation.move:120:23+44
    if ($t18) { goto L12; } else { goto L8; }

    // label L9 at ./sources/governance/delegation.move:120:23+44
L9:

    // assume And(option::$is_none<balance::Balance<sui::SUI>>($t15), Eq(7, $t11)) at ./sources/governance/delegation.move:120:23+44
    assume ($1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t15)) && $IsEqual'num'(7, $t11));

    // trace_abort($t11) at ./sources/governance/delegation.move:120:23+44
    assume {:print "$at(23,5055,5099)"} true;
    assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;

    // goto L7 at ./sources/governance/delegation.move:120:23+44
    goto L7;

    // label L8 at ./sources/governance/delegation.move:120:23+44
L8:

    // havoc[mut]($t15) at ./sources/governance/delegation.move:120:23+44
    havoc $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''';
    $t15 := $UpdateMutation($t15, $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''');
    assume $IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t15));

    // assume And(WellFormed($t15), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t15)), 1)) at ./sources/governance/delegation.move:120:23+44
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t15)) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($Dereference($t15))) <= 1));

    // assume WellFormed($t16) at ./sources/governance/delegation.move:120:23+44
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t16);

    // assume Eq<balance::Balance<sui::SUI>>($t16, option::$borrow<balance::Balance<sui::SUI>>($t17)) at ./sources/governance/delegation.move:120:23+44
    assume $IsEqual'$2_balance_Balance'$2_sui_SUI''($t16, $1_option_$borrow'$2_balance_Balance'$2_sui_SUI''($t17));

    // assume option::$is_none<balance::Balance<sui::SUI>>($t15) at ./sources/governance/delegation.move:120:23+44
    assume $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t15));

    // $t16 := opaque end: option::extract<balance::Balance<sui::SUI>>($t15) at ./sources/governance/delegation.move:120:23+44

    // write_back[Reference($t0).active_delegation (option::Option<balance::Balance<sui::SUI>>)]($t15) at ./sources/governance/delegation.move:120:23+44
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_active_delegation($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:120:23+44
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[balance]($t16) at ./sources/governance/delegation.move:120:13+7
    assume {:print "$track_local(19,7,4):", $t16} $t16 == $t16;

    // $t19 := balance::value<sui::SUI>($t16) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:121:31+24
    assume {:print "$at(23,5131,5155)"} true;
    call $t19 := $2_balance_value'$2_sui_SUI'($t16);
    if ($abort_flag) {
        assume {:print "$at(23,5131,5155)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[delegate_amount]($t19) at ./sources/governance/delegation.move:121:13+15
    assume {:print "$track_local(19,7,6):", $t19} $t19 == $t19;

    // $t20 := get_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:124:33+29
    assume {:print "$at(23,5219,5248)"} true;
    $t20 := $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t21 := opaque begin: option::is_some<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/delegation.move:124:17+46

    // assume WellFormed($t21) at ./sources/governance/delegation.move:124:17+46
    assume $IsValid'bool'($t21);

    // assume Eq<bool>($t21, option::$is_some<epoch_time_lock::EpochTimeLock>($t20)) at ./sources/governance/delegation.move:124:17+46
    assume $IsEqual'bool'($t21, $1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t20));

    // $t21 := opaque end: option::is_some<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/delegation.move:124:17+46

    // if ($t21) goto L2 else goto L4 at ./sources/governance/delegation.move:124:13+200
    if ($t21) { goto L2; } else { goto L4; }

    // label L2 at ./sources/governance/delegation.move:125:51+4
    assume {:print "$at(23,5303,5307)"} true;
L2:

    // $t22 := borrow_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:125:46+33
    $t22 := $ChildMutation($t0, 5, $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)));

    // $t23 := opaque begin: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:125:30+50

    // $t24 := read_ref($t22) at ./sources/governance/delegation.move:125:30+50
    $t24 := $Dereference($t22);

    // assume Identical($t25, option::$is_none<epoch_time_lock::EpochTimeLock>($t22)) at ./sources/governance/delegation.move:125:30+50
    assume ($t25 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)));

    // if ($t25) goto L13 else goto L10 at ./sources/governance/delegation.move:125:30+50
    if ($t25) { goto L13; } else { goto L10; }

    // label L11 at ./sources/governance/delegation.move:125:30+50
L11:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t22), Eq(7, $t11)) at ./sources/governance/delegation.move:125:30+50
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)) && $IsEqual'num'(7, $t11));

    // trace_abort($t11) at ./sources/governance/delegation.move:125:30+50
    assume {:print "$at(23,5282,5332)"} true;
    assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;

    // goto L7 at ./sources/governance/delegation.move:125:30+50
    goto L7;

    // label L10 at ./sources/governance/delegation.move:125:30+50
L10:

    // havoc[mut]($t22) at ./sources/governance/delegation.move:125:30+50
    havoc $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'');
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22));

    // assume And(WellFormed($t22), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t22)), 1)) at ./sources/governance/delegation.move:125:30+50
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22))) <= 1));

    // assume WellFormed($t23) at ./sources/governance/delegation.move:125:30+50
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t23);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t23, option::$borrow<epoch_time_lock::EpochTimeLock>($t24)) at ./sources/governance/delegation.move:125:30+50
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t23, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t24));

    // assume option::$is_none<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:125:30+50
    assume $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22));

    // $t23 := opaque end: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:125:30+50

    // write_back[Reference($t0).coin_locked_until_epoch (option::Option<epoch_time_lock::EpochTimeLock>)]($t22) at ./sources/governance/delegation.move:125:30+50
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_coin_locked_until_epoch($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:125:30+50
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // $t3 := opaque begin: option::some<epoch_time_lock::EpochTimeLock>($t23) at ./sources/governance/delegation.move:125:17+64

    // assume And(WellFormed($t3), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t3)), 1)) at ./sources/governance/delegation.move:125:17+64
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t3)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t3, option::spec_some<epoch_time_lock::EpochTimeLock>($t23)) at ./sources/governance/delegation.move:125:17+64
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3, $1_option_spec_some'$2_epoch_time_lock_EpochTimeLock'($t23));

    // $t3 := opaque end: option::some<epoch_time_lock::EpochTimeLock>($t23) at ./sources/governance/delegation.move:125:17+64

    // goto L5 at ./sources/governance/delegation.move:124:13+200
    assume {:print "$at(23,5199,5399)"} true;
    goto L5;

    // label L4 at ./sources/governance/delegation.move:127:17+14
    assume {:print "$at(23,5371,5385)"} true;
L4:

    // $t3 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:127:17+14

    // assume And(WellFormed($t3), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t3)), 1)) at ./sources/governance/delegation.move:127:17+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t3)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t3, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/delegation.move:127:17+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t3, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t3 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/delegation.move:127:17+14

    // label L5 at ./sources/governance/delegation.move:124:13+200
    assume {:print "$at(23,5199,5399)"} true;
L5:

    // trace_local[new_epoch_lock]($t3) at ./sources/governance/delegation.move:123:13+14
    assume {:print "$at(23,5170,5184)"} true;
    assume {:print "$track_local(19,7,8):", $t3} $t3 == $t3;

    // $t26 := opaque begin: option::some<u64>($t14) at ./sources/governance/delegation.move:130:29+27
    assume {:print "$at(23,5430,5457)"} true;

    // assume And(WellFormed($t26), Le(Len<u64>(select option::Option.vec($t26)), 1)) at ./sources/governance/delegation.move:130:29+27
    assume ($IsValid'$1_option_Option'u64''($t26) && (LenVec($vec#$1_option_Option'u64'($t26)) <= 1));

    // assume Eq<option::Option<u64>>($t26, option::spec_some<u64>($t14)) at ./sources/governance/delegation.move:130:29+27
    assume $IsEqual'$1_option_Option'u64''($t26, $1_option_spec_some'u64'($t14));

    // $t26 := opaque end: option::some<u64>($t14) at ./sources/governance/delegation.move:130:29+27

    // $t27 := borrow_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:130:9+17
    $t27 := $ChildMutation($t0, 2, $ending_epoch#$2_delegation_Delegation($Dereference($t0)));

    // write_ref($t27, $t26) at ./sources/governance/delegation.move:130:9+47
    $t27 := $UpdateMutation($t27, $t26);

    // write_back[Reference($t0).ending_epoch (option::Option<u64>)]($t27) at ./sources/governance/delegation.move:130:9+47
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_ending_epoch($Dereference($t0), $Dereference($t27)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:130:9+47
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // $t28 := object::new($t2) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:133:17+16
    assume {:print "$at(23,5518,5534)"} true;
    call $t28,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(23,5518,5534)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t29 := opaque begin: option::some<balance::Balance<sui::SUI>>($t16) at ./sources/governance/delegation.move:134:32+21
    assume {:print "$at(23,5567,5588)"} true;

    // assume And(WellFormed($t29), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t29)), 1)) at ./sources/governance/delegation.move:134:32+21
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t29) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($t29)) <= 1));

    // assume Eq<option::Option<balance::Balance<sui::SUI>>>($t29, option::spec_some<balance::Balance<sui::SUI>>($t16)) at ./sources/governance/delegation.move:134:32+21
    assume $IsEqual'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($t29, $1_option_spec_some'$2_balance_Balance'$2_sui_SUI''($t16));

    // $t29 := opaque end: option::some<balance::Balance<sui::SUI>>($t16) at ./sources/governance/delegation.move:134:32+21

    // $t30 := opaque begin: option::none<u64>() at ./sources/governance/delegation.move:135:27+14
    assume {:print "$at(23,5616,5630)"} true;

    // assume And(WellFormed($t30), Le(Len<u64>(select option::Option.vec($t30)), 1)) at ./sources/governance/delegation.move:135:27+14
    assume ($IsValid'$1_option_Option'u64''($t30) && (LenVec($vec#$1_option_Option'u64'($t30)) <= 1));

    // assume Eq<option::Option<u64>>($t30, option::spec_none<u64>()) at ./sources/governance/delegation.move:135:27+14
    assume $IsEqual'$1_option_Option'u64''($t30, $1_option_spec_none'u64'());

    // $t30 := opaque end: option::none<u64>() at ./sources/governance/delegation.move:135:27+14

    // $t31 := 1 at ./sources/governance/delegation.move:137:58+1
    assume {:print "$at(23,5718,5719)"} true;
    $t31 := 1;
    assume $IsValid'u64'($t31);

    // $t32 := +($t14, $t31) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:137:56+1
    call $t32 := $AddU64($t14, $t31);
    if ($abort_flag) {
        assume {:print "$at(23,5716,5717)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t33 := pack delegation::Delegation($t28, $t29, $t30, $t19, $t32, $t3, $t1) at ./sources/governance/delegation.move:132:30+348
    assume {:print "$at(23,5489,5837)"} true;
    $t33 := $2_delegation_Delegation($t28, $t29, $t30, $t19, $t32, $t3, $t1);

    // trace_local[new_delegation]($t33) at ./sources/governance/delegation.move:132:13+14
    assume {:print "$track_local(19,7,7):", $t33} $t33 == $t33;

    // $t34 := read_ref($t2) at ./sources/governance/delegation.move:141:63+3
    assume {:print "$at(23,5901,5904)"} true;
    $t34 := $Dereference($t2);

    // $t35 := tx_context::sender($t34) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:141:44+23
    call $t35 := $2_tx_context_sender($t34);
    if ($abort_flag) {
        assume {:print "$at(23,5882,5905)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // transfer::transfer<delegation::Delegation>($t33, $t35) on_abort goto L7 with $t11 at ./sources/governance/delegation.move:141:9+59
    call $2_transfer_transfer'$2_delegation_Delegation'($t33, $t35);
    if ($abort_flag) {
        assume {:print "$at(23,5847,5906)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,7):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[self]($t0) at ./sources/governance/delegation.move:141:9+59
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,7,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:141:9+59
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,7,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L6 at ./sources/governance/delegation.move:142:5+1
    assume {:print "$at(23,5911,5912)"} true;
L6:

    // return () at ./sources/governance/delegation.move:142:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L7 at ./sources/governance/delegation.move:142:5+1
L7:

    // abort($t11) at ./sources/governance/delegation.move:142:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

    // label L13 at <internal>:1:1+10
L13:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L11 at <internal>:1:1+10
    goto L11;

}

// fun delegation::undelegate [baseline] at ./sources/governance/delegation.move:89:5+743
procedure {:inline 1} $2_delegation_undelegate(_$t0: $Mutation ($2_delegation_Delegation), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_delegation_Delegation), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_epoch_time_lock_EpochTimeLock;
    var $t4: int;
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: $2_delegation_Delegation;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $Mutation ($1_option_Option'$2_balance_Balance'$2_sui_SUI'');
    var $t14: $2_balance_Balance'$2_sui_SUI';
    var $t15: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t16: bool;
    var $t17: $2_tx_context_TxContext;
    var $t18: int;
    var $t19: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t20: bool;
    var $t21: $2_coin_Coin'$2_sui_SUI';
    var $t22: $Mutation ($1_option_Option'$2_epoch_time_lock_EpochTimeLock');
    var $t23: $2_epoch_time_lock_EpochTimeLock;
    var $t24: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t25: bool;
    var $t26: $1_option_Option'u64';
    var $t27: $Mutation ($1_option_Option'u64');
    var $t0: $Mutation ($2_delegation_Delegation);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''': $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t27));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/delegation.move:89:5+1
    assume {:print "$at(23,3824,3825)"} true;
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ending_epoch]($t1) at ./sources/governance/delegation.move:89:5+1
    assume {:print "$track_local(19,9,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:89:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t0) at ./sources/governance/delegation.move:94:27+4
    assume {:print "$at(23,3976,3980)"} true;
    $t6 := $Dereference($t0);

    // $t7 := delegation::is_active($t6) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:94:17+15
    call $t7 := $2_delegation_is_active($t6);
    if ($abort_flag) {
        assume {:print "$at(23,3966,3981)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // if ($t7) goto L0 else goto L1 at ./sources/governance/delegation.move:94:9+27
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/delegation.move:94:9+27
L1:

    // destroy($t0) at ./sources/governance/delegation.move:94:9+27

    // destroy($t2) at ./sources/governance/delegation.move:94:9+27

    // $t9 := 0 at ./sources/governance/delegation.move:94:34+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/governance/delegation.move:94:9+27
    assume {:print "$at(23,3958,3985)"} true;
    assume {:print "$track_abort(19,9):", $t9} $t9 == $t9;

    // $t8 := move($t9) at ./sources/governance/delegation.move:94:9+27
    $t8 := $t9;

    // goto L9 at ./sources/governance/delegation.move:94:9+27
    goto L9;

    // label L0 at ./sources/governance/delegation.move:95:17+12
    assume {:print "$at(23,4003,4015)"} true;
L0:

    // $t10 := get_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:95:33+32
    $t10 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t11 := >=($t1, $t10) at ./sources/governance/delegation.move:95:30+2
    call $t11 := $Ge($t1, $t10);

    // if ($t11) goto L2 else goto L3 at ./sources/governance/delegation.move:95:9+60
    if ($t11) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/delegation.move:95:9+60
L3:

    // destroy($t0) at ./sources/governance/delegation.move:95:9+60

    // destroy($t2) at ./sources/governance/delegation.move:95:9+60

    // $t12 := 0 at ./sources/governance/delegation.move:95:67+1
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/governance/delegation.move:95:9+60
    assume {:print "$at(23,3995,4055)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // $t8 := move($t12) at ./sources/governance/delegation.move:95:9+60
    $t8 := $t12;

    // goto L9 at ./sources/governance/delegation.move:95:9+60
    goto L9;

    // label L2 at ./sources/governance/delegation.move:97:42+4
    assume {:print "$at(23,4099,4103)"} true;
L2:

    // $t13 := borrow_field<delegation::Delegation>.active_delegation($t0) at ./sources/governance/delegation.move:97:37+27
    $t13 := $ChildMutation($t0, 1, $active_delegation#$2_delegation_Delegation($Dereference($t0)));

    // $t14 := opaque begin: option::extract<balance::Balance<sui::SUI>>($t13) at ./sources/governance/delegation.move:97:21+44

    // $t15 := read_ref($t13) at ./sources/governance/delegation.move:97:21+44
    $t15 := $Dereference($t13);

    // assume Identical($t16, option::$is_none<balance::Balance<sui::SUI>>($t13)) at ./sources/governance/delegation.move:97:21+44
    assume ($t16 == $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t13)));

    // if ($t16) goto L14 else goto L10 at ./sources/governance/delegation.move:97:21+44
    if ($t16) { goto L14; } else { goto L10; }

    // label L11 at ./sources/governance/delegation.move:97:21+44
L11:

    // assume And(option::$is_none<balance::Balance<sui::SUI>>($t13), Eq(7, $t8)) at ./sources/governance/delegation.move:97:21+44
    assume ($1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t13)) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:97:21+44
    assume {:print "$at(23,4078,4122)"} true;
    assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;

    // goto L9 at ./sources/governance/delegation.move:97:21+44
    goto L9;

    // label L10 at ./sources/governance/delegation.move:97:21+44
L10:

    // havoc[mut]($t13) at ./sources/governance/delegation.move:97:21+44
    havoc $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''';
    $t13 := $UpdateMutation($t13, $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''');
    assume $IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t13));

    // assume And(WellFormed($t13), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t13)), 1)) at ./sources/governance/delegation.move:97:21+44
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t13)) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($Dereference($t13))) <= 1));

    // assume WellFormed($t14) at ./sources/governance/delegation.move:97:21+44
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t14);

    // assume Eq<balance::Balance<sui::SUI>>($t14, option::$borrow<balance::Balance<sui::SUI>>($t15)) at ./sources/governance/delegation.move:97:21+44
    assume $IsEqual'$2_balance_Balance'$2_sui_SUI''($t14, $1_option_$borrow'$2_balance_Balance'$2_sui_SUI''($t15));

    // assume option::$is_none<balance::Balance<sui::SUI>>($t13) at ./sources/governance/delegation.move:97:21+44
    assume $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t13));

    // $t14 := opaque end: option::extract<balance::Balance<sui::SUI>>($t13) at ./sources/governance/delegation.move:97:21+44

    // write_back[Reference($t0).active_delegation (option::Option<balance::Balance<sui::SUI>>)]($t13) at ./sources/governance/delegation.move:97:21+44
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_active_delegation($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:97:21+44
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[stake]($t14) at ./sources/governance/delegation.move:97:13+5
    assume {:print "$track_local(19,9,5):", $t14} $t14 == $t14;

    // $t17 := read_ref($t2) at ./sources/governance/delegation.move:98:41+3
    assume {:print "$at(23,4164,4167)"} true;
    $t17 := $Dereference($t2);

    // $t18 := tx_context::sender($t17) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:98:22+23
    call $t18 := $2_tx_context_sender($t17);
    if ($abort_flag) {
        assume {:print "$at(23,4145,4168)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // trace_local[sender]($t18) at ./sources/governance/delegation.move:98:13+6
    assume {:print "$track_local(19,9,4):", $t18} $t18 == $t18;

    // $t19 := get_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:100:29+29
    assume {:print "$at(23,4199,4228)"} true;
    $t19 := $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t20 := opaque begin: option::is_none<epoch_time_lock::EpochTimeLock>($t19) at ./sources/governance/delegation.move:100:13+46

    // assume WellFormed($t20) at ./sources/governance/delegation.move:100:13+46
    assume $IsValid'bool'($t20);

    // assume Eq<bool>($t20, option::$is_none<epoch_time_lock::EpochTimeLock>($t19)) at ./sources/governance/delegation.move:100:13+46
    assume $IsEqual'bool'($t20, $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t19));

    // $t20 := opaque end: option::is_none<epoch_time_lock::EpochTimeLock>($t19) at ./sources/governance/delegation.move:100:13+46

    // if ($t20) goto L4 else goto L6 at ./sources/governance/delegation.move:100:9+324
    if ($t20) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/delegation.move:101:51+5
    assume {:print "$at(23,4283,4288)"} true;
L4:

    // $t21 := coin::from_balance<sui::SUI>($t14, $t2) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:101:32+30
    call $t21,$t2 := $2_coin_from_balance'$2_sui_SUI'($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(23,4264,4294)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // transfer::transfer<coin::Coin<sui::SUI>>($t21, $t18) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:101:13+58
    call $2_transfer_transfer'$2_coin_Coin'$2_sui_SUI''($t21, $t18);
    if ($abort_flag) {
        assume {:print "$at(23,4245,4303)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // goto L7 at ./sources/governance/delegation.move:101:71+1
    goto L7;

    // label L6 at ./sources/governance/delegation.move:103:59+4
    assume {:print "$at(23,4380,4384)"} true;
L6:

    // $t22 := borrow_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:103:54+33
    $t22 := $ChildMutation($t0, 5, $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)));

    // $t23 := opaque begin: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:103:38+50

    // $t24 := read_ref($t22) at ./sources/governance/delegation.move:103:38+50
    $t24 := $Dereference($t22);

    // assume Identical($t25, option::$is_none<epoch_time_lock::EpochTimeLock>($t22)) at ./sources/governance/delegation.move:103:38+50
    assume ($t25 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)));

    // if ($t25) goto L15 else goto L12 at ./sources/governance/delegation.move:103:38+50
    if ($t25) { goto L15; } else { goto L12; }

    // label L13 at ./sources/governance/delegation.move:103:38+50
L13:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t22), Eq(7, $t8)) at ./sources/governance/delegation.move:103:38+50
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:103:38+50
    assume {:print "$at(23,4359,4409)"} true;
    assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;

    // goto L9 at ./sources/governance/delegation.move:103:38+50
    goto L9;

    // label L12 at ./sources/governance/delegation.move:103:38+50
L12:

    // havoc[mut]($t22) at ./sources/governance/delegation.move:103:38+50
    havoc $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'');
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22));

    // assume And(WellFormed($t22), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t22)), 1)) at ./sources/governance/delegation.move:103:38+50
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22))) <= 1));

    // assume WellFormed($t23) at ./sources/governance/delegation.move:103:38+50
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t23);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t23, option::$borrow<epoch_time_lock::EpochTimeLock>($t24)) at ./sources/governance/delegation.move:103:38+50
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t23, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t24));

    // assume option::$is_none<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:103:38+50
    assume $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22));

    // $t23 := opaque end: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:103:38+50

    // write_back[Reference($t0).coin_locked_until_epoch (option::Option<epoch_time_lock::EpochTimeLock>)]($t22) at ./sources/governance/delegation.move:103:38+50
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_coin_locked_until_epoch($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:103:38+50
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[locked_until_epoch]($t23) at ./sources/governance/delegation.move:103:17+18
    assume {:print "$track_local(19,9,3):", $t23} $t23 == $t23;

    // locked_coin::new_from_balance<sui::SUI>($t14, $t23, $t18, $t2) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:104:13+69
    assume {:print "$at(23,4423,4492)"} true;
    call $t2 := $2_locked_coin_new_from_balance'$2_sui_SUI'($t14, $t23, $t18, $t2);
    if ($abort_flag) {
        assume {:print "$at(23,4423,4492)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // label L7 at ./sources/governance/delegation.move:107:42+12
    assume {:print "$at(23,4547,4559)"} true;
L7:

    // $t26 := opaque begin: option::some<u64>($t1) at ./sources/governance/delegation.move:107:29+26

    // assume And(WellFormed($t26), Le(Len<u64>(select option::Option.vec($t26)), 1)) at ./sources/governance/delegation.move:107:29+26
    assume ($IsValid'$1_option_Option'u64''($t26) && (LenVec($vec#$1_option_Option'u64'($t26)) <= 1));

    // assume Eq<option::Option<u64>>($t26, option::spec_some<u64>($t1)) at ./sources/governance/delegation.move:107:29+26
    assume $IsEqual'$1_option_Option'u64''($t26, $1_option_spec_some'u64'($t1));

    // $t26 := opaque end: option::some<u64>($t1) at ./sources/governance/delegation.move:107:29+26

    // $t27 := borrow_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:107:9+17
    $t27 := $ChildMutation($t0, 2, $ending_epoch#$2_delegation_Delegation($Dereference($t0)));

    // write_ref($t27, $t26) at ./sources/governance/delegation.move:107:9+46
    $t27 := $UpdateMutation($t27, $t26);

    // write_back[Reference($t0).ending_epoch (option::Option<u64>)]($t27) at ./sources/governance/delegation.move:107:9+46
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_ending_epoch($Dereference($t0), $Dereference($t27)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:107:9+46
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[self]($t0) at ./sources/governance/delegation.move:107:55+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:107:55+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L8 at ./sources/governance/delegation.move:108:5+1
    assume {:print "$at(23,4566,4567)"} true;
L8:

    // return () at ./sources/governance/delegation.move:108:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L9 at ./sources/governance/delegation.move:108:5+1
L9:

    // abort($t8) at ./sources/governance/delegation.move:108:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L14 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L14:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L11 at <internal>:1:1+10
    goto L11;

    // label L15 at <internal>:1:1+10
L15:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L13 at <internal>:1:1+10
    goto L13;

}

// fun delegation::undelegate [verification] at ./sources/governance/delegation.move:89:5+743
procedure {:timeLimit 40} $2_delegation_undelegate$verify(_$t0: $Mutation ($2_delegation_Delegation), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_delegation_Delegation), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_epoch_time_lock_EpochTimeLock;
    var $t4: int;
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: $2_delegation_Delegation;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: $Mutation ($1_option_Option'$2_balance_Balance'$2_sui_SUI'');
    var $t14: $2_balance_Balance'$2_sui_SUI';
    var $t15: $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $t16: bool;
    var $t17: $2_tx_context_TxContext;
    var $t18: int;
    var $t19: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t20: bool;
    var $t21: $2_coin_Coin'$2_sui_SUI';
    var $t22: $Mutation ($1_option_Option'$2_epoch_time_lock_EpochTimeLock');
    var $t23: $2_epoch_time_lock_EpochTimeLock;
    var $t24: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t25: bool;
    var $t26: $1_option_Option'u64';
    var $t27: $Mutation ($1_option_Option'u64');
    var $t0: $Mutation ($2_delegation_Delegation);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''': $1_option_Option'$2_balance_Balance'$2_sui_SUI'';
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t0))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t0))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t0))), 1))) at ./sources/governance/delegation.move:89:5+1
    assume {:print "$at(23,3824,3825)"} true;
    assume ($IsValid'$2_delegation_Delegation'($Dereference($t0)) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($Dereference($t0)))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($Dereference($t0)))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)))) <= 1)));

    // assume WellFormed($t1) at ./sources/governance/delegation.move:89:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/delegation.move:89:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:89:5+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ending_epoch]($t1) at ./sources/governance/delegation.move:89:5+1
    assume {:print "$track_local(19,9,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:89:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t0) at ./sources/governance/delegation.move:94:27+4
    assume {:print "$at(23,3976,3980)"} true;
    $t6 := $Dereference($t0);

    // $t7 := delegation::is_active($t6) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:94:17+15
    call $t7 := $2_delegation_is_active($t6);
    if ($abort_flag) {
        assume {:print "$at(23,3966,3981)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // if ($t7) goto L0 else goto L1 at ./sources/governance/delegation.move:94:9+27
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/delegation.move:94:9+27
L1:

    // destroy($t0) at ./sources/governance/delegation.move:94:9+27

    // destroy($t2) at ./sources/governance/delegation.move:94:9+27

    // $t9 := 0 at ./sources/governance/delegation.move:94:34+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/governance/delegation.move:94:9+27
    assume {:print "$at(23,3958,3985)"} true;
    assume {:print "$track_abort(19,9):", $t9} $t9 == $t9;

    // $t8 := move($t9) at ./sources/governance/delegation.move:94:9+27
    $t8 := $t9;

    // goto L9 at ./sources/governance/delegation.move:94:9+27
    goto L9;

    // label L0 at ./sources/governance/delegation.move:95:17+12
    assume {:print "$at(23,4003,4015)"} true;
L0:

    // $t10 := get_field<delegation::Delegation>.next_reward_unclaimed_epoch($t0) at ./sources/governance/delegation.move:95:33+32
    $t10 := $next_reward_unclaimed_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t11 := >=($t1, $t10) at ./sources/governance/delegation.move:95:30+2
    call $t11 := $Ge($t1, $t10);

    // if ($t11) goto L2 else goto L3 at ./sources/governance/delegation.move:95:9+60
    if ($t11) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/delegation.move:95:9+60
L3:

    // destroy($t0) at ./sources/governance/delegation.move:95:9+60

    // destroy($t2) at ./sources/governance/delegation.move:95:9+60

    // $t12 := 0 at ./sources/governance/delegation.move:95:67+1
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at ./sources/governance/delegation.move:95:9+60
    assume {:print "$at(23,3995,4055)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // $t8 := move($t12) at ./sources/governance/delegation.move:95:9+60
    $t8 := $t12;

    // goto L9 at ./sources/governance/delegation.move:95:9+60
    goto L9;

    // label L2 at ./sources/governance/delegation.move:97:42+4
    assume {:print "$at(23,4099,4103)"} true;
L2:

    // $t13 := borrow_field<delegation::Delegation>.active_delegation($t0) at ./sources/governance/delegation.move:97:37+27
    $t13 := $ChildMutation($t0, 1, $active_delegation#$2_delegation_Delegation($Dereference($t0)));

    // $t14 := opaque begin: option::extract<balance::Balance<sui::SUI>>($t13) at ./sources/governance/delegation.move:97:21+44

    // $t15 := read_ref($t13) at ./sources/governance/delegation.move:97:21+44
    $t15 := $Dereference($t13);

    // assume Identical($t16, option::$is_none<balance::Balance<sui::SUI>>($t13)) at ./sources/governance/delegation.move:97:21+44
    assume ($t16 == $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t13)));

    // if ($t16) goto L14 else goto L10 at ./sources/governance/delegation.move:97:21+44
    if ($t16) { goto L14; } else { goto L10; }

    // label L11 at ./sources/governance/delegation.move:97:21+44
L11:

    // assume And(option::$is_none<balance::Balance<sui::SUI>>($t13), Eq(7, $t8)) at ./sources/governance/delegation.move:97:21+44
    assume ($1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t13)) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:97:21+44
    assume {:print "$at(23,4078,4122)"} true;
    assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;

    // goto L9 at ./sources/governance/delegation.move:97:21+44
    goto L9;

    // label L10 at ./sources/governance/delegation.move:97:21+44
L10:

    // havoc[mut]($t13) at ./sources/governance/delegation.move:97:21+44
    havoc $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''';
    $t13 := $UpdateMutation($t13, $temp_0'$1_option_Option'$2_balance_Balance'$2_sui_SUI''');
    assume $IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t13));

    // assume And(WellFormed($t13), Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec($t13)), 1)) at ./sources/governance/delegation.move:97:21+44
    assume ($IsValid'$1_option_Option'$2_balance_Balance'$2_sui_SUI'''($Dereference($t13)) && (LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($Dereference($t13))) <= 1));

    // assume WellFormed($t14) at ./sources/governance/delegation.move:97:21+44
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t14);

    // assume Eq<balance::Balance<sui::SUI>>($t14, option::$borrow<balance::Balance<sui::SUI>>($t15)) at ./sources/governance/delegation.move:97:21+44
    assume $IsEqual'$2_balance_Balance'$2_sui_SUI''($t14, $1_option_$borrow'$2_balance_Balance'$2_sui_SUI''($t15));

    // assume option::$is_none<balance::Balance<sui::SUI>>($t13) at ./sources/governance/delegation.move:97:21+44
    assume $1_option_$is_none'$2_balance_Balance'$2_sui_SUI''($Dereference($t13));

    // $t14 := opaque end: option::extract<balance::Balance<sui::SUI>>($t13) at ./sources/governance/delegation.move:97:21+44

    // write_back[Reference($t0).active_delegation (option::Option<balance::Balance<sui::SUI>>)]($t13) at ./sources/governance/delegation.move:97:21+44
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_active_delegation($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:97:21+44
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[stake]($t14) at ./sources/governance/delegation.move:97:13+5
    assume {:print "$track_local(19,9,5):", $t14} $t14 == $t14;

    // $t17 := read_ref($t2) at ./sources/governance/delegation.move:98:41+3
    assume {:print "$at(23,4164,4167)"} true;
    $t17 := $Dereference($t2);

    // $t18 := tx_context::sender($t17) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:98:22+23
    call $t18 := $2_tx_context_sender($t17);
    if ($abort_flag) {
        assume {:print "$at(23,4145,4168)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // trace_local[sender]($t18) at ./sources/governance/delegation.move:98:13+6
    assume {:print "$track_local(19,9,4):", $t18} $t18 == $t18;

    // $t19 := get_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:100:29+29
    assume {:print "$at(23,4199,4228)"} true;
    $t19 := $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0));

    // $t20 := opaque begin: option::is_none<epoch_time_lock::EpochTimeLock>($t19) at ./sources/governance/delegation.move:100:13+46

    // assume WellFormed($t20) at ./sources/governance/delegation.move:100:13+46
    assume $IsValid'bool'($t20);

    // assume Eq<bool>($t20, option::$is_none<epoch_time_lock::EpochTimeLock>($t19)) at ./sources/governance/delegation.move:100:13+46
    assume $IsEqual'bool'($t20, $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t19));

    // $t20 := opaque end: option::is_none<epoch_time_lock::EpochTimeLock>($t19) at ./sources/governance/delegation.move:100:13+46

    // if ($t20) goto L4 else goto L6 at ./sources/governance/delegation.move:100:9+324
    if ($t20) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/delegation.move:101:51+5
    assume {:print "$at(23,4283,4288)"} true;
L4:

    // $t21 := coin::from_balance<sui::SUI>($t14, $t2) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:101:32+30
    call $t21,$t2 := $2_coin_from_balance'$2_sui_SUI'($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(23,4264,4294)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // transfer::transfer<coin::Coin<sui::SUI>>($t21, $t18) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:101:13+58
    call $2_transfer_transfer'$2_coin_Coin'$2_sui_SUI''($t21, $t18);
    if ($abort_flag) {
        assume {:print "$at(23,4245,4303)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // goto L7 at ./sources/governance/delegation.move:101:71+1
    goto L7;

    // label L6 at ./sources/governance/delegation.move:103:59+4
    assume {:print "$at(23,4380,4384)"} true;
L6:

    // $t22 := borrow_field<delegation::Delegation>.coin_locked_until_epoch($t0) at ./sources/governance/delegation.move:103:54+33
    $t22 := $ChildMutation($t0, 5, $coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t0)));

    // $t23 := opaque begin: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:103:38+50

    // $t24 := read_ref($t22) at ./sources/governance/delegation.move:103:38+50
    $t24 := $Dereference($t22);

    // assume Identical($t25, option::$is_none<epoch_time_lock::EpochTimeLock>($t22)) at ./sources/governance/delegation.move:103:38+50
    assume ($t25 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)));

    // if ($t25) goto L15 else goto L12 at ./sources/governance/delegation.move:103:38+50
    if ($t25) { goto L15; } else { goto L12; }

    // label L13 at ./sources/governance/delegation.move:103:38+50
L13:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t22), Eq(7, $t8)) at ./sources/governance/delegation.move:103:38+50
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22)) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/delegation.move:103:38+50
    assume {:print "$at(23,4359,4409)"} true;
    assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;

    // goto L9 at ./sources/governance/delegation.move:103:38+50
    goto L9;

    // label L12 at ./sources/governance/delegation.move:103:38+50
L12:

    // havoc[mut]($t22) at ./sources/governance/delegation.move:103:38+50
    havoc $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'');
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22));

    // assume And(WellFormed($t22), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t22)), 1)) at ./sources/governance/delegation.move:103:38+50
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t22)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22))) <= 1));

    // assume WellFormed($t23) at ./sources/governance/delegation.move:103:38+50
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t23);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t23, option::$borrow<epoch_time_lock::EpochTimeLock>($t24)) at ./sources/governance/delegation.move:103:38+50
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t23, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t24));

    // assume option::$is_none<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:103:38+50
    assume $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t22));

    // $t23 := opaque end: option::extract<epoch_time_lock::EpochTimeLock>($t22) at ./sources/governance/delegation.move:103:38+50

    // write_back[Reference($t0).coin_locked_until_epoch (option::Option<epoch_time_lock::EpochTimeLock>)]($t22) at ./sources/governance/delegation.move:103:38+50
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_coin_locked_until_epoch($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:103:38+50
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[locked_until_epoch]($t23) at ./sources/governance/delegation.move:103:17+18
    assume {:print "$track_local(19,9,3):", $t23} $t23 == $t23;

    // locked_coin::new_from_balance<sui::SUI>($t14, $t23, $t18, $t2) on_abort goto L9 with $t8 at ./sources/governance/delegation.move:104:13+69
    assume {:print "$at(23,4423,4492)"} true;
    call $t2 := $2_locked_coin_new_from_balance'$2_sui_SUI'($t14, $t23, $t18, $t2);
    if ($abort_flag) {
        assume {:print "$at(23,4423,4492)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,9):", $t8} $t8 == $t8;
        goto L9;
    }

    // label L7 at ./sources/governance/delegation.move:107:42+12
    assume {:print "$at(23,4547,4559)"} true;
L7:

    // $t26 := opaque begin: option::some<u64>($t1) at ./sources/governance/delegation.move:107:29+26

    // assume And(WellFormed($t26), Le(Len<u64>(select option::Option.vec($t26)), 1)) at ./sources/governance/delegation.move:107:29+26
    assume ($IsValid'$1_option_Option'u64''($t26) && (LenVec($vec#$1_option_Option'u64'($t26)) <= 1));

    // assume Eq<option::Option<u64>>($t26, option::spec_some<u64>($t1)) at ./sources/governance/delegation.move:107:29+26
    assume $IsEqual'$1_option_Option'u64''($t26, $1_option_spec_some'u64'($t1));

    // $t26 := opaque end: option::some<u64>($t1) at ./sources/governance/delegation.move:107:29+26

    // $t27 := borrow_field<delegation::Delegation>.ending_epoch($t0) at ./sources/governance/delegation.move:107:9+17
    $t27 := $ChildMutation($t0, 2, $ending_epoch#$2_delegation_Delegation($Dereference($t0)));

    // write_ref($t27, $t26) at ./sources/governance/delegation.move:107:9+46
    $t27 := $UpdateMutation($t27, $t26);

    // write_back[Reference($t0).ending_epoch (option::Option<u64>)]($t27) at ./sources/governance/delegation.move:107:9+46
    $t0 := $UpdateMutation($t0, $Update'$2_delegation_Delegation'_ending_epoch($Dereference($t0), $Dereference($t27)));

    // trace_local[self]($t0) at ./sources/governance/delegation.move:107:9+46
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[self]($t0) at ./sources/governance/delegation.move:107:55+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t0);
    assume {:print "$track_local(19,9,0):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/delegation.move:107:55+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(19,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L8 at ./sources/governance/delegation.move:108:5+1
    assume {:print "$at(23,4566,4567)"} true;
L8:

    // return () at ./sources/governance/delegation.move:108:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L9 at ./sources/governance/delegation.move:108:5+1
L9:

    // abort($t8) at ./sources/governance/delegation.move:108:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L14 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L14:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L11 at <internal>:1:1+10
    goto L11;

    // label L15 at <internal>:1:1+10
L15:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L13 at <internal>:1:1+10
    goto L13;

}

// struct utf8::String at ./sources/utf8.move:9:5+69
type {:datatype} $2_utf8_String;
function {:constructor} $2_utf8_String($bytes: Vec (int)): $2_utf8_String;
function {:inline} $Update'$2_utf8_String'_bytes(s: $2_utf8_String, x: Vec (int)): $2_utf8_String {
    $2_utf8_String(x)
}
function $IsValid'$2_utf8_String'(s: $2_utf8_String): bool {
    $IsValid'vec'u8''($bytes#$2_utf8_String(s))
}
function {:inline} $IsEqual'$2_utf8_String'(s1: $2_utf8_String, s2: $2_utf8_String): bool {
    $IsEqual'vec'u8''($bytes#$2_utf8_String(s1), $bytes#$2_utf8_String(s2))}

// fun utf8::into_bytes [verification] at ./sources/utf8.move:36:5+106
procedure {:timeLimit 40} $2_utf8_into_bytes$verify(_$t0: $2_utf8_String) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t0: $2_utf8_String;
    var $temp_0'$2_utf8_String': $2_utf8_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/utf8.move:36:5+1
    assume {:print "$at(35,1038,1039)"} true;
    assume $IsValid'$2_utf8_String'($t0);

    // trace_local[self]($t0) at ./sources/utf8.move:36:5+1
    assume {:print "$track_local(20,2,0):", $t0} $t0 == $t0;

    // $t2 := unpack utf8::String($t0) at ./sources/utf8.move:37:13+16
    assume {:print "$at(35,1100,1116)"} true;
    $t2 := $bytes#$2_utf8_String($t0);

    // trace_local[bytes]($t2) at ./sources/utf8.move:37:22+5
    assume {:print "$track_local(20,2,1):", $t2} $t2 == $t2;

    // trace_return[0]($t2) at ./sources/utf8.move:38:9+5
    assume {:print "$at(35,1133,1138)"} true;
    assume {:print "$track_return(20,2,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/utf8.move:39:5+1
    assume {:print "$at(35,1143,1144)"} true;
L1:

    // return $t2 at ./sources/utf8.move:39:5+1
    $ret0 := $t2;
    return;

}

// fun utf8::bytes [verification] at ./sources/utf8.move:31:5+72
procedure {:timeLimit 40} $2_utf8_bytes$verify(_$t0: $2_utf8_String) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $2_utf8_String;
    var $temp_0'$2_utf8_String': $2_utf8_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/utf8.move:31:5+1
    assume {:print "$at(35,905,906)"} true;
    assume $IsValid'$2_utf8_String'($t0);

    // trace_local[self]($t0) at ./sources/utf8.move:31:5+1
    assume {:print "$track_local(20,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<utf8::String>.bytes($t0) at ./sources/utf8.move:32:9+11
    assume {:print "$at(35,960,971)"} true;
    $t1 := $bytes#$2_utf8_String($t0);

    // trace_return[0]($t1) at ./sources/utf8.move:32:9+11
    assume {:print "$track_return(20,0,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/utf8.move:33:5+1
    assume {:print "$at(35,976,977)"} true;
L1:

    // return $t1 at ./sources/utf8.move:33:5+1
    $ret0 := $t1;
    return;

}

// fun utf8::from_ascii [verification] at ./sources/utf8.move:21:5+102
procedure {:timeLimit 40} $2_utf8_from_ascii$verify(_$t0: $1_ascii_String) returns ($ret0: $2_utf8_String)
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: int;
    var $t3: $2_utf8_String;
    var $t0: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_utf8_String': $2_utf8_String;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes($t0))): ascii::$is_valid_char(Index(select ascii::String.bytes($t0), i))) at ./sources/utf8.move:21:5+1
    assume {:print "$at(35,588,589)"} true;
    assume ($IsValid'$1_ascii_String'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($t0))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($t0), i)))))));

    // trace_local[s]($t0) at ./sources/utf8.move:21:5+1
    assume {:print "$track_local(20,1,0):", $t0} $t0 == $t0;

    // $t1 := ascii::into_bytes($t0) on_abort goto L2 with $t2 at ./sources/utf8.move:22:25+20
    assume {:print "$at(35,662,682)"} true;
    call $t1 := $1_ascii_into_bytes($t0);
    if ($abort_flag) {
        assume {:print "$at(35,662,682)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(20,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack utf8::String($t1) at ./sources/utf8.move:22:9+38
    $t3 := $2_utf8_String($t1);

    // trace_return[0]($t3) at ./sources/utf8.move:22:9+38
    assume {:print "$track_return(20,1,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/utf8.move:23:5+1
    assume {:print "$at(35,689,690)"} true;
L1:

    // return $t3 at ./sources/utf8.move:23:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/utf8.move:23:5+1
L2:

    // abort($t2) at ./sources/utf8.move:23:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun utf8::string_unsafe [baseline] at ./sources/utf8.move:16:5+84
procedure {:inline 1} $2_utf8_string_unsafe(_$t0: Vec (int)) returns ($ret0: $2_utf8_String)
{
    // declare local variables
    var $t1: $2_utf8_String;
    var $t0: Vec (int);
    var $temp_0'$2_utf8_String': $2_utf8_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at ./sources/utf8.move:16:5+1
    assume {:print "$at(35,440,441)"} true;
    assume {:print "$track_local(20,3,0):", $t0} $t0 == $t0;

    // $t1 := pack utf8::String($t0) at ./sources/utf8.move:17:9+16
    assume {:print "$at(35,502,518)"} true;
    $t1 := $2_utf8_String($t0);

    // trace_return[0]($t1) at ./sources/utf8.move:17:9+16
    assume {:print "$track_return(20,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/utf8.move:18:5+1
    assume {:print "$at(35,523,524)"} true;
L1:

    // return $t1 at ./sources/utf8.move:18:5+1
    $ret0 := $t1;
    return;

}

// fun utf8::string_unsafe [verification] at ./sources/utf8.move:16:5+84
procedure {:timeLimit 40} $2_utf8_string_unsafe$verify(_$t0: Vec (int)) returns ($ret0: $2_utf8_String)
{
    // declare local variables
    var $t1: $2_utf8_String;
    var $t0: Vec (int);
    var $temp_0'$2_utf8_String': $2_utf8_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/utf8.move:16:5+1
    assume {:print "$at(35,440,441)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[bytes]($t0) at ./sources/utf8.move:16:5+1
    assume {:print "$track_local(20,3,0):", $t0} $t0 == $t0;

    // $t1 := pack utf8::String($t0) at ./sources/utf8.move:17:9+16
    assume {:print "$at(35,502,518)"} true;
    $t1 := $2_utf8_String($t0);

    // trace_return[0]($t1) at ./sources/utf8.move:17:9+16
    assume {:print "$track_return(20,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/utf8.move:18:5+1
    assume {:print "$at(35,523,524)"} true;
L1:

    // return $t1 at ./sources/utf8.move:18:5+1
    $ret0 := $t1;
    return;

}

// fun utf8::try_into_ascii [verification] at ./sources/utf8.move:26:5+108
procedure {:timeLimit 40} $2_utf8_try_into_ascii$verify(_$t0: $2_utf8_String) returns ($ret0: $1_option_Option'$1_ascii_String')
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: $1_option_Option'$1_ascii_String';
    var $t3: int;
    var $t0: $2_utf8_String;
    var $temp_0'$1_option_Option'$1_ascii_String'': $1_option_Option'$1_ascii_String';
    var $temp_0'$2_utf8_String': $2_utf8_String;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/utf8.move:26:5+1
    assume {:print "$at(35,745,746)"} true;
    assume $IsValid'$2_utf8_String'($t0);

    // trace_local[self]($t0) at ./sources/utf8.move:26:5+1
    assume {:print "$track_local(20,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<utf8::String>.bytes($t0) at ./sources/utf8.move:27:27+10
    assume {:print "$at(35,836,846)"} true;
    $t1 := $bytes#$2_utf8_String($t0);

    // $t2 := ascii::try_string($t1) on_abort goto L2 with $t3 at ./sources/utf8.move:27:9+29
    call $t2 := $1_ascii_try_string($t1);
    if ($abort_flag) {
        assume {:print "$at(35,818,847)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(20,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/utf8.move:27:9+29
    assume {:print "$track_return(20,4,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/utf8.move:28:5+1
    assume {:print "$at(35,852,853)"} true;
L1:

    // return $t2 at ./sources/utf8.move:28:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/utf8.move:28:5+1
L2:

    // abort($t3) at ./sources/utf8.move:28:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct url::Url at ./sources/url.move:19:5+98
type {:datatype} $2_url_Url;
function {:constructor} $2_url_Url($url: $1_ascii_String): $2_url_Url;
function {:inline} $Update'$2_url_Url'_url(s: $2_url_Url, x: $1_ascii_String): $2_url_Url {
    $2_url_Url(x)
}
function $IsValid'$2_url_Url'(s: $2_url_Url): bool {
    $IsValid'$1_ascii_String'($url#$2_url_Url(s))
}
function {:inline} $IsEqual'$2_url_Url'(s1: $2_url_Url, s2: $2_url_Url): bool {
    $IsEqual'$1_ascii_String'($url#$2_url_Url(s1), $url#$2_url_Url(s2))}

// struct url::UrlCommitment at ./sources/url.move:26:5+103
type {:datatype} $2_url_UrlCommitment;
function {:constructor} $2_url_UrlCommitment($url: $2_url_Url, $resource_hash: Vec (int)): $2_url_UrlCommitment;
function {:inline} $Update'$2_url_UrlCommitment'_url(s: $2_url_UrlCommitment, x: $2_url_Url): $2_url_UrlCommitment {
    $2_url_UrlCommitment(x, $resource_hash#$2_url_UrlCommitment(s))
}
function {:inline} $Update'$2_url_UrlCommitment'_resource_hash(s: $2_url_UrlCommitment, x: Vec (int)): $2_url_UrlCommitment {
    $2_url_UrlCommitment($url#$2_url_UrlCommitment(s), x)
}
function $IsValid'$2_url_UrlCommitment'(s: $2_url_UrlCommitment): bool {
    $IsValid'$2_url_Url'($url#$2_url_UrlCommitment(s))
      && $IsValid'vec'u8''($resource_hash#$2_url_UrlCommitment(s))
}
function {:inline} $IsEqual'$2_url_UrlCommitment'(s1: $2_url_UrlCommitment, s2: $2_url_UrlCommitment): bool {
    $IsEqual'$2_url_Url'($url#$2_url_UrlCommitment(s1), $url#$2_url_UrlCommitment(s2))
    && $IsEqual'vec'u8''($resource_hash#$2_url_UrlCommitment(s1), $resource_hash#$2_url_UrlCommitment(s2))}

// fun url::update [baseline] at ./sources/url.move:63:5+78
procedure {:inline 1} $2_url_update(_$t0: $Mutation ($2_url_Url), _$t1: $1_ascii_String) returns ($ret0: $Mutation ($2_url_Url))
{
    // declare local variables
    var $t2: $Mutation ($1_ascii_String);
    var $t0: $Mutation ($2_url_Url);
    var $t1: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/url.move:63:5+1
    assume {:print "$at(13,2183,2184)"} true;
    $temp_0'$2_url_Url' := $Dereference($t0);
    assume {:print "$track_local(21,4,0):", $temp_0'$2_url_Url'} $temp_0'$2_url_Url' == $temp_0'$2_url_Url';

    // trace_local[url]($t1) at ./sources/url.move:63:5+1
    assume {:print "$track_local(21,4,1):", $t1} $t1 == $t1;

    // $t2 := borrow_field<url::Url>.url($t0) at ./sources/url.move:64:9+8
    assume {:print "$at(13,2240,2248)"} true;
    $t2 := $ChildMutation($t0, 0, $url#$2_url_Url($Dereference($t0)));

    // write_ref($t2, $t1) at ./sources/url.move:64:9+14
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).url (ascii::String)]($t2) at ./sources/url.move:64:9+14
    $t0 := $UpdateMutation($t0, $Update'$2_url_Url'_url($Dereference($t0), $Dereference($t2)));

    // trace_local[self]($t0) at ./sources/url.move:64:9+14
    $temp_0'$2_url_Url' := $Dereference($t0);
    assume {:print "$track_local(21,4,0):", $temp_0'$2_url_Url'} $temp_0'$2_url_Url' == $temp_0'$2_url_Url';

    // trace_local[self]($t0) at ./sources/url.move:64:23+1
    $temp_0'$2_url_Url' := $Dereference($t0);
    assume {:print "$track_local(21,4,0):", $temp_0'$2_url_Url'} $temp_0'$2_url_Url' == $temp_0'$2_url_Url';

    // label L1 at ./sources/url.move:65:5+1
    assume {:print "$at(13,2260,2261)"} true;
L1:

    // return () at ./sources/url.move:65:5+1
    $ret0 := $t0;
    return;

}

// fun url::update [verification] at ./sources/url.move:63:5+78
procedure {:timeLimit 40} $2_url_update$verify(_$t0: $Mutation ($2_url_Url), _$t1: $1_ascii_String) returns ($ret0: $Mutation ($2_url_Url))
{
    // declare local variables
    var $t2: $Mutation ($1_ascii_String);
    var $t0: $Mutation ($2_url_Url);
    var $t1: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url($t0)))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url($t0)), i))) at ./sources/url.move:63:5+1
    assume {:print "$at(13,2183,2184)"} true;
    assume ($IsValid'$2_url_Url'($Dereference($t0)) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($Dereference($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($Dereference($t0))), i)))))));

    // assume And(WellFormed($t1), forall i: Range(0, Len<u8>(select ascii::String.bytes($t1))): ascii::$is_valid_char(Index(select ascii::String.bytes($t1), i))) at ./sources/url.move:63:5+1
    assume ($IsValid'$1_ascii_String'($t1) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($t1))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($t1), i)))))));

    // trace_local[self]($t0) at ./sources/url.move:63:5+1
    $temp_0'$2_url_Url' := $Dereference($t0);
    assume {:print "$track_local(21,4,0):", $temp_0'$2_url_Url'} $temp_0'$2_url_Url' == $temp_0'$2_url_Url';

    // trace_local[url]($t1) at ./sources/url.move:63:5+1
    assume {:print "$track_local(21,4,1):", $t1} $t1 == $t1;

    // $t2 := borrow_field<url::Url>.url($t0) at ./sources/url.move:64:9+8
    assume {:print "$at(13,2240,2248)"} true;
    $t2 := $ChildMutation($t0, 0, $url#$2_url_Url($Dereference($t0)));

    // write_ref($t2, $t1) at ./sources/url.move:64:9+14
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).url (ascii::String)]($t2) at ./sources/url.move:64:9+14
    $t0 := $UpdateMutation($t0, $Update'$2_url_Url'_url($Dereference($t0), $Dereference($t2)));

    // trace_local[self]($t0) at ./sources/url.move:64:9+14
    $temp_0'$2_url_Url' := $Dereference($t0);
    assume {:print "$track_local(21,4,0):", $temp_0'$2_url_Url'} $temp_0'$2_url_Url' == $temp_0'$2_url_Url';

    // trace_local[self]($t0) at ./sources/url.move:64:23+1
    $temp_0'$2_url_Url' := $Dereference($t0);
    assume {:print "$track_local(21,4,0):", $temp_0'$2_url_Url'} $temp_0'$2_url_Url' == $temp_0'$2_url_Url';

    // label L1 at ./sources/url.move:65:5+1
    assume {:print "$at(13,2260,2261)"} true;
L1:

    // return () at ./sources/url.move:65:5+1
    $ret0 := $t0;
    return;

}

// fun url::inner_url [verification] at ./sources/url.move:58:5+64
procedure {:timeLimit 40} $2_url_inner_url$verify(_$t0: $2_url_Url) returns ($ret0: $1_ascii_String)
{
    // declare local variables
    var $t1: $1_ascii_String;
    var $t0: $2_url_Url;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url($t0)))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url($t0)), i))) at ./sources/url.move:58:5+1
    assume {:print "$at(13,2084,2085)"} true;
    assume ($IsValid'$2_url_Url'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($t0)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($t0)), i)))))));

    // trace_local[self]($t0) at ./sources/url.move:58:5+1
    assume {:print "$track_local(21,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<url::Url>.url($t0) at ./sources/url.move:59:9+8
    assume {:print "$at(13,2134,2142)"} true;
    $t1 := $url#$2_url_Url($t0);

    // trace_return[0]($t1) at ./sources/url.move:59:9+8
    assume {:print "$track_return(21,0,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/url.move:60:5+1
    assume {:print "$at(13,2147,2148)"} true;
L1:

    // return $t1 at ./sources/url.move:60:5+1
    $ret0 := $t1;
    return;

}

// fun url::new_unsafe [baseline] at ./sources/url.move:35:5+67
procedure {:inline 1} $2_url_new_unsafe(_$t0: $1_ascii_String) returns ($ret0: $2_url_Url)
{
    // declare local variables
    var $t1: $2_url_Url;
    var $t0: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[url]($t0) at ./sources/url.move:35:5+1
    assume {:print "$at(13,1380,1381)"} true;
    assume {:print "$track_local(21,1,0):", $t0} $t0 == $t0;

    // $t1 := pack url::Url($t0) at ./sources/url.move:36:9+11
    assume {:print "$at(13,1430,1441)"} true;
    $t1 := $2_url_Url($t0);

    // trace_return[0]($t1) at ./sources/url.move:36:9+11
    assume {:print "$track_return(21,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/url.move:37:5+1
    assume {:print "$at(13,1446,1447)"} true;
L1:

    // return $t1 at ./sources/url.move:37:5+1
    $ret0 := $t1;
    return;

}

// fun url::new_unsafe [verification] at ./sources/url.move:35:5+67
procedure {:timeLimit 40} $2_url_new_unsafe$verify(_$t0: $1_ascii_String) returns ($ret0: $2_url_Url)
{
    // declare local variables
    var $t1: $2_url_Url;
    var $t0: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes($t0))): ascii::$is_valid_char(Index(select ascii::String.bytes($t0), i))) at ./sources/url.move:35:5+1
    assume {:print "$at(13,1380,1381)"} true;
    assume ($IsValid'$1_ascii_String'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($t0))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($t0), i)))))));

    // trace_local[url]($t0) at ./sources/url.move:35:5+1
    assume {:print "$track_local(21,1,0):", $t0} $t0 == $t0;

    // $t1 := pack url::Url($t0) at ./sources/url.move:36:9+11
    assume {:print "$at(13,1430,1441)"} true;
    $t1 := $2_url_Url($t0);

    // trace_return[0]($t1) at ./sources/url.move:36:9+11
    assume {:print "$track_return(21,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/url.move:37:5+1
    assume {:print "$at(13,1446,1447)"} true;
L1:

    // return $t1 at ./sources/url.move:37:5+1
    $ret0 := $t1;
    return;

}

// fun url::new_unsafe_from_bytes [baseline] at ./sources/url.move:41:5+124
procedure {:inline 1} $2_url_new_unsafe_from_bytes(_$t0: Vec (int)) returns ($ret0: $2_url_Url)
{
    // declare local variables
    var $t1: $1_ascii_String;
    var $t2: $1_ascii_String;
    var $t3: int;
    var $t4: $2_url_Url;
    var $t0: Vec (int);
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at ./sources/url.move:41:5+1
    assume {:print "$at(13,1566,1567)"} true;
    assume {:print "$track_local(21,2,0):", $t0} $t0 == $t0;

    // $t2 := ascii::string($t0) on_abort goto L2 with $t3 at ./sources/url.move:42:19+20
    assume {:print "$at(13,1643,1663)"} true;
    call $t2 := $1_ascii_string($t0);
    if ($abort_flag) {
        assume {:print "$at(13,1643,1663)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[url]($t2) at ./sources/url.move:42:13+3
    assume {:print "$track_local(21,2,1):", $t2} $t2 == $t2;

    // $t4 := pack url::Url($t2) at ./sources/url.move:43:9+11
    assume {:print "$at(13,1673,1684)"} true;
    $t4 := $2_url_Url($t2);

    // trace_return[0]($t4) at ./sources/url.move:43:9+11
    assume {:print "$track_return(21,2,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/url.move:44:5+1
    assume {:print "$at(13,1689,1690)"} true;
L1:

    // return $t4 at ./sources/url.move:44:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/url.move:44:5+1
L2:

    // abort($t3) at ./sources/url.move:44:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun url::new_unsafe_from_bytes [verification] at ./sources/url.move:41:5+124
procedure {:timeLimit 40} $2_url_new_unsafe_from_bytes$verify(_$t0: Vec (int)) returns ($ret0: $2_url_Url)
{
    // declare local variables
    var $t1: $1_ascii_String;
    var $t2: $1_ascii_String;
    var $t3: int;
    var $t4: $2_url_Url;
    var $t0: Vec (int);
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_Url': $2_url_Url;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/url.move:41:5+1
    assume {:print "$at(13,1566,1567)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[bytes]($t0) at ./sources/url.move:41:5+1
    assume {:print "$track_local(21,2,0):", $t0} $t0 == $t0;

    // $t2 := ascii::string($t0) on_abort goto L2 with $t3 at ./sources/url.move:42:19+20
    assume {:print "$at(13,1643,1663)"} true;
    call $t2 := $1_ascii_string($t0);
    if ($abort_flag) {
        assume {:print "$at(13,1643,1663)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[url]($t2) at ./sources/url.move:42:13+3
    assume {:print "$track_local(21,2,1):", $t2} $t2 == $t2;

    // $t4 := pack url::Url($t2) at ./sources/url.move:43:9+11
    assume {:print "$at(13,1673,1684)"} true;
    $t4 := $2_url_Url($t2);

    // trace_return[0]($t4) at ./sources/url.move:43:9+11
    assume {:print "$track_return(21,2,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/url.move:44:5+1
    assume {:print "$at(13,1689,1690)"} true;
L1:

    // return $t4 at ./sources/url.move:44:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/url.move:44:5+1
L2:

    // abort($t3) at ./sources/url.move:44:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun url::new_unsafe_url_commitment [verification] at ./sources/url.move:47:5+266
procedure {:timeLimit 40} $2_url_new_unsafe_url_commitment$verify(_$t0: $2_url_Url, _$t1: Vec (int)) returns ($ret0: $2_url_UrlCommitment)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: $2_url_UrlCommitment;
    var $t0: $2_url_Url;
    var $t1: Vec (int);
    var $temp_0'$2_url_Url': $2_url_Url;
    var $temp_0'$2_url_UrlCommitment': $2_url_UrlCommitment;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url($t0)))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url($t0)), i))) at ./sources/url.move:47:5+1
    assume {:print "$at(13,1757,1758)"} true;
    assume ($IsValid'$2_url_Url'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($t0)))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($t0)), i)))))));

    // assume WellFormed($t1) at ./sources/url.move:47:5+1
    assume $IsValid'vec'u8''($t1);

    // trace_local[url]($t0) at ./sources/url.move:47:5+1
    assume {:print "$track_local(21,3,0):", $t0} $t0 == $t0;

    // trace_local[resource_hash]($t1) at ./sources/url.move:47:5+1
    assume {:print "$track_local(21,3,1):", $t1} $t1 == $t1;

    // $t2 := vector::length<u8>($t1) on_abort goto L3 with $t3 at ./sources/url.move:49:17+30
    assume {:print "$at(13,1896,1926)"} true;
    call $t2 := $1_vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(13,1896,1926)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,3):", $t3} $t3 == $t3;
        goto L3;
    }

    // $t4 := 32 at ./sources/url.move:49:51+18
    $t4 := 32;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t2, $t4) at ./sources/url.move:49:48+2
    $t5 := $IsEqual'u64'($t2, $t4);

    // if ($t5) goto L0 else goto L1 at ./sources/url.move:49:9+82
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/url.move:49:71+19
L1:

    // $t6 := 0 at ./sources/url.move:49:71+19
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/url.move:49:9+82
    assume {:print "$at(13,1888,1970)"} true;
    assume {:print "$track_abort(21,3):", $t6} $t6 == $t6;

    // $t3 := move($t6) at ./sources/url.move:49:9+82
    $t3 := $t6;

    // goto L3 at ./sources/url.move:49:9+82
    goto L3;

    // label L0 at ./sources/url.move:51:25+3
    assume {:print "$at(13,1997,2000)"} true;
L0:

    // $t7 := pack url::UrlCommitment($t0, $t1) at ./sources/url.move:51:9+36
    $t7 := $2_url_UrlCommitment($t0, $t1);

    // trace_return[0]($t7) at ./sources/url.move:51:9+36
    assume {:print "$track_return(21,3,0):", $t7} $t7 == $t7;

    // label L2 at ./sources/url.move:52:5+1
    assume {:print "$at(13,2022,2023)"} true;
L2:

    // return $t7 at ./sources/url.move:52:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./sources/url.move:52:5+1
L3:

    // abort($t3) at ./sources/url.move:52:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun url::url_commitment_inner_url [verification] at ./sources/url.move:77:5+93
procedure {:timeLimit 40} $2_url_url_commitment_inner_url$verify(_$t0: $2_url_UrlCommitment) returns ($ret0: $1_ascii_String)
{
    // declare local variables
    var $t1: $2_url_Url;
    var $t2: $1_ascii_String;
    var $t0: $2_url_UrlCommitment;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_UrlCommitment': $2_url_UrlCommitment;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select url::UrlCommitment.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select url::UrlCommitment.url($t0))), i))) at ./sources/url.move:77:5+1
    assume {:print "$at(13,2540,2541)"} true;
    assume ($IsValid'$2_url_UrlCommitment'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_url_UrlCommitment($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_url_UrlCommitment($t0))), i)))))));

    // trace_local[self]($t0) at ./sources/url.move:77:5+1
    assume {:print "$track_local(21,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<url::UrlCommitment>.url($t0) at ./sources/url.move:78:9+8
    assume {:print "$at(13,2615,2623)"} true;
    $t1 := $url#$2_url_UrlCommitment($t0);

    // $t2 := get_field<url::Url>.url($t1) at ./sources/url.move:78:9+12
    $t2 := $url#$2_url_Url($t1);

    // trace_return[0]($t2) at ./sources/url.move:78:9+12
    assume {:print "$track_return(21,5,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/url.move:79:5+1
    assume {:print "$at(13,2632,2633)"} true;
L1:

    // return $t2 at ./sources/url.move:79:5+1
    $ret0 := $t2;
    return;

}

// fun url::url_commitment_resource_hash [verification] at ./sources/url.move:72:5+108
procedure {:timeLimit 40} $2_url_url_commitment_resource_hash$verify(_$t0: $2_url_UrlCommitment) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $2_url_UrlCommitment;
    var $temp_0'$2_url_UrlCommitment': $2_url_UrlCommitment;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select url::UrlCommitment.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select url::UrlCommitment.url($t0))), i))) at ./sources/url.move:72:5+1
    assume {:print "$at(13,2404,2405)"} true;
    assume ($IsValid'$2_url_UrlCommitment'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_url_UrlCommitment($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_url_UrlCommitment($t0))), i)))))));

    // trace_local[self]($t0) at ./sources/url.move:72:5+1
    assume {:print "$track_local(21,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<url::UrlCommitment>.resource_hash($t0) at ./sources/url.move:73:9+18
    assume {:print "$at(13,2488,2506)"} true;
    $t1 := $resource_hash#$2_url_UrlCommitment($t0);

    // trace_return[0]($t1) at ./sources/url.move:73:9+18
    assume {:print "$track_return(21,6,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/url.move:74:5+1
    assume {:print "$at(13,2511,2512)"} true;
L1:

    // return $t1 at ./sources/url.move:74:5+1
    $ret0 := $t1;
    return;

}

// fun url::url_commitment_update [verification] at ./sources/url.move:82:5+114
procedure {:timeLimit 40} $2_url_url_commitment_update$verify(_$t0: $Mutation ($2_url_UrlCommitment), _$t1: $1_ascii_String) returns ($ret0: $Mutation ($2_url_UrlCommitment))
{
    // declare local variables
    var $t2: $Mutation ($2_url_Url);
    var $t3: int;
    var $t0: $Mutation ($2_url_UrlCommitment);
    var $t1: $1_ascii_String;
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_url_UrlCommitment': $2_url_UrlCommitment;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select url::UrlCommitment.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select url::UrlCommitment.url($t0))), i))) at ./sources/url.move:82:5+1
    assume {:print "$at(13,2719,2720)"} true;
    assume ($IsValid'$2_url_UrlCommitment'($Dereference($t0)) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_url_UrlCommitment($Dereference($t0)))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_url_UrlCommitment($Dereference($t0)))), i)))))));

    // assume And(WellFormed($t1), forall i: Range(0, Len<u8>(select ascii::String.bytes($t1))): ascii::$is_valid_char(Index(select ascii::String.bytes($t1), i))) at ./sources/url.move:82:5+1
    assume ($IsValid'$1_ascii_String'($t1) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($t1))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($t1), i)))))));

    // trace_local[self]($t0) at ./sources/url.move:82:5+1
    $temp_0'$2_url_UrlCommitment' := $Dereference($t0);
    assume {:print "$track_local(21,7,0):", $temp_0'$2_url_UrlCommitment'} $temp_0'$2_url_UrlCommitment' == $temp_0'$2_url_UrlCommitment';

    // trace_local[url]($t1) at ./sources/url.move:82:5+1
    assume {:print "$track_local(21,7,1):", $t1} $t1 == $t1;

    // $t2 := borrow_field<url::UrlCommitment>.url($t0) at ./sources/url.move:83:16+13
    assume {:print "$at(13,2808,2821)"} true;
    $t2 := $ChildMutation($t0, 0, $url#$2_url_UrlCommitment($Dereference($t0)));

    // url::update($t2, $t1) on_abort goto L2 with $t3 at ./sources/url.move:83:9+26
    call $t2 := $2_url_update($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(13,2801,2827)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(21,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // write_back[Reference($t0).url (url::Url)]($t2) at ./sources/url.move:83:9+26
    $t0 := $UpdateMutation($t0, $Update'$2_url_UrlCommitment'_url($Dereference($t0), $Dereference($t2)));

    // trace_local[self]($t0) at ./sources/url.move:83:9+26
    $temp_0'$2_url_UrlCommitment' := $Dereference($t0);
    assume {:print "$track_local(21,7,0):", $temp_0'$2_url_UrlCommitment'} $temp_0'$2_url_UrlCommitment' == $temp_0'$2_url_UrlCommitment';

    // trace_local[self]($t0) at ./sources/url.move:83:9+26
    $temp_0'$2_url_UrlCommitment' := $Dereference($t0);
    assume {:print "$track_local(21,7,0):", $temp_0'$2_url_UrlCommitment'} $temp_0'$2_url_UrlCommitment' == $temp_0'$2_url_UrlCommitment';

    // label L1 at ./sources/url.move:84:5+1
    assume {:print "$at(13,2832,2833)"} true;
L1:

    // return () at ./sources/url.move:84:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/url.move:84:5+1
L2:

    // abort($t3) at ./sources/url.move:84:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct devnet_nft::DevNetNFT at ./sources/devnet_nft.move:17:5+276
type {:datatype} $2_devnet_nft_DevNetNFT;
function {:constructor} $2_devnet_nft_DevNetNFT($id: $2_object_UID, $name: $2_utf8_String, $description: $2_utf8_String, $url: $2_url_Url): $2_devnet_nft_DevNetNFT;
function {:inline} $Update'$2_devnet_nft_DevNetNFT'_id(s: $2_devnet_nft_DevNetNFT, x: $2_object_UID): $2_devnet_nft_DevNetNFT {
    $2_devnet_nft_DevNetNFT(x, $name#$2_devnet_nft_DevNetNFT(s), $description#$2_devnet_nft_DevNetNFT(s), $url#$2_devnet_nft_DevNetNFT(s))
}
function {:inline} $Update'$2_devnet_nft_DevNetNFT'_name(s: $2_devnet_nft_DevNetNFT, x: $2_utf8_String): $2_devnet_nft_DevNetNFT {
    $2_devnet_nft_DevNetNFT($id#$2_devnet_nft_DevNetNFT(s), x, $description#$2_devnet_nft_DevNetNFT(s), $url#$2_devnet_nft_DevNetNFT(s))
}
function {:inline} $Update'$2_devnet_nft_DevNetNFT'_description(s: $2_devnet_nft_DevNetNFT, x: $2_utf8_String): $2_devnet_nft_DevNetNFT {
    $2_devnet_nft_DevNetNFT($id#$2_devnet_nft_DevNetNFT(s), $name#$2_devnet_nft_DevNetNFT(s), x, $url#$2_devnet_nft_DevNetNFT(s))
}
function {:inline} $Update'$2_devnet_nft_DevNetNFT'_url(s: $2_devnet_nft_DevNetNFT, x: $2_url_Url): $2_devnet_nft_DevNetNFT {
    $2_devnet_nft_DevNetNFT($id#$2_devnet_nft_DevNetNFT(s), $name#$2_devnet_nft_DevNetNFT(s), $description#$2_devnet_nft_DevNetNFT(s), x)
}
function $IsValid'$2_devnet_nft_DevNetNFT'(s: $2_devnet_nft_DevNetNFT): bool {
    $IsValid'$2_object_UID'($id#$2_devnet_nft_DevNetNFT(s))
      && $IsValid'$2_utf8_String'($name#$2_devnet_nft_DevNetNFT(s))
      && $IsValid'$2_utf8_String'($description#$2_devnet_nft_DevNetNFT(s))
      && $IsValid'$2_url_Url'($url#$2_devnet_nft_DevNetNFT(s))
}
function {:inline} $IsEqual'$2_devnet_nft_DevNetNFT'(s1: $2_devnet_nft_DevNetNFT, s2: $2_devnet_nft_DevNetNFT): bool {
    $IsEqual'$2_object_UID'($id#$2_devnet_nft_DevNetNFT(s1), $id#$2_devnet_nft_DevNetNFT(s2))
    && $IsEqual'$2_utf8_String'($name#$2_devnet_nft_DevNetNFT(s1), $name#$2_devnet_nft_DevNetNFT(s2))
    && $IsEqual'$2_utf8_String'($description#$2_devnet_nft_DevNetNFT(s1), $description#$2_devnet_nft_DevNetNFT(s2))
    && $IsEqual'$2_url_Url'($url#$2_devnet_nft_DevNetNFT(s1), $url#$2_devnet_nft_DevNetNFT(s2))}
var $2_devnet_nft_DevNetNFT_$memory: $Memory $2_devnet_nft_DevNetNFT;

// struct devnet_nft::MintNFTEvent at ./sources/devnet_nft.move:28:5+220
type {:datatype} $2_devnet_nft_MintNFTEvent;
function {:constructor} $2_devnet_nft_MintNFTEvent($object_id: $2_object_ID, $creator: int, $name: $2_utf8_String): $2_devnet_nft_MintNFTEvent;
function {:inline} $Update'$2_devnet_nft_MintNFTEvent'_object_id(s: $2_devnet_nft_MintNFTEvent, x: $2_object_ID): $2_devnet_nft_MintNFTEvent {
    $2_devnet_nft_MintNFTEvent(x, $creator#$2_devnet_nft_MintNFTEvent(s), $name#$2_devnet_nft_MintNFTEvent(s))
}
function {:inline} $Update'$2_devnet_nft_MintNFTEvent'_creator(s: $2_devnet_nft_MintNFTEvent, x: int): $2_devnet_nft_MintNFTEvent {
    $2_devnet_nft_MintNFTEvent($object_id#$2_devnet_nft_MintNFTEvent(s), x, $name#$2_devnet_nft_MintNFTEvent(s))
}
function {:inline} $Update'$2_devnet_nft_MintNFTEvent'_name(s: $2_devnet_nft_MintNFTEvent, x: $2_utf8_String): $2_devnet_nft_MintNFTEvent {
    $2_devnet_nft_MintNFTEvent($object_id#$2_devnet_nft_MintNFTEvent(s), $creator#$2_devnet_nft_MintNFTEvent(s), x)
}
function $IsValid'$2_devnet_nft_MintNFTEvent'(s: $2_devnet_nft_MintNFTEvent): bool {
    $IsValid'$2_object_ID'($object_id#$2_devnet_nft_MintNFTEvent(s))
      && $IsValid'address'($creator#$2_devnet_nft_MintNFTEvent(s))
      && $IsValid'$2_utf8_String'($name#$2_devnet_nft_MintNFTEvent(s))
}
function {:inline} $IsEqual'$2_devnet_nft_MintNFTEvent'(s1: $2_devnet_nft_MintNFTEvent, s2: $2_devnet_nft_MintNFTEvent): bool {
    $IsEqual'$2_object_ID'($object_id#$2_devnet_nft_MintNFTEvent(s1), $object_id#$2_devnet_nft_MintNFTEvent(s2))
    && $IsEqual'address'($creator#$2_devnet_nft_MintNFTEvent(s1), $creator#$2_devnet_nft_MintNFTEvent(s2))
    && $IsEqual'$2_utf8_String'($name#$2_devnet_nft_MintNFTEvent(s1), $name#$2_devnet_nft_MintNFTEvent(s2))}

// fun devnet_nft::transfer [verification] at ./sources/devnet_nft.move:60:5+145
procedure {:timeLimit 40} $2_devnet_nft_transfer$verify(_$t0: $2_devnet_nft_DevNetNFT, _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t0: $2_devnet_nft_DevNetNFT;
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))), i))) at ./sources/devnet_nft.move:60:5+1
    assume {:print "$at(39,1836,1837)"} true;
    assume ($IsValid'$2_devnet_nft_DevNetNFT'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))), i)))))));

    // assume WellFormed($t1) at ./sources/devnet_nft.move:60:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/devnet_nft.move:60:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:60:5+1
    assume {:print "$track_local(23,4,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/devnet_nft.move:60:5+1
    assume {:print "$track_local(23,4,1):", $t1} $t1 == $t1;

    // trace_local[_]($t2) at ./sources/devnet_nft.move:60:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(23,4,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // transfer::transfer<devnet_nft::DevNetNFT>($t0, $t1) on_abort goto L2 with $t3 at ./sources/devnet_nft.move:63:9+34
    assume {:print "$at(39,1941,1975)"} true;
    call $2_transfer_transfer'$2_devnet_nft_DevNetNFT'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(39,1941,1975)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(23,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[_]($t2) at ./sources/devnet_nft.move:63:9+34
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(23,4,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/devnet_nft.move:64:5+1
    assume {:print "$at(39,1980,1981)"} true;
L1:

    // return () at ./sources/devnet_nft.move:64:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/devnet_nft.move:64:5+1
L2:

    // abort($t3) at ./sources/devnet_nft.move:64:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun devnet_nft::burn [verification] at ./sources/devnet_nft.move:76:5+160
procedure {:timeLimit 40} $2_devnet_nft_burn$verify(_$t0: $2_devnet_nft_DevNetNFT, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: $2_object_UID;
    var $t4: $2_utf8_String;
    var $t5: $2_utf8_String;
    var $t6: $2_url_Url;
    var $t7: int;
    var $t0: $2_devnet_nft_DevNetNFT;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))), i))) at ./sources/devnet_nft.move:76:5+1
    assume {:print "$at(39,2294,2295)"} true;
    assume ($IsValid'$2_devnet_nft_DevNetNFT'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))), i)))))));

    // assume WellFormed($t1) at ./sources/devnet_nft.move:76:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:76:5+1
    assume {:print "$track_local(23,0,0):", $t0} $t0 == $t0;

    // trace_local[_]($t1) at ./sources/devnet_nft.move:76:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(23,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // ($t3, $t4, $t5, $t6) := unpack devnet_nft::DevNetNFT($t0) at ./sources/devnet_nft.move:77:13+49
    assume {:print "$at(39,2365,2414)"} true;
    $t3 := $id#$2_devnet_nft_DevNetNFT($t0);
    $t4 := $name#$2_devnet_nft_DevNetNFT($t0);
    $t5 := $description#$2_devnet_nft_DevNetNFT($t0);
    $t6 := $url#$2_devnet_nft_DevNetNFT($t0);

    // destroy($t6) at ./sources/devnet_nft.move:77:59+1

    // destroy($t5) at ./sources/devnet_nft.move:77:51+1

    // destroy($t4) at ./sources/devnet_nft.move:77:35+1

    // trace_local[id]($t3) at ./sources/devnet_nft.move:77:25+2
    assume {:print "$track_local(23,0,2):", $t3} $t3 == $t3;

    // object::delete($t3) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:78:9+18
    assume {:print "$at(39,2430,2448)"} true;
    call $2_object_delete($t3);
    if ($abort_flag) {
        assume {:print "$at(39,2430,2448)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,0):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[_]($t1) at ./sources/devnet_nft.move:78:9+18
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(23,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/devnet_nft.move:79:5+1
    assume {:print "$at(39,2453,2454)"} true;
L1:

    // return () at ./sources/devnet_nft.move:79:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/devnet_nft.move:79:5+1
L2:

    // abort($t7) at ./sources/devnet_nft.move:79:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun devnet_nft::mint [verification] at ./sources/devnet_nft.move:38:5+621
procedure {:timeLimit 40} $2_devnet_nft_mint$verify(_$t0: Vec (int), _$t1: Vec (int), _$t2: Vec (int), _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_devnet_nft_DevNetNFT;
    var $t5: int;
    var $t6: $2_object_UID;
    var $t7: int;
    var $t8: $2_utf8_String;
    var $t9: $2_utf8_String;
    var $t10: $2_url_Url;
    var $t11: $2_devnet_nft_DevNetNFT;
    var $t12: $2_tx_context_TxContext;
    var $t13: int;
    var $t14: $2_object_UID;
    var $t15: $2_object_ID;
    var $t16: $2_utf8_String;
    var $t17: $2_devnet_nft_MintNFTEvent;
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/devnet_nft.move:38:5+1
    assume {:print "$at(39,1171,1172)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume WellFormed($t1) at ./sources/devnet_nft.move:38:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at ./sources/devnet_nft.move:38:5+1
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at ./sources/devnet_nft.move:38:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[name]($t0) at ./sources/devnet_nft.move:38:5+1
    assume {:print "$track_local(23,2,0):", $t0} $t0 == $t0;

    // trace_local[description]($t1) at ./sources/devnet_nft.move:38:5+1
    assume {:print "$track_local(23,2,1):", $t1} $t1 == $t1;

    // trace_local[url]($t2) at ./sources/devnet_nft.move:38:5+1
    assume {:print "$track_local(23,2,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/devnet_nft.move:38:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(23,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := object::new($t3) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:45:17+16
    assume {:print "$at(39,1360,1376)"} true;
    call $t6,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(39,1360,1376)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := utf8::string_unsafe($t0) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:46:19+25
    assume {:print "$at(39,1396,1421)"} true;
    call $t8 := $2_utf8_string_unsafe($t0);
    if ($abort_flag) {
        assume {:print "$at(39,1396,1421)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t9 := utf8::string_unsafe($t1) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:47:26+32
    assume {:print "$at(39,1448,1480)"} true;
    call $t9 := $2_utf8_string_unsafe($t1);
    if ($abort_flag) {
        assume {:print "$at(39,1448,1480)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t10 := url::new_unsafe_from_bytes($t2) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:48:18+31
    assume {:print "$at(39,1499,1530)"} true;
    call $t10 := $2_url_new_unsafe_from_bytes($t2);
    if ($abort_flag) {
        assume {:print "$at(39,1499,1530)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t11 := pack devnet_nft::DevNetNFT($t6, $t8, $t9, $t10) at ./sources/devnet_nft.move:44:19+208
    assume {:print "$at(39,1332,1540)"} true;
    $t11 := $2_devnet_nft_DevNetNFT($t6, $t8, $t9, $t10);

    // trace_local[nft]($t11) at ./sources/devnet_nft.move:44:13+3
    assume {:print "$track_local(23,2,4):", $t11} $t11 == $t11;

    // $t12 := read_ref($t3) at ./sources/devnet_nft.move:50:41+3
    assume {:print "$at(39,1582,1585)"} true;
    $t12 := $Dereference($t3);

    // $t13 := tx_context::sender($t12) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:50:22+23
    call $t13 := $2_tx_context_sender($t12);
    if ($abort_flag) {
        assume {:print "$at(39,1563,1586)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[sender]($t13) at ./sources/devnet_nft.move:50:13+6
    assume {:print "$track_local(23,2,5):", $t13} $t13 == $t13;

    // $t14 := get_field<devnet_nft::DevNetNFT>.id($t11) at ./sources/devnet_nft.move:52:45+7
    assume {:print "$at(39,1667,1674)"} true;
    $t14 := $id#$2_devnet_nft_DevNetNFT($t11);

    // $t15 := object::uid_to_inner($t14) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:52:24+29
    call $t15 := $2_object_uid_to_inner($t14);
    if ($abort_flag) {
        assume {:print "$at(39,1646,1675)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t16 := get_field<devnet_nft::DevNetNFT>.name($t11) at ./sources/devnet_nft.move:54:19+8
    assume {:print "$at(39,1724,1732)"} true;
    $t16 := $name#$2_devnet_nft_DevNetNFT($t11);

    // $t17 := pack devnet_nft::MintNFTEvent($t15, $t13, $t16) at ./sources/devnet_nft.move:51:21+135
    assume {:print "$at(39,1608,1743)"} true;
    $t17 := $2_devnet_nft_MintNFTEvent($t15, $t13, $t16);

    // event::emit<devnet_nft::MintNFTEvent>($t17) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:51:9+148
    call $2_event_emit'$2_devnet_nft_MintNFTEvent'($t17);
    if ($abort_flag) {
        assume {:print "$at(39,1596,1744)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // transfer::transfer<devnet_nft::DevNetNFT>($t11, $t13) on_abort goto L2 with $t7 at ./sources/devnet_nft.move:56:9+31
    assume {:print "$at(39,1754,1785)"} true;
    call $2_transfer_transfer'$2_devnet_nft_DevNetNFT'($t11, $t13);
    if ($abort_flag) {
        assume {:print "$at(39,1754,1785)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(23,2):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/devnet_nft.move:56:40+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(23,2,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/devnet_nft.move:57:5+1
    assume {:print "$at(39,1791,1792)"} true;
L1:

    // return () at ./sources/devnet_nft.move:57:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/devnet_nft.move:57:5+1
L2:

    // abort($t7) at ./sources/devnet_nft.move:57:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun devnet_nft::url [verification] at ./sources/devnet_nft.move:92:5+62
procedure {:timeLimit 40} $2_devnet_nft_url$verify(_$t0: $2_devnet_nft_DevNetNFT) returns ($ret0: $2_url_Url)
{
    // declare local variables
    var $t1: $2_url_Url;
    var $t0: $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))), i))) at ./sources/devnet_nft.move:92:5+1
    assume {:print "$at(39,2725,2726)"} true;
    assume ($IsValid'$2_devnet_nft_DevNetNFT'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))), i)))))));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:92:5+1
    assume {:print "$track_local(23,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<devnet_nft::DevNetNFT>.url($t0) at ./sources/devnet_nft.move:93:9+8
    assume {:print "$at(39,2773,2781)"} true;
    $t1 := $url#$2_devnet_nft_DevNetNFT($t0);

    // trace_return[0]($t1) at ./sources/devnet_nft.move:93:9+8
    assume {:print "$track_return(23,6,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/devnet_nft.move:94:5+1
    assume {:print "$at(39,2786,2787)"} true;
L1:

    // return $t1 at ./sources/devnet_nft.move:94:5+1
    $ret0 := $t1;
    return;

}

// fun devnet_nft::description [verification] at ./sources/devnet_nft.move:87:5+87
procedure {:timeLimit 40} $2_devnet_nft_description$verify(_$t0: $2_devnet_nft_DevNetNFT) returns ($ret0: $2_utf8_String)
{
    // declare local variables
    var $t1: $2_utf8_String;
    var $t0: $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_utf8_String': $2_utf8_String;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))), i))) at ./sources/devnet_nft.move:87:5+1
    assume {:print "$at(39,2604,2605)"} true;
    assume ($IsValid'$2_devnet_nft_DevNetNFT'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))), i)))))));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:87:5+1
    assume {:print "$track_local(23,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<devnet_nft::DevNetNFT>.description($t0) at ./sources/devnet_nft.move:88:9+16
    assume {:print "$at(39,2669,2685)"} true;
    $t1 := $description#$2_devnet_nft_DevNetNFT($t0);

    // trace_return[0]($t1) at ./sources/devnet_nft.move:88:9+16
    assume {:print "$track_return(23,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/devnet_nft.move:89:5+1
    assume {:print "$at(39,2690,2691)"} true;
L1:

    // return $t1 at ./sources/devnet_nft.move:89:5+1
    $ret0 := $t1;
    return;

}

// fun devnet_nft::name [verification] at ./sources/devnet_nft.move:82:5+73
procedure {:timeLimit 40} $2_devnet_nft_name$verify(_$t0: $2_devnet_nft_DevNetNFT) returns ($ret0: $2_utf8_String)
{
    // declare local variables
    var $t1: $2_utf8_String;
    var $t0: $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_utf8_String': $2_utf8_String;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))), i))) at ./sources/devnet_nft.move:82:5+1
    assume {:print "$at(39,2489,2490)"} true;
    assume ($IsValid'$2_devnet_nft_DevNetNFT'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($t0))), i)))))));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:82:5+1
    assume {:print "$track_local(23,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<devnet_nft::DevNetNFT>.name($t0) at ./sources/devnet_nft.move:83:9+9
    assume {:print "$at(39,2547,2556)"} true;
    $t1 := $name#$2_devnet_nft_DevNetNFT($t0);

    // trace_return[0]($t1) at ./sources/devnet_nft.move:83:9+9
    assume {:print "$track_return(23,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/devnet_nft.move:84:5+1
    assume {:print "$at(39,2561,2562)"} true;
L1:

    // return $t1 at ./sources/devnet_nft.move:84:5+1
    $ret0 := $t1;
    return;

}

// fun devnet_nft::update_description [verification] at ./sources/devnet_nft.move:67:5+205
procedure {:timeLimit 40} $2_devnet_nft_update_description$verify(_$t0: $Mutation ($2_devnet_nft_DevNetNFT), _$t1: Vec (int), _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_devnet_nft_DevNetNFT), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_utf8_String;
    var $t4: int;
    var $t5: $Mutation ($2_utf8_String);
    var $t0: $Mutation ($2_devnet_nft_DevNetNFT);
    var $t1: Vec (int);
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_devnet_nft_DevNetNFT': $2_devnet_nft_DevNetNFT;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t5));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select devnet_nft::DevNetNFT.url($t0))), i))) at ./sources/devnet_nft.move:67:5+1
    assume {:print "$at(39,2050,2051)"} true;
    assume ($IsValid'$2_devnet_nft_DevNetNFT'($Dereference($t0)) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($Dereference($t0)))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($url#$2_devnet_nft_DevNetNFT($Dereference($t0)))), i)))))));

    // assume WellFormed($t1) at ./sources/devnet_nft.move:67:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at ./sources/devnet_nft.move:67:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:67:5+1
    $temp_0'$2_devnet_nft_DevNetNFT' := $Dereference($t0);
    assume {:print "$track_local(23,5,0):", $temp_0'$2_devnet_nft_DevNetNFT'} $temp_0'$2_devnet_nft_DevNetNFT' == $temp_0'$2_devnet_nft_DevNetNFT';

    // trace_local[new_description]($t1) at ./sources/devnet_nft.move:67:5+1
    assume {:print "$track_local(23,5,1):", $t1} $t1 == $t1;

    // trace_local[_]($t2) at ./sources/devnet_nft.move:67:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(23,5,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := utf8::string_unsafe($t1) on_abort goto L2 with $t4 at ./sources/devnet_nft.move:72:27+36
    assume {:print "$at(39,2213,2249)"} true;
    call $t3 := $2_utf8_string_unsafe($t1);
    if ($abort_flag) {
        assume {:print "$at(39,2213,2249)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(23,5):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_field<devnet_nft::DevNetNFT>.description($t0) at ./sources/devnet_nft.move:72:9+15
    $t5 := $ChildMutation($t0, 2, $description#$2_devnet_nft_DevNetNFT($Dereference($t0)));

    // write_ref($t5, $t3) at ./sources/devnet_nft.move:72:9+54
    $t5 := $UpdateMutation($t5, $t3);

    // write_back[Reference($t0).description (utf8::String)]($t5) at ./sources/devnet_nft.move:72:9+54
    $t0 := $UpdateMutation($t0, $Update'$2_devnet_nft_DevNetNFT'_description($Dereference($t0), $Dereference($t5)));

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:72:9+54
    $temp_0'$2_devnet_nft_DevNetNFT' := $Dereference($t0);
    assume {:print "$track_local(23,5,0):", $temp_0'$2_devnet_nft_DevNetNFT'} $temp_0'$2_devnet_nft_DevNetNFT' == $temp_0'$2_devnet_nft_DevNetNFT';

    // trace_local[nft]($t0) at ./sources/devnet_nft.move:72:9+54
    $temp_0'$2_devnet_nft_DevNetNFT' := $Dereference($t0);
    assume {:print "$track_local(23,5,0):", $temp_0'$2_devnet_nft_DevNetNFT'} $temp_0'$2_devnet_nft_DevNetNFT' == $temp_0'$2_devnet_nft_DevNetNFT';

    // trace_local[_]($t2) at ./sources/devnet_nft.move:72:9+54
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(23,5,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/devnet_nft.move:73:5+1
    assume {:print "$at(39,2254,2255)"} true;
L1:

    // return () at ./sources/devnet_nft.move:73:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/devnet_nft.move:73:5+1
L2:

    // abort($t4) at ./sources/devnet_nft.move:73:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct epoch_reward_record::EpochRewardRecord at ./sources/governance/epoch_reward_record.move:18:5+194
type {:datatype} $2_epoch_reward_record_EpochRewardRecord;
function {:constructor} $2_epoch_reward_record_EpochRewardRecord($id: $2_object_UID, $epoch: int, $computation_charge: int, $total_stake: int, $delegator_count: int, $validator: int): $2_epoch_reward_record_EpochRewardRecord;
function {:inline} $Update'$2_epoch_reward_record_EpochRewardRecord'_id(s: $2_epoch_reward_record_EpochRewardRecord, x: $2_object_UID): $2_epoch_reward_record_EpochRewardRecord {
    $2_epoch_reward_record_EpochRewardRecord(x, $epoch#$2_epoch_reward_record_EpochRewardRecord(s), $computation_charge#$2_epoch_reward_record_EpochRewardRecord(s), $total_stake#$2_epoch_reward_record_EpochRewardRecord(s), $delegator_count#$2_epoch_reward_record_EpochRewardRecord(s), $validator#$2_epoch_reward_record_EpochRewardRecord(s))
}
function {:inline} $Update'$2_epoch_reward_record_EpochRewardRecord'_epoch(s: $2_epoch_reward_record_EpochRewardRecord, x: int): $2_epoch_reward_record_EpochRewardRecord {
    $2_epoch_reward_record_EpochRewardRecord($id#$2_epoch_reward_record_EpochRewardRecord(s), x, $computation_charge#$2_epoch_reward_record_EpochRewardRecord(s), $total_stake#$2_epoch_reward_record_EpochRewardRecord(s), $delegator_count#$2_epoch_reward_record_EpochRewardRecord(s), $validator#$2_epoch_reward_record_EpochRewardRecord(s))
}
function {:inline} $Update'$2_epoch_reward_record_EpochRewardRecord'_computation_charge(s: $2_epoch_reward_record_EpochRewardRecord, x: int): $2_epoch_reward_record_EpochRewardRecord {
    $2_epoch_reward_record_EpochRewardRecord($id#$2_epoch_reward_record_EpochRewardRecord(s), $epoch#$2_epoch_reward_record_EpochRewardRecord(s), x, $total_stake#$2_epoch_reward_record_EpochRewardRecord(s), $delegator_count#$2_epoch_reward_record_EpochRewardRecord(s), $validator#$2_epoch_reward_record_EpochRewardRecord(s))
}
function {:inline} $Update'$2_epoch_reward_record_EpochRewardRecord'_total_stake(s: $2_epoch_reward_record_EpochRewardRecord, x: int): $2_epoch_reward_record_EpochRewardRecord {
    $2_epoch_reward_record_EpochRewardRecord($id#$2_epoch_reward_record_EpochRewardRecord(s), $epoch#$2_epoch_reward_record_EpochRewardRecord(s), $computation_charge#$2_epoch_reward_record_EpochRewardRecord(s), x, $delegator_count#$2_epoch_reward_record_EpochRewardRecord(s), $validator#$2_epoch_reward_record_EpochRewardRecord(s))
}
function {:inline} $Update'$2_epoch_reward_record_EpochRewardRecord'_delegator_count(s: $2_epoch_reward_record_EpochRewardRecord, x: int): $2_epoch_reward_record_EpochRewardRecord {
    $2_epoch_reward_record_EpochRewardRecord($id#$2_epoch_reward_record_EpochRewardRecord(s), $epoch#$2_epoch_reward_record_EpochRewardRecord(s), $computation_charge#$2_epoch_reward_record_EpochRewardRecord(s), $total_stake#$2_epoch_reward_record_EpochRewardRecord(s), x, $validator#$2_epoch_reward_record_EpochRewardRecord(s))
}
function {:inline} $Update'$2_epoch_reward_record_EpochRewardRecord'_validator(s: $2_epoch_reward_record_EpochRewardRecord, x: int): $2_epoch_reward_record_EpochRewardRecord {
    $2_epoch_reward_record_EpochRewardRecord($id#$2_epoch_reward_record_EpochRewardRecord(s), $epoch#$2_epoch_reward_record_EpochRewardRecord(s), $computation_charge#$2_epoch_reward_record_EpochRewardRecord(s), $total_stake#$2_epoch_reward_record_EpochRewardRecord(s), $delegator_count#$2_epoch_reward_record_EpochRewardRecord(s), x)
}
function $IsValid'$2_epoch_reward_record_EpochRewardRecord'(s: $2_epoch_reward_record_EpochRewardRecord): bool {
    $IsValid'$2_object_UID'($id#$2_epoch_reward_record_EpochRewardRecord(s))
      && $IsValid'u64'($epoch#$2_epoch_reward_record_EpochRewardRecord(s))
      && $IsValid'u64'($computation_charge#$2_epoch_reward_record_EpochRewardRecord(s))
      && $IsValid'u64'($total_stake#$2_epoch_reward_record_EpochRewardRecord(s))
      && $IsValid'u64'($delegator_count#$2_epoch_reward_record_EpochRewardRecord(s))
      && $IsValid'address'($validator#$2_epoch_reward_record_EpochRewardRecord(s))
}
function {:inline} $IsEqual'$2_epoch_reward_record_EpochRewardRecord'(s1: $2_epoch_reward_record_EpochRewardRecord, s2: $2_epoch_reward_record_EpochRewardRecord): bool {
    s1 == s2
}
var $2_epoch_reward_record_EpochRewardRecord_$memory: $Memory $2_epoch_reward_record_EpochRewardRecord;

// fun epoch_reward_record::epoch [baseline] at ./sources/governance/epoch_reward_record.move:52:5+74
procedure {:inline 1} $2_epoch_reward_record_epoch(_$t0: $2_epoch_reward_record_EpochRewardRecord) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:52:5+1
    assume {:print "$at(9,1795,1796)"} true;
    assume {:print "$track_local(24,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<epoch_reward_record::EpochRewardRecord>.epoch($t0) at ./sources/governance/epoch_reward_record.move:53:9+10
    assume {:print "$at(9,1853,1863)"} true;
    $t1 := $epoch#$2_epoch_reward_record_EpochRewardRecord($t0);

    // trace_return[0]($t1) at ./sources/governance/epoch_reward_record.move:53:9+10
    assume {:print "$track_return(24,2,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/epoch_reward_record.move:54:5+1
    assume {:print "$at(9,1868,1869)"} true;
L1:

    // return $t1 at ./sources/governance/epoch_reward_record.move:54:5+1
    $ret0 := $t1;
    return;

}

// fun epoch_reward_record::epoch [verification] at ./sources/governance/epoch_reward_record.move:52:5+74
procedure {:timeLimit 40} $2_epoch_reward_record_epoch$verify(_$t0: $2_epoch_reward_record_EpochRewardRecord) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/epoch_reward_record.move:52:5+1
    assume {:print "$at(9,1795,1796)"} true;
    assume $IsValid'$2_epoch_reward_record_EpochRewardRecord'($t0);

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:52:5+1
    assume {:print "$track_local(24,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<epoch_reward_record::EpochRewardRecord>.epoch($t0) at ./sources/governance/epoch_reward_record.move:53:9+10
    assume {:print "$at(9,1853,1863)"} true;
    $t1 := $epoch#$2_epoch_reward_record_EpochRewardRecord($t0);

    // trace_return[0]($t1) at ./sources/governance/epoch_reward_record.move:53:9+10
    assume {:print "$track_return(24,2,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/epoch_reward_record.move:54:5+1
    assume {:print "$at(9,1868,1869)"} true;
L1:

    // return $t1 at ./sources/governance/epoch_reward_record.move:54:5+1
    $ret0 := $t1;
    return;

}

// fun epoch_reward_record::create [baseline] at ./sources/governance/epoch_reward_record.move:27:5+430
procedure {:inline 1} $2_epoch_reward_record_create(_$t0: int, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t6: $2_object_UID;
    var $t7: int;
    var $t8: $2_epoch_reward_record_EpochRewardRecord;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // trace_local[epoch]($t0) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$at(9,936,937)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // trace_local[computation_charge]($t1) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,1):", $t1} $t1 == $t1;

    // trace_local[total_stake]($t2) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,2):", $t2} $t2 == $t2;

    // trace_local[delegator_count]($t3) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,3):", $t3} $t3 == $t3;

    // trace_local[validator]($t4) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,4):", $t4} $t4 == $t4;

    // trace_local[ctx]($t5) at ./sources/governance/epoch_reward_record.move:27:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t5);
    assume {:print "$track_local(24,1,5):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := object::new($t5) on_abort goto L2 with $t7 at ./sources/governance/epoch_reward_record.move:36:17+16
    assume {:print "$at(9,1204,1220)"} true;
    call $t6,$t5 := $2_object_new($t5);
    if ($abort_flag) {
        assume {:print "$at(9,1204,1220)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,1):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := pack epoch_reward_record::EpochRewardRecord($t6, $t0, $t1, $t2, $t3, $t4) at ./sources/governance/epoch_reward_record.move:35:32+191
    assume {:print "$at(9,1168,1359)"} true;
    $t8 := $2_epoch_reward_record_EpochRewardRecord($t6, $t0, $t1, $t2, $t3, $t4);

    // transfer::share_object<epoch_reward_record::EpochRewardRecord>($t8) on_abort goto L2 with $t7 at ./sources/governance/epoch_reward_record.move:35:9+215
    call $2_transfer_share_object'$2_epoch_reward_record_EpochRewardRecord'($t8);
    if ($abort_flag) {
        assume {:print "$at(9,1145,1360)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,1):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[ctx]($t5) at ./sources/governance/epoch_reward_record.move:35:9+215
    $temp_0'$2_tx_context_TxContext' := $Dereference($t5);
    assume {:print "$track_local(24,1,5):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/epoch_reward_record.move:43:5+1
    assume {:print "$at(9,1365,1366)"} true;
L1:

    // return () at ./sources/governance/epoch_reward_record.move:43:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/governance/epoch_reward_record.move:43:5+1
L2:

    // abort($t7) at ./sources/governance/epoch_reward_record.move:43:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun epoch_reward_record::create [verification] at ./sources/governance/epoch_reward_record.move:27:5+430
procedure {:timeLimit 40} $2_epoch_reward_record_create$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t6: $2_object_UID;
    var $t7: int;
    var $t8: $2_epoch_reward_record_EpochRewardRecord;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t5) == $Param(5);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$at(9,936,937)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume $IsValid'address'($t4);

    // assume WellFormed($t5) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t5));

    // trace_local[epoch]($t0) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // trace_local[computation_charge]($t1) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,1):", $t1} $t1 == $t1;

    // trace_local[total_stake]($t2) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,2):", $t2} $t2 == $t2;

    // trace_local[delegator_count]($t3) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,3):", $t3} $t3 == $t3;

    // trace_local[validator]($t4) at ./sources/governance/epoch_reward_record.move:27:5+1
    assume {:print "$track_local(24,1,4):", $t4} $t4 == $t4;

    // trace_local[ctx]($t5) at ./sources/governance/epoch_reward_record.move:27:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t5);
    assume {:print "$track_local(24,1,5):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := object::new($t5) on_abort goto L2 with $t7 at ./sources/governance/epoch_reward_record.move:36:17+16
    assume {:print "$at(9,1204,1220)"} true;
    call $t6,$t5 := $2_object_new($t5);
    if ($abort_flag) {
        assume {:print "$at(9,1204,1220)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,1):", $t7} $t7 == $t7;
        goto L2;
    }

    // $t8 := pack epoch_reward_record::EpochRewardRecord($t6, $t0, $t1, $t2, $t3, $t4) at ./sources/governance/epoch_reward_record.move:35:32+191
    assume {:print "$at(9,1168,1359)"} true;
    $t8 := $2_epoch_reward_record_EpochRewardRecord($t6, $t0, $t1, $t2, $t3, $t4);

    // transfer::share_object<epoch_reward_record::EpochRewardRecord>($t8) on_abort goto L2 with $t7 at ./sources/governance/epoch_reward_record.move:35:9+215
    call $2_transfer_share_object'$2_epoch_reward_record_EpochRewardRecord'($t8);
    if ($abort_flag) {
        assume {:print "$at(9,1145,1360)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,1):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[ctx]($t5) at ./sources/governance/epoch_reward_record.move:35:9+215
    $temp_0'$2_tx_context_TxContext' := $Dereference($t5);
    assume {:print "$track_local(24,1,5):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/epoch_reward_record.move:43:5+1
    assume {:print "$at(9,1365,1366)"} true;
L1:

    // return () at ./sources/governance/epoch_reward_record.move:43:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/governance/epoch_reward_record.move:43:5+1
L2:

    // abort($t7) at ./sources/governance/epoch_reward_record.move:43:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun epoch_reward_record::validator [baseline] at ./sources/governance/epoch_reward_record.move:56:5+86
procedure {:inline 1} $2_epoch_reward_record_validator(_$t0: $2_epoch_reward_record_EpochRewardRecord) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:56:5+1
    assume {:print "$at(9,1875,1876)"} true;
    assume {:print "$track_local(24,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<epoch_reward_record::EpochRewardRecord>.validator($t0) at ./sources/governance/epoch_reward_record.move:57:9+14
    assume {:print "$at(9,1941,1955)"} true;
    $t1 := $validator#$2_epoch_reward_record_EpochRewardRecord($t0);

    // trace_return[0]($t1) at ./sources/governance/epoch_reward_record.move:57:9+14
    assume {:print "$track_return(24,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/epoch_reward_record.move:58:5+1
    assume {:print "$at(9,1960,1961)"} true;
L1:

    // return $t1 at ./sources/governance/epoch_reward_record.move:58:5+1
    $ret0 := $t1;
    return;

}

// fun epoch_reward_record::validator [verification] at ./sources/governance/epoch_reward_record.move:56:5+86
procedure {:timeLimit 40} $2_epoch_reward_record_validator$verify(_$t0: $2_epoch_reward_record_EpochRewardRecord) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/epoch_reward_record.move:56:5+1
    assume {:print "$at(9,1875,1876)"} true;
    assume $IsValid'$2_epoch_reward_record_EpochRewardRecord'($t0);

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:56:5+1
    assume {:print "$track_local(24,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<epoch_reward_record::EpochRewardRecord>.validator($t0) at ./sources/governance/epoch_reward_record.move:57:9+14
    assume {:print "$at(9,1941,1955)"} true;
    $t1 := $validator#$2_epoch_reward_record_EpochRewardRecord($t0);

    // trace_return[0]($t1) at ./sources/governance/epoch_reward_record.move:57:9+14
    assume {:print "$track_return(24,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/epoch_reward_record.move:58:5+1
    assume {:print "$at(9,1960,1961)"} true;
L1:

    // return $t1 at ./sources/governance/epoch_reward_record.move:58:5+1
    $ret0 := $t1;
    return;

}

// fun epoch_reward_record::claim_reward [baseline] at ./sources/governance/epoch_reward_record.move:46:5+321
procedure {:inline 1} $2_epoch_reward_record_claim_reward(_$t0: $Mutation ($2_epoch_reward_record_EpochRewardRecord), _$t1: int) returns ($ret0: int, $ret1: $Mutation ($2_epoch_reward_record_EpochRewardRecord))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t0: $Mutation ($2_epoch_reward_record_EpochRewardRecord);
    var $t1: int;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t6));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:46:5+1
    assume {:print "$at(9,1468,1469)"} true;
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t0);
    assume {:print "$track_local(24,0,0):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // trace_local[delegation_amount]($t1) at ./sources/governance/epoch_reward_record.move:46:5+1
    assume {:print "$track_local(24,0,1):", $t1} $t1 == $t1;

    // $t2 := get_field<epoch_reward_record::EpochRewardRecord>.delegator_count($t0) at ./sources/governance/epoch_reward_record.move:47:32+20
    assume {:print "$at(9,1592,1612)"} true;
    $t2 := $delegator_count#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0));

    // $t3 := 1 at ./sources/governance/epoch_reward_record.move:47:55+1
    $t3 := 1;
    assume $IsValid'u64'($t3);

    // $t4 := -($t2, $t3) on_abort goto L2 with $t5 at ./sources/governance/epoch_reward_record.move:47:53+1
    call $t4 := $Sub($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(9,1613,1614)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := borrow_field<epoch_reward_record::EpochRewardRecord>.delegator_count($t0) at ./sources/governance/epoch_reward_record.move:47:9+20
    $t6 := $ChildMutation($t0, 4, $delegator_count#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0)));

    // write_ref($t6, $t4) at ./sources/governance/epoch_reward_record.move:47:9+47
    $t6 := $UpdateMutation($t6, $t4);

    // write_back[Reference($t0).delegator_count (u64)]($t6) at ./sources/governance/epoch_reward_record.move:47:9+47
    $t0 := $UpdateMutation($t0, $Update'$2_epoch_reward_record_EpochRewardRecord'_delegator_count($Dereference($t0), $Dereference($t6)));

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:47:9+47
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t0);
    assume {:print "$track_local(24,0,0):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // $t7 := get_field<epoch_reward_record::EpochRewardRecord>.computation_charge($t0) at ./sources/governance/epoch_reward_record.move:49:29+23
    assume {:print "$at(9,1741,1764)"} true;
    $t7 := $computation_charge#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0));

    // $t8 := *($t1, $t7) on_abort goto L2 with $t5 at ./sources/governance/epoch_reward_record.move:49:27+1
    call $t8 := $MulU64($t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(9,1739,1740)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := get_field<epoch_reward_record::EpochRewardRecord>.total_stake($t0) at ./sources/governance/epoch_reward_record.move:49:55+16
    $t9 := $total_stake#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0));

    // $t10 := /($t8, $t9) on_abort goto L2 with $t5 at ./sources/governance/epoch_reward_record.move:49:53+1
    call $t10 := $Div($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(9,1765,1766)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t10) at ./sources/governance/epoch_reward_record.move:49:9+62
    assume {:print "$track_return(24,0,0):", $t10} $t10 == $t10;

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:49:9+62
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t0);
    assume {:print "$track_local(24,0,0):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // label L1 at ./sources/governance/epoch_reward_record.move:50:5+1
    assume {:print "$at(9,1788,1789)"} true;
L1:

    // return $t10 at ./sources/governance/epoch_reward_record.move:50:5+1
    $ret0 := $t10;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/governance/epoch_reward_record.move:50:5+1
L2:

    // abort($t5) at ./sources/governance/epoch_reward_record.move:50:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun epoch_reward_record::claim_reward [verification] at ./sources/governance/epoch_reward_record.move:46:5+321
procedure {:timeLimit 40} $2_epoch_reward_record_claim_reward$verify(_$t0: $Mutation ($2_epoch_reward_record_EpochRewardRecord), _$t1: int) returns ($ret0: int, $ret1: $Mutation ($2_epoch_reward_record_EpochRewardRecord))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $Mutation (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t0: $Mutation ($2_epoch_reward_record_EpochRewardRecord);
    var $t1: int;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t6));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/epoch_reward_record.move:46:5+1
    assume {:print "$at(9,1468,1469)"} true;
    assume $IsValid'$2_epoch_reward_record_EpochRewardRecord'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/epoch_reward_record.move:46:5+1
    assume $IsValid'u64'($t1);

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:46:5+1
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t0);
    assume {:print "$track_local(24,0,0):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // trace_local[delegation_amount]($t1) at ./sources/governance/epoch_reward_record.move:46:5+1
    assume {:print "$track_local(24,0,1):", $t1} $t1 == $t1;

    // $t2 := get_field<epoch_reward_record::EpochRewardRecord>.delegator_count($t0) at ./sources/governance/epoch_reward_record.move:47:32+20
    assume {:print "$at(9,1592,1612)"} true;
    $t2 := $delegator_count#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0));

    // $t3 := 1 at ./sources/governance/epoch_reward_record.move:47:55+1
    $t3 := 1;
    assume $IsValid'u64'($t3);

    // $t4 := -($t2, $t3) on_abort goto L2 with $t5 at ./sources/governance/epoch_reward_record.move:47:53+1
    call $t4 := $Sub($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(9,1613,1614)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := borrow_field<epoch_reward_record::EpochRewardRecord>.delegator_count($t0) at ./sources/governance/epoch_reward_record.move:47:9+20
    $t6 := $ChildMutation($t0, 4, $delegator_count#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0)));

    // write_ref($t6, $t4) at ./sources/governance/epoch_reward_record.move:47:9+47
    $t6 := $UpdateMutation($t6, $t4);

    // write_back[Reference($t0).delegator_count (u64)]($t6) at ./sources/governance/epoch_reward_record.move:47:9+47
    $t0 := $UpdateMutation($t0, $Update'$2_epoch_reward_record_EpochRewardRecord'_delegator_count($Dereference($t0), $Dereference($t6)));

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:47:9+47
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t0);
    assume {:print "$track_local(24,0,0):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // $t7 := get_field<epoch_reward_record::EpochRewardRecord>.computation_charge($t0) at ./sources/governance/epoch_reward_record.move:49:29+23
    assume {:print "$at(9,1741,1764)"} true;
    $t7 := $computation_charge#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0));

    // $t8 := *($t1, $t7) on_abort goto L2 with $t5 at ./sources/governance/epoch_reward_record.move:49:27+1
    call $t8 := $MulU64($t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(9,1739,1740)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := get_field<epoch_reward_record::EpochRewardRecord>.total_stake($t0) at ./sources/governance/epoch_reward_record.move:49:55+16
    $t9 := $total_stake#$2_epoch_reward_record_EpochRewardRecord($Dereference($t0));

    // $t10 := /($t8, $t9) on_abort goto L2 with $t5 at ./sources/governance/epoch_reward_record.move:49:53+1
    call $t10 := $Div($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(9,1765,1766)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,0):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t10) at ./sources/governance/epoch_reward_record.move:49:9+62
    assume {:print "$track_return(24,0,0):", $t10} $t10 == $t10;

    // trace_local[self]($t0) at ./sources/governance/epoch_reward_record.move:49:9+62
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t0);
    assume {:print "$track_local(24,0,0):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // label L1 at ./sources/governance/epoch_reward_record.move:50:5+1
    assume {:print "$at(9,1788,1789)"} true;
L1:

    // return $t10 at ./sources/governance/epoch_reward_record.move:50:5+1
    $ret0 := $t10;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/governance/epoch_reward_record.move:50:5+1
L2:

    // abort($t5) at ./sources/governance/epoch_reward_record.move:50:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct erc721_metadata::ERC721Metadata at ./sources/erc721_metadata.move:11:5+561
type {:datatype} $2_erc721_metadata_ERC721Metadata;
function {:constructor} $2_erc721_metadata_ERC721Metadata($token_id: $2_erc721_metadata_TokenID, $name: $2_utf8_String, $token_uri: $2_url_Url): $2_erc721_metadata_ERC721Metadata;
function {:inline} $Update'$2_erc721_metadata_ERC721Metadata'_token_id(s: $2_erc721_metadata_ERC721Metadata, x: $2_erc721_metadata_TokenID): $2_erc721_metadata_ERC721Metadata {
    $2_erc721_metadata_ERC721Metadata(x, $name#$2_erc721_metadata_ERC721Metadata(s), $token_uri#$2_erc721_metadata_ERC721Metadata(s))
}
function {:inline} $Update'$2_erc721_metadata_ERC721Metadata'_name(s: $2_erc721_metadata_ERC721Metadata, x: $2_utf8_String): $2_erc721_metadata_ERC721Metadata {
    $2_erc721_metadata_ERC721Metadata($token_id#$2_erc721_metadata_ERC721Metadata(s), x, $token_uri#$2_erc721_metadata_ERC721Metadata(s))
}
function {:inline} $Update'$2_erc721_metadata_ERC721Metadata'_token_uri(s: $2_erc721_metadata_ERC721Metadata, x: $2_url_Url): $2_erc721_metadata_ERC721Metadata {
    $2_erc721_metadata_ERC721Metadata($token_id#$2_erc721_metadata_ERC721Metadata(s), $name#$2_erc721_metadata_ERC721Metadata(s), x)
}
function $IsValid'$2_erc721_metadata_ERC721Metadata'(s: $2_erc721_metadata_ERC721Metadata): bool {
    $IsValid'$2_erc721_metadata_TokenID'($token_id#$2_erc721_metadata_ERC721Metadata(s))
      && $IsValid'$2_utf8_String'($name#$2_erc721_metadata_ERC721Metadata(s))
      && $IsValid'$2_url_Url'($token_uri#$2_erc721_metadata_ERC721Metadata(s))
}
function {:inline} $IsEqual'$2_erc721_metadata_ERC721Metadata'(s1: $2_erc721_metadata_ERC721Metadata, s2: $2_erc721_metadata_ERC721Metadata): bool {
    $IsEqual'$2_erc721_metadata_TokenID'($token_id#$2_erc721_metadata_ERC721Metadata(s1), $token_id#$2_erc721_metadata_ERC721Metadata(s2))
    && $IsEqual'$2_utf8_String'($name#$2_erc721_metadata_ERC721Metadata(s1), $name#$2_erc721_metadata_ERC721Metadata(s2))
    && $IsEqual'$2_url_Url'($token_uri#$2_erc721_metadata_ERC721Metadata(s1), $token_uri#$2_erc721_metadata_ERC721Metadata(s2))}

// struct erc721_metadata::TokenID at ./sources/erc721_metadata.move:27:5+55
type {:datatype} $2_erc721_metadata_TokenID;
function {:constructor} $2_erc721_metadata_TokenID($id: int): $2_erc721_metadata_TokenID;
function {:inline} $Update'$2_erc721_metadata_TokenID'_id(s: $2_erc721_metadata_TokenID, x: int): $2_erc721_metadata_TokenID {
    $2_erc721_metadata_TokenID(x)
}
function $IsValid'$2_erc721_metadata_TokenID'(s: $2_erc721_metadata_TokenID): bool {
    $IsValid'u64'($id#$2_erc721_metadata_TokenID(s))
}
function {:inline} $IsEqual'$2_erc721_metadata_TokenID'(s1: $2_erc721_metadata_TokenID, s2: $2_erc721_metadata_TokenID): bool {
    s1 == s2
}

// fun erc721_metadata::new [verification] at ./sources/erc721_metadata.move:33:5+364
procedure {:timeLimit 40} $2_erc721_metadata_new$verify(_$t0: $2_erc721_metadata_TokenID, _$t1: Vec (int), _$t2: Vec (int)) returns ($ret0: $2_erc721_metadata_ERC721Metadata)
{
    // declare local variables
    var $t3: $1_ascii_String;
    var $t4: $1_ascii_String;
    var $t5: int;
    var $t6: $2_utf8_String;
    var $t7: $2_url_Url;
    var $t8: $2_erc721_metadata_ERC721Metadata;
    var $t0: $2_erc721_metadata_TokenID;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$1_ascii_String': $1_ascii_String;
    var $temp_0'$2_erc721_metadata_ERC721Metadata': $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_erc721_metadata_TokenID': $2_erc721_metadata_TokenID;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/erc721_metadata.move:33:5+1
    assume {:print "$at(24,1212,1213)"} true;
    assume $IsValid'$2_erc721_metadata_TokenID'($t0);

    // assume WellFormed($t1) at ./sources/erc721_metadata.move:33:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at ./sources/erc721_metadata.move:33:5+1
    assume $IsValid'vec'u8''($t2);

    // trace_local[token_id]($t0) at ./sources/erc721_metadata.move:33:5+1
    assume {:print "$track_local(25,1,0):", $t0} $t0 == $t0;

    // trace_local[name]($t1) at ./sources/erc721_metadata.move:33:5+1
    assume {:print "$track_local(25,1,1):", $t1} $t1 == $t1;

    // trace_local[token_uri]($t2) at ./sources/erc721_metadata.move:33:5+1
    assume {:print "$track_local(25,1,2):", $t2} $t2 == $t2;

    // $t4 := ascii::string($t2) on_abort goto L2 with $t5 at ./sources/erc721_metadata.move:35:23+24
    assume {:print "$at(24,1394,1418)"} true;
    call $t4 := $1_ascii_string($t2);
    if ($abort_flag) {
        assume {:print "$at(24,1394,1418)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,1):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[uri_str]($t4) at ./sources/erc721_metadata.move:35:13+7
    assume {:print "$track_local(25,1,3):", $t4} $t4 == $t4;

    // $t6 := utf8::string_unsafe($t1) on_abort goto L2 with $t5 at ./sources/erc721_metadata.move:38:19+25
    assume {:print "$at(24,1485,1510)"} true;
    call $t6 := $2_utf8_string_unsafe($t1);
    if ($abort_flag) {
        assume {:print "$at(24,1485,1510)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,1):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t7 := url::new_unsafe($t4) on_abort goto L2 with $t5 at ./sources/erc721_metadata.move:39:24+24
    assume {:print "$at(24,1535,1559)"} true;
    call $t7 := $2_url_new_unsafe($t4);
    if ($abort_flag) {
        assume {:print "$at(24,1535,1559)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,1):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t8 := pack erc721_metadata::ERC721Metadata($t0, $t6, $t7) at ./sources/erc721_metadata.move:36:9+142
    assume {:print "$at(24,1428,1570)"} true;
    $t8 := $2_erc721_metadata_ERC721Metadata($t0, $t6, $t7);

    // trace_return[0]($t8) at ./sources/erc721_metadata.move:36:9+142
    assume {:print "$track_return(25,1,0):", $t8} $t8 == $t8;

    // label L1 at ./sources/erc721_metadata.move:41:5+1
    assume {:print "$at(24,1575,1576)"} true;
L1:

    // return $t8 at ./sources/erc721_metadata.move:41:5+1
    $ret0 := $t8;
    return;

    // label L2 at ./sources/erc721_metadata.move:41:5+1
L2:

    // abort($t5) at ./sources/erc721_metadata.move:41:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun erc721_metadata::name [verification] at ./sources/erc721_metadata.move:55:5+80
procedure {:timeLimit 40} $2_erc721_metadata_name$verify(_$t0: $2_erc721_metadata_ERC721Metadata) returns ($ret0: $2_utf8_String)
{
    // declare local variables
    var $t1: $2_utf8_String;
    var $t0: $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_erc721_metadata_ERC721Metadata': $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_utf8_String': $2_utf8_String;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select erc721_metadata::ERC721Metadata.token_uri($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select erc721_metadata::ERC721Metadata.token_uri($t0))), i))) at ./sources/erc721_metadata.move:55:5+1
    assume {:print "$at(24,1836,1837)"} true;
    assume ($IsValid'$2_erc721_metadata_ERC721Metadata'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($token_uri#$2_erc721_metadata_ERC721Metadata($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($token_uri#$2_erc721_metadata_ERC721Metadata($t0))), i)))))));

    // trace_local[self]($t0) at ./sources/erc721_metadata.move:55:5+1
    assume {:print "$track_local(25,0,0):", $t0} $t0 == $t0;

    // $t1 := get_field<erc721_metadata::ERC721Metadata>.name($t0) at ./sources/erc721_metadata.move:56:9+10
    assume {:print "$at(24,1900,1910)"} true;
    $t1 := $name#$2_erc721_metadata_ERC721Metadata($t0);

    // trace_return[0]($t1) at ./sources/erc721_metadata.move:56:9+10
    assume {:print "$track_return(25,0,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/erc721_metadata.move:57:5+1
    assume {:print "$at(24,1915,1916)"} true;
L1:

    // return $t1 at ./sources/erc721_metadata.move:57:5+1
    $ret0 := $t1;
    return;

}

// fun erc721_metadata::token_id [verification] at ./sources/erc721_metadata.move:47:5+83
procedure {:timeLimit 40} $2_erc721_metadata_token_id$verify(_$t0: $2_erc721_metadata_ERC721Metadata) returns ($ret0: $2_erc721_metadata_TokenID)
{
    // declare local variables
    var $t1: $2_erc721_metadata_TokenID;
    var $t0: $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_erc721_metadata_ERC721Metadata': $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_erc721_metadata_TokenID': $2_erc721_metadata_TokenID;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select erc721_metadata::ERC721Metadata.token_uri($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select erc721_metadata::ERC721Metadata.token_uri($t0))), i))) at ./sources/erc721_metadata.move:47:5+1
    assume {:print "$at(24,1660,1661)"} true;
    assume ($IsValid'$2_erc721_metadata_ERC721Metadata'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($token_uri#$2_erc721_metadata_ERC721Metadata($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($token_uri#$2_erc721_metadata_ERC721Metadata($t0))), i)))))));

    // trace_local[self]($t0) at ./sources/erc721_metadata.move:47:5+1
    assume {:print "$track_local(25,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<erc721_metadata::ERC721Metadata>.token_id($t0) at ./sources/erc721_metadata.move:48:9+14
    assume {:print "$at(24,1723,1737)"} true;
    $t1 := $token_id#$2_erc721_metadata_ERC721Metadata($t0);

    // trace_return[0]($t1) at ./sources/erc721_metadata.move:48:9+14
    assume {:print "$track_return(25,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/erc721_metadata.move:49:5+1
    assume {:print "$at(24,1742,1743)"} true;
L1:

    // return $t1 at ./sources/erc721_metadata.move:49:5+1
    $ret0 := $t1;
    return;

}

// fun erc721_metadata::token_uri [verification] at ./sources/erc721_metadata.move:51:5+81
procedure {:timeLimit 40} $2_erc721_metadata_token_uri$verify(_$t0: $2_erc721_metadata_ERC721Metadata) returns ($ret0: $2_url_Url)
{
    // declare local variables
    var $t1: $2_url_Url;
    var $t0: $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_erc721_metadata_ERC721Metadata': $2_erc721_metadata_ERC721Metadata;
    var $temp_0'$2_url_Url': $2_url_Url;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall i: Range(0, Len<u8>(select ascii::String.bytes(select url::Url.url(select erc721_metadata::ERC721Metadata.token_uri($t0))))): ascii::$is_valid_char(Index(select ascii::String.bytes(select url::Url.url(select erc721_metadata::ERC721Metadata.token_uri($t0))), i))) at ./sources/erc721_metadata.move:51:5+1
    assume {:print "$at(24,1749,1750)"} true;
    assume ($IsValid'$2_erc721_metadata_ERC721Metadata'($t0) && (var $range_0 := $Range(0, LenVec($bytes#$1_ascii_String($url#$2_url_Url($token_uri#$2_erc721_metadata_ERC721Metadata($t0))))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    ($1_ascii_$is_valid_char(ReadVec($bytes#$1_ascii_String($url#$2_url_Url($token_uri#$2_erc721_metadata_ERC721Metadata($t0))), i)))))));

    // trace_local[self]($t0) at ./sources/erc721_metadata.move:51:5+1
    assume {:print "$track_local(25,4,0):", $t0} $t0 == $t0;

    // $t1 := get_field<erc721_metadata::ERC721Metadata>.token_uri($t0) at ./sources/erc721_metadata.move:52:9+15
    assume {:print "$at(24,1809,1824)"} true;
    $t1 := $token_uri#$2_erc721_metadata_ERC721Metadata($t0);

    // trace_return[0]($t1) at ./sources/erc721_metadata.move:52:9+15
    assume {:print "$track_return(25,4,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/erc721_metadata.move:53:5+1
    assume {:print "$at(24,1829,1830)"} true;
L1:

    // return $t1 at ./sources/erc721_metadata.move:53:5+1
    $ret0 := $t1;
    return;

}

// fun erc721_metadata::new_token_id [verification] at ./sources/erc721_metadata.move:43:5+72
procedure {:timeLimit 40} $2_erc721_metadata_new_token_id$verify(_$t0: int) returns ($ret0: $2_erc721_metadata_TokenID)
{
    // declare local variables
    var $t1: $2_erc721_metadata_TokenID;
    var $t0: int;
    var $temp_0'$2_erc721_metadata_TokenID': $2_erc721_metadata_TokenID;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/erc721_metadata.move:43:5+1
    assume {:print "$at(24,1582,1583)"} true;
    assume $IsValid'u64'($t0);

    // trace_local[id]($t0) at ./sources/erc721_metadata.move:43:5+1
    assume {:print "$track_local(25,2,0):", $t0} $t0 == $t0;

    // $t1 := pack erc721_metadata::TokenID($t0) at ./sources/erc721_metadata.move:44:9+14
    assume {:print "$at(24,1634,1648)"} true;
    $t1 := $2_erc721_metadata_TokenID($t0);

    // trace_return[0]($t1) at ./sources/erc721_metadata.move:44:9+14
    assume {:print "$track_return(25,2,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/erc721_metadata.move:45:5+1
    assume {:print "$at(24,1653,1654)"} true;
L1:

    // return $t1 at ./sources/erc721_metadata.move:45:5+1
    $ret0 := $t1;
    return;

}

// fun math::max [baseline] at ./sources/math.move:8:5+119
procedure {:inline 1} $2_math_max(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[x]($t0) at ./sources/math.move:8:5+1
    assume {:print "$at(26,187,188)"} true;
    assume {:print "$track_local(26,0,0):", $t0} $t0 == $t0;

    // trace_local[y]($t1) at ./sources/math.move:8:5+1
    assume {:print "$track_local(26,0,1):", $t1} $t1 == $t1;

    // $t3 := >($t0, $t1) at ./sources/math.move:9:15+1
    assume {:print "$at(26,239,240)"} true;
    call $t3 := $Gt($t0, $t1);

    // if ($t3) goto L0 else goto L2 at ./sources/math.move:9:9+67
    if ($t3) { goto L0; } else { goto L2; }

    // label L0 at ./sources/math.move:10:13+1
    assume {:print "$at(26,258,259)"} true;
L0:

    // $t2 := $t0 at ./sources/math.move:9:9+67
    assume {:print "$at(26,233,300)"} true;
    $t2 := $t0;

    // goto L3 at ./sources/math.move:9:9+67
    goto L3;

    // label L2 at ./sources/math.move:12:13+1
    assume {:print "$at(26,289,290)"} true;
L2:

    // $t2 := $t1 at ./sources/math.move:9:9+67
    assume {:print "$at(26,233,300)"} true;
    $t2 := $t1;

    // label L3 at ./sources/math.move:9:9+67
L3:

    // trace_return[0]($t2) at ./sources/math.move:9:9+67
    assume {:print "$track_return(26,0,0):", $t2} $t2 == $t2;

    // label L4 at ./sources/math.move:14:5+1
    assume {:print "$at(26,305,306)"} true;
L4:

    // return $t2 at ./sources/math.move:14:5+1
    $ret0 := $t2;
    return;

}

// fun math::max [verification] at ./sources/math.move:8:5+119
procedure {:timeLimit 40} $2_math_max$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/math.move:8:5+1
    assume {:print "$at(26,187,188)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/math.move:8:5+1
    assume $IsValid'u64'($t1);

    // trace_local[x]($t0) at ./sources/math.move:8:5+1
    assume {:print "$track_local(26,0,0):", $t0} $t0 == $t0;

    // trace_local[y]($t1) at ./sources/math.move:8:5+1
    assume {:print "$track_local(26,0,1):", $t1} $t1 == $t1;

    // $t3 := >($t0, $t1) at ./sources/math.move:9:15+1
    assume {:print "$at(26,239,240)"} true;
    call $t3 := $Gt($t0, $t1);

    // if ($t3) goto L0 else goto L2 at ./sources/math.move:9:9+67
    if ($t3) { goto L0; } else { goto L2; }

    // label L0 at ./sources/math.move:10:13+1
    assume {:print "$at(26,258,259)"} true;
L0:

    // $t2 := $t0 at ./sources/math.move:9:9+67
    assume {:print "$at(26,233,300)"} true;
    $t2 := $t0;

    // goto L3 at ./sources/math.move:9:9+67
    goto L3;

    // label L2 at ./sources/math.move:12:13+1
    assume {:print "$at(26,289,290)"} true;
L2:

    // $t2 := $t1 at ./sources/math.move:9:9+67
    assume {:print "$at(26,233,300)"} true;
    $t2 := $t1;

    // label L3 at ./sources/math.move:9:9+67
L3:

    // trace_return[0]($t2) at ./sources/math.move:9:9+67
    assume {:print "$track_return(26,0,0):", $t2} $t2 == $t2;

    // label L4 at ./sources/math.move:14:5+1
    assume {:print "$at(26,305,306)"} true;
L4:

    // return $t2 at ./sources/math.move:14:5+1
    $ret0 := $t2;
    return;

}

// fun math::min [verification] at ./sources/math.move:17:5+119
procedure {:timeLimit 40} $2_math_min$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/math.move:17:5+1
    assume {:print "$at(26,354,355)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/math.move:17:5+1
    assume $IsValid'u64'($t1);

    // trace_local[x]($t0) at ./sources/math.move:17:5+1
    assume {:print "$track_local(26,1,0):", $t0} $t0 == $t0;

    // trace_local[y]($t1) at ./sources/math.move:17:5+1
    assume {:print "$track_local(26,1,1):", $t1} $t1 == $t1;

    // $t3 := <($t0, $t1) at ./sources/math.move:18:15+1
    assume {:print "$at(26,406,407)"} true;
    call $t3 := $Lt($t0, $t1);

    // if ($t3) goto L0 else goto L2 at ./sources/math.move:18:9+67
    if ($t3) { goto L0; } else { goto L2; }

    // label L0 at ./sources/math.move:19:13+1
    assume {:print "$at(26,425,426)"} true;
L0:

    // $t2 := $t0 at ./sources/math.move:18:9+67
    assume {:print "$at(26,400,467)"} true;
    $t2 := $t0;

    // goto L3 at ./sources/math.move:18:9+67
    goto L3;

    // label L2 at ./sources/math.move:21:13+1
    assume {:print "$at(26,456,457)"} true;
L2:

    // $t2 := $t1 at ./sources/math.move:18:9+67
    assume {:print "$at(26,400,467)"} true;
    $t2 := $t1;

    // label L3 at ./sources/math.move:18:9+67
L3:

    // trace_return[0]($t2) at ./sources/math.move:18:9+67
    assume {:print "$track_return(26,1,0):", $t2} $t2 == $t2;

    // label L4 at ./sources/math.move:23:5+1
    assume {:print "$at(26,472,473)"} true;
L4:

    // return $t2 at ./sources/math.move:23:5+1
    $ret0 := $t2;
    return;

}

// fun math::sqrt [verification] at ./sources/math.move:50:5+389
procedure {:timeLimit 40} $2_math_sqrt$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t0: int;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/math.move:50:5+1
    assume {:print "$at(26,1445,1446)"} true;
    assume $IsValid'u64'($t0);

    // trace_local[x]($t0) at ./sources/math.move:50:5+1
    assume {:print "$track_local(26,2,0):", $t0} $t0 == $t0;

    // $t4 := 18446744073709551616 at ./sources/math.move:51:19+11
    assume {:print "$at(26,1494,1505)"} true;
    $t4 := 18446744073709551616;
    assume $IsValid'u128'($t4);

    // trace_local[bit]($t4) at ./sources/math.move:51:13+3
    assume {:print "$track_local(26,2,1):", $t4} $t4 == $t4;

    // $t5 := 0 at ./sources/math.move:52:19+5
    assume {:print "$at(26,1525,1530)"} true;
    $t5 := 0;
    assume $IsValid'u128'($t5);

    // trace_local[res]($t5) at ./sources/math.move:52:13+3
    assume {:print "$track_local(26,2,2):", $t5} $t5 == $t5;

    // $t6 := (u128)($t0) on_abort goto L10 with $t7 at ./sources/math.move:53:17+11
    assume {:print "$at(26,1548,1559)"} true;
    call $t6 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(26,1548,1559)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,2):", $t7} $t7 == $t7;
        goto L10;
    }

    // trace_local[x#1]($t6) at ./sources/math.move:53:13+1
    assume {:print "$track_local(26,2,3):", $t6} $t6 == $t6;

    // label L7 at ./sources/math.move:55:16+3
    assume {:print "$at(26,1577,1580)"} true;
L7:

    // havoc[val]($t4) at ./sources/math.move:55:16+3
    havoc $t4;
    assume $IsValid'u128'($t4);

    // havoc[val]($t5) at ./sources/math.move:55:16+3
    havoc $t5;
    assume $IsValid'u128'($t5);

    // havoc[val]($t6) at ./sources/math.move:55:16+3
    havoc $t6;
    assume $IsValid'u128'($t6);

    // havoc[val]($t8) at ./sources/math.move:55:16+3
    havoc $t8;
    assume $IsValid'u128'($t8);

    // havoc[val]($t9) at ./sources/math.move:55:16+3
    havoc $t9;
    assume $IsValid'bool'($t9);

    // havoc[val]($t10) at ./sources/math.move:55:16+3
    havoc $t10;
    assume $IsValid'u128'($t10);

    // havoc[val]($t11) at ./sources/math.move:55:16+3
    havoc $t11;
    assume $IsValid'bool'($t11);

    // havoc[val]($t12) at ./sources/math.move:55:16+3
    havoc $t12;
    assume $IsValid'u128'($t12);

    // havoc[val]($t13) at ./sources/math.move:55:16+3
    havoc $t13;
    assume $IsValid'u128'($t13);

    // havoc[val]($t14) at ./sources/math.move:55:16+3
    havoc $t14;
    assume $IsValid'u8'($t14);

    // havoc[val]($t15) at ./sources/math.move:55:16+3
    havoc $t15;
    assume $IsValid'u128'($t15);

    // havoc[val]($t16) at ./sources/math.move:55:16+3
    havoc $t16;
    assume $IsValid'u128'($t16);

    // havoc[val]($t17) at ./sources/math.move:55:16+3
    havoc $t17;
    assume $IsValid'u8'($t17);

    // havoc[val]($t18) at ./sources/math.move:55:16+3
    havoc $t18;
    assume $IsValid'u128'($t18);

    // havoc[val]($t19) at ./sources/math.move:55:16+3
    havoc $t19;
    assume $IsValid'u8'($t19);

    // havoc[val]($t20) at ./sources/math.move:55:16+3
    havoc $t20;
    assume $IsValid'u128'($t20);

    // trace_local[bit]($t4) at ./sources/math.move:55:16+3
    assume {:print "$info(): enter loop, variable(s) bit, res, x#1 havocked and reassigned"} true;
    assume {:print "$track_local(26,2,1):", $t4} $t4 == $t4;

    // trace_local[res]($t5) at ./sources/math.move:55:16+3
    assume {:print "$track_local(26,2,2):", $t5} $t5 == $t5;

    // trace_local[x#1]($t6) at ./sources/math.move:55:16+3
    assume {:print "$track_local(26,2,3):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at ./sources/math.move:55:16+3
    assume !$abort_flag;

    // $t8 := 0 at ./sources/math.move:55:23+1
    $t8 := 0;
    assume $IsValid'u128'($t8);

    // $t9 := !=($t4, $t8) at ./sources/math.move:55:20+2
    $t9 := !$IsEqual'u128'($t4, $t8);

    // if ($t9) goto L0 else goto L2 at ./sources/math.move:55:9+235
    if ($t9) { goto L0; } else { goto L2; }

    // label L0 at ./sources/math.move:56:17+1
    assume {:print "$at(26,1605,1606)"} true;
L0:

    // $t10 := +($t5, $t4) on_abort goto L10 with $t7 at ./sources/math.move:56:26+1
    call $t10 := $AddU128($t5, $t4);
    if ($abort_flag) {
        assume {:print "$at(26,1614,1615)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,2):", $t7} $t7 == $t7;
        goto L10;
    }

    // $t11 := >=($t6, $t10) at ./sources/math.move:56:19+2
    call $t11 := $Ge($t6, $t10);

    // if ($t11) goto L3 else goto L5 at ./sources/math.move:56:13+165
    if ($t11) { goto L3; } else { goto L5; }

    // label L3 at ./sources/math.move:57:21+1
    assume {:print "$at(26,1643,1644)"} true;
L3:

    // $t12 := +($t5, $t4) on_abort goto L10 with $t7 at ./sources/math.move:57:30+1
    call $t12 := $AddU128($t5, $t4);
    if ($abort_flag) {
        assume {:print "$at(26,1652,1653)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,2):", $t7} $t7 == $t7;
        goto L10;
    }

    // $t13 := -($t6, $t12) on_abort goto L10 with $t7 at ./sources/math.move:57:23+1
    call $t13 := $Sub($t6, $t12);
    if ($abort_flag) {
        assume {:print "$at(26,1645,1646)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,2):", $t7} $t7 == $t7;
        goto L10;
    }

    // trace_local[x#1]($t13) at ./sources/math.move:57:17+1
    assume {:print "$track_local(26,2,3):", $t13} $t13 == $t13;

    // $t14 := 1 at ./sources/math.move:58:31+1
    assume {:print "$at(26,1690,1691)"} true;
    $t14 := 1;
    assume $IsValid'u8'($t14);

    // $t15 := >>($t5, $t14) at ./sources/math.move:58:28+2
    call $t15 := $Shr($t5, $t14);

    // $t16 := +($t15, $t4) on_abort goto L10 with $t7 at ./sources/math.move:58:34+1
    call $t16 := $AddU128($t15, $t4);
    if ($abort_flag) {
        assume {:print "$at(26,1693,1694)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,2):", $t7} $t7 == $t7;
        goto L10;
    }

    // trace_local[res]($t16) at ./sources/math.move:58:17+3
    assume {:print "$track_local(26,2,2):", $t16} $t16 == $t16;

    // goto L6 at ./sources/math.move:58:39+1
    goto L6;

    // label L5 at ./sources/math.move:60:23+3
    assume {:print "$at(26,1743,1746)"} true;
L5:

    // $t17 := 1 at ./sources/math.move:60:30+1
    $t17 := 1;
    assume $IsValid'u8'($t17);

    // $t18 := >>($t5, $t17) at ./sources/math.move:60:27+2
    call $t18 := $Shr($t5, $t17);

    // trace_local[res]($t18) at ./sources/math.move:60:17+3
    assume {:print "$track_local(26,2,2):", $t18} $t18 == $t18;

    // label L6 at ./sources/math.move:62:19+3
    assume {:print "$at(26,1786,1789)"} true;
L6:

    // $t19 := 2 at ./sources/math.move:62:26+1
    $t19 := 2;
    assume $IsValid'u8'($t19);

    // $t20 := >>($t4, $t19) at ./sources/math.move:62:23+2
    call $t20 := $Shr($t4, $t19);

    // trace_local[bit]($t20) at ./sources/math.move:62:13+3
    assume {:print "$track_local(26,2,1):", $t20} $t20 == $t20;

    // goto L8 at ./sources/math.move:62:27+1
    goto L8;

    // label L2 at ./sources/math.move:65:10+3
    assume {:print "$at(26,1817,1820)"} true;
L2:

    // $t21 := (u64)($t5) on_abort goto L10 with $t7 at ./sources/math.move:65:9+12
    call $t21 := $CastU64($t5);
    if ($abort_flag) {
        assume {:print "$at(26,1816,1828)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(26,2):", $t7} $t7 == $t7;
        goto L10;
    }

    // trace_return[0]($t21) at ./sources/math.move:65:9+12
    assume {:print "$track_return(26,2,0):", $t21} $t21 == $t21;

    // goto L9 at ./sources/math.move:65:9+12
    goto L9;

    // label L8 at ./sources/math.move:65:10+3
    // Loop invariant checking block for the loop started with header: L7
L8:

    // stop() at ./sources/math.move:65:10+3
    assume false;
    return;

    // label L9 at ./sources/math.move:66:5+1
    assume {:print "$at(26,1833,1834)"} true;
L9:

    // return $t21 at ./sources/math.move:66:5+1
    $ret0 := $t21;
    return;

    // label L10 at ./sources/math.move:66:5+1
L10:

    // abort($t7) at ./sources/math.move:66:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// struct stake::Stake at ./sources/governance/stake.move:21:5+426
type {:datatype} $2_stake_Stake;
function {:constructor} $2_stake_Stake($id: $2_object_UID, $balance: $2_balance_Balance'$2_sui_SUI', $locked_until_epoch: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): $2_stake_Stake;
function {:inline} $Update'$2_stake_Stake'_id(s: $2_stake_Stake, x: $2_object_UID): $2_stake_Stake {
    $2_stake_Stake(x, $balance#$2_stake_Stake(s), $locked_until_epoch#$2_stake_Stake(s))
}
function {:inline} $Update'$2_stake_Stake'_balance(s: $2_stake_Stake, x: $2_balance_Balance'$2_sui_SUI'): $2_stake_Stake {
    $2_stake_Stake($id#$2_stake_Stake(s), x, $locked_until_epoch#$2_stake_Stake(s))
}
function {:inline} $Update'$2_stake_Stake'_locked_until_epoch(s: $2_stake_Stake, x: $1_option_Option'$2_epoch_time_lock_EpochTimeLock'): $2_stake_Stake {
    $2_stake_Stake($id#$2_stake_Stake(s), $balance#$2_stake_Stake(s), x)
}
function $IsValid'$2_stake_Stake'(s: $2_stake_Stake): bool {
    $IsValid'$2_object_UID'($id#$2_stake_Stake(s))
      && $IsValid'$2_balance_Balance'$2_sui_SUI''($balance#$2_stake_Stake(s))
      && $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($locked_until_epoch#$2_stake_Stake(s))
}
function {:inline} $IsEqual'$2_stake_Stake'(s1: $2_stake_Stake, s2: $2_stake_Stake): bool {
    $IsEqual'$2_object_UID'($id#$2_stake_Stake(s1), $id#$2_stake_Stake(s2))
    && $IsEqual'$2_balance_Balance'$2_sui_SUI''($balance#$2_stake_Stake(s1), $balance#$2_stake_Stake(s2))
    && $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($locked_until_epoch#$2_stake_Stake(s1), $locked_until_epoch#$2_stake_Stake(s2))}
var $2_stake_Stake_$memory: $Memory $2_stake_Stake;

// fun stake::value [verification] at ./sources/governance/stake.move:88:5+81
procedure {:timeLimit 40} $2_stake_value$verify(_$t0: $2_stake_Stake) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: int;
    var $t3: int;
    var $t0: $2_stake_Stake;
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select stake::Stake.locked_until_epoch($t0))), 1)) at ./sources/governance/stake.move:88:5+1
    assume {:print "$at(38,3384,3385)"} true;
    assume ($IsValid'$2_stake_Stake'($t0) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_stake_Stake($t0))) <= 1));

    // trace_local[self]($t0) at ./sources/governance/stake.move:88:5+1
    assume {:print "$track_local(27,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<stake::Stake>.balance($t0) at ./sources/governance/stake.move:89:24+13
    assume {:print "$at(38,3445,3458)"} true;
    $t1 := $balance#$2_stake_Stake($t0);

    // $t2 := balance::value<sui::SUI>($t1) on_abort goto L2 with $t3 at ./sources/governance/stake.move:89:9+29
    call $t2 := $2_balance_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(38,3430,3459)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(27,2):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/governance/stake.move:89:9+29
    assume {:print "$track_return(27,2,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/governance/stake.move:90:5+1
    assume {:print "$at(38,3464,3465)"} true;
L1:

    // return $t2 at ./sources/governance/stake.move:90:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/governance/stake.move:90:5+1
L2:

    // abort($t3) at ./sources/governance/stake.move:90:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun stake::create [baseline] at ./sources/governance/stake.move:40:5+350
procedure {:inline 1} $2_stake_create(_$t0: $2_balance_Balance'$2_sui_SUI', _$t1: int, _$t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_stake_Stake;
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: $2_stake_Stake;
    var $t0: $2_balance_Balance'$2_sui_SUI';
    var $t1: int;
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[balance]($t0) at ./sources/governance/stake.move:40:5+1
    assume {:print "$at(38,1423,1424)"} true;
    assume {:print "$track_local(27,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/governance/stake.move:40:5+1
    assume {:print "$track_local(27,1,1):", $t1} $t1 == $t1;

    // trace_local[locked_until_epoch]($t2) at ./sources/governance/stake.move:40:5+1
    assume {:print "$track_local(27,1,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/stake.move:40:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(27,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := object::new($t3) on_abort goto L2 with $t6 at ./sources/governance/stake.move:47:17+16
    assume {:print "$at(38,1641,1657)"} true;
    call $t5,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(38,1641,1657)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := pack stake::Stake($t5, $t0, $t2) at ./sources/governance/stake.move:46:21+104
    assume {:print "$at(38,1617,1721)"} true;
    $t7 := $2_stake_Stake($t5, $t0, $t2);

    // trace_local[stake]($t7) at ./sources/governance/stake.move:46:13+5
    assume {:print "$track_local(27,1,4):", $t7} $t7 == $t7;

    // transfer::transfer<stake::Stake>($t7, $t1) on_abort goto L2 with $t6 at ./sources/governance/stake.move:51:9+36
    assume {:print "$at(38,1731,1767)"} true;
    call $2_transfer_transfer'$2_stake_Stake'($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(38,1731,1767)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/governance/stake.move:51:9+36
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(27,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/stake.move:52:5+1
    assume {:print "$at(38,1772,1773)"} true;
L1:

    // return () at ./sources/governance/stake.move:52:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/stake.move:52:5+1
L2:

    // abort($t6) at ./sources/governance/stake.move:52:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun stake::create [verification] at ./sources/governance/stake.move:40:5+350
procedure {:timeLimit 40} $2_stake_create$verify(_$t0: $2_balance_Balance'$2_sui_SUI', _$t1: int, _$t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $2_stake_Stake;
    var $t5: $2_object_UID;
    var $t6: int;
    var $t7: $2_stake_Stake;
    var $t0: $2_balance_Balance'$2_sui_SUI';
    var $t1: int;
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/stake.move:40:5+1
    assume {:print "$at(38,1423,1424)"} true;
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t0);

    // assume WellFormed($t1) at ./sources/governance/stake.move:40:5+1
    assume $IsValid'address'($t1);

    // assume And(WellFormed($t2), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t2)), 1)) at ./sources/governance/stake.move:40:5+1
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t2) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t2)) <= 1));

    // assume WellFormed($t3) at ./sources/governance/stake.move:40:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[balance]($t0) at ./sources/governance/stake.move:40:5+1
    assume {:print "$track_local(27,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/governance/stake.move:40:5+1
    assume {:print "$track_local(27,1,1):", $t1} $t1 == $t1;

    // trace_local[locked_until_epoch]($t2) at ./sources/governance/stake.move:40:5+1
    assume {:print "$track_local(27,1,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/stake.move:40:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(27,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := object::new($t3) on_abort goto L2 with $t6 at ./sources/governance/stake.move:47:17+16
    assume {:print "$at(38,1641,1657)"} true;
    call $t5,$t3 := $2_object_new($t3);
    if ($abort_flag) {
        assume {:print "$at(38,1641,1657)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := pack stake::Stake($t5, $t0, $t2) at ./sources/governance/stake.move:46:21+104
    assume {:print "$at(38,1617,1721)"} true;
    $t7 := $2_stake_Stake($t5, $t0, $t2);

    // trace_local[stake]($t7) at ./sources/governance/stake.move:46:13+5
    assume {:print "$track_local(27,1,4):", $t7} $t7 == $t7;

    // transfer::transfer<stake::Stake>($t7, $t1) on_abort goto L2 with $t6 at ./sources/governance/stake.move:51:9+36
    assume {:print "$at(38,1731,1767)"} true;
    call $2_transfer_transfer'$2_stake_Stake'($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(38,1731,1767)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,1):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t3) at ./sources/governance/stake.move:51:9+36
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(27,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/stake.move:52:5+1
    assume {:print "$at(38,1772,1773)"} true;
L1:

    // return () at ./sources/governance/stake.move:52:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/stake.move:52:5+1
L2:

    // abort($t6) at ./sources/governance/stake.move:52:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun stake::burn [verification] at ./sources/governance/stake.move:78:5+391
procedure {:timeLimit 40} $2_stake_burn$verify(_$t0: $2_stake_Stake, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_balance_Balance'$2_sui_SUI';
    var $t3: $2_object_UID;
    var $t4: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t5: $2_object_UID;
    var $t6: $2_balance_Balance'$2_sui_SUI';
    var $t7: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t8: int;
    var $t9: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t10: bool;
    var $t11: $Mutation ($1_option_Option'$2_epoch_time_lock_EpochTimeLock');
    var $t12: $2_epoch_time_lock_EpochTimeLock;
    var $t13: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t14: bool;
    var $t15: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t16: bool;
    var $t0: $2_stake_Stake;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t11));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume And(WellFormed($t0), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select stake::Stake.locked_until_epoch($t0))), 1)) at ./sources/governance/stake.move:78:5+1
    assume {:print "$at(38,2987,2988)"} true;
    assume ($IsValid'$2_stake_Stake'($t0) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_stake_Stake($t0))) <= 1));

    // assume WellFormed($t1) at ./sources/governance/stake.move:78:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[self]($t0) at ./sources/governance/stake.move:78:5+1
    assume {:print "$track_local(27,0,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/governance/stake.move:78:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(27,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // ($t5, $t6, $t7) := unpack stake::Stake($t0) at ./sources/governance/stake.move:79:13+41
    assume {:print "$at(38,3057,3098)"} true;
    $t5 := $id#$2_stake_Stake($t0);
    $t6 := $balance#$2_stake_Stake($t0);
    $t7 := $locked_until_epoch#$2_stake_Stake($t0);

    // $t4 := $t7 at ./sources/governance/stake.move:79:34+18
    $t4 := $t7;

    // trace_local[locked_until_epoch]($t4) at ./sources/governance/stake.move:79:34+18
    assume {:print "$track_local(27,0,4):", $t4} $t4 == $t4;

    // trace_local[balance]($t6) at ./sources/governance/stake.move:79:25+7
    assume {:print "$track_local(27,0,2):", $t6} $t6 == $t6;

    // trace_local[id]($t5) at ./sources/governance/stake.move:79:21+2
    assume {:print "$track_local(27,0,3):", $t5} $t5 == $t5;

    // object::delete($t5) on_abort goto L5 with $t8 at ./sources/governance/stake.move:80:9+18
    assume {:print "$at(38,3115,3133)"} true;
    call $2_object_delete($t5);
    if ($abort_flag) {
        assume {:print "$at(38,3115,3133)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,0):", $t8} $t8 == $t8;
        goto L5;
    }

    // balance::destroy_zero<sui::SUI>($t6) on_abort goto L5 with $t8 at ./sources/governance/stake.move:81:9+30
    assume {:print "$at(38,3143,3173)"} true;
    call $2_balance_destroy_zero'$2_sui_SUI'($t6);
    if ($abort_flag) {
        assume {:print "$at(38,3143,3173)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,0):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t9 := copy($t4) at ./sources/governance/stake.move:82:29+19
    assume {:print "$at(38,3203,3222)"} true;
    $t9 := $t4;

    // $t10 := opaque begin: option::is_some<epoch_time_lock::EpochTimeLock>($t9) at ./sources/governance/stake.move:82:13+36

    // assume WellFormed($t10) at ./sources/governance/stake.move:82:13+36
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, option::$is_some<epoch_time_lock::EpochTimeLock>($t9)) at ./sources/governance/stake.move:82:13+36
    assume $IsEqual'bool'($t10, $1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t9));

    // $t10 := opaque end: option::is_some<epoch_time_lock::EpochTimeLock>($t9) at ./sources/governance/stake.move:82:13+36

    // if ($t10) goto L0 else goto L2 at ./sources/governance/stake.move:82:9+138
    if ($t10) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/stake.move:83:54+23
    assume {:print "$at(38,3280,3303)"} true;
L0:

    // $t11 := borrow_local($t4) at ./sources/governance/stake.move:83:54+23
    $t11 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t12 := opaque begin: option::extract<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/stake.move:83:38+40

    // $t13 := read_ref($t11) at ./sources/governance/stake.move:83:38+40
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<epoch_time_lock::EpochTimeLock>($t11)) at ./sources/governance/stake.move:83:38+40
    assume ($t14 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t11)));

    // if ($t14) goto L10 else goto L6 at ./sources/governance/stake.move:83:38+40
    if ($t14) { goto L10; } else { goto L6; }

    // label L7 at ./sources/governance/stake.move:83:38+40
L7:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t11), Eq(7, $t8)) at ./sources/governance/stake.move:83:38+40
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t11)) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/stake.move:83:38+40
    assume {:print "$at(38,3264,3304)"} true;
    assume {:print "$track_abort(27,0):", $t8} $t8 == $t8;

    // goto L5 at ./sources/governance/stake.move:83:38+40
    goto L5;

    // label L6 at ./sources/governance/stake.move:83:38+40
L6:

    // havoc[mut]($t11) at ./sources/governance/stake.move:83:38+40
    havoc $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'');
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t11)), 1)) at ./sources/governance/stake.move:83:38+40
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($Dereference($t11)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/stake.move:83:38+40
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t12);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t12, option::$borrow<epoch_time_lock::EpochTimeLock>($t13)) at ./sources/governance/stake.move:83:38+40
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t12, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t13));

    // assume option::$is_none<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/stake.move:83:38+40
    assume $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($Dereference($t11));

    // $t12 := opaque end: option::extract<epoch_time_lock::EpochTimeLock>($t11) at ./sources/governance/stake.move:83:38+40

    // assert Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t11)), 1) at ./deps/move-stdlib/sources/option.move:17:9+24
    // data invariant at ./deps/move-stdlib/sources/option.move:17:9+24
    assume {:print "$at(16,632,656)"} true;
    assert {:msg "assert_failed(16,632,656): data invariant does not hold"}
      (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($Dereference($t11))) <= 1);

    // write_back[LocalRoot($t4)@]($t11) at ./sources/governance/stake.move:83:38+40
    assume {:print "$at(38,3264,3304)"} true;
    $t4 := $Dereference($t11);

    // trace_local[locked_until_epoch]($t4) at ./sources/governance/stake.move:83:38+40
    assume {:print "$track_local(27,0,4):", $t4} $t4 == $t4;

    // epoch_time_lock::destroy($t12, $t1) on_abort goto L5 with $t8 at ./sources/governance/stake.move:83:13+71
    call $t1 := $2_epoch_time_lock_destroy($t12, $t1);
    if ($abort_flag) {
        assume {:print "$at(38,3239,3310)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,0):", $t8} $t8 == $t8;
        goto L5;
    }

    // goto L3 at ./sources/governance/stake.move:83:84+1
    goto L3;

    // label L2 at ./sources/governance/stake.move:82:9+138
    assume {:print "$at(38,3183,3321)"} true;
L2:

    // destroy($t1) at ./sources/governance/stake.move:82:9+138

    // label L3 at ./sources/governance/stake.move:85:30+18
    assume {:print "$at(38,3352,3370)"} true;
L3:

    // $t15 := move($t4) at ./sources/governance/stake.move:85:30+18
    $t15 := $t4;

    // opaque begin: option::destroy_none<epoch_time_lock::EpochTimeLock>($t15) at ./sources/governance/stake.move:85:9+40

    // assume Identical($t16, option::$is_some<epoch_time_lock::EpochTimeLock>($t15)) at ./sources/governance/stake.move:85:9+40
    assume ($t16 == $1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t15));

    // if ($t16) goto L11 else goto L8 at ./sources/governance/stake.move:85:9+40
    if ($t16) { goto L11; } else { goto L8; }

    // label L9 at ./sources/governance/stake.move:85:9+40
L9:

    // assume And(option::$is_some<epoch_time_lock::EpochTimeLock>($t15), Eq(7, $t8)) at ./sources/governance/stake.move:85:9+40
    assume ($1_option_$is_some'$2_epoch_time_lock_EpochTimeLock'($t15) && $IsEqual'num'(7, $t8));

    // trace_abort($t8) at ./sources/governance/stake.move:85:9+40
    assume {:print "$at(38,3331,3371)"} true;
    assume {:print "$track_abort(27,0):", $t8} $t8 == $t8;

    // goto L5 at ./sources/governance/stake.move:85:9+40
    goto L5;

    // label L8 at ./sources/governance/stake.move:85:9+40
L8:

    // opaque end: option::destroy_none<epoch_time_lock::EpochTimeLock>($t15) at ./sources/governance/stake.move:85:9+40

    // trace_local[ctx]($t1) at ./sources/governance/stake.move:85:49+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(27,0,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L4 at ./sources/governance/stake.move:86:5+1
    assume {:print "$at(38,3377,3378)"} true;
L4:

    // return () at ./sources/governance/stake.move:86:5+1
    $ret0 := $t1;
    return;

    // label L5 at ./sources/governance/stake.move:86:5+1
L5:

    // abort($t8) at ./sources/governance/stake.move:86:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t1) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t1) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

}

// fun stake::withdraw_stake [baseline] at ./sources/governance/stake.move:55:5+1059
procedure {:inline 1} $2_stake_withdraw_stake(_$t0: $Mutation ($2_stake_Stake), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_stake_Stake), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_balance_Balance'$2_sui_SUI';
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $2_tx_context_TxContext;
    var $t9: int;
    var $t10: int;
    var $t11: $2_tx_context_TxContext;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t16: $2_balance_Balance'$2_sui_SUI';
    var $t17: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t18: bool;
    var $t19: $2_epoch_time_lock_EpochTimeLock;
    var $t20: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t21: $2_epoch_time_lock_EpochTimeLock;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: $2_epoch_time_lock_EpochTimeLock;
    var $t0: $Mutation ($2_stake_Stake);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t15));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/stake.move:55:5+1
    assume {:print "$at(38,1834,1835)"} true;
    $temp_0'$2_stake_Stake' := $Dereference($t0);
    assume {:print "$track_local(27,3,0):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[amount]($t1) at ./sources/governance/stake.move:55:5+1
    assume {:print "$track_local(27,3,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/stake.move:55:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(27,3,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := read_ref($t2) at ./sources/governance/stake.move:60:41+3
    assume {:print "$at(38,1993,1996)"} true;
    $t8 := $Dereference($t2);

    // $t9 := tx_context::sender($t8) on_abort goto L5 with $t10 at ./sources/governance/stake.move:60:22+23
    call $t9 := $2_tx_context_sender($t8);
    if ($abort_flag) {
        assume {:print "$at(38,1974,1997)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[sender]($t9) at ./sources/governance/stake.move:60:13+6
    assume {:print "$track_local(27,3,5):", $t9} $t9 == $t9;

    // $t11 := read_ref($t2) at ./sources/governance/stake.move:61:46+3
    assume {:print "$at(38,2044,2047)"} true;
    $t11 := $Dereference($t2);

    // $t12 := tx_context::epoch($t11) on_abort goto L5 with $t10 at ./sources/governance/stake.move:61:28+22
    call $t12 := $2_tx_context_epoch($t11);
    if ($abort_flag) {
        assume {:print "$at(38,2026,2048)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t13 := 1 at ./sources/governance/stake.move:61:53+14
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // $t14 := +($t12, $t13) on_abort goto L5 with $t10 at ./sources/governance/stake.move:61:51+1
    call $t14 := $AddU64($t12, $t13);
    if ($abort_flag) {
        assume {:print "$at(38,2049,2050)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[unlock_epoch]($t14) at ./sources/governance/stake.move:61:13+12
    assume {:print "$track_local(27,3,6):", $t14} $t14 == $t14;

    // $t15 := borrow_field<stake::Stake>.balance($t0) at ./sources/governance/stake.move:62:38+17
    assume {:print "$at(38,2104,2121)"} true;
    $t15 := $ChildMutation($t0, 1, $balance#$2_stake_Stake($Dereference($t0)));

    // $t16 := balance::split<sui::SUI>($t15, $t1) on_abort goto L5 with $t10 at ./sources/governance/stake.move:62:23+41
    call $t16,$t15 := $2_balance_split'$2_sui_SUI'($t15, $t1);
    if ($abort_flag) {
        assume {:print "$at(38,2089,2130)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // write_back[Reference($t0).balance (balance::Balance<sui::SUI>)]($t15) at ./sources/governance/stake.move:62:23+41
    $t0 := $UpdateMutation($t0, $Update'$2_stake_Stake'_balance($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/stake.move:62:23+41
    $temp_0'$2_stake_Stake' := $Dereference($t0);
    assume {:print "$track_local(27,3,0):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[balance]($t16) at ./sources/governance/stake.move:62:13+7
    assume {:print "$track_local(27,3,3):", $t16} $t16 == $t16;

    // $t17 := get_field<stake::Stake>.locked_until_epoch($t0) at ./sources/governance/stake.move:64:29+24
    assume {:print "$at(38,2161,2185)"} true;
    $t17 := $locked_until_epoch#$2_stake_Stake($Dereference($t0));

    // $t18 := opaque begin: option::is_none<epoch_time_lock::EpochTimeLock>($t17) at ./sources/governance/stake.move:64:13+41

    // assume WellFormed($t18) at ./sources/governance/stake.move:64:13+41
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::$is_none<epoch_time_lock::EpochTimeLock>($t17)) at ./sources/governance/stake.move:64:13+41
    assume $IsEqual'bool'($t18, $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t17));

    // $t18 := opaque end: option::is_none<epoch_time_lock::EpochTimeLock>($t17) at ./sources/governance/stake.move:64:13+41

    // if ($t18) goto L0 else goto L2 at ./sources/governance/stake.move:64:9+745
    if ($t18) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/stake.move:67:13+92
    assume {:print "$at(38,2340,2432)"} true;
L0:

    // destroy($t0) at ./sources/governance/stake.move:67:13+92

    // $t19 := epoch_time_lock::new($t14, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:67:52+39
    call $t19,$t2 := $2_epoch_time_lock_new($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2379,2418)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // locked_coin::new_from_balance<sui::SUI>($t16, $t19, $t9, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:67:13+92
    call $t2 := $2_locked_coin_new_from_balance'$2_sui_SUI'($t16, $t19, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2340,2432)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // goto L3 at ./sources/governance/stake.move:67:105+1
    goto L3;

    // label L2 at ./sources/governance/stake.move:71:80+4
    assume {:print "$at(38,2665,2669)"} true;
L2:

    // $t20 := get_field<stake::Stake>.locked_until_epoch($t0) at ./sources/governance/stake.move:71:79+24
    $t20 := $locked_until_epoch#$2_stake_Stake($Dereference($t0));

    // $t21 := opaque begin: option::borrow<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/stake.move:71:64+40

    // assume Identical($t22, option::$is_none<epoch_time_lock::EpochTimeLock>($t20)) at ./sources/governance/stake.move:71:64+40
    assume ($t22 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t20));

    // if ($t22) goto L8 else goto L6 at ./sources/governance/stake.move:71:64+40
    if ($t22) { goto L8; } else { goto L6; }

    // label L7 at ./sources/governance/stake.move:71:64+40
L7:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t20), Eq(7, $t10)) at ./sources/governance/stake.move:71:64+40
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t20) && $IsEqual'num'(7, $t10));

    // trace_abort($t10) at ./sources/governance/stake.move:71:64+40
    assume {:print "$at(38,2649,2689)"} true;
    assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;

    // goto L5 at ./sources/governance/stake.move:71:64+40
    goto L5;

    // label L6 at ./sources/governance/stake.move:71:64+40
L6:

    // assume WellFormed($t21) at ./sources/governance/stake.move:71:64+40
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t21);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t21, option::$borrow<epoch_time_lock::EpochTimeLock>($t20)) at ./sources/governance/stake.move:71:64+40
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t21, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t20));

    // $t21 := opaque end: option::borrow<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/stake.move:71:64+40

    // $t23 := epoch_time_lock::epoch($t21) on_abort goto L5 with $t10 at ./sources/governance/stake.move:71:41+64
    call $t23 := $2_epoch_time_lock_epoch($t21);
    if ($abort_flag) {
        assume {:print "$at(38,2626,2690)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[original_unlock_epoch]($t23) at ./sources/governance/stake.move:71:17+21
    assume {:print "$track_local(27,3,4):", $t23} $t23 == $t23;

    // $t24 := math::max($t23, $t14) on_abort goto L5 with $t10 at ./sources/governance/stake.move:72:32+46
    assume {:print "$at(38,2723,2769)"} true;
    call $t24 := $2_math_max($t23, $t14);
    if ($abort_flag) {
        assume {:print "$at(38,2723,2769)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[unlock_epoch#1]($t24) at ./sources/governance/stake.move:72:17+12
    assume {:print "$track_local(27,3,7):", $t24} $t24 == $t24;

    // $t25 := epoch_time_lock::new($t24, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:73:52+39
    assume {:print "$at(38,2822,2861)"} true;
    call $t25,$t2 := $2_epoch_time_lock_new($t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2822,2861)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // locked_coin::new_from_balance<sui::SUI>($t16, $t25, $t9, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:73:13+92
    call $t2 := $2_locked_coin_new_from_balance'$2_sui_SUI'($t16, $t25, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2783,2875)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // label L3 at ./sources/governance/stake.move:74:10+1
    assume {:print "$at(38,2886,2887)"} true;
L3:

    // trace_local[self]($t0) at ./sources/governance/stake.move:74:10+1
    $temp_0'$2_stake_Stake' := $Dereference($t0);
    assume {:print "$track_local(27,3,0):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t2) at ./sources/governance/stake.move:74:10+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(27,3,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L4 at ./sources/governance/stake.move:75:5+1
    assume {:print "$at(38,2892,2893)"} true;
L4:

    // return () at ./sources/governance/stake.move:75:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L5 at ./sources/governance/stake.move:75:5+1
L5:

    // abort($t10) at ./sources/governance/stake.move:75:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun stake::withdraw_stake [verification] at ./sources/governance/stake.move:55:5+1059
procedure {:timeLimit 40} $2_stake_withdraw_stake$verify(_$t0: $Mutation ($2_stake_Stake), _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_stake_Stake), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_balance_Balance'$2_sui_SUI';
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $2_tx_context_TxContext;
    var $t9: int;
    var $t10: int;
    var $t11: $2_tx_context_TxContext;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t16: $2_balance_Balance'$2_sui_SUI';
    var $t17: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t18: bool;
    var $t19: $2_epoch_time_lock_EpochTimeLock;
    var $t20: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t21: $2_epoch_time_lock_EpochTimeLock;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: $2_epoch_time_lock_EpochTimeLock;
    var $t0: $Mutation ($2_stake_Stake);
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t15));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume And(WellFormed($t0), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select stake::Stake.locked_until_epoch($t0))), 1)) at ./sources/governance/stake.move:55:5+1
    assume {:print "$at(38,1834,1835)"} true;
    assume ($IsValid'$2_stake_Stake'($Dereference($t0)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_stake_Stake($Dereference($t0)))) <= 1));

    // assume WellFormed($t1) at ./sources/governance/stake.move:55:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/stake.move:55:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/stake.move:55:5+1
    $temp_0'$2_stake_Stake' := $Dereference($t0);
    assume {:print "$track_local(27,3,0):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[amount]($t1) at ./sources/governance/stake.move:55:5+1
    assume {:print "$track_local(27,3,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/stake.move:55:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(27,3,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := read_ref($t2) at ./sources/governance/stake.move:60:41+3
    assume {:print "$at(38,1993,1996)"} true;
    $t8 := $Dereference($t2);

    // $t9 := tx_context::sender($t8) on_abort goto L5 with $t10 at ./sources/governance/stake.move:60:22+23
    call $t9 := $2_tx_context_sender($t8);
    if ($abort_flag) {
        assume {:print "$at(38,1974,1997)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[sender]($t9) at ./sources/governance/stake.move:60:13+6
    assume {:print "$track_local(27,3,5):", $t9} $t9 == $t9;

    // $t11 := read_ref($t2) at ./sources/governance/stake.move:61:46+3
    assume {:print "$at(38,2044,2047)"} true;
    $t11 := $Dereference($t2);

    // $t12 := tx_context::epoch($t11) on_abort goto L5 with $t10 at ./sources/governance/stake.move:61:28+22
    call $t12 := $2_tx_context_epoch($t11);
    if ($abort_flag) {
        assume {:print "$at(38,2026,2048)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // $t13 := 1 at ./sources/governance/stake.move:61:53+14
    $t13 := 1;
    assume $IsValid'u64'($t13);

    // $t14 := +($t12, $t13) on_abort goto L5 with $t10 at ./sources/governance/stake.move:61:51+1
    call $t14 := $AddU64($t12, $t13);
    if ($abort_flag) {
        assume {:print "$at(38,2049,2050)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[unlock_epoch]($t14) at ./sources/governance/stake.move:61:13+12
    assume {:print "$track_local(27,3,6):", $t14} $t14 == $t14;

    // $t15 := borrow_field<stake::Stake>.balance($t0) at ./sources/governance/stake.move:62:38+17
    assume {:print "$at(38,2104,2121)"} true;
    $t15 := $ChildMutation($t0, 1, $balance#$2_stake_Stake($Dereference($t0)));

    // $t16 := balance::split<sui::SUI>($t15, $t1) on_abort goto L5 with $t10 at ./sources/governance/stake.move:62:23+41
    call $t16,$t15 := $2_balance_split'$2_sui_SUI'($t15, $t1);
    if ($abort_flag) {
        assume {:print "$at(38,2089,2130)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // write_back[Reference($t0).balance (balance::Balance<sui::SUI>)]($t15) at ./sources/governance/stake.move:62:23+41
    $t0 := $UpdateMutation($t0, $Update'$2_stake_Stake'_balance($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/stake.move:62:23+41
    $temp_0'$2_stake_Stake' := $Dereference($t0);
    assume {:print "$track_local(27,3,0):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[balance]($t16) at ./sources/governance/stake.move:62:13+7
    assume {:print "$track_local(27,3,3):", $t16} $t16 == $t16;

    // $t17 := get_field<stake::Stake>.locked_until_epoch($t0) at ./sources/governance/stake.move:64:29+24
    assume {:print "$at(38,2161,2185)"} true;
    $t17 := $locked_until_epoch#$2_stake_Stake($Dereference($t0));

    // $t18 := opaque begin: option::is_none<epoch_time_lock::EpochTimeLock>($t17) at ./sources/governance/stake.move:64:13+41

    // assume WellFormed($t18) at ./sources/governance/stake.move:64:13+41
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::$is_none<epoch_time_lock::EpochTimeLock>($t17)) at ./sources/governance/stake.move:64:13+41
    assume $IsEqual'bool'($t18, $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t17));

    // $t18 := opaque end: option::is_none<epoch_time_lock::EpochTimeLock>($t17) at ./sources/governance/stake.move:64:13+41

    // if ($t18) goto L0 else goto L2 at ./sources/governance/stake.move:64:9+745
    if ($t18) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/stake.move:67:13+92
    assume {:print "$at(38,2340,2432)"} true;
L0:

    // destroy($t0) at ./sources/governance/stake.move:67:13+92

    // $t19 := epoch_time_lock::new($t14, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:67:52+39
    call $t19,$t2 := $2_epoch_time_lock_new($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2379,2418)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // locked_coin::new_from_balance<sui::SUI>($t16, $t19, $t9, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:67:13+92
    call $t2 := $2_locked_coin_new_from_balance'$2_sui_SUI'($t16, $t19, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2340,2432)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // goto L3 at ./sources/governance/stake.move:67:105+1
    goto L3;

    // label L2 at ./sources/governance/stake.move:71:80+4
    assume {:print "$at(38,2665,2669)"} true;
L2:

    // $t20 := get_field<stake::Stake>.locked_until_epoch($t0) at ./sources/governance/stake.move:71:79+24
    $t20 := $locked_until_epoch#$2_stake_Stake($Dereference($t0));

    // $t21 := opaque begin: option::borrow<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/stake.move:71:64+40

    // assume Identical($t22, option::$is_none<epoch_time_lock::EpochTimeLock>($t20)) at ./sources/governance/stake.move:71:64+40
    assume ($t22 == $1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t20));

    // if ($t22) goto L8 else goto L6 at ./sources/governance/stake.move:71:64+40
    if ($t22) { goto L8; } else { goto L6; }

    // label L7 at ./sources/governance/stake.move:71:64+40
L7:

    // assume And(option::$is_none<epoch_time_lock::EpochTimeLock>($t20), Eq(7, $t10)) at ./sources/governance/stake.move:71:64+40
    assume ($1_option_$is_none'$2_epoch_time_lock_EpochTimeLock'($t20) && $IsEqual'num'(7, $t10));

    // trace_abort($t10) at ./sources/governance/stake.move:71:64+40
    assume {:print "$at(38,2649,2689)"} true;
    assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;

    // goto L5 at ./sources/governance/stake.move:71:64+40
    goto L5;

    // label L6 at ./sources/governance/stake.move:71:64+40
L6:

    // assume WellFormed($t21) at ./sources/governance/stake.move:71:64+40
    assume $IsValid'$2_epoch_time_lock_EpochTimeLock'($t21);

    // assume Eq<epoch_time_lock::EpochTimeLock>($t21, option::$borrow<epoch_time_lock::EpochTimeLock>($t20)) at ./sources/governance/stake.move:71:64+40
    assume $IsEqual'$2_epoch_time_lock_EpochTimeLock'($t21, $1_option_$borrow'$2_epoch_time_lock_EpochTimeLock'($t20));

    // $t21 := opaque end: option::borrow<epoch_time_lock::EpochTimeLock>($t20) at ./sources/governance/stake.move:71:64+40

    // $t23 := epoch_time_lock::epoch($t21) on_abort goto L5 with $t10 at ./sources/governance/stake.move:71:41+64
    call $t23 := $2_epoch_time_lock_epoch($t21);
    if ($abort_flag) {
        assume {:print "$at(38,2626,2690)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[original_unlock_epoch]($t23) at ./sources/governance/stake.move:71:17+21
    assume {:print "$track_local(27,3,4):", $t23} $t23 == $t23;

    // $t24 := math::max($t23, $t14) on_abort goto L5 with $t10 at ./sources/governance/stake.move:72:32+46
    assume {:print "$at(38,2723,2769)"} true;
    call $t24 := $2_math_max($t23, $t14);
    if ($abort_flag) {
        assume {:print "$at(38,2723,2769)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // trace_local[unlock_epoch#1]($t24) at ./sources/governance/stake.move:72:17+12
    assume {:print "$track_local(27,3,7):", $t24} $t24 == $t24;

    // $t25 := epoch_time_lock::new($t24, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:73:52+39
    assume {:print "$at(38,2822,2861)"} true;
    call $t25,$t2 := $2_epoch_time_lock_new($t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2822,2861)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // locked_coin::new_from_balance<sui::SUI>($t16, $t25, $t9, $t2) on_abort goto L5 with $t10 at ./sources/governance/stake.move:73:13+92
    call $t2 := $2_locked_coin_new_from_balance'$2_sui_SUI'($t16, $t25, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(38,2783,2875)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(27,3):", $t10} $t10 == $t10;
        goto L5;
    }

    // label L3 at ./sources/governance/stake.move:74:10+1
    assume {:print "$at(38,2886,2887)"} true;
L3:

    // trace_local[self]($t0) at ./sources/governance/stake.move:74:10+1
    $temp_0'$2_stake_Stake' := $Dereference($t0);
    assume {:print "$track_local(27,3,0):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t2) at ./sources/governance/stake.move:74:10+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(27,3,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L4 at ./sources/governance/stake.move:75:5+1
    assume {:print "$at(38,2892,2893)"} true;
L4:

    // return () at ./sources/governance/stake.move:75:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L5 at ./sources/governance/stake.move:75:5+1
L5:

    // abort($t10) at ./sources/governance/stake.move:75:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t0) at <internal>:1:1+10

    // destroy($t2) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// struct validator::Validator at ./sources/governance/validator.move:46:5+1211
type {:datatype} $2_validator_Validator;
function {:constructor} $2_validator_Validator($metadata: $2_validator_ValidatorMetadata, $stake_amount: int, $delegation: int, $pending_stake: int, $pending_withdraw: int, $pending_delegation: int, $pending_delegation_withdraw: int, $delegator_count: int, $pending_delegator_count: int, $pending_delegator_withdraw_count: int): $2_validator_Validator;
function {:inline} $Update'$2_validator_Validator'_metadata(s: $2_validator_Validator, x: $2_validator_ValidatorMetadata): $2_validator_Validator {
    $2_validator_Validator(x, $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_stake_amount(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), x, $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_delegation(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), x, $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_pending_stake(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), x, $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_pending_withdraw(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), x, $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_pending_delegation(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), x, $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_pending_delegation_withdraw(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), x, $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_delegator_count(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), x, $pending_delegator_count#$2_validator_Validator(s), $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_pending_delegator_count(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), x, $pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $Update'$2_validator_Validator'_pending_delegator_withdraw_count(s: $2_validator_Validator, x: int): $2_validator_Validator {
    $2_validator_Validator($metadata#$2_validator_Validator(s), $stake_amount#$2_validator_Validator(s), $delegation#$2_validator_Validator(s), $pending_stake#$2_validator_Validator(s), $pending_withdraw#$2_validator_Validator(s), $pending_delegation#$2_validator_Validator(s), $pending_delegation_withdraw#$2_validator_Validator(s), $delegator_count#$2_validator_Validator(s), $pending_delegator_count#$2_validator_Validator(s), x)
}
function $IsValid'$2_validator_Validator'(s: $2_validator_Validator): bool {
    $IsValid'$2_validator_ValidatorMetadata'($metadata#$2_validator_Validator(s))
      && $IsValid'u64'($stake_amount#$2_validator_Validator(s))
      && $IsValid'u64'($delegation#$2_validator_Validator(s))
      && $IsValid'u64'($pending_stake#$2_validator_Validator(s))
      && $IsValid'u64'($pending_withdraw#$2_validator_Validator(s))
      && $IsValid'u64'($pending_delegation#$2_validator_Validator(s))
      && $IsValid'u64'($pending_delegation_withdraw#$2_validator_Validator(s))
      && $IsValid'u64'($delegator_count#$2_validator_Validator(s))
      && $IsValid'u64'($pending_delegator_count#$2_validator_Validator(s))
      && $IsValid'u64'($pending_delegator_withdraw_count#$2_validator_Validator(s))
}
function {:inline} $IsEqual'$2_validator_Validator'(s1: $2_validator_Validator, s2: $2_validator_Validator): bool {
    $IsEqual'$2_validator_ValidatorMetadata'($metadata#$2_validator_Validator(s1), $metadata#$2_validator_Validator(s2))
    && $IsEqual'u64'($stake_amount#$2_validator_Validator(s1), $stake_amount#$2_validator_Validator(s2))
    && $IsEqual'u64'($delegation#$2_validator_Validator(s1), $delegation#$2_validator_Validator(s2))
    && $IsEqual'u64'($pending_stake#$2_validator_Validator(s1), $pending_stake#$2_validator_Validator(s2))
    && $IsEqual'u64'($pending_withdraw#$2_validator_Validator(s1), $pending_withdraw#$2_validator_Validator(s2))
    && $IsEqual'u64'($pending_delegation#$2_validator_Validator(s1), $pending_delegation#$2_validator_Validator(s2))
    && $IsEqual'u64'($pending_delegation_withdraw#$2_validator_Validator(s1), $pending_delegation_withdraw#$2_validator_Validator(s2))
    && $IsEqual'u64'($delegator_count#$2_validator_Validator(s1), $delegator_count#$2_validator_Validator(s2))
    && $IsEqual'u64'($pending_delegator_count#$2_validator_Validator(s1), $pending_delegator_count#$2_validator_Validator(s2))
    && $IsEqual'u64'($pending_delegator_withdraw_count#$2_validator_Validator(s1), $pending_delegator_withdraw_count#$2_validator_Validator(s2))}

// struct validator::ValidatorMetadata at ./sources/governance/validator.move:27:5+1049
type {:datatype} $2_validator_ValidatorMetadata;
function {:constructor} $2_validator_ValidatorMetadata($sui_address: int, $pubkey_bytes: Vec (int), $proof_of_possession: Vec (int), $name: Vec (int), $net_address: Vec (int), $next_epoch_stake: int, $next_epoch_delegation: int): $2_validator_ValidatorMetadata;
function {:inline} $Update'$2_validator_ValidatorMetadata'_sui_address(s: $2_validator_ValidatorMetadata, x: int): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata(x, $pubkey_bytes#$2_validator_ValidatorMetadata(s), $proof_of_possession#$2_validator_ValidatorMetadata(s), $name#$2_validator_ValidatorMetadata(s), $net_address#$2_validator_ValidatorMetadata(s), $next_epoch_stake#$2_validator_ValidatorMetadata(s), $next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $Update'$2_validator_ValidatorMetadata'_pubkey_bytes(s: $2_validator_ValidatorMetadata, x: Vec (int)): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata($sui_address#$2_validator_ValidatorMetadata(s), x, $proof_of_possession#$2_validator_ValidatorMetadata(s), $name#$2_validator_ValidatorMetadata(s), $net_address#$2_validator_ValidatorMetadata(s), $next_epoch_stake#$2_validator_ValidatorMetadata(s), $next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $Update'$2_validator_ValidatorMetadata'_proof_of_possession(s: $2_validator_ValidatorMetadata, x: Vec (int)): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata($sui_address#$2_validator_ValidatorMetadata(s), $pubkey_bytes#$2_validator_ValidatorMetadata(s), x, $name#$2_validator_ValidatorMetadata(s), $net_address#$2_validator_ValidatorMetadata(s), $next_epoch_stake#$2_validator_ValidatorMetadata(s), $next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $Update'$2_validator_ValidatorMetadata'_name(s: $2_validator_ValidatorMetadata, x: Vec (int)): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata($sui_address#$2_validator_ValidatorMetadata(s), $pubkey_bytes#$2_validator_ValidatorMetadata(s), $proof_of_possession#$2_validator_ValidatorMetadata(s), x, $net_address#$2_validator_ValidatorMetadata(s), $next_epoch_stake#$2_validator_ValidatorMetadata(s), $next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $Update'$2_validator_ValidatorMetadata'_net_address(s: $2_validator_ValidatorMetadata, x: Vec (int)): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata($sui_address#$2_validator_ValidatorMetadata(s), $pubkey_bytes#$2_validator_ValidatorMetadata(s), $proof_of_possession#$2_validator_ValidatorMetadata(s), $name#$2_validator_ValidatorMetadata(s), x, $next_epoch_stake#$2_validator_ValidatorMetadata(s), $next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $Update'$2_validator_ValidatorMetadata'_next_epoch_stake(s: $2_validator_ValidatorMetadata, x: int): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata($sui_address#$2_validator_ValidatorMetadata(s), $pubkey_bytes#$2_validator_ValidatorMetadata(s), $proof_of_possession#$2_validator_ValidatorMetadata(s), $name#$2_validator_ValidatorMetadata(s), $net_address#$2_validator_ValidatorMetadata(s), x, $next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $Update'$2_validator_ValidatorMetadata'_next_epoch_delegation(s: $2_validator_ValidatorMetadata, x: int): $2_validator_ValidatorMetadata {
    $2_validator_ValidatorMetadata($sui_address#$2_validator_ValidatorMetadata(s), $pubkey_bytes#$2_validator_ValidatorMetadata(s), $proof_of_possession#$2_validator_ValidatorMetadata(s), $name#$2_validator_ValidatorMetadata(s), $net_address#$2_validator_ValidatorMetadata(s), $next_epoch_stake#$2_validator_ValidatorMetadata(s), x)
}
function $IsValid'$2_validator_ValidatorMetadata'(s: $2_validator_ValidatorMetadata): bool {
    $IsValid'address'($sui_address#$2_validator_ValidatorMetadata(s))
      && $IsValid'vec'u8''($pubkey_bytes#$2_validator_ValidatorMetadata(s))
      && $IsValid'vec'u8''($proof_of_possession#$2_validator_ValidatorMetadata(s))
      && $IsValid'vec'u8''($name#$2_validator_ValidatorMetadata(s))
      && $IsValid'vec'u8''($net_address#$2_validator_ValidatorMetadata(s))
      && $IsValid'u64'($next_epoch_stake#$2_validator_ValidatorMetadata(s))
      && $IsValid'u64'($next_epoch_delegation#$2_validator_ValidatorMetadata(s))
}
function {:inline} $IsEqual'$2_validator_ValidatorMetadata'(s1: $2_validator_ValidatorMetadata, s2: $2_validator_ValidatorMetadata): bool {
    $IsEqual'address'($sui_address#$2_validator_ValidatorMetadata(s1), $sui_address#$2_validator_ValidatorMetadata(s2))
    && $IsEqual'vec'u8''($pubkey_bytes#$2_validator_ValidatorMetadata(s1), $pubkey_bytes#$2_validator_ValidatorMetadata(s2))
    && $IsEqual'vec'u8''($proof_of_possession#$2_validator_ValidatorMetadata(s1), $proof_of_possession#$2_validator_ValidatorMetadata(s2))
    && $IsEqual'vec'u8''($name#$2_validator_ValidatorMetadata(s1), $name#$2_validator_ValidatorMetadata(s2))
    && $IsEqual'vec'u8''($net_address#$2_validator_ValidatorMetadata(s1), $net_address#$2_validator_ValidatorMetadata(s2))
    && $IsEqual'u64'($next_epoch_stake#$2_validator_ValidatorMetadata(s1), $next_epoch_stake#$2_validator_ValidatorMetadata(s2))
    && $IsEqual'u64'($next_epoch_delegation#$2_validator_ValidatorMetadata(s1), $next_epoch_delegation#$2_validator_ValidatorMetadata(s2))}

// fun validator::new [baseline] at ./sources/governance/validator.move:72:5+1419
procedure {:inline 1} $2_validator_new(_$t0: int, _$t1: Vec (int), _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (int), _$t5: $2_balance_Balance'$2_sui_SUI', _$t6: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t7: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_validator_Validator, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: $1_ascii_String;
    var $t23: int;
    var $t24: int;
    var $t25: $2_validator_ValidatorMetadata;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: $2_validator_Validator;
    var $t0: int;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t7: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;

    // bytecode translation starts here
    // trace_local[sui_address]($t0) at ./sources/governance/validator.move:72:5+1
    assume {:print "$at(58,2889,2890)"} true;
    assume {:print "$track_local(28,6,0):", $t0} $t0 == $t0;

    // trace_local[pubkey_bytes]($t1) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,1):", $t1} $t1 == $t1;

    // trace_local[proof_of_possession]($t2) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,2):", $t2} $t2 == $t2;

    // trace_local[name]($t3) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,3):", $t3} $t3 == $t3;

    // trace_local[net_address]($t4) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,4):", $t4} $t4 == $t4;

    // trace_local[stake]($t5) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,5):", $t5} $t5 == $t5;

    // trace_local[coin_locked_until_epoch]($t6) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,6):", $t6} $t6 == $t6;

    // trace_local[ctx]($t7) at ./sources/governance/validator.move:72:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t7);
    assume {:print "$track_local(28,6,7):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t11 := vector::length<u8>($t4) on_abort goto L11 with $t12 at ./sources/governance/validator.move:84:13+28
    assume {:print "$at(58,3321,3349)"} true;
    call $t11 := $1_vector_length'u8'($t4);
    if ($abort_flag) {
        assume {:print "$at(58,3321,3349)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t13 := 128 at ./sources/governance/validator.move:84:45+3
    $t13 := 128;
    assume $IsValid'u64'($t13);

    // $t14 := <=($t11, $t13) at ./sources/governance/validator.move:84:42+2
    call $t14 := $Le($t11, $t13);

    // if ($t14) goto L0 else goto L2 at ./sources/governance/validator.move:84:13+67
    if ($t14) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator.move:84:67+5
L0:

    // $t15 := vector::length<u8>($t3) on_abort goto L11 with $t12 at ./sources/governance/validator.move:84:52+21
    call $t15 := $1_vector_length'u8'($t3);
    if ($abort_flag) {
        assume {:print "$at(58,3360,3381)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t16 := 128 at ./sources/governance/validator.move:84:77+3
    $t16 := 128;
    assume $IsValid'u64'($t16);

    // $t8 := <=($t15, $t16) at ./sources/governance/validator.move:84:74+2
    call $t8 := $Le($t15, $t16);

    // goto L3 at ./sources/governance/validator.move:84:13+67
    goto L3;

    // label L2 at ./sources/governance/validator.move:84:13+67
L2:

    // $t17 := false at ./sources/governance/validator.move:84:13+67
    $t17 := false;
    assume $IsValid'bool'($t17);

    // $t8 := $t17 at ./sources/governance/validator.move:84:13+67
    $t8 := $t17;

    // label L3 at ./sources/governance/validator.move:84:13+67
L3:

    // if ($t8) goto L4 else goto L6 at ./sources/governance/validator.move:84:13+107
    if ($t8) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/validator.move:84:99+13
L4:

    // $t18 := vector::length<u8>($t1) on_abort goto L11 with $t12 at ./sources/governance/validator.move:84:84+29
    call $t18 := $1_vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(58,3392,3421)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t19 := 128 at ./sources/governance/validator.move:84:117+3
    $t19 := 128;
    assume $IsValid'u64'($t19);

    // $t9 := <=($t18, $t19) at ./sources/governance/validator.move:84:114+2
    call $t9 := $Le($t18, $t19);

    // goto L7 at ./sources/governance/validator.move:84:13+107
    goto L7;

    // label L6 at ./sources/governance/validator.move:84:13+107
L6:

    // $t20 := false at ./sources/governance/validator.move:84:13+107
    $t20 := false;
    assume $IsValid'bool'($t20);

    // $t9 := $t20 at ./sources/governance/validator.move:84:13+107
    $t9 := $t20;

    // label L7 at ./sources/governance/validator.move:84:13+107
L7:

    // if ($t9) goto L8 else goto L9 at ./sources/governance/validator.move:82:9+236
    assume {:print "$at(58,3217,3453)"} true;
    if ($t9) { goto L8; } else { goto L9; }

    // label L9 at ./sources/governance/validator.move:82:9+236
L9:

    // destroy($t7) at ./sources/governance/validator.move:82:9+236

    // $t21 := 0 at ./sources/governance/validator.move:85:13+1
    assume {:print "$at(58,3442,3443)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // trace_abort($t21) at ./sources/governance/validator.move:82:9+236
    assume {:print "$at(58,3217,3453)"} true;
    assume {:print "$track_abort(28,6):", $t21} $t21 == $t21;

    // $t12 := move($t21) at ./sources/governance/validator.move:82:9+236
    $t12 := $t21;

    // goto L11 at ./sources/governance/validator.move:82:9+236
    goto L11;

    // label L8 at ./sources/governance/validator.move:88:23+9
    assume {:print "$at(58,3527,3536)"} true;
L8:

    // $t22 := ascii::string($t3) on_abort goto L11 with $t12 at ./sources/governance/validator.move:88:9+24
    call $t22 := $1_ascii_string($t3);
    if ($abort_flag) {
        assume {:print "$at(58,3513,3537)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // destroy($t22) at ./sources/governance/validator.move:88:9+24

    // $t23 := balance::value<sui::SUI>($t5) on_abort goto L11 with $t12 at ./sources/governance/validator.move:89:28+22
    assume {:print "$at(58,3566,3588)"} true;
    call $t23 := $2_balance_value'$2_sui_SUI'($t5);
    if ($abort_flag) {
        assume {:print "$at(58,3566,3588)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // trace_local[stake_amount]($t23) at ./sources/governance/validator.move:89:13+12
    assume {:print "$track_local(28,6,10):", $t23} $t23 == $t23;

    // stake::create($t5, $t0, $t6, $t7) on_abort goto L11 with $t12 at ./sources/governance/validator.move:90:9+63
    assume {:print "$at(58,3598,3661)"} true;
    call $t7 := $2_stake_create($t5, $t0, $t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(58,3598,3661)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t24 := 0 at ./sources/governance/validator.move:99:40+1
    assume {:print "$at(58,3959,3960)"} true;
    $t24 := 0;
    assume $IsValid'u64'($t24);

    // $t25 := pack validator::ValidatorMetadata($t0, $t1, $t2, $t3, $t4, $t23, $t24) at ./sources/governance/validator.move:92:23+270
    assume {:print "$at(58,3705,3975)"} true;
    $t25 := $2_validator_ValidatorMetadata($t0, $t1, $t2, $t3, $t4, $t23, $t24);

    // $t26 := 0 at ./sources/governance/validator.move:102:25+1
    assume {:print "$at(58,4027,4028)"} true;
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := 0 at ./sources/governance/validator.move:103:28+1
    assume {:print "$at(58,4057,4058)"} true;
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := 0 at ./sources/governance/validator.move:104:31+1
    assume {:print "$at(58,4090,4091)"} true;
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // $t29 := 0 at ./sources/governance/validator.move:105:33+1
    assume {:print "$at(58,4125,4126)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t30 := 0 at ./sources/governance/validator.move:106:42+1
    assume {:print "$at(58,4169,4170)"} true;
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := 0 at ./sources/governance/validator.move:107:30+1
    assume {:print "$at(58,4201,4202)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := 0 at ./sources/governance/validator.move:108:38+1
    assume {:print "$at(58,4241,4242)"} true;
    $t32 := 0;
    assume $IsValid'u64'($t32);

    // $t33 := 0 at ./sources/governance/validator.move:109:47+1
    assume {:print "$at(58,4290,4291)"} true;
    $t33 := 0;
    assume $IsValid'u64'($t33);

    // $t34 := pack validator::Validator($t25, $t23, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33) at ./sources/governance/validator.move:91:9+631
    assume {:print "$at(58,3671,4302)"} true;
    $t34 := $2_validator_Validator($t25, $t23, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33);

    // trace_return[0]($t34) at ./sources/governance/validator.move:91:9+631
    assume {:print "$track_return(28,6,0):", $t34} $t34 == $t34;

    // trace_local[ctx]($t7) at ./sources/governance/validator.move:91:9+631
    $temp_0'$2_tx_context_TxContext' := $Dereference($t7);
    assume {:print "$track_local(28,6,7):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L10 at ./sources/governance/validator.move:111:5+1
    assume {:print "$at(58,4307,4308)"} true;
L10:

    // return $t34 at ./sources/governance/validator.move:111:5+1
    $ret0 := $t34;
    $ret1 := $t7;
    return;

    // label L11 at ./sources/governance/validator.move:111:5+1
L11:

    // abort($t12) at ./sources/governance/validator.move:111:5+1
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun validator::new [verification] at ./sources/governance/validator.move:72:5+1419
procedure {:timeLimit 40} $2_validator_new$verify(_$t0: int, _$t1: Vec (int), _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (int), _$t5: $2_balance_Balance'$2_sui_SUI', _$t6: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t7: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $2_validator_Validator, $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: $1_ascii_String;
    var $t23: int;
    var $t24: int;
    var $t25: $2_validator_ValidatorMetadata;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: $2_validator_Validator;
    var $t0: int;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t7: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    $t7 := _$t7;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t7) == $Param(7);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:72:5+1
    assume {:print "$at(58,2889,2890)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator.move:72:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at ./sources/governance/validator.move:72:5+1
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at ./sources/governance/validator.move:72:5+1
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at ./sources/governance/validator.move:72:5+1
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at ./sources/governance/validator.move:72:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t5);

    // assume And(WellFormed($t6), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t6)), 1)) at ./sources/governance/validator.move:72:5+1
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t6) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t6)) <= 1));

    // assume WellFormed($t7) at ./sources/governance/validator.move:72:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t7));

    // trace_local[sui_address]($t0) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,0):", $t0} $t0 == $t0;

    // trace_local[pubkey_bytes]($t1) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,1):", $t1} $t1 == $t1;

    // trace_local[proof_of_possession]($t2) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,2):", $t2} $t2 == $t2;

    // trace_local[name]($t3) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,3):", $t3} $t3 == $t3;

    // trace_local[net_address]($t4) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,4):", $t4} $t4 == $t4;

    // trace_local[stake]($t5) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,5):", $t5} $t5 == $t5;

    // trace_local[coin_locked_until_epoch]($t6) at ./sources/governance/validator.move:72:5+1
    assume {:print "$track_local(28,6,6):", $t6} $t6 == $t6;

    // trace_local[ctx]($t7) at ./sources/governance/validator.move:72:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t7);
    assume {:print "$track_local(28,6,7):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t11 := vector::length<u8>($t4) on_abort goto L11 with $t12 at ./sources/governance/validator.move:84:13+28
    assume {:print "$at(58,3321,3349)"} true;
    call $t11 := $1_vector_length'u8'($t4);
    if ($abort_flag) {
        assume {:print "$at(58,3321,3349)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t13 := 128 at ./sources/governance/validator.move:84:45+3
    $t13 := 128;
    assume $IsValid'u64'($t13);

    // $t14 := <=($t11, $t13) at ./sources/governance/validator.move:84:42+2
    call $t14 := $Le($t11, $t13);

    // if ($t14) goto L0 else goto L2 at ./sources/governance/validator.move:84:13+67
    if ($t14) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator.move:84:67+5
L0:

    // $t15 := vector::length<u8>($t3) on_abort goto L11 with $t12 at ./sources/governance/validator.move:84:52+21
    call $t15 := $1_vector_length'u8'($t3);
    if ($abort_flag) {
        assume {:print "$at(58,3360,3381)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t16 := 128 at ./sources/governance/validator.move:84:77+3
    $t16 := 128;
    assume $IsValid'u64'($t16);

    // $t8 := <=($t15, $t16) at ./sources/governance/validator.move:84:74+2
    call $t8 := $Le($t15, $t16);

    // goto L3 at ./sources/governance/validator.move:84:13+67
    goto L3;

    // label L2 at ./sources/governance/validator.move:84:13+67
L2:

    // $t17 := false at ./sources/governance/validator.move:84:13+67
    $t17 := false;
    assume $IsValid'bool'($t17);

    // $t8 := $t17 at ./sources/governance/validator.move:84:13+67
    $t8 := $t17;

    // label L3 at ./sources/governance/validator.move:84:13+67
L3:

    // if ($t8) goto L4 else goto L6 at ./sources/governance/validator.move:84:13+107
    if ($t8) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/validator.move:84:99+13
L4:

    // $t18 := vector::length<u8>($t1) on_abort goto L11 with $t12 at ./sources/governance/validator.move:84:84+29
    call $t18 := $1_vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(58,3392,3421)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t19 := 128 at ./sources/governance/validator.move:84:117+3
    $t19 := 128;
    assume $IsValid'u64'($t19);

    // $t9 := <=($t18, $t19) at ./sources/governance/validator.move:84:114+2
    call $t9 := $Le($t18, $t19);

    // goto L7 at ./sources/governance/validator.move:84:13+107
    goto L7;

    // label L6 at ./sources/governance/validator.move:84:13+107
L6:

    // $t20 := false at ./sources/governance/validator.move:84:13+107
    $t20 := false;
    assume $IsValid'bool'($t20);

    // $t9 := $t20 at ./sources/governance/validator.move:84:13+107
    $t9 := $t20;

    // label L7 at ./sources/governance/validator.move:84:13+107
L7:

    // if ($t9) goto L8 else goto L9 at ./sources/governance/validator.move:82:9+236
    assume {:print "$at(58,3217,3453)"} true;
    if ($t9) { goto L8; } else { goto L9; }

    // label L9 at ./sources/governance/validator.move:82:9+236
L9:

    // destroy($t7) at ./sources/governance/validator.move:82:9+236

    // $t21 := 0 at ./sources/governance/validator.move:85:13+1
    assume {:print "$at(58,3442,3443)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // trace_abort($t21) at ./sources/governance/validator.move:82:9+236
    assume {:print "$at(58,3217,3453)"} true;
    assume {:print "$track_abort(28,6):", $t21} $t21 == $t21;

    // $t12 := move($t21) at ./sources/governance/validator.move:82:9+236
    $t12 := $t21;

    // goto L11 at ./sources/governance/validator.move:82:9+236
    goto L11;

    // label L8 at ./sources/governance/validator.move:88:23+9
    assume {:print "$at(58,3527,3536)"} true;
L8:

    // $t22 := ascii::string($t3) on_abort goto L11 with $t12 at ./sources/governance/validator.move:88:9+24
    call $t22 := $1_ascii_string($t3);
    if ($abort_flag) {
        assume {:print "$at(58,3513,3537)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // destroy($t22) at ./sources/governance/validator.move:88:9+24

    // $t23 := balance::value<sui::SUI>($t5) on_abort goto L11 with $t12 at ./sources/governance/validator.move:89:28+22
    assume {:print "$at(58,3566,3588)"} true;
    call $t23 := $2_balance_value'$2_sui_SUI'($t5);
    if ($abort_flag) {
        assume {:print "$at(58,3566,3588)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // trace_local[stake_amount]($t23) at ./sources/governance/validator.move:89:13+12
    assume {:print "$track_local(28,6,10):", $t23} $t23 == $t23;

    // stake::create($t5, $t0, $t6, $t7) on_abort goto L11 with $t12 at ./sources/governance/validator.move:90:9+63
    assume {:print "$at(58,3598,3661)"} true;
    call $t7 := $2_stake_create($t5, $t0, $t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(58,3598,3661)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(28,6):", $t12} $t12 == $t12;
        goto L11;
    }

    // $t24 := 0 at ./sources/governance/validator.move:99:40+1
    assume {:print "$at(58,3959,3960)"} true;
    $t24 := 0;
    assume $IsValid'u64'($t24);

    // $t25 := pack validator::ValidatorMetadata($t0, $t1, $t2, $t3, $t4, $t23, $t24) at ./sources/governance/validator.move:92:23+270
    assume {:print "$at(58,3705,3975)"} true;
    $t25 := $2_validator_ValidatorMetadata($t0, $t1, $t2, $t3, $t4, $t23, $t24);

    // $t26 := 0 at ./sources/governance/validator.move:102:25+1
    assume {:print "$at(58,4027,4028)"} true;
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := 0 at ./sources/governance/validator.move:103:28+1
    assume {:print "$at(58,4057,4058)"} true;
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := 0 at ./sources/governance/validator.move:104:31+1
    assume {:print "$at(58,4090,4091)"} true;
    $t28 := 0;
    assume $IsValid'u64'($t28);

    // $t29 := 0 at ./sources/governance/validator.move:105:33+1
    assume {:print "$at(58,4125,4126)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t30 := 0 at ./sources/governance/validator.move:106:42+1
    assume {:print "$at(58,4169,4170)"} true;
    $t30 := 0;
    assume $IsValid'u64'($t30);

    // $t31 := 0 at ./sources/governance/validator.move:107:30+1
    assume {:print "$at(58,4201,4202)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t32 := 0 at ./sources/governance/validator.move:108:38+1
    assume {:print "$at(58,4241,4242)"} true;
    $t32 := 0;
    assume $IsValid'u64'($t32);

    // $t33 := 0 at ./sources/governance/validator.move:109:47+1
    assume {:print "$at(58,4290,4291)"} true;
    $t33 := 0;
    assume $IsValid'u64'($t33);

    // $t34 := pack validator::Validator($t25, $t23, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33) at ./sources/governance/validator.move:91:9+631
    assume {:print "$at(58,3671,4302)"} true;
    $t34 := $2_validator_Validator($t25, $t23, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33);

    // trace_return[0]($t34) at ./sources/governance/validator.move:91:9+631
    assume {:print "$track_return(28,6,0):", $t34} $t34 == $t34;

    // trace_local[ctx]($t7) at ./sources/governance/validator.move:91:9+631
    $temp_0'$2_tx_context_TxContext' := $Dereference($t7);
    assume {:print "$track_local(28,6,7):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L10 at ./sources/governance/validator.move:111:5+1
    assume {:print "$at(58,4307,4308)"} true;
L10:

    // return $t34 at ./sources/governance/validator.move:111:5+1
    $ret0 := $t34;
    $ret1 := $t7;
    return;

    // label L11 at ./sources/governance/validator.move:111:5+1
L11:

    // abort($t12) at ./sources/governance/validator.move:111:5+1
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun validator::destroy [baseline] at ./sources/governance/validator.move:113:5+437
procedure {:inline 1} $2_validator_destroy(_$t0: $2_validator_Validator) returns ()
{
    // declare local variables
    var $t1: $2_validator_ValidatorMetadata;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:113:5+1
    assume {:print "$at(58,4314,4315)"} true;
    assume {:print "$track_local(28,3,0):", $t0} $t0 == $t0;

    // ($t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10) := unpack validator::Validator($t0) at ./sources/governance/validator.move:114:13+365
    assume {:print "$at(58,4372,4737)"} true;
    $t1 := $metadata#$2_validator_Validator($t0);
    $t2 := $stake_amount#$2_validator_Validator($t0);
    $t3 := $delegation#$2_validator_Validator($t0);
    $t4 := $pending_stake#$2_validator_Validator($t0);
    $t5 := $pending_withdraw#$2_validator_Validator($t0);
    $t6 := $pending_delegation#$2_validator_Validator($t0);
    $t7 := $pending_delegation_withdraw#$2_validator_Validator($t0);
    $t8 := $delegator_count#$2_validator_Validator($t0);
    $t9 := $pending_delegator_count#$2_validator_Validator($t0);
    $t10 := $pending_delegator_withdraw_count#$2_validator_Validator($t0);

    // destroy($t10) at ./sources/governance/validator.move:124:47+1
    assume {:print "$at(58,4725,4726)"} true;

    // destroy($t9) at ./sources/governance/validator.move:123:38+1
    assume {:print "$at(58,4676,4677)"} true;

    // destroy($t8) at ./sources/governance/validator.move:122:30+1
    assume {:print "$at(58,4636,4637)"} true;

    // destroy($t7) at ./sources/governance/validator.move:121:42+1
    assume {:print "$at(58,4604,4605)"} true;

    // destroy($t6) at ./sources/governance/validator.move:120:33+1
    assume {:print "$at(58,4560,4561)"} true;

    // destroy($t5) at ./sources/governance/validator.move:119:31+1
    assume {:print "$at(58,4525,4526)"} true;

    // destroy($t4) at ./sources/governance/validator.move:118:28+1
    assume {:print "$at(58,4492,4493)"} true;

    // destroy($t3) at ./sources/governance/validator.move:117:25+1
    assume {:print "$at(58,4462,4463)"} true;

    // destroy($t2) at ./sources/governance/validator.move:116:27+1
    assume {:print "$at(58,4435,4436)"} true;

    // destroy($t1) at ./sources/governance/validator.move:115:23+1
    assume {:print "$at(58,4406,4407)"} true;

    // label L1 at ./sources/governance/validator.move:126:5+1
    assume {:print "$at(58,4750,4751)"} true;
L1:

    // return () at ./sources/governance/validator.move:126:5+1
    return;

}

// fun validator::destroy [verification] at ./sources/governance/validator.move:113:5+437
procedure {:timeLimit 40} $2_validator_destroy$verify(_$t0: $2_validator_Validator) returns ()
{
    // declare local variables
    var $t1: $2_validator_ValidatorMetadata;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:113:5+1
    assume {:print "$at(58,4314,4315)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:113:5+1
    assume {:print "$track_local(28,3,0):", $t0} $t0 == $t0;

    // ($t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10) := unpack validator::Validator($t0) at ./sources/governance/validator.move:114:13+365
    assume {:print "$at(58,4372,4737)"} true;
    $t1 := $metadata#$2_validator_Validator($t0);
    $t2 := $stake_amount#$2_validator_Validator($t0);
    $t3 := $delegation#$2_validator_Validator($t0);
    $t4 := $pending_stake#$2_validator_Validator($t0);
    $t5 := $pending_withdraw#$2_validator_Validator($t0);
    $t6 := $pending_delegation#$2_validator_Validator($t0);
    $t7 := $pending_delegation_withdraw#$2_validator_Validator($t0);
    $t8 := $delegator_count#$2_validator_Validator($t0);
    $t9 := $pending_delegator_count#$2_validator_Validator($t0);
    $t10 := $pending_delegator_withdraw_count#$2_validator_Validator($t0);

    // destroy($t10) at ./sources/governance/validator.move:124:47+1
    assume {:print "$at(58,4725,4726)"} true;

    // destroy($t9) at ./sources/governance/validator.move:123:38+1
    assume {:print "$at(58,4676,4677)"} true;

    // destroy($t8) at ./sources/governance/validator.move:122:30+1
    assume {:print "$at(58,4636,4637)"} true;

    // destroy($t7) at ./sources/governance/validator.move:121:42+1
    assume {:print "$at(58,4604,4605)"} true;

    // destroy($t6) at ./sources/governance/validator.move:120:33+1
    assume {:print "$at(58,4560,4561)"} true;

    // destroy($t5) at ./sources/governance/validator.move:119:31+1
    assume {:print "$at(58,4525,4526)"} true;

    // destroy($t4) at ./sources/governance/validator.move:118:28+1
    assume {:print "$at(58,4492,4493)"} true;

    // destroy($t3) at ./sources/governance/validator.move:117:25+1
    assume {:print "$at(58,4462,4463)"} true;

    // destroy($t2) at ./sources/governance/validator.move:116:27+1
    assume {:print "$at(58,4435,4436)"} true;

    // destroy($t1) at ./sources/governance/validator.move:115:23+1
    assume {:print "$at(58,4406,4407)"} true;

    // label L1 at ./sources/governance/validator.move:126:5+1
    assume {:print "$at(58,4750,4751)"} true;
L1:

    // return () at ./sources/governance/validator.move:126:5+1
    return;

}

// fun validator::delegate_amount [baseline] at ./sources/governance/validator.move:201:5+81
procedure {:inline 1} $2_validator_delegate_amount(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:201:5+1
    assume {:print "$at(58,8148,8149)"} true;
    assume {:print "$track_local(28,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:202:9+15
    assume {:print "$at(58,8208,8223)"} true;
    $t1 := $delegation#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:202:9+15
    assume {:print "$track_return(28,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:203:5+1
    assume {:print "$at(58,8228,8229)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:203:5+1
    $ret0 := $t1;
    return;

}

// fun validator::delegate_amount [verification] at ./sources/governance/validator.move:201:5+81
procedure {:timeLimit 40} $2_validator_delegate_amount$verify(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:201:5+1
    assume {:print "$at(58,8148,8149)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:201:5+1
    assume {:print "$track_local(28,1,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:202:9+15
    assume {:print "$at(58,8208,8223)"} true;
    $t1 := $delegation#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:202:9+15
    assume {:print "$track_return(28,1,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:203:5+1
    assume {:print "$at(58,8228,8229)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:203:5+1
    $ret0 := $t1;
    return;

}

// fun validator::delegator_count [baseline] at ./sources/governance/validator.move:205:5+86
procedure {:inline 1} $2_validator_delegator_count(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:205:5+1
    assume {:print "$at(58,8235,8236)"} true;
    assume {:print "$track_local(28,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.delegator_count($t0) at ./sources/governance/validator.move:206:9+20
    assume {:print "$at(58,8295,8315)"} true;
    $t1 := $delegator_count#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:206:9+20
    assume {:print "$track_return(28,2,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:207:5+1
    assume {:print "$at(58,8320,8321)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:207:5+1
    $ret0 := $t1;
    return;

}

// fun validator::delegator_count [verification] at ./sources/governance/validator.move:205:5+86
procedure {:timeLimit 40} $2_validator_delegator_count$verify(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:205:5+1
    assume {:print "$at(58,8235,8236)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:205:5+1
    assume {:print "$track_local(28,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.delegator_count($t0) at ./sources/governance/validator.move:206:9+20
    assume {:print "$at(58,8295,8315)"} true;
    $t1 := $delegator_count#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:206:9+20
    assume {:print "$track_return(28,2,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:207:5+1
    assume {:print "$at(58,8320,8321)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:207:5+1
    $ret0 := $t1;
    return;

}

// fun validator::adjust_stake [baseline] at ./sources/governance/validator.move:160:5+775
procedure {:inline 1} $2_validator_adjust_stake(_$t0: $Mutation ($2_validator_Validator)) returns ($ret0: $Mutation ($2_validator_Validator))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: int;
    var $t11: $Mutation (int);
    var $t12: int;
    var $t13: $2_validator_ValidatorMetadata;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $Mutation (int);
    var $t23: int;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: $Mutation (int);
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: $Mutation (int);
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: int;
    var $t36: $Mutation (int);
    var $t37: int;
    var $t38: $2_validator_ValidatorMetadata;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t0: $Mutation ($2_validator_Validator);
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t7));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t26));
    assume IsEmptyVec(p#$Mutation($t32));
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t36));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:160:5+1
    assume {:print "$at(58,6310,6311)"} true;
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t1 := get_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:161:29+17
    assume {:print "$at(58,6394,6411)"} true;
    $t1 := $stake_amount#$2_validator_Validator($Dereference($t0));

    // $t2 := get_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:161:49+18
    $t2 := $pending_stake#$2_validator_Validator($Dereference($t0));

    // $t3 := +($t1, $t2) on_abort goto L6 with $t4 at ./sources/governance/validator.move:161:47+1
    call $t3 := $AddU64($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(58,6412,6413)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t5 := get_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:161:70+21
    $t5 := $pending_withdraw#$2_validator_Validator($Dereference($t0));

    // $t6 := -($t3, $t5) on_abort goto L6 with $t4 at ./sources/governance/validator.move:161:68+1
    call $t6 := $Sub($t3, $t5);
    if ($abort_flag) {
        assume {:print "$at(58,6433,6434)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t7 := borrow_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:161:9+17
    $t7 := $ChildMutation($t0, 1, $stake_amount#$2_validator_Validator($Dereference($t0)));

    // write_ref($t7, $t6) at ./sources/governance/validator.move:161:9+82
    $t7 := $UpdateMutation($t7, $t6);

    // write_back[Reference($t0).stake_amount (u64)]($t7) at ./sources/governance/validator.move:161:9+82
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_stake_amount($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:161:9+82
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t8 := 0 at ./sources/governance/validator.move:162:30+1
    assume {:print "$at(58,6487,6488)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := borrow_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:162:9+18
    $t9 := $ChildMutation($t0, 3, $pending_stake#$2_validator_Validator($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator.move:162:9+22
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).pending_stake (u64)]($t9) at ./sources/governance/validator.move:162:9+22
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_stake($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:162:9+22
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t10 := 0 at ./sources/governance/validator.move:163:33+1
    assume {:print "$at(58,6522,6523)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := borrow_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:163:9+21
    $t11 := $ChildMutation($t0, 4, $pending_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t11, $t10) at ./sources/governance/validator.move:163:9+25
    $t11 := $UpdateMutation($t11, $t10);

    // write_back[Reference($t0).pending_withdraw (u64)]($t11) at ./sources/governance/validator.move:163:9+25
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_withdraw($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:163:9+25
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t12 := get_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:164:17+17
    assume {:print "$at(58,6541,6558)"} true;
    $t12 := $stake_amount#$2_validator_Validator($Dereference($t0));

    // $t13 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:164:38+13
    $t13 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t14 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t13) at ./sources/governance/validator.move:164:38+30
    $t14 := $next_epoch_stake#$2_validator_ValidatorMetadata($t13);

    // $t15 := ==($t12, $t14) at ./sources/governance/validator.move:164:35+2
    $t15 := $IsEqual'u64'($t12, $t14);

    // if ($t15) goto L0 else goto L1 at ./sources/governance/validator.move:164:9+63
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator.move:164:9+63
L1:

    // destroy($t0) at ./sources/governance/validator.move:164:9+63

    // $t16 := 0 at ./sources/governance/validator.move:164:70+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // trace_abort($t16) at ./sources/governance/validator.move:164:9+63
    assume {:print "$at(58,6533,6596)"} true;
    assume {:print "$track_abort(28,0):", $t16} $t16 == $t16;

    // $t4 := move($t16) at ./sources/governance/validator.move:164:9+63
    $t4 := $t16;

    // goto L6 at ./sources/governance/validator.move:164:9+63
    goto L6;

    // label L0 at ./sources/governance/validator.move:166:27+4
    assume {:print "$at(58,6625,6629)"} true;
L0:

    // $t17 := get_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:166:27+15
    $t17 := $delegation#$2_validator_Validator($Dereference($t0));

    // $t18 := get_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:166:45+23
    $t18 := $pending_delegation#$2_validator_Validator($Dereference($t0));

    // $t19 := +($t17, $t18) on_abort goto L6 with $t4 at ./sources/governance/validator.move:166:43+1
    call $t19 := $AddU64($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(58,6641,6642)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t20 := get_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:166:71+32
    $t20 := $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0));

    // $t21 := -($t19, $t20) on_abort goto L6 with $t4 at ./sources/governance/validator.move:166:69+1
    call $t21 := $Sub($t19, $t20);
    if ($abort_flag) {
        assume {:print "$at(58,6667,6668)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t22 := borrow_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:166:9+15
    $t22 := $ChildMutation($t0, 2, $delegation#$2_validator_Validator($Dereference($t0)));

    // write_ref($t22, $t21) at ./sources/governance/validator.move:166:9+94
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).delegation (u64)]($t22) at ./sources/governance/validator.move:166:9+94
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_delegation($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:166:9+94
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t23 := 0 at ./sources/governance/validator.move:167:35+1
    assume {:print "$at(58,6737,6738)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := borrow_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:167:9+23
    $t24 := $ChildMutation($t0, 5, $pending_delegation#$2_validator_Validator($Dereference($t0)));

    // write_ref($t24, $t23) at ./sources/governance/validator.move:167:9+27
    $t24 := $UpdateMutation($t24, $t23);

    // write_back[Reference($t0).pending_delegation (u64)]($t24) at ./sources/governance/validator.move:167:9+27
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation($Dereference($t0), $Dereference($t24)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:167:9+27
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t25 := 0 at ./sources/governance/validator.move:168:44+1
    assume {:print "$at(58,6783,6784)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := borrow_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:168:9+32
    $t26 := $ChildMutation($t0, 6, $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t26, $t25) at ./sources/governance/validator.move:168:9+36
    $t26 := $UpdateMutation($t26, $t25);

    // write_back[Reference($t0).pending_delegation_withdraw (u64)]($t26) at ./sources/governance/validator.move:168:9+36
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation_withdraw($Dereference($t0), $Dereference($t26)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:168:9+36
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t27 := get_field<validator::Validator>.delegator_count($t0) at ./sources/governance/validator.move:170:32+20
    assume {:print "$at(58,6818,6838)"} true;
    $t27 := $delegator_count#$2_validator_Validator($Dereference($t0));

    // $t28 := get_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:170:55+28
    $t28 := $pending_delegator_count#$2_validator_Validator($Dereference($t0));

    // $t29 := +($t27, $t28) on_abort goto L6 with $t4 at ./sources/governance/validator.move:170:53+1
    call $t29 := $AddU64($t27, $t28);
    if ($abort_flag) {
        assume {:print "$at(58,6839,6840)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t30 := get_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:170:86+37
    $t30 := $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0));

    // $t31 := -($t29, $t30) on_abort goto L6 with $t4 at ./sources/governance/validator.move:170:84+1
    call $t31 := $Sub($t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(58,6870,6871)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t32 := borrow_field<validator::Validator>.delegator_count($t0) at ./sources/governance/validator.move:170:9+20
    $t32 := $ChildMutation($t0, 7, $delegator_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t32, $t31) at ./sources/governance/validator.move:170:9+114
    $t32 := $UpdateMutation($t32, $t31);

    // write_back[Reference($t0).delegator_count (u64)]($t32) at ./sources/governance/validator.move:170:9+114
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_delegator_count($Dereference($t0), $Dereference($t32)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:170:9+114
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t33 := 0 at ./sources/governance/validator.move:171:40+1
    assume {:print "$at(58,6950,6951)"} true;
    $t33 := 0;
    assume $IsValid'u64'($t33);

    // $t34 := borrow_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:171:9+28
    $t34 := $ChildMutation($t0, 8, $pending_delegator_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t34, $t33) at ./sources/governance/validator.move:171:9+32
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t0).pending_delegator_count (u64)]($t34) at ./sources/governance/validator.move:171:9+32
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_count($Dereference($t0), $Dereference($t34)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:171:9+32
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t35 := 0 at ./sources/governance/validator.move:172:49+1
    assume {:print "$at(58,7001,7002)"} true;
    $t35 := 0;
    assume $IsValid'u64'($t35);

    // $t36 := borrow_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:172:9+37
    $t36 := $ChildMutation($t0, 9, $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t36, $t35) at ./sources/governance/validator.move:172:9+41
    $t36 := $UpdateMutation($t36, $t35);

    // write_back[Reference($t0).pending_delegator_withdraw_count (u64)]($t36) at ./sources/governance/validator.move:172:9+41
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_withdraw_count($Dereference($t0), $Dereference($t36)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:172:9+41
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t37 := get_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:173:17+15
    assume {:print "$at(58,7020,7035)"} true;
    $t37 := $delegation#$2_validator_Validator($Dereference($t0));

    // $t38 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:173:36+13
    $t38 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t39 := get_field<validator::ValidatorMetadata>.next_epoch_delegation($t38) at ./sources/governance/validator.move:173:36+35
    $t39 := $next_epoch_delegation#$2_validator_ValidatorMetadata($t38);

    // $t40 := ==($t37, $t39) at ./sources/governance/validator.move:173:33+2
    $t40 := $IsEqual'u64'($t37, $t39);

    // if ($t40) goto L2 else goto L4 at ./sources/governance/validator.move:173:9+66
    if ($t40) { goto L2; } else { goto L4; }

    // label L3 at ./sources/governance/validator.move:173:73+1
L3:

    // $t41 := 0 at ./sources/governance/validator.move:173:73+1
    $t41 := 0;
    assume $IsValid'u64'($t41);

    // trace_abort($t41) at ./sources/governance/validator.move:173:9+66
    assume {:print "$at(58,7012,7078)"} true;
    assume {:print "$track_abort(28,0):", $t41} $t41 == $t41;

    // $t4 := move($t41) at ./sources/governance/validator.move:173:9+66
    $t4 := $t41;

    // goto L6 at ./sources/governance/validator.move:173:9+66
    goto L6;

    // label L2 at ./sources/governance/validator.move:173:75+1
L2:

    // trace_local[self]($t0) at ./sources/governance/validator.move:173:75+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // goto L5 at ./sources/governance/validator.move:173:75+1
    goto L5;

    // label L4 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L4:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L5 at ./sources/governance/validator.move:174:5+1
    assume {:print "$at(58,7084,7085)"} true;
L5:

    // return () at ./sources/governance/validator.move:174:5+1
    $ret0 := $t0;
    return;

    // label L6 at ./sources/governance/validator.move:174:5+1
L6:

    // abort($t4) at ./sources/governance/validator.move:174:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator::adjust_stake [verification] at ./sources/governance/validator.move:160:5+775
procedure {:timeLimit 40} $2_validator_adjust_stake$verify(_$t0: $Mutation ($2_validator_Validator)) returns ($ret0: $Mutation ($2_validator_Validator))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation (int);
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: int;
    var $t11: $Mutation (int);
    var $t12: int;
    var $t13: $2_validator_ValidatorMetadata;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $Mutation (int);
    var $t23: int;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: $Mutation (int);
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: $Mutation (int);
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: int;
    var $t36: $Mutation (int);
    var $t37: int;
    var $t38: $2_validator_ValidatorMetadata;
    var $t39: int;
    var $t40: bool;
    var $t41: int;
    var $t0: $Mutation ($2_validator_Validator);
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t7));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t26));
    assume IsEmptyVec(p#$Mutation($t32));
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t36));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:160:5+1
    assume {:print "$at(58,6310,6311)"} true;
    assume $IsValid'$2_validator_Validator'($Dereference($t0));

    // trace_local[self]($t0) at ./sources/governance/validator.move:160:5+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t1 := get_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:161:29+17
    assume {:print "$at(58,6394,6411)"} true;
    $t1 := $stake_amount#$2_validator_Validator($Dereference($t0));

    // $t2 := get_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:161:49+18
    $t2 := $pending_stake#$2_validator_Validator($Dereference($t0));

    // $t3 := +($t1, $t2) on_abort goto L6 with $t4 at ./sources/governance/validator.move:161:47+1
    call $t3 := $AddU64($t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(58,6412,6413)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t5 := get_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:161:70+21
    $t5 := $pending_withdraw#$2_validator_Validator($Dereference($t0));

    // $t6 := -($t3, $t5) on_abort goto L6 with $t4 at ./sources/governance/validator.move:161:68+1
    call $t6 := $Sub($t3, $t5);
    if ($abort_flag) {
        assume {:print "$at(58,6433,6434)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t7 := borrow_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:161:9+17
    $t7 := $ChildMutation($t0, 1, $stake_amount#$2_validator_Validator($Dereference($t0)));

    // write_ref($t7, $t6) at ./sources/governance/validator.move:161:9+82
    $t7 := $UpdateMutation($t7, $t6);

    // write_back[Reference($t0).stake_amount (u64)]($t7) at ./sources/governance/validator.move:161:9+82
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_stake_amount($Dereference($t0), $Dereference($t7)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:161:9+82
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t8 := 0 at ./sources/governance/validator.move:162:30+1
    assume {:print "$at(58,6487,6488)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := borrow_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:162:9+18
    $t9 := $ChildMutation($t0, 3, $pending_stake#$2_validator_Validator($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator.move:162:9+22
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).pending_stake (u64)]($t9) at ./sources/governance/validator.move:162:9+22
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_stake($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:162:9+22
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t10 := 0 at ./sources/governance/validator.move:163:33+1
    assume {:print "$at(58,6522,6523)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := borrow_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:163:9+21
    $t11 := $ChildMutation($t0, 4, $pending_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t11, $t10) at ./sources/governance/validator.move:163:9+25
    $t11 := $UpdateMutation($t11, $t10);

    // write_back[Reference($t0).pending_withdraw (u64)]($t11) at ./sources/governance/validator.move:163:9+25
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_withdraw($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:163:9+25
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t12 := get_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:164:17+17
    assume {:print "$at(58,6541,6558)"} true;
    $t12 := $stake_amount#$2_validator_Validator($Dereference($t0));

    // $t13 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:164:38+13
    $t13 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t14 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t13) at ./sources/governance/validator.move:164:38+30
    $t14 := $next_epoch_stake#$2_validator_ValidatorMetadata($t13);

    // $t15 := ==($t12, $t14) at ./sources/governance/validator.move:164:35+2
    $t15 := $IsEqual'u64'($t12, $t14);

    // if ($t15) goto L0 else goto L1 at ./sources/governance/validator.move:164:9+63
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator.move:164:9+63
L1:

    // destroy($t0) at ./sources/governance/validator.move:164:9+63

    // $t16 := 0 at ./sources/governance/validator.move:164:70+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // trace_abort($t16) at ./sources/governance/validator.move:164:9+63
    assume {:print "$at(58,6533,6596)"} true;
    assume {:print "$track_abort(28,0):", $t16} $t16 == $t16;

    // $t4 := move($t16) at ./sources/governance/validator.move:164:9+63
    $t4 := $t16;

    // goto L6 at ./sources/governance/validator.move:164:9+63
    goto L6;

    // label L0 at ./sources/governance/validator.move:166:27+4
    assume {:print "$at(58,6625,6629)"} true;
L0:

    // $t17 := get_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:166:27+15
    $t17 := $delegation#$2_validator_Validator($Dereference($t0));

    // $t18 := get_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:166:45+23
    $t18 := $pending_delegation#$2_validator_Validator($Dereference($t0));

    // $t19 := +($t17, $t18) on_abort goto L6 with $t4 at ./sources/governance/validator.move:166:43+1
    call $t19 := $AddU64($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(58,6641,6642)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t20 := get_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:166:71+32
    $t20 := $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0));

    // $t21 := -($t19, $t20) on_abort goto L6 with $t4 at ./sources/governance/validator.move:166:69+1
    call $t21 := $Sub($t19, $t20);
    if ($abort_flag) {
        assume {:print "$at(58,6667,6668)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t22 := borrow_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:166:9+15
    $t22 := $ChildMutation($t0, 2, $delegation#$2_validator_Validator($Dereference($t0)));

    // write_ref($t22, $t21) at ./sources/governance/validator.move:166:9+94
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).delegation (u64)]($t22) at ./sources/governance/validator.move:166:9+94
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_delegation($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:166:9+94
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t23 := 0 at ./sources/governance/validator.move:167:35+1
    assume {:print "$at(58,6737,6738)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := borrow_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:167:9+23
    $t24 := $ChildMutation($t0, 5, $pending_delegation#$2_validator_Validator($Dereference($t0)));

    // write_ref($t24, $t23) at ./sources/governance/validator.move:167:9+27
    $t24 := $UpdateMutation($t24, $t23);

    // write_back[Reference($t0).pending_delegation (u64)]($t24) at ./sources/governance/validator.move:167:9+27
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation($Dereference($t0), $Dereference($t24)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:167:9+27
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t25 := 0 at ./sources/governance/validator.move:168:44+1
    assume {:print "$at(58,6783,6784)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := borrow_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:168:9+32
    $t26 := $ChildMutation($t0, 6, $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t26, $t25) at ./sources/governance/validator.move:168:9+36
    $t26 := $UpdateMutation($t26, $t25);

    // write_back[Reference($t0).pending_delegation_withdraw (u64)]($t26) at ./sources/governance/validator.move:168:9+36
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation_withdraw($Dereference($t0), $Dereference($t26)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:168:9+36
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t27 := get_field<validator::Validator>.delegator_count($t0) at ./sources/governance/validator.move:170:32+20
    assume {:print "$at(58,6818,6838)"} true;
    $t27 := $delegator_count#$2_validator_Validator($Dereference($t0));

    // $t28 := get_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:170:55+28
    $t28 := $pending_delegator_count#$2_validator_Validator($Dereference($t0));

    // $t29 := +($t27, $t28) on_abort goto L6 with $t4 at ./sources/governance/validator.move:170:53+1
    call $t29 := $AddU64($t27, $t28);
    if ($abort_flag) {
        assume {:print "$at(58,6839,6840)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t30 := get_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:170:86+37
    $t30 := $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0));

    // $t31 := -($t29, $t30) on_abort goto L6 with $t4 at ./sources/governance/validator.move:170:84+1
    call $t31 := $Sub($t29, $t30);
    if ($abort_flag) {
        assume {:print "$at(58,6870,6871)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,0):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t32 := borrow_field<validator::Validator>.delegator_count($t0) at ./sources/governance/validator.move:170:9+20
    $t32 := $ChildMutation($t0, 7, $delegator_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t32, $t31) at ./sources/governance/validator.move:170:9+114
    $t32 := $UpdateMutation($t32, $t31);

    // write_back[Reference($t0).delegator_count (u64)]($t32) at ./sources/governance/validator.move:170:9+114
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_delegator_count($Dereference($t0), $Dereference($t32)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:170:9+114
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t33 := 0 at ./sources/governance/validator.move:171:40+1
    assume {:print "$at(58,6950,6951)"} true;
    $t33 := 0;
    assume $IsValid'u64'($t33);

    // $t34 := borrow_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:171:9+28
    $t34 := $ChildMutation($t0, 8, $pending_delegator_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t34, $t33) at ./sources/governance/validator.move:171:9+32
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t0).pending_delegator_count (u64)]($t34) at ./sources/governance/validator.move:171:9+32
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_count($Dereference($t0), $Dereference($t34)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:171:9+32
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t35 := 0 at ./sources/governance/validator.move:172:49+1
    assume {:print "$at(58,7001,7002)"} true;
    $t35 := 0;
    assume $IsValid'u64'($t35);

    // $t36 := borrow_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:172:9+37
    $t36 := $ChildMutation($t0, 9, $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t36, $t35) at ./sources/governance/validator.move:172:9+41
    $t36 := $UpdateMutation($t36, $t35);

    // write_back[Reference($t0).pending_delegator_withdraw_count (u64)]($t36) at ./sources/governance/validator.move:172:9+41
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_withdraw_count($Dereference($t0), $Dereference($t36)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:172:9+41
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t37 := get_field<validator::Validator>.delegation($t0) at ./sources/governance/validator.move:173:17+15
    assume {:print "$at(58,7020,7035)"} true;
    $t37 := $delegation#$2_validator_Validator($Dereference($t0));

    // $t38 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:173:36+13
    $t38 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t39 := get_field<validator::ValidatorMetadata>.next_epoch_delegation($t38) at ./sources/governance/validator.move:173:36+35
    $t39 := $next_epoch_delegation#$2_validator_ValidatorMetadata($t38);

    // $t40 := ==($t37, $t39) at ./sources/governance/validator.move:173:33+2
    $t40 := $IsEqual'u64'($t37, $t39);

    // if ($t40) goto L2 else goto L4 at ./sources/governance/validator.move:173:9+66
    if ($t40) { goto L2; } else { goto L4; }

    // label L3 at ./sources/governance/validator.move:173:73+1
L3:

    // $t41 := 0 at ./sources/governance/validator.move:173:73+1
    $t41 := 0;
    assume $IsValid'u64'($t41);

    // trace_abort($t41) at ./sources/governance/validator.move:173:9+66
    assume {:print "$at(58,7012,7078)"} true;
    assume {:print "$track_abort(28,0):", $t41} $t41 == $t41;

    // $t4 := move($t41) at ./sources/governance/validator.move:173:9+66
    $t4 := $t41;

    // goto L6 at ./sources/governance/validator.move:173:9+66
    goto L6;

    // label L2 at ./sources/governance/validator.move:173:75+1
L2:

    // trace_local[self]($t0) at ./sources/governance/validator.move:173:75+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,0,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // goto L5 at ./sources/governance/validator.move:173:75+1
    goto L5;

    // label L4 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L4:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L5 at ./sources/governance/validator.move:174:5+1
    assume {:print "$at(58,7084,7085)"} true;
L5:

    // return () at ./sources/governance/validator.move:174:5+1
    $ret0 := $t0;
    return;

    // label L6 at ./sources/governance/validator.move:174:5+1
L6:

    // abort($t4) at ./sources/governance/validator.move:174:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator::is_duplicate [baseline] at ./sources/governance/validator.move:217:5+267
procedure {:inline 1} $2_validator_is_duplicate(_$t0: $2_validator_Validator, _$t1: $2_validator_Validator) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: $2_validator_ValidatorMetadata;
    var $t5: int;
    var $t6: $2_validator_ValidatorMetadata;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: $2_validator_ValidatorMetadata;
    var $t11: Vec (int);
    var $t12: $2_validator_ValidatorMetadata;
    var $t13: Vec (int);
    var $t14: bool;
    var $t15: $2_validator_ValidatorMetadata;
    var $t16: Vec (int);
    var $t17: $2_validator_ValidatorMetadata;
    var $t18: Vec (int);
    var $t0: $2_validator_Validator;
    var $t1: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:217:5+1
    assume {:print "$at(58,8516,8517)"} true;
    assume {:print "$track_local(28,4,0):", $t0} $t0 == $t0;

    // trace_local[other]($t1) at ./sources/governance/validator.move:217:5+1
    assume {:print "$track_local(28,4,1):", $t1} $t1 == $t1;

    // $t4 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:218:10+13
    assume {:print "$at(58,8594,8607)"} true;
    $t4 := $metadata#$2_validator_Validator($t0);

    // $t5 := get_field<validator::ValidatorMetadata>.sui_address($t4) at ./sources/governance/validator.move:218:10+25
    $t5 := $sui_address#$2_validator_ValidatorMetadata($t4);

    // $t6 := get_field<validator::Validator>.metadata($t1) at ./sources/governance/validator.move:218:39+14
    $t6 := $metadata#$2_validator_Validator($t1);

    // $t7 := get_field<validator::ValidatorMetadata>.sui_address($t6) at ./sources/governance/validator.move:218:39+26
    $t7 := $sui_address#$2_validator_ValidatorMetadata($t6);

    // $t8 := ==($t5, $t7) at ./sources/governance/validator.move:218:36+2
    $t8 := $IsEqual'address'($t5, $t7);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator.move:218:10+112
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator.move:218:10+112
L0:

    // $t9 := true at ./sources/governance/validator.move:218:10+112
    $t9 := true;
    assume $IsValid'bool'($t9);

    // $t2 := $t9 at ./sources/governance/validator.move:218:10+112
    $t2 := $t9;

    // goto L3 at ./sources/governance/validator.move:218:10+112
    goto L3;

    // label L2 at ./sources/governance/validator.move:219:16+4
    assume {:print "$at(58,8665,8669)"} true;
L2:

    // $t10 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:219:16+13
    $t10 := $metadata#$2_validator_Validator($t0);

    // $t11 := get_field<validator::ValidatorMetadata>.name($t10) at ./sources/governance/validator.move:219:16+18
    $t11 := $name#$2_validator_ValidatorMetadata($t10);

    // $t12 := get_field<validator::Validator>.metadata($t1) at ./sources/governance/validator.move:219:38+14
    $t12 := $metadata#$2_validator_Validator($t1);

    // $t13 := get_field<validator::ValidatorMetadata>.name($t12) at ./sources/governance/validator.move:219:38+19
    $t13 := $name#$2_validator_ValidatorMetadata($t12);

    // $t2 := ==($t11, $t13) at ./sources/governance/validator.move:219:35+2
    $t2 := $IsEqual'vec'u8''($t11, $t13);

    // label L3 at ./sources/governance/validator.move:218:10+112
    assume {:print "$at(58,8594,8706)"} true;
L3:

    // if ($t2) goto L4 else goto L6 at ./sources/governance/validator.move:218:10+183
    if ($t2) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/validator.move:218:10+183
L4:

    // destroy($t0) at ./sources/governance/validator.move:218:10+183

    // destroy($t1) at ./sources/governance/validator.move:218:10+183

    // $t14 := true at ./sources/governance/validator.move:218:10+183
    $t14 := true;
    assume $IsValid'bool'($t14);

    // $t3 := $t14 at ./sources/governance/validator.move:218:10+183
    $t3 := $t14;

    // goto L7 at ./sources/governance/validator.move:218:10+183
    goto L7;

    // label L6 at ./sources/governance/validator.move:220:16+4
    assume {:print "$at(58,8722,8726)"} true;
L6:

    // $t15 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:220:16+13
    $t15 := $metadata#$2_validator_Validator($t0);

    // $t16 := get_field<validator::ValidatorMetadata>.net_address($t15) at ./sources/governance/validator.move:220:16+25
    $t16 := $net_address#$2_validator_ValidatorMetadata($t15);

    // $t17 := get_field<validator::Validator>.metadata($t1) at ./sources/governance/validator.move:220:45+14
    $t17 := $metadata#$2_validator_Validator($t1);

    // $t18 := get_field<validator::ValidatorMetadata>.net_address($t17) at ./sources/governance/validator.move:220:45+26
    $t18 := $net_address#$2_validator_ValidatorMetadata($t17);

    // $t3 := ==($t16, $t18) at ./sources/governance/validator.move:220:42+2
    $t3 := $IsEqual'vec'u8''($t16, $t18);

    // label L7 at ./sources/governance/validator.move:218:10+183
    assume {:print "$at(58,8594,8777)"} true;
L7:

    // trace_return[0]($t3) at ./sources/governance/validator.move:218:10+183
    assume {:print "$track_return(28,4,0):", $t3} $t3 == $t3;

    // label L8 at ./sources/governance/validator.move:221:5+1
    assume {:print "$at(58,8782,8783)"} true;
L8:

    // return $t3 at ./sources/governance/validator.move:221:5+1
    $ret0 := $t3;
    return;

}

// fun validator::is_duplicate [verification] at ./sources/governance/validator.move:217:5+267
procedure {:timeLimit 40} $2_validator_is_duplicate$verify(_$t0: $2_validator_Validator, _$t1: $2_validator_Validator) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: $2_validator_ValidatorMetadata;
    var $t5: int;
    var $t6: $2_validator_ValidatorMetadata;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: $2_validator_ValidatorMetadata;
    var $t11: Vec (int);
    var $t12: $2_validator_ValidatorMetadata;
    var $t13: Vec (int);
    var $t14: bool;
    var $t15: $2_validator_ValidatorMetadata;
    var $t16: Vec (int);
    var $t17: $2_validator_ValidatorMetadata;
    var $t18: Vec (int);
    var $t0: $2_validator_Validator;
    var $t1: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:217:5+1
    assume {:print "$at(58,8516,8517)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator.move:217:5+1
    assume $IsValid'$2_validator_Validator'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator.move:217:5+1
    assume {:print "$track_local(28,4,0):", $t0} $t0 == $t0;

    // trace_local[other]($t1) at ./sources/governance/validator.move:217:5+1
    assume {:print "$track_local(28,4,1):", $t1} $t1 == $t1;

    // $t4 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:218:10+13
    assume {:print "$at(58,8594,8607)"} true;
    $t4 := $metadata#$2_validator_Validator($t0);

    // $t5 := get_field<validator::ValidatorMetadata>.sui_address($t4) at ./sources/governance/validator.move:218:10+25
    $t5 := $sui_address#$2_validator_ValidatorMetadata($t4);

    // $t6 := get_field<validator::Validator>.metadata($t1) at ./sources/governance/validator.move:218:39+14
    $t6 := $metadata#$2_validator_Validator($t1);

    // $t7 := get_field<validator::ValidatorMetadata>.sui_address($t6) at ./sources/governance/validator.move:218:39+26
    $t7 := $sui_address#$2_validator_ValidatorMetadata($t6);

    // $t8 := ==($t5, $t7) at ./sources/governance/validator.move:218:36+2
    $t8 := $IsEqual'address'($t5, $t7);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator.move:218:10+112
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator.move:218:10+112
L0:

    // $t9 := true at ./sources/governance/validator.move:218:10+112
    $t9 := true;
    assume $IsValid'bool'($t9);

    // $t2 := $t9 at ./sources/governance/validator.move:218:10+112
    $t2 := $t9;

    // goto L3 at ./sources/governance/validator.move:218:10+112
    goto L3;

    // label L2 at ./sources/governance/validator.move:219:16+4
    assume {:print "$at(58,8665,8669)"} true;
L2:

    // $t10 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:219:16+13
    $t10 := $metadata#$2_validator_Validator($t0);

    // $t11 := get_field<validator::ValidatorMetadata>.name($t10) at ./sources/governance/validator.move:219:16+18
    $t11 := $name#$2_validator_ValidatorMetadata($t10);

    // $t12 := get_field<validator::Validator>.metadata($t1) at ./sources/governance/validator.move:219:38+14
    $t12 := $metadata#$2_validator_Validator($t1);

    // $t13 := get_field<validator::ValidatorMetadata>.name($t12) at ./sources/governance/validator.move:219:38+19
    $t13 := $name#$2_validator_ValidatorMetadata($t12);

    // $t2 := ==($t11, $t13) at ./sources/governance/validator.move:219:35+2
    $t2 := $IsEqual'vec'u8''($t11, $t13);

    // label L3 at ./sources/governance/validator.move:218:10+112
    assume {:print "$at(58,8594,8706)"} true;
L3:

    // if ($t2) goto L4 else goto L6 at ./sources/governance/validator.move:218:10+183
    if ($t2) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/validator.move:218:10+183
L4:

    // destroy($t0) at ./sources/governance/validator.move:218:10+183

    // destroy($t1) at ./sources/governance/validator.move:218:10+183

    // $t14 := true at ./sources/governance/validator.move:218:10+183
    $t14 := true;
    assume $IsValid'bool'($t14);

    // $t3 := $t14 at ./sources/governance/validator.move:218:10+183
    $t3 := $t14;

    // goto L7 at ./sources/governance/validator.move:218:10+183
    goto L7;

    // label L6 at ./sources/governance/validator.move:220:16+4
    assume {:print "$at(58,8722,8726)"} true;
L6:

    // $t15 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:220:16+13
    $t15 := $metadata#$2_validator_Validator($t0);

    // $t16 := get_field<validator::ValidatorMetadata>.net_address($t15) at ./sources/governance/validator.move:220:16+25
    $t16 := $net_address#$2_validator_ValidatorMetadata($t15);

    // $t17 := get_field<validator::Validator>.metadata($t1) at ./sources/governance/validator.move:220:45+14
    $t17 := $metadata#$2_validator_Validator($t1);

    // $t18 := get_field<validator::ValidatorMetadata>.net_address($t17) at ./sources/governance/validator.move:220:45+26
    $t18 := $net_address#$2_validator_ValidatorMetadata($t17);

    // $t3 := ==($t16, $t18) at ./sources/governance/validator.move:220:42+2
    $t3 := $IsEqual'vec'u8''($t16, $t18);

    // label L7 at ./sources/governance/validator.move:218:10+183
    assume {:print "$at(58,8594,8777)"} true;
L7:

    // trace_return[0]($t3) at ./sources/governance/validator.move:218:10+183
    assume {:print "$track_return(28,4,0):", $t3} $t3 == $t3;

    // label L8 at ./sources/governance/validator.move:221:5+1
    assume {:print "$at(58,8782,8783)"} true;
L8:

    // return $t3 at ./sources/governance/validator.move:221:5+1
    $ret0 := $t3;
    return;

}

// fun validator::metadata [baseline] at ./sources/governance/validator.move:189:5+88
procedure {:inline 1} $2_validator_metadata(_$t0: $2_validator_Validator) returns ($ret0: $2_validator_ValidatorMetadata)
{
    // declare local variables
    var $t1: $2_validator_ValidatorMetadata;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_ValidatorMetadata': $2_validator_ValidatorMetadata;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:189:5+1
    assume {:print "$at(58,7871,7872)"} true;
    assume {:print "$track_local(28,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:190:9+14
    assume {:print "$at(58,7939,7953)"} true;
    $t1 := $metadata#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:190:9+14
    assume {:print "$track_return(28,5,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:191:5+1
    assume {:print "$at(58,7958,7959)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:191:5+1
    $ret0 := $t1;
    return;

}

// fun validator::metadata [verification] at ./sources/governance/validator.move:189:5+88
procedure {:timeLimit 40} $2_validator_metadata$verify(_$t0: $2_validator_Validator) returns ($ret0: $2_validator_ValidatorMetadata)
{
    // declare local variables
    var $t1: $2_validator_ValidatorMetadata;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_ValidatorMetadata': $2_validator_ValidatorMetadata;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:189:5+1
    assume {:print "$at(58,7871,7872)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:189:5+1
    assume {:print "$track_local(28,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:190:9+14
    assume {:print "$at(58,7939,7953)"} true;
    $t1 := $metadata#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:190:9+14
    assume {:print "$track_return(28,5,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:191:5+1
    assume {:print "$at(58,7958,7959)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:191:5+1
    $ret0 := $t1;
    return;

}

// fun validator::sui_address [baseline] at ./sources/governance/validator.move:193:5+91
procedure {:inline 1} $2_validator_sui_address(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_validator_ValidatorMetadata;
    var $t2: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:193:5+1
    assume {:print "$at(58,7965,7966)"} true;
    assume {:print "$track_local(28,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:194:9+13
    assume {:print "$at(58,8025,8038)"} true;
    $t1 := $metadata#$2_validator_Validator($t0);

    // $t2 := get_field<validator::ValidatorMetadata>.sui_address($t1) at ./sources/governance/validator.move:194:9+25
    $t2 := $sui_address#$2_validator_ValidatorMetadata($t1);

    // trace_return[0]($t2) at ./sources/governance/validator.move:194:9+25
    assume {:print "$track_return(28,14,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/governance/validator.move:195:5+1
    assume {:print "$at(58,8055,8056)"} true;
L1:

    // return $t2 at ./sources/governance/validator.move:195:5+1
    $ret0 := $t2;
    return;

}

// fun validator::sui_address [verification] at ./sources/governance/validator.move:193:5+91
procedure {:timeLimit 40} $2_validator_sui_address$verify(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: $2_validator_ValidatorMetadata;
    var $t2: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:193:5+1
    assume {:print "$at(58,7965,7966)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:193:5+1
    assume {:print "$track_local(28,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:194:9+13
    assume {:print "$at(58,8025,8038)"} true;
    $t1 := $metadata#$2_validator_Validator($t0);

    // $t2 := get_field<validator::ValidatorMetadata>.sui_address($t1) at ./sources/governance/validator.move:194:9+25
    $t2 := $sui_address#$2_validator_ValidatorMetadata($t1);

    // trace_return[0]($t2) at ./sources/governance/validator.move:194:9+25
    assume {:print "$track_return(28,14,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/governance/validator.move:195:5+1
    assume {:print "$at(58,8055,8056)"} true;
L1:

    // return $t2 at ./sources/governance/validator.move:195:5+1
    $ret0 := $t2;
    return;

}

// fun validator::pending_stake_amount [verification] at ./sources/governance/validator.move:209:5+89
procedure {:timeLimit 40} $2_validator_pending_stake_amount$verify(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:209:5+1
    assume {:print "$at(58,8327,8328)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:209:5+1
    assume {:print "$track_local(28,7,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:210:9+18
    assume {:print "$at(58,8392,8410)"} true;
    $t1 := $pending_stake#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:210:9+18
    assume {:print "$track_return(28,7,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:211:5+1
    assume {:print "$at(58,8415,8416)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:211:5+1
    $ret0 := $t1;
    return;

}

// fun validator::pending_withdraw [verification] at ./sources/governance/validator.move:213:5+88
procedure {:timeLimit 40} $2_validator_pending_withdraw$verify(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:213:5+1
    assume {:print "$at(58,8422,8423)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:213:5+1
    assume {:print "$track_local(28,8,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:214:9+21
    assume {:print "$at(58,8483,8504)"} true;
    $t1 := $pending_withdraw#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:214:9+21
    assume {:print "$track_return(28,8,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:215:5+1
    assume {:print "$at(58,8509,8510)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:215:5+1
    $ret0 := $t1;
    return;

}

// fun validator::request_add_delegation [baseline] at ./sources/governance/validator.move:176:5+385
procedure {:inline 1} $2_validator_request_add_delegation(_$t0: $Mutation ($2_validator_Validator), _$t1: int) returns ($ret0: $Mutation ($2_validator_Validator))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation (int);
    var $t13: $2_validator_ValidatorMetadata;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation ($2_validator_ValidatorMetadata);
    var $t17: $Mutation (int);
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t17));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:176:5+1
    assume {:print "$at(58,7091,7092)"} true;
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[delegate_amount]($t1) at ./sources/governance/validator.move:176:5+1
    assume {:print "$track_local(28,9,1):", $t1} $t1 == $t1;

    // $t2 := 0 at ./sources/governance/validator.move:177:35+1
    assume {:print "$at(58,7213,7214)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := >($t1, $t2) at ./sources/governance/validator.move:177:33+1
    call $t3 := $Gt($t1, $t2);

    // if ($t3) goto L0 else goto L1 at ./sources/governance/validator.move:177:9+31
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator.move:177:9+31
L1:

    // destroy($t0) at ./sources/governance/validator.move:177:9+31

    // $t4 := 0 at ./sources/governance/validator.move:177:38+1
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/governance/validator.move:177:9+31
    assume {:print "$at(58,7187,7218)"} true;
    assume {:print "$track_abort(28,9):", $t4} $t4 == $t4;

    // $t5 := move($t4) at ./sources/governance/validator.move:177:9+31
    $t5 := $t4;

    // goto L3 at ./sources/governance/validator.move:177:9+31
    goto L3;

    // label L0 at ./sources/governance/validator.move:178:35+4
    assume {:print "$at(58,7254,7258)"} true;
L0:

    // $t6 := get_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:178:35+23
    $t6 := $pending_delegation#$2_validator_Validator($Dereference($t0));

    // $t7 := +($t6, $t1) on_abort goto L3 with $t5 at ./sources/governance/validator.move:178:59+1
    call $t7 := $AddU64($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7278,7279)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,9):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := borrow_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:178:9+23
    $t8 := $ChildMutation($t0, 5, $pending_delegation#$2_validator_Validator($Dereference($t0)));

    // write_ref($t8, $t7) at ./sources/governance/validator.move:178:9+67
    $t8 := $UpdateMutation($t8, $t7);

    // write_back[Reference($t0).pending_delegation (u64)]($t8) at ./sources/governance/validator.move:178:9+67
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:178:9+67
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t9 := get_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:179:40+28
    assume {:print "$at(58,7336,7364)"} true;
    $t9 := $pending_delegator_count#$2_validator_Validator($Dereference($t0));

    // $t10 := 1 at ./sources/governance/validator.move:179:71+1
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := +($t9, $t10) on_abort goto L3 with $t5 at ./sources/governance/validator.move:179:69+1
    call $t11 := $AddU64($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(58,7365,7366)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,9):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t12 := borrow_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:179:9+28
    $t12 := $ChildMutation($t0, 8, $pending_delegator_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t12, $t11) at ./sources/governance/validator.move:179:9+63
    $t12 := $UpdateMutation($t12, $t11);

    // write_back[Reference($t0).pending_delegator_count (u64)]($t12) at ./sources/governance/validator.move:179:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_count($Dereference($t0), $Dereference($t12)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:179:9+63
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t13 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:180:47+13
    assume {:print "$at(58,7416,7429)"} true;
    $t13 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t14 := get_field<validator::ValidatorMetadata>.next_epoch_delegation($t13) at ./sources/governance/validator.move:180:47+35
    $t14 := $next_epoch_delegation#$2_validator_ValidatorMetadata($t13);

    // $t15 := +($t14, $t1) on_abort goto L3 with $t5 at ./sources/governance/validator.move:180:83+1
    call $t15 := $AddU64($t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7452,7453)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,9):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t16 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:180:9+13
    $t16 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t17 := borrow_field<validator::ValidatorMetadata>.next_epoch_delegation($t16) at ./sources/governance/validator.move:180:9+35
    $t17 := $ChildMutation($t16, 6, $next_epoch_delegation#$2_validator_ValidatorMetadata($Dereference($t16)));

    // write_ref($t17, $t15) at ./sources/governance/validator.move:180:9+91
    $t17 := $UpdateMutation($t17, $t15);

    // write_back[Reference($t16).next_epoch_delegation (u64)]($t17) at ./sources/governance/validator.move:180:9+91
    $t16 := $UpdateMutation($t16, $Update'$2_validator_ValidatorMetadata'_next_epoch_delegation($Dereference($t16), $Dereference($t17)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t16) at ./sources/governance/validator.move:180:9+91
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t16)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:180:9+91
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[self]($t0) at ./sources/governance/validator.move:180:100+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // label L2 at ./sources/governance/validator.move:181:5+1
    assume {:print "$at(58,7475,7476)"} true;
L2:

    // return () at ./sources/governance/validator.move:181:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/governance/validator.move:181:5+1
L3:

    // abort($t5) at ./sources/governance/validator.move:181:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator::request_add_delegation [verification] at ./sources/governance/validator.move:176:5+385
procedure {:timeLimit 40} $2_validator_request_add_delegation$verify(_$t0: $Mutation ($2_validator_Validator), _$t1: int) returns ($ret0: $Mutation ($2_validator_Validator))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation (int);
    var $t13: $2_validator_ValidatorMetadata;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation ($2_validator_ValidatorMetadata);
    var $t17: $Mutation (int);
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:176:5+1
    assume {:print "$at(58,7091,7092)"} true;
    assume $IsValid'$2_validator_Validator'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator.move:176:5+1
    assume $IsValid'u64'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator.move:176:5+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[delegate_amount]($t1) at ./sources/governance/validator.move:176:5+1
    assume {:print "$track_local(28,9,1):", $t1} $t1 == $t1;

    // $t2 := 0 at ./sources/governance/validator.move:177:35+1
    assume {:print "$at(58,7213,7214)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := >($t1, $t2) at ./sources/governance/validator.move:177:33+1
    call $t3 := $Gt($t1, $t2);

    // if ($t3) goto L0 else goto L1 at ./sources/governance/validator.move:177:9+31
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator.move:177:9+31
L1:

    // destroy($t0) at ./sources/governance/validator.move:177:9+31

    // $t4 := 0 at ./sources/governance/validator.move:177:38+1
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at ./sources/governance/validator.move:177:9+31
    assume {:print "$at(58,7187,7218)"} true;
    assume {:print "$track_abort(28,9):", $t4} $t4 == $t4;

    // $t5 := move($t4) at ./sources/governance/validator.move:177:9+31
    $t5 := $t4;

    // goto L3 at ./sources/governance/validator.move:177:9+31
    goto L3;

    // label L0 at ./sources/governance/validator.move:178:35+4
    assume {:print "$at(58,7254,7258)"} true;
L0:

    // $t6 := get_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:178:35+23
    $t6 := $pending_delegation#$2_validator_Validator($Dereference($t0));

    // $t7 := +($t6, $t1) on_abort goto L3 with $t5 at ./sources/governance/validator.move:178:59+1
    call $t7 := $AddU64($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7278,7279)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,9):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t8 := borrow_field<validator::Validator>.pending_delegation($t0) at ./sources/governance/validator.move:178:9+23
    $t8 := $ChildMutation($t0, 5, $pending_delegation#$2_validator_Validator($Dereference($t0)));

    // write_ref($t8, $t7) at ./sources/governance/validator.move:178:9+67
    $t8 := $UpdateMutation($t8, $t7);

    // write_back[Reference($t0).pending_delegation (u64)]($t8) at ./sources/governance/validator.move:178:9+67
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:178:9+67
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t9 := get_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:179:40+28
    assume {:print "$at(58,7336,7364)"} true;
    $t9 := $pending_delegator_count#$2_validator_Validator($Dereference($t0));

    // $t10 := 1 at ./sources/governance/validator.move:179:71+1
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := +($t9, $t10) on_abort goto L3 with $t5 at ./sources/governance/validator.move:179:69+1
    call $t11 := $AddU64($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(58,7365,7366)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,9):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t12 := borrow_field<validator::Validator>.pending_delegator_count($t0) at ./sources/governance/validator.move:179:9+28
    $t12 := $ChildMutation($t0, 8, $pending_delegator_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t12, $t11) at ./sources/governance/validator.move:179:9+63
    $t12 := $UpdateMutation($t12, $t11);

    // write_back[Reference($t0).pending_delegator_count (u64)]($t12) at ./sources/governance/validator.move:179:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_count($Dereference($t0), $Dereference($t12)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:179:9+63
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t13 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:180:47+13
    assume {:print "$at(58,7416,7429)"} true;
    $t13 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t14 := get_field<validator::ValidatorMetadata>.next_epoch_delegation($t13) at ./sources/governance/validator.move:180:47+35
    $t14 := $next_epoch_delegation#$2_validator_ValidatorMetadata($t13);

    // $t15 := +($t14, $t1) on_abort goto L3 with $t5 at ./sources/governance/validator.move:180:83+1
    call $t15 := $AddU64($t14, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7452,7453)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(28,9):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t16 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:180:9+13
    $t16 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t17 := borrow_field<validator::ValidatorMetadata>.next_epoch_delegation($t16) at ./sources/governance/validator.move:180:9+35
    $t17 := $ChildMutation($t16, 6, $next_epoch_delegation#$2_validator_ValidatorMetadata($Dereference($t16)));

    // write_ref($t17, $t15) at ./sources/governance/validator.move:180:9+91
    $t17 := $UpdateMutation($t17, $t15);

    // write_back[Reference($t16).next_epoch_delegation (u64)]($t17) at ./sources/governance/validator.move:180:9+91
    $t16 := $UpdateMutation($t16, $Update'$2_validator_ValidatorMetadata'_next_epoch_delegation($Dereference($t16), $Dereference($t17)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t16) at ./sources/governance/validator.move:180:9+91
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t16)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:180:9+91
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[self]($t0) at ./sources/governance/validator.move:180:100+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,9,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // label L2 at ./sources/governance/validator.move:181:5+1
    assume {:print "$at(58,7475,7476)"} true;
L2:

    // return () at ./sources/governance/validator.move:181:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/governance/validator.move:181:5+1
L3:

    // abort($t5) at ./sources/governance/validator.move:181:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator::request_add_stake [baseline] at ./sources/governance/validator.move:130:5+506
procedure {:inline 1} $2_validator_request_add_stake(_$t0: $Mutation ($2_validator_Validator), _$t1: $2_balance_Balance'$2_sui_SUI', _$t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_Validator), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $2_validator_ValidatorMetadata;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (int);
    var $t15: $2_validator_ValidatorMetadata;
    var $t16: int;
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:130:5+1
    assume {:print "$at(58,4903,4904)"} true;
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[new_stake]($t1) at ./sources/governance/validator.move:130:5+1
    assume {:print "$track_local(28,10,1):", $t1} $t1 == $t1;

    // trace_local[coin_locked_until_epoch]($t2) at ./sources/governance/validator.move:130:5+1
    assume {:print "$track_local(28,10,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/validator.move:130:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(28,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := balance::value<sui::SUI>($t1) on_abort goto L2 with $t6 at ./sources/governance/validator.move:136:31+26
    assume {:print "$at(58,5127,5153)"} true;
    call $t5 := $2_balance_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(58,5127,5153)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[new_stake_value]($t5) at ./sources/governance/validator.move:136:13+15
    assume {:print "$track_local(28,10,4):", $t5} $t5 == $t5;

    // $t7 := get_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:137:30+18
    assume {:print "$at(58,5184,5202)"} true;
    $t7 := $pending_stake#$2_validator_Validator($Dereference($t0));

    // $t8 := +($t7, $t5) on_abort goto L2 with $t6 at ./sources/governance/validator.move:137:49+1
    call $t8 := $AddU64($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(58,5203,5204)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:137:9+18
    $t9 := $ChildMutation($t0, 3, $pending_stake#$2_validator_Validator($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator.move:137:9+57
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).pending_stake (u64)]($t9) at ./sources/governance/validator.move:137:9+57
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_stake($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:137:9+57
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t10 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:138:42+13
    assume {:print "$at(58,5263,5276)"} true;
    $t10 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t11 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t10) at ./sources/governance/validator.move:138:42+30
    $t11 := $next_epoch_stake#$2_validator_ValidatorMetadata($t10);

    // $t12 := +($t11, $t5) on_abort goto L2 with $t6 at ./sources/governance/validator.move:138:73+1
    call $t12 := $AddU64($t11, $t5);
    if ($abort_flag) {
        assume {:print "$at(58,5294,5295)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t13 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:138:9+13
    $t13 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t14 := borrow_field<validator::ValidatorMetadata>.next_epoch_stake($t13) at ./sources/governance/validator.move:138:9+30
    $t14 := $ChildMutation($t13, 5, $next_epoch_stake#$2_validator_ValidatorMetadata($Dereference($t13)));

    // write_ref($t14, $t12) at ./sources/governance/validator.move:138:9+81
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t13).next_epoch_stake (u64)]($t14) at ./sources/governance/validator.move:138:9+81
    $t13 := $UpdateMutation($t13, $Update'$2_validator_ValidatorMetadata'_next_epoch_stake($Dereference($t13), $Dereference($t14)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t13) at ./sources/governance/validator.move:138:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:138:9+81
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t15 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:139:34+13
    assume {:print "$at(58,5346,5359)"} true;
    $t15 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t16 := get_field<validator::ValidatorMetadata>.sui_address($t15) at ./sources/governance/validator.move:139:34+25
    $t16 := $sui_address#$2_validator_ValidatorMetadata($t15);

    // stake::create($t1, $t16, $t2, $t3) on_abort goto L2 with $t6 at ./sources/governance/validator.move:139:9+81
    call $t3 := $2_stake_create($t1, $t16, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(58,5321,5402)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/governance/validator.move:139:90+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[ctx]($t3) at ./sources/governance/validator.move:139:90+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(28,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator.move:140:5+1
    assume {:print "$at(58,5408,5409)"} true;
L1:

    // return () at ./sources/governance/validator.move:140:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/governance/validator.move:140:5+1
L2:

    // abort($t6) at ./sources/governance/validator.move:140:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator::request_add_stake [verification] at ./sources/governance/validator.move:130:5+506
procedure {:timeLimit 40} $2_validator_request_add_stake$verify(_$t0: $Mutation ($2_validator_Validator), _$t1: $2_balance_Balance'$2_sui_SUI', _$t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_Validator), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $2_validator_ValidatorMetadata;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (int);
    var $t15: $2_validator_ValidatorMetadata;
    var $t16: int;
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:130:5+1
    assume {:print "$at(58,4903,4904)"} true;
    assume $IsValid'$2_validator_Validator'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator.move:130:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t1);

    // assume And(WellFormed($t2), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t2)), 1)) at ./sources/governance/validator.move:130:5+1
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t2) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t2)) <= 1));

    // assume WellFormed($t3) at ./sources/governance/validator.move:130:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/validator.move:130:5+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[new_stake]($t1) at ./sources/governance/validator.move:130:5+1
    assume {:print "$track_local(28,10,1):", $t1} $t1 == $t1;

    // trace_local[coin_locked_until_epoch]($t2) at ./sources/governance/validator.move:130:5+1
    assume {:print "$track_local(28,10,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/validator.move:130:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(28,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := balance::value<sui::SUI>($t1) on_abort goto L2 with $t6 at ./sources/governance/validator.move:136:31+26
    assume {:print "$at(58,5127,5153)"} true;
    call $t5 := $2_balance_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(58,5127,5153)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[new_stake_value]($t5) at ./sources/governance/validator.move:136:13+15
    assume {:print "$track_local(28,10,4):", $t5} $t5 == $t5;

    // $t7 := get_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:137:30+18
    assume {:print "$at(58,5184,5202)"} true;
    $t7 := $pending_stake#$2_validator_Validator($Dereference($t0));

    // $t8 := +($t7, $t5) on_abort goto L2 with $t6 at ./sources/governance/validator.move:137:49+1
    call $t8 := $AddU64($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(58,5203,5204)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_field<validator::Validator>.pending_stake($t0) at ./sources/governance/validator.move:137:9+18
    $t9 := $ChildMutation($t0, 3, $pending_stake#$2_validator_Validator($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator.move:137:9+57
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).pending_stake (u64)]($t9) at ./sources/governance/validator.move:137:9+57
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_stake($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:137:9+57
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t10 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:138:42+13
    assume {:print "$at(58,5263,5276)"} true;
    $t10 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t11 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t10) at ./sources/governance/validator.move:138:42+30
    $t11 := $next_epoch_stake#$2_validator_ValidatorMetadata($t10);

    // $t12 := +($t11, $t5) on_abort goto L2 with $t6 at ./sources/governance/validator.move:138:73+1
    call $t12 := $AddU64($t11, $t5);
    if ($abort_flag) {
        assume {:print "$at(58,5294,5295)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t13 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:138:9+13
    $t13 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t14 := borrow_field<validator::ValidatorMetadata>.next_epoch_stake($t13) at ./sources/governance/validator.move:138:9+30
    $t14 := $ChildMutation($t13, 5, $next_epoch_stake#$2_validator_ValidatorMetadata($Dereference($t13)));

    // write_ref($t14, $t12) at ./sources/governance/validator.move:138:9+81
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t13).next_epoch_stake (u64)]($t14) at ./sources/governance/validator.move:138:9+81
    $t13 := $UpdateMutation($t13, $Update'$2_validator_ValidatorMetadata'_next_epoch_stake($Dereference($t13), $Dereference($t14)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t13) at ./sources/governance/validator.move:138:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:138:9+81
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t15 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:139:34+13
    assume {:print "$at(58,5346,5359)"} true;
    $t15 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t16 := get_field<validator::ValidatorMetadata>.sui_address($t15) at ./sources/governance/validator.move:139:34+25
    $t16 := $sui_address#$2_validator_ValidatorMetadata($t15);

    // stake::create($t1, $t16, $t2, $t3) on_abort goto L2 with $t6 at ./sources/governance/validator.move:139:9+81
    call $t3 := $2_stake_create($t1, $t16, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(58,5321,5402)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(28,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/governance/validator.move:139:90+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[ctx]($t3) at ./sources/governance/validator.move:139:90+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(28,10,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator.move:140:5+1
    assume {:print "$at(58,5408,5409)"} true;
L1:

    // return () at ./sources/governance/validator.move:140:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/governance/validator.move:140:5+1
L2:

    // abort($t6) at ./sources/governance/validator.move:140:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator::request_remove_delegation [baseline] at ./sources/governance/validator.move:183:5+383
procedure {:inline 1} $2_validator_request_remove_delegation(_$t0: $Mutation ($2_validator_Validator), _$t1: int) returns ($ret0: $Mutation ($2_validator_Validator))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (int);
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $2_validator_ValidatorMetadata;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (int);
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:183:5+1
    assume {:print "$at(58,7482,7483)"} true;
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[delegate_amount]($t1) at ./sources/governance/validator.move:183:5+1
    assume {:print "$track_local(28,11,1):", $t1} $t1 == $t1;

    // $t2 := get_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:184:44+32
    assume {:print "$at(58,7616,7648)"} true;
    $t2 := $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0));

    // $t3 := +($t2, $t1) on_abort goto L2 with $t4 at ./sources/governance/validator.move:184:77+1
    call $t3 := $AddU64($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7649,7650)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:184:9+32
    $t5 := $ChildMutation($t0, 6, $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t5, $t3) at ./sources/governance/validator.move:184:9+85
    $t5 := $UpdateMutation($t5, $t3);

    // write_back[Reference($t0).pending_delegation_withdraw (u64)]($t5) at ./sources/governance/validator.move:184:9+85
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation_withdraw($Dereference($t0), $Dereference($t5)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:184:9+85
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t6 := get_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:185:49+37
    assume {:print "$at(58,7716,7753)"} true;
    $t6 := $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0));

    // $t7 := 1 at ./sources/governance/validator.move:185:89+1
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := +($t6, $t7) on_abort goto L2 with $t4 at ./sources/governance/validator.move:185:87+1
    call $t8 := $AddU64($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(58,7754,7755)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t9 := borrow_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:185:9+37
    $t9 := $ChildMutation($t0, 9, $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator.move:185:9+81
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).pending_delegator_withdraw_count (u64)]($t9) at ./sources/governance/validator.move:185:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_withdraw_count($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:185:9+81
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t10 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:186:47+13
    assume {:print "$at(58,7805,7818)"} true;
    $t10 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t11 := get_field<validator::ValidatorMetadata>.next_epoch_delegation($t10) at ./sources/governance/validator.move:186:47+35
    $t11 := $next_epoch_delegation#$2_validator_ValidatorMetadata($t10);

    // $t12 := -($t11, $t1) on_abort goto L2 with $t4 at ./sources/governance/validator.move:186:83+1
    call $t12 := $Sub($t11, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7841,7842)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t13 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:186:9+13
    $t13 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t14 := borrow_field<validator::ValidatorMetadata>.next_epoch_delegation($t13) at ./sources/governance/validator.move:186:9+35
    $t14 := $ChildMutation($t13, 6, $next_epoch_delegation#$2_validator_ValidatorMetadata($Dereference($t13)));

    // write_ref($t14, $t12) at ./sources/governance/validator.move:186:9+91
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t13).next_epoch_delegation (u64)]($t14) at ./sources/governance/validator.move:186:9+91
    $t13 := $UpdateMutation($t13, $Update'$2_validator_ValidatorMetadata'_next_epoch_delegation($Dereference($t13), $Dereference($t14)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t13) at ./sources/governance/validator.move:186:9+91
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:186:9+91
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[self]($t0) at ./sources/governance/validator.move:186:100+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // label L1 at ./sources/governance/validator.move:187:5+1
    assume {:print "$at(58,7864,7865)"} true;
L1:

    // return () at ./sources/governance/validator.move:187:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/governance/validator.move:187:5+1
L2:

    // abort($t4) at ./sources/governance/validator.move:187:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator::request_remove_delegation [verification] at ./sources/governance/validator.move:183:5+383
procedure {:timeLimit 40} $2_validator_request_remove_delegation$verify(_$t0: $Mutation ($2_validator_Validator), _$t1: int) returns ($ret0: $Mutation ($2_validator_Validator))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (int);
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: $2_validator_ValidatorMetadata;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (int);
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:183:5+1
    assume {:print "$at(58,7482,7483)"} true;
    assume $IsValid'$2_validator_Validator'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator.move:183:5+1
    assume $IsValid'u64'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator.move:183:5+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[delegate_amount]($t1) at ./sources/governance/validator.move:183:5+1
    assume {:print "$track_local(28,11,1):", $t1} $t1 == $t1;

    // $t2 := get_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:184:44+32
    assume {:print "$at(58,7616,7648)"} true;
    $t2 := $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0));

    // $t3 := +($t2, $t1) on_abort goto L2 with $t4 at ./sources/governance/validator.move:184:77+1
    call $t3 := $AddU64($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7649,7650)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := borrow_field<validator::Validator>.pending_delegation_withdraw($t0) at ./sources/governance/validator.move:184:9+32
    $t5 := $ChildMutation($t0, 6, $pending_delegation_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t5, $t3) at ./sources/governance/validator.move:184:9+85
    $t5 := $UpdateMutation($t5, $t3);

    // write_back[Reference($t0).pending_delegation_withdraw (u64)]($t5) at ./sources/governance/validator.move:184:9+85
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegation_withdraw($Dereference($t0), $Dereference($t5)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:184:9+85
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t6 := get_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:185:49+37
    assume {:print "$at(58,7716,7753)"} true;
    $t6 := $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0));

    // $t7 := 1 at ./sources/governance/validator.move:185:89+1
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := +($t6, $t7) on_abort goto L2 with $t4 at ./sources/governance/validator.move:185:87+1
    call $t8 := $AddU64($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(58,7754,7755)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t9 := borrow_field<validator::Validator>.pending_delegator_withdraw_count($t0) at ./sources/governance/validator.move:185:9+37
    $t9 := $ChildMutation($t0, 9, $pending_delegator_withdraw_count#$2_validator_Validator($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator.move:185:9+81
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).pending_delegator_withdraw_count (u64)]($t9) at ./sources/governance/validator.move:185:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_delegator_withdraw_count($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:185:9+81
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t10 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:186:47+13
    assume {:print "$at(58,7805,7818)"} true;
    $t10 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t11 := get_field<validator::ValidatorMetadata>.next_epoch_delegation($t10) at ./sources/governance/validator.move:186:47+35
    $t11 := $next_epoch_delegation#$2_validator_ValidatorMetadata($t10);

    // $t12 := -($t11, $t1) on_abort goto L2 with $t4 at ./sources/governance/validator.move:186:83+1
    call $t12 := $Sub($t11, $t1);
    if ($abort_flag) {
        assume {:print "$at(58,7841,7842)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(28,11):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t13 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:186:9+13
    $t13 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t14 := borrow_field<validator::ValidatorMetadata>.next_epoch_delegation($t13) at ./sources/governance/validator.move:186:9+35
    $t14 := $ChildMutation($t13, 6, $next_epoch_delegation#$2_validator_ValidatorMetadata($Dereference($t13)));

    // write_ref($t14, $t12) at ./sources/governance/validator.move:186:9+91
    $t14 := $UpdateMutation($t14, $t12);

    // write_back[Reference($t13).next_epoch_delegation (u64)]($t14) at ./sources/governance/validator.move:186:9+91
    $t13 := $UpdateMutation($t13, $Update'$2_validator_ValidatorMetadata'_next_epoch_delegation($Dereference($t13), $Dereference($t14)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t13) at ./sources/governance/validator.move:186:9+91
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:186:9+91
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[self]($t0) at ./sources/governance/validator.move:186:100+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,11,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // label L1 at ./sources/governance/validator.move:187:5+1
    assume {:print "$at(58,7864,7865)"} true;
L1:

    // return () at ./sources/governance/validator.move:187:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/governance/validator.move:187:5+1
L2:

    // abort($t4) at ./sources/governance/validator.move:187:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator::request_withdraw_stake [baseline] at ./sources/governance/validator.move:146:5+523
procedure {:inline 1} $2_validator_request_withdraw_stake(_$t0: $Mutation ($2_validator_Validator), _$t1: $Mutation ($2_stake_Stake), _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_Validator), $ret1: $Mutation ($2_stake_Stake), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $2_validator_ValidatorMetadata;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation (int);
    var $t14: $2_validator_ValidatorMetadata;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($2_validator_ValidatorMetadata);
    var $t18: $Mutation (int);
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: $Mutation ($2_stake_Stake);
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:146:5+1
    assume {:print "$at(58,5728,5729)"} true;
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[stake]($t1) at ./sources/governance/validator.move:146:5+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(28,12,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[withdraw_amount]($t2) at ./sources/governance/validator.move:146:5+1
    assume {:print "$track_local(28,12,2):", $t2} $t2 == $t2;

    // trace_local[min_validator_stake]($t3) at ./sources/governance/validator.move:146:5+1
    assume {:print "$track_local(28,12,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/validator.move:146:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(28,12,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:153:17+13
    assume {:print "$at(58,5945,5958)"} true;
    $t5 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t6 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t5) at ./sources/governance/validator.move:153:17+30
    $t6 := $next_epoch_stake#$2_validator_ValidatorMetadata($t5);

    // $t7 := +($t2, $t3) on_abort goto L3 with $t8 at ./sources/governance/validator.move:153:67+1
    call $t7 := $AddU64($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(58,5995,5996)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t9 := >=($t6, $t7) at ./sources/governance/validator.move:153:48+2
    call $t9 := $Ge($t6, $t7);

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator.move:153:9+83
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator.move:153:9+83
L1:

    // destroy($t1) at ./sources/governance/validator.move:153:9+83

    // destroy($t0) at ./sources/governance/validator.move:153:9+83

    // destroy($t4) at ./sources/governance/validator.move:153:9+83

    // $t10 := 0 at ./sources/governance/validator.move:153:90+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator.move:153:9+83
    assume {:print "$at(58,5937,6020)"} true;
    assume {:print "$track_abort(28,12):", $t10} $t10 == $t10;

    // $t8 := move($t10) at ./sources/governance/validator.move:153:9+83
    $t8 := $t10;

    // goto L3 at ./sources/governance/validator.move:153:9+83
    goto L3;

    // label L0 at ./sources/governance/validator.move:154:33+4
    assume {:print "$at(58,6054,6058)"} true;
L0:

    // $t11 := get_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:154:33+21
    $t11 := $pending_withdraw#$2_validator_Validator($Dereference($t0));

    // $t12 := +($t11, $t2) on_abort goto L3 with $t8 at ./sources/governance/validator.move:154:55+1
    call $t12 := $AddU64($t11, $t2);
    if ($abort_flag) {
        assume {:print "$at(58,6076,6077)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t13 := borrow_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:154:9+21
    $t13 := $ChildMutation($t0, 4, $pending_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t13, $t12) at ./sources/governance/validator.move:154:9+63
    $t13 := $UpdateMutation($t13, $t12);

    // write_back[Reference($t0).pending_withdraw (u64)]($t13) at ./sources/governance/validator.move:154:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_withdraw($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:154:9+63
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t14 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:155:42+13
    assume {:print "$at(58,6136,6149)"} true;
    $t14 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t15 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t14) at ./sources/governance/validator.move:155:42+30
    $t15 := $next_epoch_stake#$2_validator_ValidatorMetadata($t14);

    // $t16 := -($t15, $t2) on_abort goto L3 with $t8 at ./sources/governance/validator.move:155:73+1
    call $t16 := $Sub($t15, $t2);
    if ($abort_flag) {
        assume {:print "$at(58,6167,6168)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t17 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:155:9+13
    $t17 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t18 := borrow_field<validator::ValidatorMetadata>.next_epoch_stake($t17) at ./sources/governance/validator.move:155:9+30
    $t18 := $ChildMutation($t17, 5, $next_epoch_stake#$2_validator_ValidatorMetadata($Dereference($t17)));

    // write_ref($t18, $t16) at ./sources/governance/validator.move:155:9+81
    $t18 := $UpdateMutation($t18, $t16);

    // write_back[Reference($t17).next_epoch_stake (u64)]($t18) at ./sources/governance/validator.move:155:9+81
    $t17 := $UpdateMutation($t17, $Update'$2_validator_ValidatorMetadata'_next_epoch_stake($Dereference($t17), $Dereference($t18)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t17) at ./sources/governance/validator.move:155:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t17)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:155:9+81
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // stake::withdraw_stake($t1, $t2, $t4) on_abort goto L3 with $t8 at ./sources/governance/validator.move:156:9+50
    assume {:print "$at(58,6194,6244)"} true;
    call $t1,$t4 := $2_stake_withdraw_stake($t1, $t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(58,6194,6244)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_local[self]($t0) at ./sources/governance/validator.move:156:59+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[stake]($t1) at ./sources/governance/validator.move:156:59+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(28,12,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t4) at ./sources/governance/validator.move:156:59+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(28,12,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L2 at ./sources/governance/validator.move:157:5+1
    assume {:print "$at(58,6250,6251)"} true;
L2:

    // return () at ./sources/governance/validator.move:157:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t4;
    return;

    // label L3 at ./sources/governance/validator.move:157:5+1
L3:

    // abort($t8) at ./sources/governance/validator.move:157:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun validator::request_withdraw_stake [verification] at ./sources/governance/validator.move:146:5+523
procedure {:timeLimit 40} $2_validator_request_withdraw_stake$verify(_$t0: $Mutation ($2_validator_Validator), _$t1: $Mutation ($2_stake_Stake), _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_Validator), $ret1: $Mutation ($2_stake_Stake), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $2_validator_ValidatorMetadata;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation (int);
    var $t14: $2_validator_ValidatorMetadata;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation ($2_validator_ValidatorMetadata);
    var $t18: $Mutation (int);
    var $t0: $Mutation ($2_validator_Validator);
    var $t1: $Mutation ($2_stake_Stake);
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:146:5+1
    assume {:print "$at(58,5728,5729)"} true;
    assume $IsValid'$2_validator_Validator'($Dereference($t0));

    // assume And(WellFormed($t1), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select stake::Stake.locked_until_epoch($t1))), 1)) at ./sources/governance/validator.move:146:5+1
    assume ($IsValid'$2_stake_Stake'($Dereference($t1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_stake_Stake($Dereference($t1)))) <= 1));

    // assume WellFormed($t2) at ./sources/governance/validator.move:146:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/governance/validator.move:146:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/governance/validator.move:146:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[self]($t0) at ./sources/governance/validator.move:146:5+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[stake]($t1) at ./sources/governance/validator.move:146:5+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(28,12,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[withdraw_amount]($t2) at ./sources/governance/validator.move:146:5+1
    assume {:print "$track_local(28,12,2):", $t2} $t2 == $t2;

    // trace_local[min_validator_stake]($t3) at ./sources/governance/validator.move:146:5+1
    assume {:print "$track_local(28,12,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/validator.move:146:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(28,12,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t5 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:153:17+13
    assume {:print "$at(58,5945,5958)"} true;
    $t5 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t6 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t5) at ./sources/governance/validator.move:153:17+30
    $t6 := $next_epoch_stake#$2_validator_ValidatorMetadata($t5);

    // $t7 := +($t2, $t3) on_abort goto L3 with $t8 at ./sources/governance/validator.move:153:67+1
    call $t7 := $AddU64($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(58,5995,5996)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t9 := >=($t6, $t7) at ./sources/governance/validator.move:153:48+2
    call $t9 := $Ge($t6, $t7);

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator.move:153:9+83
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator.move:153:9+83
L1:

    // destroy($t1) at ./sources/governance/validator.move:153:9+83

    // destroy($t0) at ./sources/governance/validator.move:153:9+83

    // destroy($t4) at ./sources/governance/validator.move:153:9+83

    // $t10 := 0 at ./sources/governance/validator.move:153:90+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator.move:153:9+83
    assume {:print "$at(58,5937,6020)"} true;
    assume {:print "$track_abort(28,12):", $t10} $t10 == $t10;

    // $t8 := move($t10) at ./sources/governance/validator.move:153:9+83
    $t8 := $t10;

    // goto L3 at ./sources/governance/validator.move:153:9+83
    goto L3;

    // label L0 at ./sources/governance/validator.move:154:33+4
    assume {:print "$at(58,6054,6058)"} true;
L0:

    // $t11 := get_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:154:33+21
    $t11 := $pending_withdraw#$2_validator_Validator($Dereference($t0));

    // $t12 := +($t11, $t2) on_abort goto L3 with $t8 at ./sources/governance/validator.move:154:55+1
    call $t12 := $AddU64($t11, $t2);
    if ($abort_flag) {
        assume {:print "$at(58,6076,6077)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t13 := borrow_field<validator::Validator>.pending_withdraw($t0) at ./sources/governance/validator.move:154:9+21
    $t13 := $ChildMutation($t0, 4, $pending_withdraw#$2_validator_Validator($Dereference($t0)));

    // write_ref($t13, $t12) at ./sources/governance/validator.move:154:9+63
    $t13 := $UpdateMutation($t13, $t12);

    // write_back[Reference($t0).pending_withdraw (u64)]($t13) at ./sources/governance/validator.move:154:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_pending_withdraw($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:154:9+63
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t14 := get_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:155:42+13
    assume {:print "$at(58,6136,6149)"} true;
    $t14 := $metadata#$2_validator_Validator($Dereference($t0));

    // $t15 := get_field<validator::ValidatorMetadata>.next_epoch_stake($t14) at ./sources/governance/validator.move:155:42+30
    $t15 := $next_epoch_stake#$2_validator_ValidatorMetadata($t14);

    // $t16 := -($t15, $t2) on_abort goto L3 with $t8 at ./sources/governance/validator.move:155:73+1
    call $t16 := $Sub($t15, $t2);
    if ($abort_flag) {
        assume {:print "$at(58,6167,6168)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t17 := borrow_field<validator::Validator>.metadata($t0) at ./sources/governance/validator.move:155:9+13
    $t17 := $ChildMutation($t0, 0, $metadata#$2_validator_Validator($Dereference($t0)));

    // $t18 := borrow_field<validator::ValidatorMetadata>.next_epoch_stake($t17) at ./sources/governance/validator.move:155:9+30
    $t18 := $ChildMutation($t17, 5, $next_epoch_stake#$2_validator_ValidatorMetadata($Dereference($t17)));

    // write_ref($t18, $t16) at ./sources/governance/validator.move:155:9+81
    $t18 := $UpdateMutation($t18, $t16);

    // write_back[Reference($t17).next_epoch_stake (u64)]($t18) at ./sources/governance/validator.move:155:9+81
    $t17 := $UpdateMutation($t17, $Update'$2_validator_ValidatorMetadata'_next_epoch_stake($Dereference($t17), $Dereference($t18)));

    // write_back[Reference($t0).metadata (validator::ValidatorMetadata)]($t17) at ./sources/governance/validator.move:155:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_Validator'_metadata($Dereference($t0), $Dereference($t17)));

    // trace_local[self]($t0) at ./sources/governance/validator.move:155:9+81
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // stake::withdraw_stake($t1, $t2, $t4) on_abort goto L3 with $t8 at ./sources/governance/validator.move:156:9+50
    assume {:print "$at(58,6194,6244)"} true;
    call $t1,$t4 := $2_stake_withdraw_stake($t1, $t2, $t4);
    if ($abort_flag) {
        assume {:print "$at(58,6194,6244)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(28,12):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_local[self]($t0) at ./sources/governance/validator.move:156:59+1
    $temp_0'$2_validator_Validator' := $Dereference($t0);
    assume {:print "$track_local(28,12,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[stake]($t1) at ./sources/governance/validator.move:156:59+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(28,12,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t4) at ./sources/governance/validator.move:156:59+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(28,12,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L2 at ./sources/governance/validator.move:157:5+1
    assume {:print "$at(58,6250,6251)"} true;
L2:

    // return () at ./sources/governance/validator.move:157:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t4;
    return;

    // label L3 at ./sources/governance/validator.move:157:5+1
L3:

    // abort($t8) at ./sources/governance/validator.move:157:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun validator::stake_amount [baseline] at ./sources/governance/validator.move:197:5+80
procedure {:inline 1} $2_validator_stake_amount(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator.move:197:5+1
    assume {:print "$at(58,8062,8063)"} true;
    assume {:print "$track_local(28,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:198:9+17
    assume {:print "$at(58,8119,8136)"} true;
    $t1 := $stake_amount#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:198:9+17
    assume {:print "$track_return(28,13,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:199:5+1
    assume {:print "$at(58,8141,8142)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:199:5+1
    $ret0 := $t1;
    return;

}

// fun validator::stake_amount [verification] at ./sources/governance/validator.move:197:5+80
procedure {:timeLimit 40} $2_validator_stake_amount$verify(_$t0: $2_validator_Validator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator.move:197:5+1
    assume {:print "$at(58,8062,8063)"} true;
    assume $IsValid'$2_validator_Validator'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator.move:197:5+1
    assume {:print "$track_local(28,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator::Validator>.stake_amount($t0) at ./sources/governance/validator.move:198:9+17
    assume {:print "$at(58,8119,8136)"} true;
    $t1 := $stake_amount#$2_validator_Validator($t0);

    // trace_return[0]($t1) at ./sources/governance/validator.move:198:9+17
    assume {:print "$track_return(28,13,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator.move:199:5+1
    assume {:print "$at(58,8141,8142)"} true;
L1:

    // return $t1 at ./sources/governance/validator.move:199:5+1
    $ret0 := $t1;
    return;

}

// struct validator_set::ValidatorSet at ./sources/governance/validator_set.move:21:5+1247
type {:datatype} $2_validator_set_ValidatorSet;
function {:constructor} $2_validator_set_ValidatorSet($total_validator_stake: int, $total_delegation_stake: int, $quorum_stake_threshold: int, $active_validators: Vec ($2_validator_Validator), $pending_validators: Vec ($2_validator_Validator), $pending_removals: Vec (int), $next_epoch_validators: Vec ($2_validator_ValidatorMetadata)): $2_validator_set_ValidatorSet;
function {:inline} $Update'$2_validator_set_ValidatorSet'_total_validator_stake(s: $2_validator_set_ValidatorSet, x: int): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet(x, $total_delegation_stake#$2_validator_set_ValidatorSet(s), $quorum_stake_threshold#$2_validator_set_ValidatorSet(s), $active_validators#$2_validator_set_ValidatorSet(s), $pending_validators#$2_validator_set_ValidatorSet(s), $pending_removals#$2_validator_set_ValidatorSet(s), $next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $Update'$2_validator_set_ValidatorSet'_total_delegation_stake(s: $2_validator_set_ValidatorSet, x: int): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet($total_validator_stake#$2_validator_set_ValidatorSet(s), x, $quorum_stake_threshold#$2_validator_set_ValidatorSet(s), $active_validators#$2_validator_set_ValidatorSet(s), $pending_validators#$2_validator_set_ValidatorSet(s), $pending_removals#$2_validator_set_ValidatorSet(s), $next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $Update'$2_validator_set_ValidatorSet'_quorum_stake_threshold(s: $2_validator_set_ValidatorSet, x: int): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet($total_validator_stake#$2_validator_set_ValidatorSet(s), $total_delegation_stake#$2_validator_set_ValidatorSet(s), x, $active_validators#$2_validator_set_ValidatorSet(s), $pending_validators#$2_validator_set_ValidatorSet(s), $pending_removals#$2_validator_set_ValidatorSet(s), $next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $Update'$2_validator_set_ValidatorSet'_active_validators(s: $2_validator_set_ValidatorSet, x: Vec ($2_validator_Validator)): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet($total_validator_stake#$2_validator_set_ValidatorSet(s), $total_delegation_stake#$2_validator_set_ValidatorSet(s), $quorum_stake_threshold#$2_validator_set_ValidatorSet(s), x, $pending_validators#$2_validator_set_ValidatorSet(s), $pending_removals#$2_validator_set_ValidatorSet(s), $next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $Update'$2_validator_set_ValidatorSet'_pending_validators(s: $2_validator_set_ValidatorSet, x: Vec ($2_validator_Validator)): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet($total_validator_stake#$2_validator_set_ValidatorSet(s), $total_delegation_stake#$2_validator_set_ValidatorSet(s), $quorum_stake_threshold#$2_validator_set_ValidatorSet(s), $active_validators#$2_validator_set_ValidatorSet(s), x, $pending_removals#$2_validator_set_ValidatorSet(s), $next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $Update'$2_validator_set_ValidatorSet'_pending_removals(s: $2_validator_set_ValidatorSet, x: Vec (int)): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet($total_validator_stake#$2_validator_set_ValidatorSet(s), $total_delegation_stake#$2_validator_set_ValidatorSet(s), $quorum_stake_threshold#$2_validator_set_ValidatorSet(s), $active_validators#$2_validator_set_ValidatorSet(s), $pending_validators#$2_validator_set_ValidatorSet(s), x, $next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $Update'$2_validator_set_ValidatorSet'_next_epoch_validators(s: $2_validator_set_ValidatorSet, x: Vec ($2_validator_ValidatorMetadata)): $2_validator_set_ValidatorSet {
    $2_validator_set_ValidatorSet($total_validator_stake#$2_validator_set_ValidatorSet(s), $total_delegation_stake#$2_validator_set_ValidatorSet(s), $quorum_stake_threshold#$2_validator_set_ValidatorSet(s), $active_validators#$2_validator_set_ValidatorSet(s), $pending_validators#$2_validator_set_ValidatorSet(s), $pending_removals#$2_validator_set_ValidatorSet(s), x)
}
function $IsValid'$2_validator_set_ValidatorSet'(s: $2_validator_set_ValidatorSet): bool {
    $IsValid'u64'($total_validator_stake#$2_validator_set_ValidatorSet(s))
      && $IsValid'u64'($total_delegation_stake#$2_validator_set_ValidatorSet(s))
      && $IsValid'u64'($quorum_stake_threshold#$2_validator_set_ValidatorSet(s))
      && $IsValid'vec'$2_validator_Validator''($active_validators#$2_validator_set_ValidatorSet(s))
      && $IsValid'vec'$2_validator_Validator''($pending_validators#$2_validator_set_ValidatorSet(s))
      && $IsValid'vec'u64''($pending_removals#$2_validator_set_ValidatorSet(s))
      && $IsValid'vec'$2_validator_ValidatorMetadata''($next_epoch_validators#$2_validator_set_ValidatorSet(s))
}
function {:inline} $IsEqual'$2_validator_set_ValidatorSet'(s1: $2_validator_set_ValidatorSet, s2: $2_validator_set_ValidatorSet): bool {
    $IsEqual'u64'($total_validator_stake#$2_validator_set_ValidatorSet(s1), $total_validator_stake#$2_validator_set_ValidatorSet(s2))
    && $IsEqual'u64'($total_delegation_stake#$2_validator_set_ValidatorSet(s1), $total_delegation_stake#$2_validator_set_ValidatorSet(s2))
    && $IsEqual'u64'($quorum_stake_threshold#$2_validator_set_ValidatorSet(s1), $quorum_stake_threshold#$2_validator_set_ValidatorSet(s2))
    && $IsEqual'vec'$2_validator_Validator''($active_validators#$2_validator_set_ValidatorSet(s1), $active_validators#$2_validator_set_ValidatorSet(s2))
    && $IsEqual'vec'$2_validator_Validator''($pending_validators#$2_validator_set_ValidatorSet(s1), $pending_validators#$2_validator_set_ValidatorSet(s2))
    && $IsEqual'vec'u64''($pending_removals#$2_validator_set_ValidatorSet(s1), $pending_removals#$2_validator_set_ValidatorSet(s2))
    && $IsEqual'vec'$2_validator_ValidatorMetadata''($next_epoch_validators#$2_validator_set_ValidatorSet(s1), $next_epoch_validators#$2_validator_set_ValidatorSet(s2))}

// fun validator_set::new [baseline] at ./sources/governance/validator_set.move:50:5+708
procedure {:inline 1} $2_validator_set_new(_$t0: Vec ($2_validator_Validator)) returns ($ret0: $2_validator_set_ValidatorSet)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $2_validator_set_ValidatorSet;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: Vec ($2_validator_Validator);
    var $t10: Vec (int);
    var $t11: Vec ($2_validator_ValidatorMetadata);
    var $t12: $2_validator_set_ValidatorSet;
    var $t13: Vec ($2_validator_ValidatorMetadata);
    var $t14: $Mutation ($2_validator_set_ValidatorSet);
    var $t15: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t16: $2_validator_set_ValidatorSet;
    var $t0: Vec ($2_validator_Validator);
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t14));
    assume IsEmptyVec(p#$Mutation($t15));

    // bytecode translation starts here
    // trace_local[init_active_validators]($t0) at ./sources/governance/validator_set.move:50:5+1
    assume {:print "$at(31,1784,1785)"} true;
    assume {:print "$track_local(29,13,0):", $t0} $t0 == $t0;

    // ($t5, $t6, $t7) := validator_set::calculate_total_stake_and_quorum_threshold($t0) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:51:87+67
    assume {:print "$at(31,1952,2019)"} true;
    call $t5,$t6,$t7 := $2_validator_set_calculate_total_stake_and_quorum_threshold($t0);
    if ($abort_flag) {
        assume {:print "$at(31,1952,2019)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[quorum_stake_threshold]($t7) at ./sources/governance/validator_set.move:51:61+22
    assume {:print "$track_local(29,13,1):", $t7} $t7 == $t7;

    // trace_local[total_delegation_stake]($t6) at ./sources/governance/validator_set.move:51:37+22
    assume {:print "$track_local(29,13,2):", $t6} $t6 == $t6;

    // trace_local[total_validator_stake]($t5) at ./sources/governance/validator_set.move:51:14+21
    assume {:print "$track_local(29,13,3):", $t5} $t5 == $t5;

    // $t9 := vector::empty<validator::Validator>() on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:57:33+15
    assume {:print "$at(31,2255,2270)"} true;
    call $t9 := $1_vector_empty'$2_validator_Validator'();
    if ($abort_flag) {
        assume {:print "$at(31,2255,2270)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t10 := vector::empty<u64>() on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:58:31+15
    assume {:print "$at(31,2302,2317)"} true;
    call $t10 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(31,2302,2317)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := vector::empty<validator::ValidatorMetadata>() on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:59:36+15
    assume {:print "$at(31,2354,2369)"} true;
    call $t11 := $1_vector_empty'$2_validator_ValidatorMetadata'();
    if ($abort_flag) {
        assume {:print "$at(31,2354,2369)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t4 := pack validator_set::ValidatorSet($t5, $t6, $t7, $t0, $t9, $t10, $t11) at ./sources/governance/validator_set.move:52:26+334
    assume {:print "$at(31,2046,2380)"} true;
    $t4 := $2_validator_set_ValidatorSet($t5, $t6, $t7, $t0, $t9, $t10, $t11);

    // trace_local[validators]($t4) at ./sources/governance/validator_set.move:52:13+10
    assume {:print "$track_local(29,13,4):", $t4} $t4 == $t4;

    // $t12 := copy($t4) at ./sources/governance/validator_set.move:61:73+11
    assume {:print "$at(31,2454,2465)"} true;
    $t12 := $t4;

    // $t13 := validator_set::derive_next_epoch_validators($t12) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:61:44+41
    call $t13 := $2_validator_set_derive_next_epoch_validators($t12);
    if ($abort_flag) {
        assume {:print "$at(31,2425,2466)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t14 := borrow_local($t4) at ./sources/governance/validator_set.move:61:9+10
    $t14 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t15 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t14) at ./sources/governance/validator_set.move:61:9+32
    $t15 := $ChildMutation($t14, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t14)));

    // write_ref($t15, $t13) at ./sources/governance/validator_set.move:61:9+76
    $t15 := $UpdateMutation($t15, $t13);

    // write_back[Reference($t14).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t15) at ./sources/governance/validator_set.move:61:9+76
    $t14 := $UpdateMutation($t14, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t14), $Dereference($t15)));

    // write_back[LocalRoot($t4)@]($t14) at ./sources/governance/validator_set.move:61:9+76
    $t4 := $Dereference($t14);

    // trace_local[validators]($t4) at ./sources/governance/validator_set.move:61:9+76
    assume {:print "$track_local(29,13,4):", $t4} $t4 == $t4;

    // $t16 := move($t4) at ./sources/governance/validator_set.move:62:9+10
    assume {:print "$at(31,2476,2486)"} true;
    $t16 := $t4;

    // trace_return[0]($t16) at ./sources/governance/validator_set.move:62:9+10
    assume {:print "$track_return(29,13,0):", $t16} $t16 == $t16;

    // label L1 at ./sources/governance/validator_set.move:63:5+1
    assume {:print "$at(31,2491,2492)"} true;
L1:

    // return $t16 at ./sources/governance/validator_set.move:63:5+1
    $ret0 := $t16;
    return;

    // label L2 at ./sources/governance/validator_set.move:63:5+1
L2:

    // abort($t8) at ./sources/governance/validator_set.move:63:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun validator_set::new [verification] at ./sources/governance/validator_set.move:50:5+708
procedure {:timeLimit 40} $2_validator_set_new$verify(_$t0: Vec ($2_validator_Validator)) returns ($ret0: $2_validator_set_ValidatorSet)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $2_validator_set_ValidatorSet;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: Vec ($2_validator_Validator);
    var $t10: Vec (int);
    var $t11: Vec ($2_validator_ValidatorMetadata);
    var $t12: $2_validator_set_ValidatorSet;
    var $t13: Vec ($2_validator_ValidatorMetadata);
    var $t14: $Mutation ($2_validator_set_ValidatorSet);
    var $t15: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t16: $2_validator_set_ValidatorSet;
    var $t0: Vec ($2_validator_Validator);
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t14));
    assume IsEmptyVec(p#$Mutation($t15));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:50:5+1
    assume {:print "$at(31,1784,1785)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // trace_local[init_active_validators]($t0) at ./sources/governance/validator_set.move:50:5+1
    assume {:print "$track_local(29,13,0):", $t0} $t0 == $t0;

    // ($t5, $t6, $t7) := validator_set::calculate_total_stake_and_quorum_threshold($t0) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:51:87+67
    assume {:print "$at(31,1952,2019)"} true;
    call $t5,$t6,$t7 := $2_validator_set_calculate_total_stake_and_quorum_threshold($t0);
    if ($abort_flag) {
        assume {:print "$at(31,1952,2019)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[quorum_stake_threshold]($t7) at ./sources/governance/validator_set.move:51:61+22
    assume {:print "$track_local(29,13,1):", $t7} $t7 == $t7;

    // trace_local[total_delegation_stake]($t6) at ./sources/governance/validator_set.move:51:37+22
    assume {:print "$track_local(29,13,2):", $t6} $t6 == $t6;

    // trace_local[total_validator_stake]($t5) at ./sources/governance/validator_set.move:51:14+21
    assume {:print "$track_local(29,13,3):", $t5} $t5 == $t5;

    // $t9 := vector::empty<validator::Validator>() on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:57:33+15
    assume {:print "$at(31,2255,2270)"} true;
    call $t9 := $1_vector_empty'$2_validator_Validator'();
    if ($abort_flag) {
        assume {:print "$at(31,2255,2270)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t10 := vector::empty<u64>() on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:58:31+15
    assume {:print "$at(31,2302,2317)"} true;
    call $t10 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(31,2302,2317)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := vector::empty<validator::ValidatorMetadata>() on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:59:36+15
    assume {:print "$at(31,2354,2369)"} true;
    call $t11 := $1_vector_empty'$2_validator_ValidatorMetadata'();
    if ($abort_flag) {
        assume {:print "$at(31,2354,2369)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t4 := pack validator_set::ValidatorSet($t5, $t6, $t7, $t0, $t9, $t10, $t11) at ./sources/governance/validator_set.move:52:26+334
    assume {:print "$at(31,2046,2380)"} true;
    $t4 := $2_validator_set_ValidatorSet($t5, $t6, $t7, $t0, $t9, $t10, $t11);

    // trace_local[validators]($t4) at ./sources/governance/validator_set.move:52:13+10
    assume {:print "$track_local(29,13,4):", $t4} $t4 == $t4;

    // $t12 := copy($t4) at ./sources/governance/validator_set.move:61:73+11
    assume {:print "$at(31,2454,2465)"} true;
    $t12 := $t4;

    // $t13 := validator_set::derive_next_epoch_validators($t12) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:61:44+41
    call $t13 := $2_validator_set_derive_next_epoch_validators($t12);
    if ($abort_flag) {
        assume {:print "$at(31,2425,2466)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,13):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t14 := borrow_local($t4) at ./sources/governance/validator_set.move:61:9+10
    $t14 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t15 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t14) at ./sources/governance/validator_set.move:61:9+32
    $t15 := $ChildMutation($t14, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t14)));

    // write_ref($t15, $t13) at ./sources/governance/validator_set.move:61:9+76
    $t15 := $UpdateMutation($t15, $t13);

    // write_back[Reference($t14).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t15) at ./sources/governance/validator_set.move:61:9+76
    $t14 := $UpdateMutation($t14, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t14), $Dereference($t15)));

    // write_back[LocalRoot($t4)@]($t14) at ./sources/governance/validator_set.move:61:9+76
    $t4 := $Dereference($t14);

    // trace_local[validators]($t4) at ./sources/governance/validator_set.move:61:9+76
    assume {:print "$track_local(29,13,4):", $t4} $t4 == $t4;

    // $t16 := move($t4) at ./sources/governance/validator_set.move:62:9+10
    assume {:print "$at(31,2476,2486)"} true;
    $t16 := $t4;

    // trace_return[0]($t16) at ./sources/governance/validator_set.move:62:9+10
    assume {:print "$track_return(29,13,0):", $t16} $t16 == $t16;

    // label L1 at ./sources/governance/validator_set.move:63:5+1
    assume {:print "$at(31,2491,2492)"} true;
L1:

    // return $t16 at ./sources/governance/validator_set.move:63:5+1
    $ret0 := $t16;
    return;

    // label L2 at ./sources/governance/validator_set.move:63:5+1
L2:

    // abort($t8) at ./sources/governance/validator_set.move:63:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun validator_set::adjust_stake [baseline] at ./sources/governance/validator_set.move:373:5+301
procedure {:inline 1} $2_validator_set_adjust_stake(_$t0: $Mutation (Vec ($2_validator_Validator))) returns ($ret0: $Mutation (Vec ($2_validator_Validator)))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_validator_Validator);
    var $t4: Vec ($2_validator_Validator);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation ($2_validator_Validator);
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t11));

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:373:5+1
    assume {:print "$at(31,15484,15485)"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // $t4 := read_ref($t0) at ./sources/governance/validator_set.move:374:37+10
    assume {:print "$at(31,15575,15585)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vector::length<validator::Validator>($t4) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:374:22+26
    call $t5 := $1_vector_length'$2_validator_Validator'($t4);
    if ($abort_flag) {
        assume {:print "$at(31,15560,15586)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[length]($t5) at ./sources/governance/validator_set.move:374:13+6
    assume {:print "$track_local(29,0,2):", $t5} $t5 == $t5;

    // $t7 := 0 at ./sources/governance/validator_set.move:375:17+1
    assume {:print "$at(31,15604,15605)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:375:13+1
    assume {:print "$track_local(29,0,1):", $t7} $t7 == $t7;

    // label L3 at ./sources/governance/validator_set.move:376:16+1
    assume {:print "$at(31,15622,15623)"} true;
L3:

    // havoc[val]($t7) at ./sources/governance/validator_set.move:376:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:376:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:376:16+1
    havoc $t9;
    assume $IsValid'u64'($t9);

    // havoc[val]($t10) at ./sources/governance/validator_set.move:376:16+1
    havoc $t10;
    assume $IsValid'u64'($t10);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:376:16+1
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut_all]($t11) at ./sources/governance/validator_set.move:376:16+1
    havoc $t11;
    assume $IsValid'$2_validator_Validator'($Dereference($t11));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:376:16+1
    assume {:print "$info(): enter loop, variable(s) validators, i havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:376:16+1
    assume {:print "$track_local(29,0,1):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:376:16+1
    assume !$abort_flag;

    // $t8 := <($t7, $t5) at ./sources/governance/validator_set.move:376:18+1
    call $t8 := $Lt($t7, $t5);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator_set.move:376:9+164
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:377:48+10
    assume {:print "$at(31,15683,15693)"} true;
L0:

    // $t11 := vector::borrow_mut<validator::Validator>($t0, $t7) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:377:29+33
    call $t11,$t0 := $1_vector_borrow_mut'$2_validator_Validator'($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,15664,15697)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[validator]($t11) at ./sources/governance/validator_set.move:377:17+9
    $temp_0'$2_validator_Validator' := $Dereference($t11);
    assume {:print "$track_local(29,0,3):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::adjust_stake($t11) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:378:13+34
    assume {:print "$at(31,15711,15745)"} true;
    call $t11 := $2_validator_adjust_stake($t11);
    if ($abort_flag) {
        assume {:print "$at(31,15711,15745)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // write_back[Reference($t0)[]]($t11) at ./sources/governance/validator_set.move:378:13+34
    $t0 := $UpdateMutation($t0, UpdateVec($Dereference($t0), ReadVec(p#$Mutation($t11), LenVec(p#$Mutation($t0))), $Dereference($t11)));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:378:13+34
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // $t9 := 1 at ./sources/governance/validator_set.move:379:21+1
    assume {:print "$at(31,15767,15768)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t7, $t9) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:379:19+1
    call $t10 := $AddU64($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(31,15765,15766)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[i]($t10) at ./sources/governance/validator_set.move:379:13+1
    assume {:print "$track_local(29,0,1):", $t10} $t10 == $t10;

    // goto L4 at ./sources/governance/validator_set.move:379:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:376:9+164
    assume {:print "$at(31,15615,15779)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:376:9+164

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:376:9+164
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // goto L5 at ./sources/governance/validator_set.move:376:9+164
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:376:9+164
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:376:9+164
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:381:5+1
    assume {:print "$at(31,15784,15785)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:381:5+1
    $ret0 := $t0;
    return;

    // label L6 at ./sources/governance/validator_set.move:381:5+1
L6:

    // abort($t6) at ./sources/governance/validator_set.move:381:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::adjust_stake [verification] at ./sources/governance/validator_set.move:373:5+301
procedure {:timeLimit 40} $2_validator_set_adjust_stake$verify(_$t0: $Mutation (Vec ($2_validator_Validator))) returns ($ret0: $Mutation (Vec ($2_validator_Validator)))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $Mutation ($2_validator_Validator);
    var $t4: Vec ($2_validator_Validator);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation ($2_validator_Validator);
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t11));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:373:5+1
    assume {:print "$at(31,15484,15485)"} true;
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:373:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // $t4 := read_ref($t0) at ./sources/governance/validator_set.move:374:37+10
    assume {:print "$at(31,15575,15585)"} true;
    $t4 := $Dereference($t0);

    // $t5 := vector::length<validator::Validator>($t4) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:374:22+26
    call $t5 := $1_vector_length'$2_validator_Validator'($t4);
    if ($abort_flag) {
        assume {:print "$at(31,15560,15586)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[length]($t5) at ./sources/governance/validator_set.move:374:13+6
    assume {:print "$track_local(29,0,2):", $t5} $t5 == $t5;

    // $t7 := 0 at ./sources/governance/validator_set.move:375:17+1
    assume {:print "$at(31,15604,15605)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:375:13+1
    assume {:print "$track_local(29,0,1):", $t7} $t7 == $t7;

    // label L3 at ./sources/governance/validator_set.move:376:16+1
    assume {:print "$at(31,15622,15623)"} true;
L3:

    // havoc[val]($t7) at ./sources/governance/validator_set.move:376:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:376:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:376:16+1
    havoc $t9;
    assume $IsValid'u64'($t9);

    // havoc[val]($t10) at ./sources/governance/validator_set.move:376:16+1
    havoc $t10;
    assume $IsValid'u64'($t10);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:376:16+1
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut_all]($t11) at ./sources/governance/validator_set.move:376:16+1
    havoc $t11;
    assume $IsValid'$2_validator_Validator'($Dereference($t11));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:376:16+1
    assume {:print "$info(): enter loop, variable(s) validators, i havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:376:16+1
    assume {:print "$track_local(29,0,1):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:376:16+1
    assume !$abort_flag;

    // $t8 := <($t7, $t5) at ./sources/governance/validator_set.move:376:18+1
    call $t8 := $Lt($t7, $t5);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator_set.move:376:9+164
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:377:48+10
    assume {:print "$at(31,15683,15693)"} true;
L0:

    // $t11 := vector::borrow_mut<validator::Validator>($t0, $t7) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:377:29+33
    call $t11,$t0 := $1_vector_borrow_mut'$2_validator_Validator'($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,15664,15697)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[validator]($t11) at ./sources/governance/validator_set.move:377:17+9
    $temp_0'$2_validator_Validator' := $Dereference($t11);
    assume {:print "$track_local(29,0,3):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::adjust_stake($t11) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:378:13+34
    assume {:print "$at(31,15711,15745)"} true;
    call $t11 := $2_validator_adjust_stake($t11);
    if ($abort_flag) {
        assume {:print "$at(31,15711,15745)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // write_back[Reference($t0)[]]($t11) at ./sources/governance/validator_set.move:378:13+34
    $t0 := $UpdateMutation($t0, UpdateVec($Dereference($t0), ReadVec(p#$Mutation($t11), LenVec(p#$Mutation($t0))), $Dereference($t11)));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:378:13+34
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // $t9 := 1 at ./sources/governance/validator_set.move:379:21+1
    assume {:print "$at(31,15767,15768)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t7, $t9) on_abort goto L6 with $t6 at ./sources/governance/validator_set.move:379:19+1
    call $t10 := $AddU64($t7, $t9);
    if ($abort_flag) {
        assume {:print "$at(31,15765,15766)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,0):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[i]($t10) at ./sources/governance/validator_set.move:379:13+1
    assume {:print "$track_local(29,0,1):", $t10} $t10 == $t10;

    // goto L4 at ./sources/governance/validator_set.move:379:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:376:9+164
    assume {:print "$at(31,15615,15779)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:376:9+164

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:376:9+164
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,0,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // goto L5 at ./sources/governance/validator_set.move:376:9+164
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:376:9+164
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:376:9+164
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:381:5+1
    assume {:print "$at(31,15784,15785)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:381:5+1
    $ret0 := $t0;
    return;

    // label L6 at ./sources/governance/validator_set.move:381:5+1
L6:

    // abort($t6) at ./sources/governance/validator_set.move:381:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::request_add_delegation [baseline] at ./sources/governance/validator_set.move:141:5+390
procedure {:inline 1} $2_validator_set_request_add_delegation(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t3: $Mutation ($2_validator_Validator);
    var $t4: $Mutation (Vec ($2_validator_Validator));
    var $t5: $Mutation ($2_validator_Validator);
    var $t6: int;
    var $t7: $2_validator_set_ValidatorSet;
    var $t8: Vec ($2_validator_ValidatorMetadata);
    var $t9: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: int;
    var $t2: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t9));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:141:5+1
    assume {:print "$at(31,5987,5988)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:141:5+1
    assume {:print "$track_local(29,17,1):", $t1} $t1 == $t1;

    // trace_local[delegate_amount]($t2) at ./sources/governance/validator_set.move:141:5+1
    assume {:print "$track_local(29,17,2):", $t2} $t2 == $t2;

    // $t4 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:146:43+27
    assume {:print "$at(31,6179,6206)"} true;
    $t4 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t5 := validator_set::get_validator_mut($t4, $t1) on_abort goto L2 with $t6 at ./sources/governance/validator_set.move:146:25+65
    call $t5,$t4 := $2_validator_set_get_validator_mut($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,6161,6226)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[validator]($t5) at ./sources/governance/validator_set.move:146:13+9
    $temp_0'$2_validator_Validator' := $Dereference($t5);
    assume {:print "$track_local(29,17,3):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_add_delegation($t5, $t2) on_abort goto L2 with $t6 at ./sources/governance/validator_set.move:147:9+61
    assume {:print "$at(31,6236,6297)"} true;
    call $t5 := $2_validator_request_add_delegation($t5, $t2);
    if ($abort_flag) {
        assume {:print "$at(31,6236,6297)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t4)[]]($t5) at ./sources/governance/validator_set.move:147:9+61
    $t4 := $UpdateMutation($t4, UpdateVec($Dereference($t4), ReadVec(p#$Mutation($t5), LenVec(p#$Mutation($t4))), $Dereference($t5)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t4) at ./sources/governance/validator_set.move:147:9+61
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t4)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:147:9+61
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t7 := read_ref($t0) at ./sources/governance/validator_set.move:148:67+4
    assume {:print "$at(31,6365,6369)"} true;
    $t7 := $Dereference($t0);

    // $t8 := validator_set::derive_next_epoch_validators($t7) on_abort goto L2 with $t6 at ./sources/governance/validator_set.move:148:38+34
    call $t8 := $2_validator_set_derive_next_epoch_validators($t7);
    if ($abort_flag) {
        assume {:print "$at(31,6336,6370)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:148:9+26
    $t9 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator_set.move:148:9+63
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t9) at ./sources/governance/validator_set.move:148:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:148:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:148:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L1 at ./sources/governance/validator_set.move:149:5+1
    assume {:print "$at(31,6376,6377)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:149:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/governance/validator_set.move:149:5+1
L2:

    // abort($t6) at ./sources/governance/validator_set.move:149:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::request_add_delegation [verification] at ./sources/governance/validator_set.move:141:5+390
procedure {:timeLimit 40} $2_validator_set_request_add_delegation$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t3: $Mutation ($2_validator_Validator);
    var $t4: $Mutation (Vec ($2_validator_Validator));
    var $t5: $Mutation ($2_validator_Validator);
    var $t6: int;
    var $t7: $2_validator_set_ValidatorSet;
    var $t8: Vec ($2_validator_ValidatorMetadata);
    var $t9: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: int;
    var $t2: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:141:5+1
    assume {:print "$at(31,5987,5988)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:141:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:141:5+1
    assume $IsValid'u64'($t2);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:141:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:141:5+1
    assume {:print "$track_local(29,17,1):", $t1} $t1 == $t1;

    // trace_local[delegate_amount]($t2) at ./sources/governance/validator_set.move:141:5+1
    assume {:print "$track_local(29,17,2):", $t2} $t2 == $t2;

    // $t4 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:146:43+27
    assume {:print "$at(31,6179,6206)"} true;
    $t4 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t5 := validator_set::get_validator_mut($t4, $t1) on_abort goto L2 with $t6 at ./sources/governance/validator_set.move:146:25+65
    call $t5,$t4 := $2_validator_set_get_validator_mut($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,6161,6226)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[validator]($t5) at ./sources/governance/validator_set.move:146:13+9
    $temp_0'$2_validator_Validator' := $Dereference($t5);
    assume {:print "$track_local(29,17,3):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_add_delegation($t5, $t2) on_abort goto L2 with $t6 at ./sources/governance/validator_set.move:147:9+61
    assume {:print "$at(31,6236,6297)"} true;
    call $t5 := $2_validator_request_add_delegation($t5, $t2);
    if ($abort_flag) {
        assume {:print "$at(31,6236,6297)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t4)[]]($t5) at ./sources/governance/validator_set.move:147:9+61
    $t4 := $UpdateMutation($t4, UpdateVec($Dereference($t4), ReadVec(p#$Mutation($t5), LenVec(p#$Mutation($t4))), $Dereference($t5)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t4) at ./sources/governance/validator_set.move:147:9+61
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t4)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:147:9+61
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t7 := read_ref($t0) at ./sources/governance/validator_set.move:148:67+4
    assume {:print "$at(31,6365,6369)"} true;
    $t7 := $Dereference($t0);

    // $t8 := validator_set::derive_next_epoch_validators($t7) on_abort goto L2 with $t6 at ./sources/governance/validator_set.move:148:38+34
    call $t8 := $2_validator_set_derive_next_epoch_validators($t7);
    if ($abort_flag) {
        assume {:print "$at(31,6336,6370)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,17):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t9 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:148:9+26
    $t9 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t9, $t8) at ./sources/governance/validator_set.move:148:9+63
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t9) at ./sources/governance/validator_set.move:148:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:148:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:148:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,17,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L1 at ./sources/governance/validator_set.move:149:5+1
    assume {:print "$at(31,6376,6377)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:149:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/governance/validator_set.move:149:5+1
L2:

    // abort($t6) at ./sources/governance/validator_set.move:149:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::request_add_stake [baseline] at ./sources/governance/validator_set.move:106:5+513
procedure {:inline 1} $2_validator_set_request_add_stake(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $2_balance_Balance'$2_sui_SUI', _$t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $Mutation ($2_validator_Validator);
    var $t5: int;
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (Vec ($2_validator_Validator));
    var $t10: $Mutation ($2_validator_Validator);
    var $t11: $2_validator_set_ValidatorSet;
    var $t12: Vec ($2_validator_ValidatorMetadata);
    var $t13: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:106:5+1
    assume {:print "$at(31,4460,4461)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[new_stake]($t1) at ./sources/governance/validator_set.move:106:5+1
    assume {:print "$track_local(29,18,1):", $t1} $t1 == $t1;

    // trace_local[coin_locked_until_epoch]($t2) at ./sources/governance/validator_set.move:106:5+1
    assume {:print "$track_local(29,18,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:106:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,18,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t3) at ./sources/governance/validator_set.move:112:52+3
    assume {:print "$at(31,4708,4711)"} true;
    $t6 := $Dereference($t3);

    // $t7 := tx_context::sender($t6) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:112:33+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(31,4689,4712)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[validator_address]($t7) at ./sources/governance/validator_set.move:112:13+17
    assume {:print "$track_local(29,18,5):", $t7} $t7 == $t7;

    // $t9 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:113:43+27
    assume {:print "$at(31,4756,4783)"} true;
    $t9 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t10 := validator_set::get_validator_mut($t9, $t7) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:113:25+65
    call $t10,$t9 := $2_validator_set_get_validator_mut($t9, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,4738,4803)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[validator]($t10) at ./sources/governance/validator_set.move:113:13+9
    $temp_0'$2_validator_Validator' := $Dereference($t10);
    assume {:print "$track_local(29,18,4):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_add_stake($t10, $t1, $t2, $t3) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:114:9+80
    assume {:print "$at(31,4813,4893)"} true;
    call $t10,$t3 := $2_validator_request_add_stake($t10, $t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(31,4813,4893)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // write_back[Reference($t9)[]]($t10) at ./sources/governance/validator_set.move:114:9+80
    $t9 := $UpdateMutation($t9, UpdateVec($Dereference($t9), ReadVec(p#$Mutation($t10), LenVec(p#$Mutation($t9))), $Dereference($t10)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t9) at ./sources/governance/validator_set.move:114:9+80
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:114:9+80
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t11 := read_ref($t0) at ./sources/governance/validator_set.move:115:67+4
    assume {:print "$at(31,4961,4965)"} true;
    $t11 := $Dereference($t0);

    // $t12 := validator_set::derive_next_epoch_validators($t11) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:115:38+34
    call $t12 := $2_validator_set_derive_next_epoch_validators($t11);
    if ($abort_flag) {
        assume {:print "$at(31,4932,4966)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t13 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:115:9+26
    $t13 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t13, $t12) at ./sources/governance/validator_set.move:115:9+63
    $t13 := $UpdateMutation($t13, $t12);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t13) at ./sources/governance/validator_set.move:115:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:115:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:115:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:115:72+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,18,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator_set.move:116:5+1
    assume {:print "$at(31,4972,4973)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:116:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/governance/validator_set.move:116:5+1
L2:

    // abort($t8) at ./sources/governance/validator_set.move:116:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun validator_set::request_add_stake [verification] at ./sources/governance/validator_set.move:106:5+513
procedure {:timeLimit 40} $2_validator_set_request_add_stake$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $2_balance_Balance'$2_sui_SUI', _$t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock', _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $Mutation ($2_validator_Validator);
    var $t5: int;
    var $t6: $2_tx_context_TxContext;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (Vec ($2_validator_Validator));
    var $t10: $Mutation ($2_validator_Validator);
    var $t11: $2_validator_set_ValidatorSet;
    var $t12: Vec ($2_validator_ValidatorMetadata);
    var $t13: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $2_balance_Balance'$2_sui_SUI';
    var $t2: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$1_option_Option'$2_epoch_time_lock_EpochTimeLock'': $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:106:5+1
    assume {:print "$at(31,4460,4461)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:106:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t1);

    // assume And(WellFormed($t2), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t2)), 1)) at ./sources/governance/validator_set.move:106:5+1
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t2) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t2)) <= 1));

    // assume WellFormed($t3) at ./sources/governance/validator_set.move:106:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:106:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[new_stake]($t1) at ./sources/governance/validator_set.move:106:5+1
    assume {:print "$track_local(29,18,1):", $t1} $t1 == $t1;

    // trace_local[coin_locked_until_epoch]($t2) at ./sources/governance/validator_set.move:106:5+1
    assume {:print "$track_local(29,18,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:106:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,18,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t3) at ./sources/governance/validator_set.move:112:52+3
    assume {:print "$at(31,4708,4711)"} true;
    $t6 := $Dereference($t3);

    // $t7 := tx_context::sender($t6) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:112:33+23
    call $t7 := $2_tx_context_sender($t6);
    if ($abort_flag) {
        assume {:print "$at(31,4689,4712)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[validator_address]($t7) at ./sources/governance/validator_set.move:112:13+17
    assume {:print "$track_local(29,18,5):", $t7} $t7 == $t7;

    // $t9 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:113:43+27
    assume {:print "$at(31,4756,4783)"} true;
    $t9 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t10 := validator_set::get_validator_mut($t9, $t7) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:113:25+65
    call $t10,$t9 := $2_validator_set_get_validator_mut($t9, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,4738,4803)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[validator]($t10) at ./sources/governance/validator_set.move:113:13+9
    $temp_0'$2_validator_Validator' := $Dereference($t10);
    assume {:print "$track_local(29,18,4):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_add_stake($t10, $t1, $t2, $t3) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:114:9+80
    assume {:print "$at(31,4813,4893)"} true;
    call $t10,$t3 := $2_validator_request_add_stake($t10, $t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(31,4813,4893)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // write_back[Reference($t9)[]]($t10) at ./sources/governance/validator_set.move:114:9+80
    $t9 := $UpdateMutation($t9, UpdateVec($Dereference($t9), ReadVec(p#$Mutation($t10), LenVec(p#$Mutation($t9))), $Dereference($t10)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t9) at ./sources/governance/validator_set.move:114:9+80
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t9)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:114:9+80
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t11 := read_ref($t0) at ./sources/governance/validator_set.move:115:67+4
    assume {:print "$at(31,4961,4965)"} true;
    $t11 := $Dereference($t0);

    // $t12 := validator_set::derive_next_epoch_validators($t11) on_abort goto L2 with $t8 at ./sources/governance/validator_set.move:115:38+34
    call $t12 := $2_validator_set_derive_next_epoch_validators($t11);
    if ($abort_flag) {
        assume {:print "$at(31,4932,4966)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t13 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:115:9+26
    $t13 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t13, $t12) at ./sources/governance/validator_set.move:115:9+63
    $t13 := $UpdateMutation($t13, $t12);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t13) at ./sources/governance/validator_set.move:115:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:115:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:115:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,18,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:115:72+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,18,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator_set.move:116:5+1
    assume {:print "$at(31,4972,4973)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:116:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/governance/validator_set.move:116:5+1
L2:

    // abort($t8) at ./sources/governance/validator_set.move:116:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun validator_set::request_remove_delegation [baseline] at ./sources/governance/validator_set.move:151:5+948
procedure {:inline 1} $2_validator_set_request_remove_delegation(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t3: $Mutation ($2_validator_Validator);
    var $t4: int;
    var $t5: $1_option_Option'u64';
    var $t6: Vec ($2_validator_Validator);
    var $t7: int;
    var $t8: $1_option_Option'u64';
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_option_Option'u64');
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: $Mutation (Vec ($2_validator_Validator));
    var $t16: $Mutation ($2_validator_Validator);
    var $t17: $2_validator_set_ValidatorSet;
    var $t18: Vec ($2_validator_ValidatorMetadata);
    var $t19: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:151:5+1
    assume {:print "$at(31,6383,6384)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:151:5+1
    assume {:print "$track_local(29,20,1):", $t1} $t1 == $t1;

    // trace_local[delegate_amount]($t2) at ./sources/governance/validator_set.move:151:5+1
    assume {:print "$track_local(29,20,2):", $t2} $t2 == $t2;

    // $t6 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:156:50+23
    assume {:print "$at(31,6585,6608)"} true;
    $t6 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t5 := validator_set::find_validator($t6, $t1) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:156:35+58
    call $t5 := $2_validator_set_find_validator($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,6570,6628)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:156:13+19
    assume {:print "$track_local(29,20,5):", $t5} $t5 == $t5;

    // $t8 := copy($t5) at ./sources/governance/validator_set.move:159:29+20
    assume {:print "$at(31,6790,6810)"} true;
    $t8 := $t5;

    // $t9 := opaque begin: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:159:13+37

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:159:13+37
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, option::$is_some<u64>($t8)) at ./sources/governance/validator_set.move:159:13+37
    assume $IsEqual'bool'($t9, $1_option_$is_some'u64'($t8));

    // $t9 := opaque end: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:159:13+37

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator_set.move:159:9+481
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:166:13+7
    assume {:print "$at(31,7234,7241)"} true;
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:166:13+7

    // $t10 := 0 at ./sources/governance/validator_set.move:166:19+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:166:13+7
    assume {:print "$at(31,7234,7241)"} true;
    assume {:print "$track_abort(29,20):", $t10} $t10 == $t10;

    // $t7 := move($t10) at ./sources/governance/validator_set.move:166:13+7
    $t7 := $t10;

    // goto L3 at ./sources/governance/validator_set.move:166:13+7
    goto L3;

    // label L0 at ./sources/governance/validator_set.move:160:51+24
    assume {:print "$at(31,6865,6889)"} true;
L0:

    // $t11 := borrow_local($t5) at ./sources/governance/validator_set.move:160:51+24
    $t11 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t12 := opaque begin: option::extract<u64>($t11) at ./sources/governance/validator_set.move:160:35+41

    // $t13 := read_ref($t11) at ./sources/governance/validator_set.move:160:35+41
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<u64>($t11)) at ./sources/governance/validator_set.move:160:35+41
    assume ($t14 == $1_option_$is_none'u64'($Dereference($t11)));

    // if ($t14) goto L6 else goto L4 at ./sources/governance/validator_set.move:160:35+41
    if ($t14) { goto L6; } else { goto L4; }

    // label L5 at ./sources/governance/validator_set.move:160:35+41
L5:

    // assume And(option::$is_none<u64>($t11), Eq(7, $t7)) at ./sources/governance/validator_set.move:160:35+41
    assume ($1_option_$is_none'u64'($Dereference($t11)) && $IsEqual'num'(7, $t7));

    // trace_abort($t7) at ./sources/governance/validator_set.move:160:35+41
    assume {:print "$at(31,6849,6890)"} true;
    assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;

    // goto L3 at ./sources/governance/validator_set.move:160:35+41
    goto L3;

    // label L4 at ./sources/governance/validator_set.move:160:35+41
L4:

    // havoc[mut]($t11) at ./sources/governance/validator_set.move:160:35+41
    havoc $temp_0'$1_option_Option'u64'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/validator_set.move:160:35+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t11)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/validator_set.move:160:35+41
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, option::$borrow<u64>($t13)) at ./sources/governance/validator_set.move:160:35+41
    assume $IsEqual'u64'($t12, $1_option_$borrow'u64'($t13));

    // assume option::$is_none<u64>($t11) at ./sources/governance/validator_set.move:160:35+41
    assume $1_option_$is_none'u64'($Dereference($t11));

    // $t12 := opaque end: option::extract<u64>($t11) at ./sources/governance/validator_set.move:160:35+41

    // pack_ref_deep($t11) at ./sources/governance/validator_set.move:160:35+41

    // write_back[LocalRoot($t5)@]($t11) at ./sources/governance/validator_set.move:160:35+41
    $t5 := $Dereference($t11);

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:160:35+41
    assume {:print "$track_local(29,20,5):", $t5} $t5 == $t5;

    // trace_local[validator_index]($t12) at ./sources/governance/validator_set.move:160:17+15
    assume {:print "$track_local(29,20,4):", $t12} $t12 == $t12;

    // $t15 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:161:48+27
    assume {:print "$at(31,6939,6966)"} true;
    $t15 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t16 := vector::borrow_mut<validator::Validator>($t15, $t12) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:161:29+64
    call $t16,$t15 := $1_vector_borrow_mut'$2_validator_Validator'($t15, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,6920,6984)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[validator]($t16) at ./sources/governance/validator_set.move:161:17+9
    $temp_0'$2_validator_Validator' := $Dereference($t16);
    assume {:print "$track_local(29,20,3):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_remove_delegation($t16, $t2) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:162:13+64
    assume {:print "$at(31,6998,7062)"} true;
    call $t16 := $2_validator_request_remove_delegation($t16, $t2);
    if ($abort_flag) {
        assume {:print "$at(31,6998,7062)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // write_back[Reference($t15)[]]($t16) at ./sources/governance/validator_set.move:162:13+64
    $t15 := $UpdateMutation($t15, UpdateVec($Dereference($t15), ReadVec(p#$Mutation($t16), LenVec(p#$Mutation($t15))), $Dereference($t16)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t15) at ./sources/governance/validator_set.move:162:13+64
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:162:13+64
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t17 := read_ref($t0) at ./sources/governance/validator_set.move:168:67+4
    assume {:print "$at(31,7319,7323)"} true;
    $t17 := $Dereference($t0);

    // $t18 := validator_set::derive_next_epoch_validators($t17) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:168:38+34
    call $t18 := $2_validator_set_derive_next_epoch_validators($t17);
    if ($abort_flag) {
        assume {:print "$at(31,7290,7324)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t19 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:168:9+26
    $t19 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t19, $t18) at ./sources/governance/validator_set.move:168:9+63
    $t19 := $UpdateMutation($t19, $t18);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t19) at ./sources/governance/validator_set.move:168:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t19)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:168:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:168:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L2 at ./sources/governance/validator_set.move:169:5+1
    assume {:print "$at(31,7330,7331)"} true;
L2:

    // return () at ./sources/governance/validator_set.move:169:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/governance/validator_set.move:169:5+1
L3:

    // abort($t7) at ./sources/governance/validator_set.move:169:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun validator_set::request_remove_delegation [verification] at ./sources/governance/validator_set.move:151:5+948
procedure {:timeLimit 40} $2_validator_set_request_remove_delegation$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t3: $Mutation ($2_validator_Validator);
    var $t4: int;
    var $t5: $1_option_Option'u64';
    var $t6: Vec ($2_validator_Validator);
    var $t7: int;
    var $t8: $1_option_Option'u64';
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_option_Option'u64');
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: $Mutation (Vec ($2_validator_Validator));
    var $t16: $Mutation ($2_validator_Validator);
    var $t17: $2_validator_set_ValidatorSet;
    var $t18: Vec ($2_validator_ValidatorMetadata);
    var $t19: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t19));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:151:5+1
    assume {:print "$at(31,6383,6384)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:151:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:151:5+1
    assume $IsValid'u64'($t2);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:151:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:151:5+1
    assume {:print "$track_local(29,20,1):", $t1} $t1 == $t1;

    // trace_local[delegate_amount]($t2) at ./sources/governance/validator_set.move:151:5+1
    assume {:print "$track_local(29,20,2):", $t2} $t2 == $t2;

    // $t6 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:156:50+23
    assume {:print "$at(31,6585,6608)"} true;
    $t6 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t5 := validator_set::find_validator($t6, $t1) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:156:35+58
    call $t5 := $2_validator_set_find_validator($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,6570,6628)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:156:13+19
    assume {:print "$track_local(29,20,5):", $t5} $t5 == $t5;

    // $t8 := copy($t5) at ./sources/governance/validator_set.move:159:29+20
    assume {:print "$at(31,6790,6810)"} true;
    $t8 := $t5;

    // $t9 := opaque begin: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:159:13+37

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:159:13+37
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, option::$is_some<u64>($t8)) at ./sources/governance/validator_set.move:159:13+37
    assume $IsEqual'bool'($t9, $1_option_$is_some'u64'($t8));

    // $t9 := opaque end: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:159:13+37

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator_set.move:159:9+481
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:166:13+7
    assume {:print "$at(31,7234,7241)"} true;
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:166:13+7

    // $t10 := 0 at ./sources/governance/validator_set.move:166:19+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:166:13+7
    assume {:print "$at(31,7234,7241)"} true;
    assume {:print "$track_abort(29,20):", $t10} $t10 == $t10;

    // $t7 := move($t10) at ./sources/governance/validator_set.move:166:13+7
    $t7 := $t10;

    // goto L3 at ./sources/governance/validator_set.move:166:13+7
    goto L3;

    // label L0 at ./sources/governance/validator_set.move:160:51+24
    assume {:print "$at(31,6865,6889)"} true;
L0:

    // $t11 := borrow_local($t5) at ./sources/governance/validator_set.move:160:51+24
    $t11 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t12 := opaque begin: option::extract<u64>($t11) at ./sources/governance/validator_set.move:160:35+41

    // $t13 := read_ref($t11) at ./sources/governance/validator_set.move:160:35+41
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<u64>($t11)) at ./sources/governance/validator_set.move:160:35+41
    assume ($t14 == $1_option_$is_none'u64'($Dereference($t11)));

    // if ($t14) goto L6 else goto L4 at ./sources/governance/validator_set.move:160:35+41
    if ($t14) { goto L6; } else { goto L4; }

    // label L5 at ./sources/governance/validator_set.move:160:35+41
L5:

    // assume And(option::$is_none<u64>($t11), Eq(7, $t7)) at ./sources/governance/validator_set.move:160:35+41
    assume ($1_option_$is_none'u64'($Dereference($t11)) && $IsEqual'num'(7, $t7));

    // trace_abort($t7) at ./sources/governance/validator_set.move:160:35+41
    assume {:print "$at(31,6849,6890)"} true;
    assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;

    // goto L3 at ./sources/governance/validator_set.move:160:35+41
    goto L3;

    // label L4 at ./sources/governance/validator_set.move:160:35+41
L4:

    // havoc[mut]($t11) at ./sources/governance/validator_set.move:160:35+41
    havoc $temp_0'$1_option_Option'u64'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/validator_set.move:160:35+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t11)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/validator_set.move:160:35+41
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, option::$borrow<u64>($t13)) at ./sources/governance/validator_set.move:160:35+41
    assume $IsEqual'u64'($t12, $1_option_$borrow'u64'($t13));

    // assume option::$is_none<u64>($t11) at ./sources/governance/validator_set.move:160:35+41
    assume $1_option_$is_none'u64'($Dereference($t11));

    // $t12 := opaque end: option::extract<u64>($t11) at ./sources/governance/validator_set.move:160:35+41

    // assert Le(Len<u64>(select option::Option.vec($t11)), 1) at ./deps/move-stdlib/sources/option.move:17:9+24
    // data invariant at ./deps/move-stdlib/sources/option.move:17:9+24
    assume {:print "$at(16,632,656)"} true;
    assert {:msg "assert_failed(16,632,656): data invariant does not hold"}
      (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1);

    // write_back[LocalRoot($t5)@]($t11) at ./sources/governance/validator_set.move:160:35+41
    assume {:print "$at(31,6849,6890)"} true;
    $t5 := $Dereference($t11);

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:160:35+41
    assume {:print "$track_local(29,20,5):", $t5} $t5 == $t5;

    // trace_local[validator_index]($t12) at ./sources/governance/validator_set.move:160:17+15
    assume {:print "$track_local(29,20,4):", $t12} $t12 == $t12;

    // $t15 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:161:48+27
    assume {:print "$at(31,6939,6966)"} true;
    $t15 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t16 := vector::borrow_mut<validator::Validator>($t15, $t12) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:161:29+64
    call $t16,$t15 := $1_vector_borrow_mut'$2_validator_Validator'($t15, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,6920,6984)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[validator]($t16) at ./sources/governance/validator_set.move:161:17+9
    $temp_0'$2_validator_Validator' := $Dereference($t16);
    assume {:print "$track_local(29,20,3):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_remove_delegation($t16, $t2) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:162:13+64
    assume {:print "$at(31,6998,7062)"} true;
    call $t16 := $2_validator_request_remove_delegation($t16, $t2);
    if ($abort_flag) {
        assume {:print "$at(31,6998,7062)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // write_back[Reference($t15)[]]($t16) at ./sources/governance/validator_set.move:162:13+64
    $t15 := $UpdateMutation($t15, UpdateVec($Dereference($t15), ReadVec(p#$Mutation($t16), LenVec(p#$Mutation($t15))), $Dereference($t16)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t15) at ./sources/governance/validator_set.move:162:13+64
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:162:13+64
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t17 := read_ref($t0) at ./sources/governance/validator_set.move:168:67+4
    assume {:print "$at(31,7319,7323)"} true;
    $t17 := $Dereference($t0);

    // $t18 := validator_set::derive_next_epoch_validators($t17) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:168:38+34
    call $t18 := $2_validator_set_derive_next_epoch_validators($t17);
    if ($abort_flag) {
        assume {:print "$at(31,7290,7324)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,20):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t19 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:168:9+26
    $t19 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t19, $t18) at ./sources/governance/validator_set.move:168:9+63
    $t19 := $UpdateMutation($t19, $t18);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t19) at ./sources/governance/validator_set.move:168:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t19)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:168:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:168:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,20,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L2 at ./sources/governance/validator_set.move:169:5+1
    assume {:print "$at(31,7330,7331)"} true;
L2:

    // return () at ./sources/governance/validator_set.move:169:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/governance/validator_set.move:169:5+1
L3:

    // abort($t7) at ./sources/governance/validator_set.move:169:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun validator_set::request_withdraw_stake [baseline] at ./sources/governance/validator_set.move:121:5+534
procedure {:inline 1} $2_validator_set_request_withdraw_stake(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $Mutation ($2_stake_Stake), _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet), $ret1: $Mutation ($2_stake_Stake), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $Mutation ($2_validator_Validator);
    var $t6: int;
    var $t7: $2_tx_context_TxContext;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (Vec ($2_validator_Validator));
    var $t11: $Mutation ($2_validator_Validator);
    var $t12: $2_validator_set_ValidatorSet;
    var $t13: Vec ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $Mutation ($2_stake_Stake);
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t14));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:121:5+1
    assume {:print "$at(31,5232,5233)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[stake]($t1) at ./sources/governance/validator_set.move:121:5+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(29,22,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[withdraw_amount]($t2) at ./sources/governance/validator_set.move:121:5+1
    assume {:print "$track_local(29,22,2):", $t2} $t2 == $t2;

    // trace_local[min_validator_stake]($t3) at ./sources/governance/validator_set.move:121:5+1
    assume {:print "$track_local(29,22,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:121:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,22,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t7 := read_ref($t4) at ./sources/governance/validator_set.move:128:52+3
    assume {:print "$at(31,5487,5490)"} true;
    $t7 := $Dereference($t4);

    // $t8 := tx_context::sender($t7) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:128:33+23
    call $t8 := $2_tx_context_sender($t7);
    if ($abort_flag) {
        assume {:print "$at(31,5468,5491)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[validator_address]($t8) at ./sources/governance/validator_set.move:128:13+17
    assume {:print "$track_local(29,22,6):", $t8} $t8 == $t8;

    // $t10 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:129:43+27
    assume {:print "$at(31,5535,5562)"} true;
    $t10 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t11 := validator_set::get_validator_mut($t10, $t8) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:129:25+65
    call $t11,$t10 := $2_validator_set_get_validator_mut($t10, $t8);
    if ($abort_flag) {
        assume {:print "$at(31,5517,5582)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[validator]($t11) at ./sources/governance/validator_set.move:129:13+9
    $temp_0'$2_validator_Validator' := $Dereference($t11);
    assume {:print "$track_local(29,22,5):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_withdraw_stake($t11, $t1, $t2, $t3, $t4) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:130:9+94
    assume {:print "$at(31,5592,5686)"} true;
    call $t11,$t1,$t4 := $2_validator_request_withdraw_stake($t11, $t1, $t2, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(31,5592,5686)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[Reference($t10)[]]($t11) at ./sources/governance/validator_set.move:130:9+94
    $t10 := $UpdateMutation($t10, UpdateVec($Dereference($t10), ReadVec(p#$Mutation($t11), LenVec(p#$Mutation($t10))), $Dereference($t11)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t10) at ./sources/governance/validator_set.move:130:9+94
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:130:9+94
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t12 := read_ref($t0) at ./sources/governance/validator_set.move:131:67+4
    assume {:print "$at(31,5754,5758)"} true;
    $t12 := $Dereference($t0);

    // $t13 := validator_set::derive_next_epoch_validators($t12) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:131:38+34
    call $t13 := $2_validator_set_derive_next_epoch_validators($t12);
    if ($abort_flag) {
        assume {:print "$at(31,5725,5759)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t14 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:131:9+26
    $t14 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t14, $t13) at ./sources/governance/validator_set.move:131:9+63
    $t14 := $UpdateMutation($t14, $t13);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t14) at ./sources/governance/validator_set.move:131:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t14)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:131:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:131:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[stake]($t1) at ./sources/governance/validator_set.move:131:72+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(29,22,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:131:72+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,22,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator_set.move:132:5+1
    assume {:print "$at(31,5765,5766)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:132:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t4;
    return;

    // label L2 at ./sources/governance/validator_set.move:132:5+1
L2:

    // abort($t9) at ./sources/governance/validator_set.move:132:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun validator_set::request_withdraw_stake [verification] at ./sources/governance/validator_set.move:121:5+534
procedure {:timeLimit 40} $2_validator_set_request_withdraw_stake$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $Mutation ($2_stake_Stake), _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet), $ret1: $Mutation ($2_stake_Stake), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $Mutation ($2_validator_Validator);
    var $t6: int;
    var $t7: $2_tx_context_TxContext;
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (Vec ($2_validator_Validator));
    var $t11: $Mutation ($2_validator_Validator);
    var $t12: $2_validator_set_ValidatorSet;
    var $t13: Vec ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $Mutation ($2_stake_Stake);
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:121:5+1
    assume {:print "$at(31,5232,5233)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume And(WellFormed($t1), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select stake::Stake.locked_until_epoch($t1))), 1)) at ./sources/governance/validator_set.move:121:5+1
    assume ($IsValid'$2_stake_Stake'($Dereference($t1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_stake_Stake($Dereference($t1)))) <= 1));

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:121:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/governance/validator_set.move:121:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/governance/validator_set.move:121:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:121:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[stake]($t1) at ./sources/governance/validator_set.move:121:5+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(29,22,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[withdraw_amount]($t2) at ./sources/governance/validator_set.move:121:5+1
    assume {:print "$track_local(29,22,2):", $t2} $t2 == $t2;

    // trace_local[min_validator_stake]($t3) at ./sources/governance/validator_set.move:121:5+1
    assume {:print "$track_local(29,22,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:121:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,22,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t7 := read_ref($t4) at ./sources/governance/validator_set.move:128:52+3
    assume {:print "$at(31,5487,5490)"} true;
    $t7 := $Dereference($t4);

    // $t8 := tx_context::sender($t7) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:128:33+23
    call $t8 := $2_tx_context_sender($t7);
    if ($abort_flag) {
        assume {:print "$at(31,5468,5491)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[validator_address]($t8) at ./sources/governance/validator_set.move:128:13+17
    assume {:print "$track_local(29,22,6):", $t8} $t8 == $t8;

    // $t10 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:129:43+27
    assume {:print "$at(31,5535,5562)"} true;
    $t10 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t11 := validator_set::get_validator_mut($t10, $t8) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:129:25+65
    call $t11,$t10 := $2_validator_set_get_validator_mut($t10, $t8);
    if ($abort_flag) {
        assume {:print "$at(31,5517,5582)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[validator]($t11) at ./sources/governance/validator_set.move:129:13+9
    $temp_0'$2_validator_Validator' := $Dereference($t11);
    assume {:print "$track_local(29,22,5):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // validator::request_withdraw_stake($t11, $t1, $t2, $t3, $t4) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:130:9+94
    assume {:print "$at(31,5592,5686)"} true;
    call $t11,$t1,$t4 := $2_validator_request_withdraw_stake($t11, $t1, $t2, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(31,5592,5686)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[Reference($t10)[]]($t11) at ./sources/governance/validator_set.move:130:9+94
    $t10 := $UpdateMutation($t10, UpdateVec($Dereference($t10), ReadVec(p#$Mutation($t11), LenVec(p#$Mutation($t10))), $Dereference($t11)));

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t10) at ./sources/governance/validator_set.move:130:9+94
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:130:9+94
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t12 := read_ref($t0) at ./sources/governance/validator_set.move:131:67+4
    assume {:print "$at(31,5754,5758)"} true;
    $t12 := $Dereference($t0);

    // $t13 := validator_set::derive_next_epoch_validators($t12) on_abort goto L2 with $t9 at ./sources/governance/validator_set.move:131:38+34
    call $t13 := $2_validator_set_derive_next_epoch_validators($t12);
    if ($abort_flag) {
        assume {:print "$at(31,5725,5759)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,22):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t14 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:131:9+26
    $t14 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t14, $t13) at ./sources/governance/validator_set.move:131:9+63
    $t14 := $UpdateMutation($t14, $t13);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t14) at ./sources/governance/validator_set.move:131:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t14)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:131:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:131:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,22,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[stake]($t1) at ./sources/governance/validator_set.move:131:72+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(29,22,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:131:72+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,22,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator_set.move:132:5+1
    assume {:print "$at(31,5765,5766)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:132:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t4;
    return;

    // label L2 at ./sources/governance/validator_set.move:132:5+1
L2:

    // abort($t9) at ./sources/governance/validator_set.move:132:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun validator_set::advance_epoch [baseline] at ./sources/governance/validator_set.move:200:5+1449
procedure {:inline 1} $2_validator_set_advance_epoch(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $Mutation ($2_balance_Balance'$2_sui_SUI'), _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet), $ret1: $Mutation ($2_balance_Balance'$2_sui_SUI'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: int;
    var $t7: Vec ($2_validator_Validator);
    var $t8: int;
    var $t9: $2_balance_Balance'$2_sui_SUI';
    var $t10: int;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: $Mutation (Vec ($2_validator_Validator));
    var $t14: $Mutation (Vec ($2_validator_Validator));
    var $t15: $Mutation (Vec ($2_validator_Validator));
    var $t16: $Mutation (Vec ($2_validator_Validator));
    var $t17: $Mutation (Vec ($2_validator_Validator));
    var $t18: $Mutation (Vec (int));
    var $t19: $2_validator_set_ValidatorSet;
    var $t20: Vec ($2_validator_ValidatorMetadata);
    var $t21: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t22: Vec ($2_validator_Validator);
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: $Mutation (int);
    var $t27: $Mutation (int);
    var $t28: $Mutation (int);
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t26));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t28));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:200:5+1
    assume {:print "$at(31,8359,8360)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[computation_reward]($t1) at ./sources/governance/validator_set.move:200:5+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t1);
    assume {:print "$track_local(29,1,1):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t2) at ./sources/governance/validator_set.move:200:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(29,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t7 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:208:13+23
    assume {:print "$at(31,8758,8781)"} true;
    $t7 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t8 := get_field<validator_set::ValidatorSet>.total_validator_stake($t0) at ./sources/governance/validator_set.move:209:13+26
    assume {:print "$at(31,8795,8821)"} true;
    $t8 := $total_validator_stake#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t9 := read_ref($t1) at ./sources/governance/validator_set.move:210:28+18
    assume {:print "$at(31,8850,8868)"} true;
    $t9 := $Dereference($t1);

    // $t10 := balance::value<sui::SUI>($t9) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:210:13+34
    call $t10 := $2_balance_value'$2_sui_SUI'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,8835,8869)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t12 := validator_set::compute_reward_distribution($t7, $t8, $t10) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:207:23+163
    assume {:print "$at(31,8717,8880)"} true;
    call $t12 := $2_validator_set_compute_reward_distribution($t7, $t8, $t10);
    if ($abort_flag) {
        assume {:print "$at(31,8717,8880)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[rewards]($t12) at ./sources/governance/validator_set.move:207:13+7
    assume {:print "$track_local(29,1,5):", $t12} $t12 == $t12;

    // $t13 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:215:22+27
    assume {:print "$at(31,9103,9130)"} true;
    $t13 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::adjust_stake($t13) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:215:9+41
    call $t13 := $2_validator_set_adjust_stake($t13);
    if ($abort_flag) {
        assume {:print "$at(31,9090,9131)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t13) at ./sources/governance/validator_set.move:215:9+41
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:215:9+41
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t14 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:217:27+27
    assume {:print "$at(31,9160,9187)"} true;
    $t14 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::distribute_reward($t14, $t12, $t1, $t2) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:217:9+81
    call $t14,$t1,$t2 := $2_validator_set_distribute_reward($t14, $t12, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(31,9142,9223)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t14) at ./sources/governance/validator_set.move:217:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t14)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:217:9+81
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t15 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:219:36+27
    assume {:print "$at(31,9261,9288)"} true;
    $t15 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t16 := borrow_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:219:65+28
    $t16 := $ChildMutation($t0, 4, $pending_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::process_pending_validators($t15, $t16) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:219:9+85
    call $t15,$t16 := $2_validator_set_process_pending_validators($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(31,9234,9319)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t15) at ./sources/governance/validator_set.move:219:9+85
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:219:9+85
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // write_back[Reference($t0).pending_validators (vector<validator::Validator>)]($t16) at ./sources/governance/validator_set.move:219:9+85
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_validators($Dereference($t0), $Dereference($t16)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:219:9+85
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t17 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:221:34+27
    assume {:print "$at(31,9355,9382)"} true;
    $t17 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t18 := borrow_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:221:63+26
    $t18 := $ChildMutation($t0, 5, $pending_removals#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::process_pending_removals($t17, $t18) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:221:9+81
    call $t17,$t18 := $2_validator_set_process_pending_removals($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,9330,9411)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t17) at ./sources/governance/validator_set.move:221:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t17)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:221:9+81
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // write_back[Reference($t0).pending_removals (vector<u64>)]($t18) at ./sources/governance/validator_set.move:221:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_removals($Dereference($t0), $Dereference($t18)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:221:9+81
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t19 := read_ref($t0) at ./sources/governance/validator_set.move:223:67+4
    assume {:print "$at(31,9480,9484)"} true;
    $t19 := $Dereference($t0);

    // $t20 := validator_set::derive_next_epoch_validators($t19) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:223:38+34
    call $t20 := $2_validator_set_derive_next_epoch_validators($t19);
    if ($abort_flag) {
        assume {:print "$at(31,9451,9485)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t21 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:223:9+26
    $t21 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t21, $t20) at ./sources/governance/validator_set.move:223:9+63
    $t21 := $UpdateMutation($t21, $t20);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t21) at ./sources/governance/validator_set.move:223:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t21)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:223:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t22 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:225:118+23
    assume {:print "$at(31,9605,9628)"} true;
    $t22 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // ($t23, $t24, $t25) := validator_set::calculate_total_stake_and_quorum_threshold($t22) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:225:75+67
    call $t23,$t24,$t25 := $2_validator_set_calculate_total_stake_and_quorum_threshold($t22);
    if ($abort_flag) {
        assume {:print "$at(31,9562,9629)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[quorum_stake_threshold]($t25) at ./sources/governance/validator_set.move:225:49+22
    assume {:print "$track_local(29,1,4):", $t25} $t25 == $t25;

    // trace_local[delegation_stake]($t24) at ./sources/governance/validator_set.move:225:31+16
    assume {:print "$track_local(29,1,3):", $t24} $t24 == $t24;

    // trace_local[validator_stake]($t23) at ./sources/governance/validator_set.move:225:14+15
    assume {:print "$track_local(29,1,6):", $t23} $t23 == $t23;

    // $t26 := borrow_field<validator_set::ValidatorSet>.total_validator_stake($t0) at ./sources/governance/validator_set.move:226:9+26
    assume {:print "$at(31,9639,9665)"} true;
    $t26 := $ChildMutation($t0, 0, $total_validator_stake#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t26, $t23) at ./sources/governance/validator_set.move:226:9+44
    $t26 := $UpdateMutation($t26, $t23);

    // write_back[Reference($t0).total_validator_stake (u64)]($t26) at ./sources/governance/validator_set.move:226:9+44
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_total_validator_stake($Dereference($t0), $Dereference($t26)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:226:9+44
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t27 := borrow_field<validator_set::ValidatorSet>.total_delegation_stake($t0) at ./sources/governance/validator_set.move:227:9+27
    assume {:print "$at(31,9693,9720)"} true;
    $t27 := $ChildMutation($t0, 1, $total_delegation_stake#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t27, $t24) at ./sources/governance/validator_set.move:227:9+46
    $t27 := $UpdateMutation($t27, $t24);

    // write_back[Reference($t0).total_delegation_stake (u64)]($t27) at ./sources/governance/validator_set.move:227:9+46
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_total_delegation_stake($Dereference($t0), $Dereference($t27)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:227:9+46
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t28 := borrow_field<validator_set::ValidatorSet>.quorum_stake_threshold($t0) at ./sources/governance/validator_set.move:228:9+27
    assume {:print "$at(31,9749,9776)"} true;
    $t28 := $ChildMutation($t0, 2, $quorum_stake_threshold#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t28, $t25) at ./sources/governance/validator_set.move:228:9+52
    $t28 := $UpdateMutation($t28, $t25);

    // write_back[Reference($t0).quorum_stake_threshold (u64)]($t28) at ./sources/governance/validator_set.move:228:9+52
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_quorum_stake_threshold($Dereference($t0), $Dereference($t28)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:228:9+52
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:228:61+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[computation_reward]($t1) at ./sources/governance/validator_set.move:228:61+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t1);
    assume {:print "$track_local(29,1,1):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t2) at ./sources/governance/validator_set.move:228:61+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(29,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator_set.move:229:5+1
    assume {:print "$at(31,9807,9808)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:229:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/governance/validator_set.move:229:5+1
L2:

    // abort($t11) at ./sources/governance/validator_set.move:229:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun validator_set::advance_epoch [verification] at ./sources/governance/validator_set.move:200:5+1449
procedure {:timeLimit 40} $2_validator_set_advance_epoch$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $Mutation ($2_balance_Balance'$2_sui_SUI'), _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet), $ret1: $Mutation ($2_balance_Balance'$2_sui_SUI'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: int;
    var $t7: Vec ($2_validator_Validator);
    var $t8: int;
    var $t9: $2_balance_Balance'$2_sui_SUI';
    var $t10: int;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: $Mutation (Vec ($2_validator_Validator));
    var $t14: $Mutation (Vec ($2_validator_Validator));
    var $t15: $Mutation (Vec ($2_validator_Validator));
    var $t16: $Mutation (Vec ($2_validator_Validator));
    var $t17: $Mutation (Vec ($2_validator_Validator));
    var $t18: $Mutation (Vec (int));
    var $t19: $2_validator_set_ValidatorSet;
    var $t20: Vec ($2_validator_ValidatorMetadata);
    var $t21: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t22: Vec ($2_validator_Validator);
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: $Mutation (int);
    var $t27: $Mutation (int);
    var $t28: $Mutation (int);
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t26));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t28));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:200:5+1
    assume {:print "$at(31,8359,8360)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:200:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($Dereference($t1));

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:200:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:200:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[computation_reward]($t1) at ./sources/governance/validator_set.move:200:5+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t1);
    assume {:print "$track_local(29,1,1):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t2) at ./sources/governance/validator_set.move:200:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(29,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t7 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:208:13+23
    assume {:print "$at(31,8758,8781)"} true;
    $t7 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t8 := get_field<validator_set::ValidatorSet>.total_validator_stake($t0) at ./sources/governance/validator_set.move:209:13+26
    assume {:print "$at(31,8795,8821)"} true;
    $t8 := $total_validator_stake#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t9 := read_ref($t1) at ./sources/governance/validator_set.move:210:28+18
    assume {:print "$at(31,8850,8868)"} true;
    $t9 := $Dereference($t1);

    // $t10 := balance::value<sui::SUI>($t9) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:210:13+34
    call $t10 := $2_balance_value'$2_sui_SUI'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,8835,8869)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t12 := validator_set::compute_reward_distribution($t7, $t8, $t10) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:207:23+163
    assume {:print "$at(31,8717,8880)"} true;
    call $t12 := $2_validator_set_compute_reward_distribution($t7, $t8, $t10);
    if ($abort_flag) {
        assume {:print "$at(31,8717,8880)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[rewards]($t12) at ./sources/governance/validator_set.move:207:13+7
    assume {:print "$track_local(29,1,5):", $t12} $t12 == $t12;

    // $t13 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:215:22+27
    assume {:print "$at(31,9103,9130)"} true;
    $t13 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::adjust_stake($t13) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:215:9+41
    call $t13 := $2_validator_set_adjust_stake($t13);
    if ($abort_flag) {
        assume {:print "$at(31,9090,9131)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t13) at ./sources/governance/validator_set.move:215:9+41
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t13)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:215:9+41
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t14 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:217:27+27
    assume {:print "$at(31,9160,9187)"} true;
    $t14 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::distribute_reward($t14, $t12, $t1, $t2) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:217:9+81
    call $t14,$t1,$t2 := $2_validator_set_distribute_reward($t14, $t12, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(31,9142,9223)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t14) at ./sources/governance/validator_set.move:217:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t14)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:217:9+81
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t15 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:219:36+27
    assume {:print "$at(31,9261,9288)"} true;
    $t15 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t16 := borrow_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:219:65+28
    $t16 := $ChildMutation($t0, 4, $pending_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::process_pending_validators($t15, $t16) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:219:9+85
    call $t15,$t16 := $2_validator_set_process_pending_validators($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(31,9234,9319)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t15) at ./sources/governance/validator_set.move:219:9+85
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t15)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:219:9+85
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // write_back[Reference($t0).pending_validators (vector<validator::Validator>)]($t16) at ./sources/governance/validator_set.move:219:9+85
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_validators($Dereference($t0), $Dereference($t16)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:219:9+85
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t17 := borrow_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:221:34+27
    assume {:print "$at(31,9355,9382)"} true;
    $t17 := $ChildMutation($t0, 3, $active_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // $t18 := borrow_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:221:63+26
    $t18 := $ChildMutation($t0, 5, $pending_removals#$2_validator_set_ValidatorSet($Dereference($t0)));

    // validator_set::process_pending_removals($t17, $t18) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:221:9+81
    call $t17,$t18 := $2_validator_set_process_pending_removals($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,9330,9411)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[Reference($t0).active_validators (vector<validator::Validator>)]($t17) at ./sources/governance/validator_set.move:221:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_active_validators($Dereference($t0), $Dereference($t17)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:221:9+81
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // write_back[Reference($t0).pending_removals (vector<u64>)]($t18) at ./sources/governance/validator_set.move:221:9+81
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_removals($Dereference($t0), $Dereference($t18)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:221:9+81
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t19 := read_ref($t0) at ./sources/governance/validator_set.move:223:67+4
    assume {:print "$at(31,9480,9484)"} true;
    $t19 := $Dereference($t0);

    // $t20 := validator_set::derive_next_epoch_validators($t19) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:223:38+34
    call $t20 := $2_validator_set_derive_next_epoch_validators($t19);
    if ($abort_flag) {
        assume {:print "$at(31,9451,9485)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t21 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:223:9+26
    $t21 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t21, $t20) at ./sources/governance/validator_set.move:223:9+63
    $t21 := $UpdateMutation($t21, $t20);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t21) at ./sources/governance/validator_set.move:223:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t21)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:223:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t22 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:225:118+23
    assume {:print "$at(31,9605,9628)"} true;
    $t22 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // ($t23, $t24, $t25) := validator_set::calculate_total_stake_and_quorum_threshold($t22) on_abort goto L2 with $t11 at ./sources/governance/validator_set.move:225:75+67
    call $t23,$t24,$t25 := $2_validator_set_calculate_total_stake_and_quorum_threshold($t22);
    if ($abort_flag) {
        assume {:print "$at(31,9562,9629)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,1):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[quorum_stake_threshold]($t25) at ./sources/governance/validator_set.move:225:49+22
    assume {:print "$track_local(29,1,4):", $t25} $t25 == $t25;

    // trace_local[delegation_stake]($t24) at ./sources/governance/validator_set.move:225:31+16
    assume {:print "$track_local(29,1,3):", $t24} $t24 == $t24;

    // trace_local[validator_stake]($t23) at ./sources/governance/validator_set.move:225:14+15
    assume {:print "$track_local(29,1,6):", $t23} $t23 == $t23;

    // $t26 := borrow_field<validator_set::ValidatorSet>.total_validator_stake($t0) at ./sources/governance/validator_set.move:226:9+26
    assume {:print "$at(31,9639,9665)"} true;
    $t26 := $ChildMutation($t0, 0, $total_validator_stake#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t26, $t23) at ./sources/governance/validator_set.move:226:9+44
    $t26 := $UpdateMutation($t26, $t23);

    // write_back[Reference($t0).total_validator_stake (u64)]($t26) at ./sources/governance/validator_set.move:226:9+44
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_total_validator_stake($Dereference($t0), $Dereference($t26)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:226:9+44
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t27 := borrow_field<validator_set::ValidatorSet>.total_delegation_stake($t0) at ./sources/governance/validator_set.move:227:9+27
    assume {:print "$at(31,9693,9720)"} true;
    $t27 := $ChildMutation($t0, 1, $total_delegation_stake#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t27, $t24) at ./sources/governance/validator_set.move:227:9+46
    $t27 := $UpdateMutation($t27, $t24);

    // write_back[Reference($t0).total_delegation_stake (u64)]($t27) at ./sources/governance/validator_set.move:227:9+46
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_total_delegation_stake($Dereference($t0), $Dereference($t27)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:227:9+46
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t28 := borrow_field<validator_set::ValidatorSet>.quorum_stake_threshold($t0) at ./sources/governance/validator_set.move:228:9+27
    assume {:print "$at(31,9749,9776)"} true;
    $t28 := $ChildMutation($t0, 2, $quorum_stake_threshold#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t28, $t25) at ./sources/governance/validator_set.move:228:9+52
    $t28 := $UpdateMutation($t28, $t25);

    // write_back[Reference($t0).quorum_stake_threshold (u64)]($t28) at ./sources/governance/validator_set.move:228:9+52
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_quorum_stake_threshold($Dereference($t0), $Dereference($t28)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:228:9+52
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:228:61+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,1,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[computation_reward]($t1) at ./sources/governance/validator_set.move:228:61+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t1);
    assume {:print "$track_local(29,1,1):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t2) at ./sources/governance/validator_set.move:228:61+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(29,1,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/validator_set.move:229:5+1
    assume {:print "$at(31,9807,9808)"} true;
L1:

    // return () at ./sources/governance/validator_set.move:229:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/governance/validator_set.move:229:5+1
L2:

    // abort($t11) at ./sources/governance/validator_set.move:229:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun validator_set::calculate_quorum_threshold [verification] at ./sources/governance/validator_set.move:366:5+207
procedure {:timeLimit 40} $2_validator_set_calculate_quorum_threshold$verify(_$t0: Vec ($2_validator_Validator)) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t0: Vec ($2_validator_Validator);
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:366:5+1
    assume {:print "$at(31,15209,15210)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:366:5+1
    assume {:print "$track_local(29,2,0):", $t0} $t0 == $t0;

    // $t3 := vector::length<validator::Validator>($t0) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:367:21+26
    assume {:print "$at(31,15298,15324)"} true;
    call $t3 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,15298,15324)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[count]($t3) at ./sources/governance/validator_set.move:367:13+5
    assume {:print "$track_local(29,2,1):", $t3} $t3 == $t3;

    // $t5 := 2 at ./sources/governance/validator_set.move:368:26+1
    assume {:print "$at(31,15351,15352)"} true;
    $t5 := 2;
    assume $IsValid'u64'($t5);

    // $t6 := *($t5, $t3) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:368:28+1
    call $t6 := $MulU64($t5, $t3);
    if ($abort_flag) {
        assume {:print "$at(31,15353,15354)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := 3 at ./sources/governance/validator_set.move:368:38+1
    $t7 := 3;
    assume $IsValid'u64'($t7);

    // $t8 := /($t6, $t7) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:368:36+1
    call $t8 := $Div($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,15361,15362)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t9 := 1 at ./sources/governance/validator_set.move:368:42+1
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t8, $t9) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:368:40+1
    call $t10 := $AddU64($t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(31,15365,15366)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t11 := 100 at ./sources/governance/validator_set.move:368:47+3
    $t11 := 100;
    assume $IsValid'u64'($t11);

    // $t12 := *($t10, $t11) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:368:45+1
    call $t12 := $MulU64($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,15370,15371)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t13 := /($t12, $t3) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:368:51+1
    call $t13 := $Div($t12, $t3);
    if ($abort_flag) {
        assume {:print "$at(31,15376,15377)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[threshold]($t13) at ./sources/governance/validator_set.move:368:13+9
    assume {:print "$track_local(29,2,2):", $t13} $t13 == $t13;

    // $t14 := (u8)($t13) on_abort goto L2 with $t4 at ./sources/governance/validator_set.move:369:9+17
    assume {:print "$at(31,15393,15410)"} true;
    call $t14 := $CastU8($t13);
    if ($abort_flag) {
        assume {:print "$at(31,15393,15410)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t14) at ./sources/governance/validator_set.move:369:9+17
    assume {:print "$track_return(29,2,0):", $t14} $t14 == $t14;

    // label L1 at ./sources/governance/validator_set.move:370:5+1
    assume {:print "$at(31,15415,15416)"} true;
L1:

    // return $t14 at ./sources/governance/validator_set.move:370:5+1
    $ret0 := $t14;
    return;

    // label L2 at ./sources/governance/validator_set.move:370:5+1
L2:

    // abort($t4) at ./sources/governance/validator_set.move:370:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator_set::calculate_total_stake_and_quorum_threshold [baseline] at ./sources/governance/validator_set.move:348:5+632
procedure {:inline 1} $2_validator_set_calculate_total_stake_and_quorum_threshold(_$t0: Vec ($2_validator_Validator)) returns ($ret0: int, $ret1: int, $ret2: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $2_validator_Validator;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $2_validator_Validator;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t0: Vec ($2_validator_Validator);
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:348:5+1
    assume {:print "$at(31,14381,14382)"} true;
    assume {:print "$track_local(29,3,0):", $t0} $t0 == $t0;

    // $t7 := 0 at ./sources/governance/validator_set.move:349:31+1
    assume {:print "$at(31,14509,14510)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[validator_state]($t7) at ./sources/governance/validator_set.move:349:13+15
    assume {:print "$track_local(29,3,6):", $t7} $t7 == $t7;

    // $t8 := 0 at ./sources/governance/validator_set.move:350:30+1
    assume {:print "$at(31,14541,14542)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_local[delegate_stake]($t8) at ./sources/governance/validator_set.move:350:13+14
    assume {:print "$track_local(29,3,1):", $t8} $t8 == $t8;

    // $t9 := vector::length<validator::Validator>($t0) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:351:22+26
    assume {:print "$at(31,14565,14591)"} true;
    call $t9 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,14565,14591)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[length]($t9) at ./sources/governance/validator_set.move:351:13+6
    assume {:print "$track_local(29,3,3):", $t9} $t9 == $t9;

    // $t11 := 0 at ./sources/governance/validator_set.move:352:17+1
    assume {:print "$at(31,14609,14610)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:352:13+1
    assume {:print "$track_local(29,3,2):", $t11} $t11 == $t11;

    // label L3 at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$at(31,14627,14628)"} true;
L3:

    // havoc[val]($t8) at ./sources/governance/validator_set.move:353:16+1
    havoc $t8;
    assume $IsValid'u64'($t8);

    // havoc[val]($t11) at ./sources/governance/validator_set.move:353:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t7) at ./sources/governance/validator_set.move:353:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:353:16+1
    havoc $t12;
    assume $IsValid'bool'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:353:16+1
    havoc $t13;
    assume $IsValid'$2_validator_Validator'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:353:16+1
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:353:16+1
    havoc $t15;
    assume $IsValid'u64'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:353:16+1
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:353:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:353:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:353:16+1
    havoc $t19;
    assume $IsValid'u64'($t19);

    // trace_local[delegate_stake]($t8) at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$info(): enter loop, variable(s) delegate_stake, i, validator_state havocked and reassigned"} true;
    assume {:print "$track_local(29,3,1):", $t8} $t8 == $t8;

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$track_local(29,3,2):", $t11} $t11 == $t11;

    // trace_local[validator_state]($t7) at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$track_local(29,3,6):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:353:16+1
    assume !$abort_flag;

    // $t12 := <($t11, $t9) at ./sources/governance/validator_set.move:353:18+1
    call $t12 := $Lt($t11, $t9);

    // if ($t12) goto L0 else goto L2 at ./sources/governance/validator_set.move:353:9+257
    if ($t12) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:354:36+10
    assume {:print "$at(31,14676,14686)"} true;
L0:

    // $t13 := vector::borrow<validator::Validator>($t0, $t11) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:354:21+29
    call $t13 := $1_vector_borrow'$2_validator_Validator'($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,14661,14690)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[v]($t13) at ./sources/governance/validator_set.move:354:17+1
    assume {:print "$track_local(29,3,5):", $t13} $t13 == $t13;

    // $t14 := validator::stake_amount($t13) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:355:49+26
    assume {:print "$at(31,14740,14766)"} true;
    call $t14 := $2_validator_stake_amount($t13);
    if ($abort_flag) {
        assume {:print "$at(31,14740,14766)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t15 := +($t7, $t14) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:355:47+1
    call $t15 := $AddU64($t7, $t14);
    if ($abort_flag) {
        assume {:print "$at(31,14738,14739)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[validator_state]($t15) at ./sources/governance/validator_set.move:355:13+15
    assume {:print "$track_local(29,3,6):", $t15} $t15 == $t15;

    // $t16 := validator::delegate_amount($t13) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:356:47+29
    assume {:print "$at(31,14814,14843)"} true;
    call $t16 := $2_validator_delegate_amount($t13);
    if ($abort_flag) {
        assume {:print "$at(31,14814,14843)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t17 := +($t8, $t16) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:356:45+1
    call $t17 := $AddU64($t8, $t16);
    if ($abort_flag) {
        assume {:print "$at(31,14812,14813)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[delegate_stake]($t17) at ./sources/governance/validator_set.move:356:13+14
    assume {:print "$track_local(29,3,1):", $t17} $t17 == $t17;

    // $t18 := 1 at ./sources/governance/validator_set.move:357:21+1
    assume {:print "$at(31,14865,14866)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // $t19 := +($t11, $t18) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:357:19+1
    call $t19 := $AddU64($t11, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,14863,14864)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[i]($t19) at ./sources/governance/validator_set.move:357:13+1
    assume {:print "$track_local(29,3,2):", $t19} $t19 == $t19;

    // goto L4 at ./sources/governance/validator_set.move:357:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:359:9+50
    assume {:print "$at(31,14887,14937)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:359:9+50

    // $t20 := +($t7, $t8) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:359:43+1
    call $t20 := $AddU64($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(31,14921,14922)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[total_stake]($t20) at ./sources/governance/validator_set.move:359:13+11
    assume {:print "$track_local(29,3,4):", $t20} $t20 == $t20;

    // $t21 := 1 at ./sources/governance/validator_set.move:360:58+1
    assume {:print "$at(31,14996,14997)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t20, $t21) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:360:56+1
    call $t22 := $AddU64($t20, $t21);
    if ($abort_flag) {
        assume {:print "$at(31,14994,14995)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t23 := 2 at ./sources/governance/validator_set.move:360:63+1
    $t23 := 2;
    assume $IsValid'u64'($t23);

    // $t24 := *($t22, $t23) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:360:61+1
    call $t24 := $MulU64($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(31,14999,15000)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t25 := 3 at ./sources/governance/validator_set.move:360:67+1
    $t25 := 3;
    assume $IsValid'u64'($t25);

    // $t26 := /($t24, $t25) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:360:65+1
    call $t26 := $Div($t24, $t25);
    if ($abort_flag) {
        assume {:print "$at(31,15003,15004)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_return[0]($t7) at ./sources/governance/validator_set.move:360:9+60
    assume {:print "$track_return(29,3,0):", $t7} $t7 == $t7;

    // trace_return[1]($t8) at ./sources/governance/validator_set.move:360:9+60
    assume {:print "$track_return(29,3,1):", $t8} $t8 == $t8;

    // trace_return[2]($t26) at ./sources/governance/validator_set.move:360:9+60
    assume {:print "$track_return(29,3,2):", $t26} $t26 == $t26;

    // goto L5 at ./sources/governance/validator_set.move:360:9+60
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:359:9+50
    // Loop invariant checking block for the loop started with header: L3
    assume {:print "$at(31,14887,14937)"} true;
L4:

    // stop() at ./sources/governance/validator_set.move:359:9+50
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:361:5+1
    assume {:print "$at(31,15012,15013)"} true;
L5:

    // return ($t7, $t8, $t26) at ./sources/governance/validator_set.move:361:5+1
    $ret0 := $t7;
    $ret1 := $t8;
    $ret2 := $t26;
    return;

    // label L6 at ./sources/governance/validator_set.move:361:5+1
L6:

    // abort($t10) at ./sources/governance/validator_set.move:361:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun validator_set::calculate_total_stake_and_quorum_threshold [verification] at ./sources/governance/validator_set.move:348:5+632
procedure {:timeLimit 40} $2_validator_set_calculate_total_stake_and_quorum_threshold$verify(_$t0: Vec ($2_validator_Validator)) returns ($ret0: int, $ret1: int, $ret2: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $2_validator_Validator;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $2_validator_Validator;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t0: Vec ($2_validator_Validator);
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:348:5+1
    assume {:print "$at(31,14381,14382)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:348:5+1
    assume {:print "$track_local(29,3,0):", $t0} $t0 == $t0;

    // $t7 := 0 at ./sources/governance/validator_set.move:349:31+1
    assume {:print "$at(31,14509,14510)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[validator_state]($t7) at ./sources/governance/validator_set.move:349:13+15
    assume {:print "$track_local(29,3,6):", $t7} $t7 == $t7;

    // $t8 := 0 at ./sources/governance/validator_set.move:350:30+1
    assume {:print "$at(31,14541,14542)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // trace_local[delegate_stake]($t8) at ./sources/governance/validator_set.move:350:13+14
    assume {:print "$track_local(29,3,1):", $t8} $t8 == $t8;

    // $t9 := vector::length<validator::Validator>($t0) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:351:22+26
    assume {:print "$at(31,14565,14591)"} true;
    call $t9 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,14565,14591)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[length]($t9) at ./sources/governance/validator_set.move:351:13+6
    assume {:print "$track_local(29,3,3):", $t9} $t9 == $t9;

    // $t11 := 0 at ./sources/governance/validator_set.move:352:17+1
    assume {:print "$at(31,14609,14610)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:352:13+1
    assume {:print "$track_local(29,3,2):", $t11} $t11 == $t11;

    // label L3 at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$at(31,14627,14628)"} true;
L3:

    // havoc[val]($t8) at ./sources/governance/validator_set.move:353:16+1
    havoc $t8;
    assume $IsValid'u64'($t8);

    // havoc[val]($t11) at ./sources/governance/validator_set.move:353:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t7) at ./sources/governance/validator_set.move:353:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:353:16+1
    havoc $t12;
    assume $IsValid'bool'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:353:16+1
    havoc $t13;
    assume $IsValid'$2_validator_Validator'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:353:16+1
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:353:16+1
    havoc $t15;
    assume $IsValid'u64'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:353:16+1
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:353:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:353:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:353:16+1
    havoc $t19;
    assume $IsValid'u64'($t19);

    // trace_local[delegate_stake]($t8) at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$info(): enter loop, variable(s) delegate_stake, i, validator_state havocked and reassigned"} true;
    assume {:print "$track_local(29,3,1):", $t8} $t8 == $t8;

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$track_local(29,3,2):", $t11} $t11 == $t11;

    // trace_local[validator_state]($t7) at ./sources/governance/validator_set.move:353:16+1
    assume {:print "$track_local(29,3,6):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:353:16+1
    assume !$abort_flag;

    // $t12 := <($t11, $t9) at ./sources/governance/validator_set.move:353:18+1
    call $t12 := $Lt($t11, $t9);

    // if ($t12) goto L0 else goto L2 at ./sources/governance/validator_set.move:353:9+257
    if ($t12) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:354:36+10
    assume {:print "$at(31,14676,14686)"} true;
L0:

    // $t13 := vector::borrow<validator::Validator>($t0, $t11) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:354:21+29
    call $t13 := $1_vector_borrow'$2_validator_Validator'($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,14661,14690)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[v]($t13) at ./sources/governance/validator_set.move:354:17+1
    assume {:print "$track_local(29,3,5):", $t13} $t13 == $t13;

    // $t14 := validator::stake_amount($t13) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:355:49+26
    assume {:print "$at(31,14740,14766)"} true;
    call $t14 := $2_validator_stake_amount($t13);
    if ($abort_flag) {
        assume {:print "$at(31,14740,14766)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t15 := +($t7, $t14) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:355:47+1
    call $t15 := $AddU64($t7, $t14);
    if ($abort_flag) {
        assume {:print "$at(31,14738,14739)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[validator_state]($t15) at ./sources/governance/validator_set.move:355:13+15
    assume {:print "$track_local(29,3,6):", $t15} $t15 == $t15;

    // $t16 := validator::delegate_amount($t13) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:356:47+29
    assume {:print "$at(31,14814,14843)"} true;
    call $t16 := $2_validator_delegate_amount($t13);
    if ($abort_flag) {
        assume {:print "$at(31,14814,14843)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t17 := +($t8, $t16) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:356:45+1
    call $t17 := $AddU64($t8, $t16);
    if ($abort_flag) {
        assume {:print "$at(31,14812,14813)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[delegate_stake]($t17) at ./sources/governance/validator_set.move:356:13+14
    assume {:print "$track_local(29,3,1):", $t17} $t17 == $t17;

    // $t18 := 1 at ./sources/governance/validator_set.move:357:21+1
    assume {:print "$at(31,14865,14866)"} true;
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // $t19 := +($t11, $t18) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:357:19+1
    call $t19 := $AddU64($t11, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,14863,14864)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[i]($t19) at ./sources/governance/validator_set.move:357:13+1
    assume {:print "$track_local(29,3,2):", $t19} $t19 == $t19;

    // goto L4 at ./sources/governance/validator_set.move:357:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:359:9+50
    assume {:print "$at(31,14887,14937)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:359:9+50

    // $t20 := +($t7, $t8) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:359:43+1
    call $t20 := $AddU64($t7, $t8);
    if ($abort_flag) {
        assume {:print "$at(31,14921,14922)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[total_stake]($t20) at ./sources/governance/validator_set.move:359:13+11
    assume {:print "$track_local(29,3,4):", $t20} $t20 == $t20;

    // $t21 := 1 at ./sources/governance/validator_set.move:360:58+1
    assume {:print "$at(31,14996,14997)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t20, $t21) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:360:56+1
    call $t22 := $AddU64($t20, $t21);
    if ($abort_flag) {
        assume {:print "$at(31,14994,14995)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t23 := 2 at ./sources/governance/validator_set.move:360:63+1
    $t23 := 2;
    assume $IsValid'u64'($t23);

    // $t24 := *($t22, $t23) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:360:61+1
    call $t24 := $MulU64($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(31,14999,15000)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t25 := 3 at ./sources/governance/validator_set.move:360:67+1
    $t25 := 3;
    assume $IsValid'u64'($t25);

    // $t26 := /($t24, $t25) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:360:65+1
    call $t26 := $Div($t24, $t25);
    if ($abort_flag) {
        assume {:print "$at(31,15003,15004)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,3):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_return[0]($t7) at ./sources/governance/validator_set.move:360:9+60
    assume {:print "$track_return(29,3,0):", $t7} $t7 == $t7;

    // trace_return[1]($t8) at ./sources/governance/validator_set.move:360:9+60
    assume {:print "$track_return(29,3,1):", $t8} $t8 == $t8;

    // trace_return[2]($t26) at ./sources/governance/validator_set.move:360:9+60
    assume {:print "$track_return(29,3,2):", $t26} $t26 == $t26;

    // goto L5 at ./sources/governance/validator_set.move:360:9+60
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:359:9+50
    // Loop invariant checking block for the loop started with header: L3
    assume {:print "$at(31,14887,14937)"} true;
L4:

    // stop() at ./sources/governance/validator_set.move:359:9+50
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:361:5+1
    assume {:print "$at(31,15012,15013)"} true;
L5:

    // return ($t7, $t8, $t26) at ./sources/governance/validator_set.move:361:5+1
    $ret0 := $t7;
    $ret1 := $t8;
    $ret2 := $t26;
    return;

    // label L6 at ./sources/governance/validator_set.move:361:5+1
L6:

    // abort($t10) at ./sources/governance/validator_set.move:361:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun validator_set::compute_reward_distribution [baseline] at ./sources/governance/validator_set.move:387:5+875
procedure {:inline 1} $2_validator_set_compute_reward_distribution(_$t0: Vec ($2_validator_Validator), _$t1: int, _$t2: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: int;
    var $t7: int;
    var $t8: $2_validator_Validator;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $2_validator_Validator;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation (Vec (int));
    var $t24: Vec (int);
    var $t0: Vec ($2_validator_Validator);
    var $t1: int;
    var $t2: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t23));

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$at(31,16069,16070)"} true;
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // trace_local[total_stake]($t1) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$track_local(29,4,1):", $t1} $t1 == $t1;

    // trace_local[total_reward]($t2) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$track_local(29,4,2):", $t2} $t2 == $t2;

    // $t5 := vector::empty<u64>() on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:392:23+15
    assume {:print "$at(31,16238,16253)"} true;
    call $t5 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(31,16238,16253)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[results]($t5) at ./sources/governance/validator_set.move:392:13+7
    assume {:print "$track_local(29,4,5):", $t5} $t5 == $t5;

    // $t10 := vector::length<validator::Validator>($t0) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:393:22+26
    assume {:print "$at(31,16276,16302)"} true;
    call $t10 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,16276,16302)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[length]($t10) at ./sources/governance/validator_set.move:393:13+6
    assume {:print "$track_local(29,4,4):", $t10} $t10 == $t10;

    // $t11 := 0 at ./sources/governance/validator_set.move:394:17+1
    assume {:print "$at(31,16320,16321)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:394:13+1
    assume {:print "$track_local(29,4,3):", $t11} $t11 == $t11;

    // label L3 at ./sources/governance/validator_set.move:395:16+1
    assume {:print "$at(31,16338,16339)"} true;
L3:

    // havoc[val]($t11) at ./sources/governance/validator_set.move:395:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t5) at ./sources/governance/validator_set.move:395:16+1
    havoc $t5;
    assume $IsValid'vec'u64''($t5);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:395:16+1
    havoc $t12;
    assume $IsValid'bool'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:395:16+1
    havoc $t13;
    assume $IsValid'$2_validator_Validator'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:395:16+1
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:395:16+1
    havoc $t15;
    assume $IsValid'u128'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:395:16+1
    havoc $t16;
    assume $IsValid'u128'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:395:16+1
    havoc $t17;
    assume $IsValid'u128'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:395:16+1
    havoc $t18;
    assume $IsValid'u128'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:395:16+1
    havoc $t19;
    assume $IsValid'u128'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:395:16+1
    havoc $t20;
    assume $IsValid'u64'($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:395:16+1
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:395:16+1
    havoc $t22;
    assume $IsValid'u64'($t22);

    // havoc[mut_all]($t23) at ./sources/governance/validator_set.move:395:16+1
    havoc $t23;
    assume $IsValid'vec'u64''($Dereference($t23));

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:395:16+1
    assume {:print "$info(): enter loop, variable(s) i, results havocked and reassigned"} true;
    assume {:print "$track_local(29,4,3):", $t11} $t11 == $t11;

    // trace_local[results]($t5) at ./sources/governance/validator_set.move:395:16+1
    assume {:print "$track_local(29,4,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:395:16+1
    assume !$abort_flag;

    // $t12 := <($t11, $t10) at ./sources/governance/validator_set.move:395:18+1
    call $t12 := $Lt($t11, $t10);

    // if ($t12) goto L0 else goto L2 at ./sources/governance/validator_set.move:395:9+590
    if ($t12) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:396:44+10
    assume {:print "$at(31,16395,16405)"} true;
L0:

    // $t13 := vector::borrow<validator::Validator>($t0, $t11) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:396:29+29
    call $t13 := $1_vector_borrow'$2_validator_Validator'($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,16380,16409)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[validator]($t13) at ./sources/governance/validator_set.move:396:17+9
    assume {:print "$track_local(29,4,8):", $t13} $t13 == $t13;

    // $t14 := validator::stake_amount($t13) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:400:39+34
    assume {:print "$at(31,16680,16714)"} true;
    call $t14 := $2_validator_stake_amount($t13);
    if ($abort_flag) {
        assume {:print "$at(31,16680,16714)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t15 := (u128)($t14) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:400:38+44
    call $t15 := $CastU128($t14);
    if ($abort_flag) {
        assume {:print "$at(31,16679,16723)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[stake_amount]($t15) at ./sources/governance/validator_set.move:400:17+12
    assume {:print "$track_local(29,4,7):", $t15} $t15 == $t15;

    // $t16 := (u128)($t2) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:48+22
    assume {:print "$at(31,16772,16794)"} true;
    call $t16 := $CastU128($t2);
    if ($abort_flag) {
        assume {:print "$at(31,16772,16794)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t17 := *($t15, $t16) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:46+1
    call $t17 := $MulU128($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(31,16770,16771)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t18 := (u128)($t1) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:73+21
    call $t18 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(31,16797,16818)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t19 := /($t17, $t18) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:71+1
    call $t19 := $Div($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,16795,16796)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[reward_amount]($t19) at ./sources/governance/validator_set.move:401:17+13
    assume {:print "$track_local(29,4,6):", $t19} $t19 == $t19;

    // $t23 := borrow_local($t5) at ./sources/governance/validator_set.move:402:31+12
    assume {:print "$at(31,16850,16862)"} true;
    $t23 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t20 := (u64)($t19) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:402:45+22
    call $t20 := $CastU64($t19);
    if ($abort_flag) {
        assume {:print "$at(31,16864,16886)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // vector::push_back<u64>($t23, $t20) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:402:13+55
    call $t23 := $1_vector_push_back'u64'($t23, $t20);
    if ($abort_flag) {
        assume {:print "$at(31,16832,16887)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // write_back[LocalRoot($t5)@]($t23) at ./sources/governance/validator_set.move:402:13+55
    $t5 := $Dereference($t23);

    // trace_local[results]($t5) at ./sources/governance/validator_set.move:402:13+55
    assume {:print "$track_local(29,4,5):", $t5} $t5 == $t5;

    // $t21 := 1 at ./sources/governance/validator_set.move:403:21+1
    assume {:print "$at(31,16909,16910)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t11, $t21) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:403:19+1
    call $t22 := $AddU64($t11, $t21);
    if ($abort_flag) {
        assume {:print "$at(31,16907,16908)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[i]($t22) at ./sources/governance/validator_set.move:403:13+1
    assume {:print "$track_local(29,4,3):", $t22} $t22 == $t22;

    // goto L4 at ./sources/governance/validator_set.move:403:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:405:9+7
    assume {:print "$at(31,16931,16938)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:405:9+7

    // $t24 := move($t5) at ./sources/governance/validator_set.move:405:9+7
    $t24 := $t5;

    // trace_return[0]($t24) at ./sources/governance/validator_set.move:405:9+7
    assume {:print "$track_return(29,4,0):", $t24} $t24 == $t24;

    // goto L5 at ./sources/governance/validator_set.move:405:9+7
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:405:9+7
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:405:9+7
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:406:5+1
    assume {:print "$at(31,16943,16944)"} true;
L5:

    // return $t24 at ./sources/governance/validator_set.move:406:5+1
    $ret0 := $t24;
    return;

    // label L6 at ./sources/governance/validator_set.move:406:5+1
L6:

    // abort($t9) at ./sources/governance/validator_set.move:406:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun validator_set::compute_reward_distribution [verification] at ./sources/governance/validator_set.move:387:5+875
procedure {:timeLimit 40} $2_validator_set_compute_reward_distribution$verify(_$t0: Vec ($2_validator_Validator), _$t1: int, _$t2: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: int;
    var $t7: int;
    var $t8: $2_validator_Validator;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $2_validator_Validator;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation (Vec (int));
    var $t24: Vec (int);
    var $t0: Vec ($2_validator_Validator);
    var $t1: int;
    var $t2: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t23));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$at(31,16069,16070)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:387:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:387:5+1
    assume $IsValid'u64'($t2);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // trace_local[total_stake]($t1) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$track_local(29,4,1):", $t1} $t1 == $t1;

    // trace_local[total_reward]($t2) at ./sources/governance/validator_set.move:387:5+1
    assume {:print "$track_local(29,4,2):", $t2} $t2 == $t2;

    // $t5 := vector::empty<u64>() on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:392:23+15
    assume {:print "$at(31,16238,16253)"} true;
    call $t5 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(31,16238,16253)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[results]($t5) at ./sources/governance/validator_set.move:392:13+7
    assume {:print "$track_local(29,4,5):", $t5} $t5 == $t5;

    // $t10 := vector::length<validator::Validator>($t0) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:393:22+26
    assume {:print "$at(31,16276,16302)"} true;
    call $t10 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,16276,16302)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[length]($t10) at ./sources/governance/validator_set.move:393:13+6
    assume {:print "$track_local(29,4,4):", $t10} $t10 == $t10;

    // $t11 := 0 at ./sources/governance/validator_set.move:394:17+1
    assume {:print "$at(31,16320,16321)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:394:13+1
    assume {:print "$track_local(29,4,3):", $t11} $t11 == $t11;

    // label L3 at ./sources/governance/validator_set.move:395:16+1
    assume {:print "$at(31,16338,16339)"} true;
L3:

    // havoc[val]($t11) at ./sources/governance/validator_set.move:395:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t5) at ./sources/governance/validator_set.move:395:16+1
    havoc $t5;
    assume $IsValid'vec'u64''($t5);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:395:16+1
    havoc $t12;
    assume $IsValid'bool'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:395:16+1
    havoc $t13;
    assume $IsValid'$2_validator_Validator'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:395:16+1
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:395:16+1
    havoc $t15;
    assume $IsValid'u128'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:395:16+1
    havoc $t16;
    assume $IsValid'u128'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:395:16+1
    havoc $t17;
    assume $IsValid'u128'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:395:16+1
    havoc $t18;
    assume $IsValid'u128'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:395:16+1
    havoc $t19;
    assume $IsValid'u128'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:395:16+1
    havoc $t20;
    assume $IsValid'u64'($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:395:16+1
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:395:16+1
    havoc $t22;
    assume $IsValid'u64'($t22);

    // havoc[mut_all]($t23) at ./sources/governance/validator_set.move:395:16+1
    havoc $t23;
    assume $IsValid'vec'u64''($Dereference($t23));

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:395:16+1
    assume {:print "$info(): enter loop, variable(s) i, results havocked and reassigned"} true;
    assume {:print "$track_local(29,4,3):", $t11} $t11 == $t11;

    // trace_local[results]($t5) at ./sources/governance/validator_set.move:395:16+1
    assume {:print "$track_local(29,4,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:395:16+1
    assume !$abort_flag;

    // $t12 := <($t11, $t10) at ./sources/governance/validator_set.move:395:18+1
    call $t12 := $Lt($t11, $t10);

    // if ($t12) goto L0 else goto L2 at ./sources/governance/validator_set.move:395:9+590
    if ($t12) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:396:44+10
    assume {:print "$at(31,16395,16405)"} true;
L0:

    // $t13 := vector::borrow<validator::Validator>($t0, $t11) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:396:29+29
    call $t13 := $1_vector_borrow'$2_validator_Validator'($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,16380,16409)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[validator]($t13) at ./sources/governance/validator_set.move:396:17+9
    assume {:print "$track_local(29,4,8):", $t13} $t13 == $t13;

    // $t14 := validator::stake_amount($t13) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:400:39+34
    assume {:print "$at(31,16680,16714)"} true;
    call $t14 := $2_validator_stake_amount($t13);
    if ($abort_flag) {
        assume {:print "$at(31,16680,16714)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t15 := (u128)($t14) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:400:38+44
    call $t15 := $CastU128($t14);
    if ($abort_flag) {
        assume {:print "$at(31,16679,16723)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[stake_amount]($t15) at ./sources/governance/validator_set.move:400:17+12
    assume {:print "$track_local(29,4,7):", $t15} $t15 == $t15;

    // $t16 := (u128)($t2) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:48+22
    assume {:print "$at(31,16772,16794)"} true;
    call $t16 := $CastU128($t2);
    if ($abort_flag) {
        assume {:print "$at(31,16772,16794)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t17 := *($t15, $t16) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:46+1
    call $t17 := $MulU128($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(31,16770,16771)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t18 := (u128)($t1) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:73+21
    call $t18 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(31,16797,16818)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t19 := /($t17, $t18) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:401:71+1
    call $t19 := $Div($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,16795,16796)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[reward_amount]($t19) at ./sources/governance/validator_set.move:401:17+13
    assume {:print "$track_local(29,4,6):", $t19} $t19 == $t19;

    // $t23 := borrow_local($t5) at ./sources/governance/validator_set.move:402:31+12
    assume {:print "$at(31,16850,16862)"} true;
    $t23 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t20 := (u64)($t19) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:402:45+22
    call $t20 := $CastU64($t19);
    if ($abort_flag) {
        assume {:print "$at(31,16864,16886)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // vector::push_back<u64>($t23, $t20) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:402:13+55
    call $t23 := $1_vector_push_back'u64'($t23, $t20);
    if ($abort_flag) {
        assume {:print "$at(31,16832,16887)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // write_back[LocalRoot($t5)@]($t23) at ./sources/governance/validator_set.move:402:13+55
    $t5 := $Dereference($t23);

    // trace_local[results]($t5) at ./sources/governance/validator_set.move:402:13+55
    assume {:print "$track_local(29,4,5):", $t5} $t5 == $t5;

    // $t21 := 1 at ./sources/governance/validator_set.move:403:21+1
    assume {:print "$at(31,16909,16910)"} true;
    $t21 := 1;
    assume $IsValid'u64'($t21);

    // $t22 := +($t11, $t21) on_abort goto L6 with $t9 at ./sources/governance/validator_set.move:403:19+1
    call $t22 := $AddU64($t11, $t21);
    if ($abort_flag) {
        assume {:print "$at(31,16907,16908)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,4):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[i]($t22) at ./sources/governance/validator_set.move:403:13+1
    assume {:print "$track_local(29,4,3):", $t22} $t22 == $t22;

    // goto L4 at ./sources/governance/validator_set.move:403:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:405:9+7
    assume {:print "$at(31,16931,16938)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:405:9+7

    // $t24 := move($t5) at ./sources/governance/validator_set.move:405:9+7
    $t24 := $t5;

    // trace_return[0]($t24) at ./sources/governance/validator_set.move:405:9+7
    assume {:print "$track_return(29,4,0):", $t24} $t24 == $t24;

    // goto L5 at ./sources/governance/validator_set.move:405:9+7
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:405:9+7
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:405:9+7
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:406:5+1
    assume {:print "$at(31,16943,16944)"} true;
L5:

    // return $t24 at ./sources/governance/validator_set.move:406:5+1
    $ret0 := $t24;
    return;

    // label L6 at ./sources/governance/validator_set.move:406:5+1
L6:

    // abort($t9) at ./sources/governance/validator_set.move:406:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun validator_set::contains_duplicate_validator [baseline] at ./sources/governance/validator_set.move:256:5+399
procedure {:inline 1} $2_validator_set_contains_duplicate_validator(_$t0: Vec ($2_validator_Validator), _$t1: $2_validator_Validator) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $2_validator_Validator;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t0: Vec ($2_validator_Validator);
    var $t1: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:256:5+1
    assume {:print "$at(31,10910,10911)"} true;
    assume {:print "$track_local(29,5,0):", $t0} $t0 == $t0;

    // trace_local[new_validator]($t1) at ./sources/governance/validator_set.move:256:5+1
    assume {:print "$track_local(29,5,1):", $t1} $t1 == $t1;

    // $t5 := vector::length<validator::Validator>($t0) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:257:19+26
    assume {:print "$at(31,11028,11054)"} true;
    call $t5 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,11028,11054)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[len]($t5) at ./sources/governance/validator_set.move:257:13+3
    assume {:print "$track_local(29,5,3):", $t5} $t5 == $t5;

    // $t7 := 0 at ./sources/governance/validator_set.move:258:17+1
    assume {:print "$at(31,11072,11073)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:258:13+1
    assume {:print "$track_local(29,5,2):", $t7} $t7 == $t7;

    // label L6 at ./sources/governance/validator_set.move:259:16+1
    assume {:print "$at(31,11090,11091)"} true;
L6:

    // havoc[val]($t7) at ./sources/governance/validator_set.move:259:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:259:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:259:16+1
    havoc $t9;
    assume $IsValid'$2_validator_Validator'($t9);

    // havoc[val]($t10) at ./sources/governance/validator_set.move:259:16+1
    havoc $t10;
    assume $IsValid'bool'($t10);

    // havoc[val]($t11) at ./sources/governance/validator_set.move:259:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:259:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:259:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(29,5,2):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:259:16+1
    assume !$abort_flag;

    // $t8 := <($t7, $t5) at ./sources/governance/validator_set.move:259:18+1
    call $t8 := $Lt($t7, $t5);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator_set.move:259:9+205
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:260:36+10
    assume {:print "$at(31,11136,11146)"} true;
L0:

    // $t9 := vector::borrow<validator::Validator>($t0, $t7) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:260:21+29
    call $t9 := $1_vector_borrow'$2_validator_Validator'($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,11121,11150)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[v]($t9) at ./sources/governance/validator_set.move:260:17+1
    assume {:print "$track_local(29,5,4):", $t9} $t9 == $t9;

    // $t10 := validator::is_duplicate($t9, $t1) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:261:17+41
    assume {:print "$at(31,11168,11209)"} true;
    call $t10 := $2_validator_is_duplicate($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,11168,11209)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // if ($t10) goto L3 else goto L5 at ./sources/governance/validator_set.move:261:13+90
    if ($t10) { goto L3; } else { goto L5; }

    // label L3 at ./sources/governance/validator_set.move:262:17+11
    assume {:print "$at(31,11229,11240)"} true;
L3:

    // destroy($t0) at ./sources/governance/validator_set.move:262:17+11

    // destroy($t1) at ./sources/governance/validator_set.move:262:17+11

    // $t13 := true at ./sources/governance/validator_set.move:262:24+4
    $t13 := true;
    assume $IsValid'bool'($t13);

    // trace_return[0]($t13) at ./sources/governance/validator_set.move:262:17+11
    assume {:print "$track_return(29,5,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at ./sources/governance/validator_set.move:262:17+11
    $t14 := $t13;

    // goto L8 at ./sources/governance/validator_set.move:262:17+11
    goto L8;

    // label L5 at ./sources/governance/validator_set.move:264:17+1
    assume {:print "$at(31,11272,11273)"} true;
L5:

    // $t11 := 1 at ./sources/governance/validator_set.move:264:21+1
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t7, $t11) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:264:19+1
    call $t12 := $AddU64($t7, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,11274,11275)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:264:13+1
    assume {:print "$track_local(29,5,2):", $t12} $t12 == $t12;

    // goto L7 at ./sources/governance/validator_set.move:264:22+1
    goto L7;

    // label L2 at ./sources/governance/validator_set.move:266:9+5
    assume {:print "$at(31,11298,11303)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:266:9+5

    // destroy($t1) at ./sources/governance/validator_set.move:266:9+5

    // $t15 := false at ./sources/governance/validator_set.move:266:9+5
    $t15 := false;
    assume $IsValid'bool'($t15);

    // trace_return[0]($t15) at ./sources/governance/validator_set.move:266:9+5
    assume {:print "$track_return(29,5,0):", $t15} $t15 == $t15;

    // $t14 := move($t15) at ./sources/governance/validator_set.move:266:9+5
    $t14 := $t15;

    // goto L8 at ./sources/governance/validator_set.move:266:9+5
    goto L8;

    // label L7 at ./sources/governance/validator_set.move:266:9+5
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/governance/validator_set.move:266:9+5
    assume false;
    return;

    // label L8 at ./sources/governance/validator_set.move:267:5+1
    assume {:print "$at(31,11308,11309)"} true;
L8:

    // return $t14 at ./sources/governance/validator_set.move:267:5+1
    $ret0 := $t14;
    return;

    // label L9 at ./sources/governance/validator_set.move:267:5+1
L9:

    // abort($t6) at ./sources/governance/validator_set.move:267:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::contains_duplicate_validator [verification] at ./sources/governance/validator_set.move:256:5+399
procedure {:timeLimit 40} $2_validator_set_contains_duplicate_validator$verify(_$t0: Vec ($2_validator_Validator), _$t1: $2_validator_Validator) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $2_validator_Validator;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: bool;
    var $t0: Vec ($2_validator_Validator);
    var $t1: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:256:5+1
    assume {:print "$at(31,10910,10911)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:256:5+1
    assume $IsValid'$2_validator_Validator'($t1);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:256:5+1
    assume {:print "$track_local(29,5,0):", $t0} $t0 == $t0;

    // trace_local[new_validator]($t1) at ./sources/governance/validator_set.move:256:5+1
    assume {:print "$track_local(29,5,1):", $t1} $t1 == $t1;

    // $t5 := vector::length<validator::Validator>($t0) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:257:19+26
    assume {:print "$at(31,11028,11054)"} true;
    call $t5 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,11028,11054)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[len]($t5) at ./sources/governance/validator_set.move:257:13+3
    assume {:print "$track_local(29,5,3):", $t5} $t5 == $t5;

    // $t7 := 0 at ./sources/governance/validator_set.move:258:17+1
    assume {:print "$at(31,11072,11073)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:258:13+1
    assume {:print "$track_local(29,5,2):", $t7} $t7 == $t7;

    // label L6 at ./sources/governance/validator_set.move:259:16+1
    assume {:print "$at(31,11090,11091)"} true;
L6:

    // havoc[val]($t7) at ./sources/governance/validator_set.move:259:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:259:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:259:16+1
    havoc $t9;
    assume $IsValid'$2_validator_Validator'($t9);

    // havoc[val]($t10) at ./sources/governance/validator_set.move:259:16+1
    havoc $t10;
    assume $IsValid'bool'($t10);

    // havoc[val]($t11) at ./sources/governance/validator_set.move:259:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:259:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:259:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(29,5,2):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:259:16+1
    assume !$abort_flag;

    // $t8 := <($t7, $t5) at ./sources/governance/validator_set.move:259:18+1
    call $t8 := $Lt($t7, $t5);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator_set.move:259:9+205
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:260:36+10
    assume {:print "$at(31,11136,11146)"} true;
L0:

    // $t9 := vector::borrow<validator::Validator>($t0, $t7) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:260:21+29
    call $t9 := $1_vector_borrow'$2_validator_Validator'($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,11121,11150)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[v]($t9) at ./sources/governance/validator_set.move:260:17+1
    assume {:print "$track_local(29,5,4):", $t9} $t9 == $t9;

    // $t10 := validator::is_duplicate($t9, $t1) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:261:17+41
    assume {:print "$at(31,11168,11209)"} true;
    call $t10 := $2_validator_is_duplicate($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,11168,11209)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // if ($t10) goto L3 else goto L5 at ./sources/governance/validator_set.move:261:13+90
    if ($t10) { goto L3; } else { goto L5; }

    // label L3 at ./sources/governance/validator_set.move:262:17+11
    assume {:print "$at(31,11229,11240)"} true;
L3:

    // destroy($t0) at ./sources/governance/validator_set.move:262:17+11

    // destroy($t1) at ./sources/governance/validator_set.move:262:17+11

    // $t13 := true at ./sources/governance/validator_set.move:262:24+4
    $t13 := true;
    assume $IsValid'bool'($t13);

    // trace_return[0]($t13) at ./sources/governance/validator_set.move:262:17+11
    assume {:print "$track_return(29,5,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at ./sources/governance/validator_set.move:262:17+11
    $t14 := $t13;

    // goto L8 at ./sources/governance/validator_set.move:262:17+11
    goto L8;

    // label L5 at ./sources/governance/validator_set.move:264:17+1
    assume {:print "$at(31,11272,11273)"} true;
L5:

    // $t11 := 1 at ./sources/governance/validator_set.move:264:21+1
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t7, $t11) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:264:19+1
    call $t12 := $AddU64($t7, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,11274,11275)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,5):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:264:13+1
    assume {:print "$track_local(29,5,2):", $t12} $t12 == $t12;

    // goto L7 at ./sources/governance/validator_set.move:264:22+1
    goto L7;

    // label L2 at ./sources/governance/validator_set.move:266:9+5
    assume {:print "$at(31,11298,11303)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:266:9+5

    // destroy($t1) at ./sources/governance/validator_set.move:266:9+5

    // $t15 := false at ./sources/governance/validator_set.move:266:9+5
    $t15 := false;
    assume $IsValid'bool'($t15);

    // trace_return[0]($t15) at ./sources/governance/validator_set.move:266:9+5
    assume {:print "$track_return(29,5,0):", $t15} $t15 == $t15;

    // $t14 := move($t15) at ./sources/governance/validator_set.move:266:9+5
    $t14 := $t15;

    // goto L8 at ./sources/governance/validator_set.move:266:9+5
    goto L8;

    // label L7 at ./sources/governance/validator_set.move:266:9+5
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/governance/validator_set.move:266:9+5
    assume false;
    return;

    // label L8 at ./sources/governance/validator_set.move:267:5+1
    assume {:print "$at(31,11308,11309)"} true;
L8:

    // return $t14 at ./sources/governance/validator_set.move:267:5+1
    $ret0 := $t14;
    return;

    // label L9 at ./sources/governance/validator_set.move:267:5+1
L9:

    // abort($t6) at ./sources/governance/validator_set.move:267:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::create_epoch_records [baseline] at ./sources/governance/validator_set.move:171:5+653
procedure {:inline 1} $2_validator_set_create_epoch_records(_$t0: $2_validator_set_ValidatorSet, _$t1: int, _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: $2_validator_Validator;
    var $t8: Vec ($2_validator_Validator);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: Vec ($2_validator_Validator);
    var $t14: $2_validator_Validator;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$at(31,7337,7338)"} true;
    assume {:print "$track_local(29,6,0):", $t0} $t0 == $t0;

    // trace_local[epoch]($t1) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,1):", $t1} $t1 == $t1;

    // trace_local[computation_charge]($t2) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,2):", $t2} $t2 == $t2;

    // trace_local[total_stake]($t3) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:171:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:178:37+23
    assume {:print "$at(31,7559,7582)"} true;
    $t8 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t9 := vector::length<validator::Validator>($t8) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:178:22+39
    call $t9 := $1_vector_length'$2_validator_Validator'($t8);
    if ($abort_flag) {
        assume {:print "$at(31,7544,7583)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[length]($t9) at ./sources/governance/validator_set.move:178:13+6
    assume {:print "$track_local(29,6,6):", $t9} $t9 == $t9;

    // $t11 := 0 at ./sources/governance/validator_set.move:179:17+1
    assume {:print "$at(31,7601,7602)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:179:13+1
    assume {:print "$track_local(29,6,5):", $t11} $t11 == $t11;

    // label L3 at ./sources/governance/validator_set.move:180:16+1
    assume {:print "$at(31,7619,7620)"} true;
L3:

    // havoc[val]($t11) at ./sources/governance/validator_set.move:180:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:180:16+1
    havoc $t12;
    assume $IsValid'bool'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:180:16+1
    havoc $t13;
    assume $IsValid'vec'$2_validator_Validator''($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:180:16+1
    havoc $t14;
    assume $IsValid'$2_validator_Validator'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:180:16+1
    havoc $t15;
    assume $IsValid'u64'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:180:16+1
    havoc $t16;
    assume $IsValid'address'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:180:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:180:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[mut]($t4) at ./sources/governance/validator_set.move:180:16+1
    havoc $temp_0'$2_tx_context_TxContext';
    $t4 := $UpdateMutation($t4, $temp_0'$2_tx_context_TxContext');
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:180:16+1
    assume {:print "$info(): enter loop, variable(s) ctx, i havocked and reassigned"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:180:16+1
    assume {:print "$track_local(29,6,5):", $t11} $t11 == $t11;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:180:16+1
    assume !$abort_flag;

    // $t12 := <($t11, $t9) at ./sources/governance/validator_set.move:180:18+1
    call $t12 := $Lt($t11, $t9);

    // if ($t12) goto L0 else goto L2 at ./sources/governance/validator_set.move:180:9+372
    if ($t12) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:181:37+4
    assume {:print "$at(31,7669,7673)"} true;
L0:

    // $t13 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:181:36+23
    $t13 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t14 := vector::borrow<validator::Validator>($t13, $t11) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:181:21+42
    call $t14 := $1_vector_borrow'$2_validator_Validator'($t13, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,7653,7695)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[v]($t14) at ./sources/governance/validator_set.move:181:17+1
    assume {:print "$track_local(29,6,7):", $t14} $t14 == $t14;

    // $t15 := validator::delegator_count($t14) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:186:17+29
    assume {:print "$at(31,7842,7871)"} true;
    call $t15 := $2_validator_delegator_count($t14);
    if ($abort_flag) {
        assume {:print "$at(31,7842,7871)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t16 := validator::sui_address($t14) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:187:17+25
    assume {:print "$at(31,7889,7914)"} true;
    call $t16 := $2_validator_sui_address($t14);
    if ($abort_flag) {
        assume {:print "$at(31,7889,7914)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // epoch_reward_record::create($t1, $t2, $t3, $t15, $t16, $t4) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:182:13+241
    assume {:print "$at(31,7709,7950)"} true;
    call $t4 := $2_epoch_reward_record_create($t1, $t2, $t3, $t15, $t16, $t4);
    if ($abort_flag) {
        assume {:print "$at(31,7709,7950)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t17 := 1 at ./sources/governance/validator_set.move:190:21+1
    assume {:print "$at(31,7972,7973)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t11, $t17) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:190:19+1
    call $t18 := $AddU64($t11, $t17);
    if ($abort_flag) {
        assume {:print "$at(31,7970,7971)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[i]($t18) at ./sources/governance/validator_set.move:190:13+1
    assume {:print "$track_local(29,6,5):", $t18} $t18 == $t18;

    // goto L4 at ./sources/governance/validator_set.move:190:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:180:9+372
    assume {:print "$at(31,7612,7984)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:180:9+372

    // destroy($t4) at ./sources/governance/validator_set.move:180:9+372

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:180:9+372
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/governance/validator_set.move:180:9+372
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:180:9+372
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:180:9+372
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:192:5+1
    assume {:print "$at(31,7989,7990)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:192:5+1
    $ret0 := $t4;
    return;

    // label L6 at ./sources/governance/validator_set.move:192:5+1
L6:

    // abort($t10) at ./sources/governance/validator_set.move:192:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun validator_set::create_epoch_records [verification] at ./sources/governance/validator_set.move:171:5+653
procedure {:timeLimit 40} $2_validator_set_create_epoch_records$verify(_$t0: $2_validator_set_ValidatorSet, _$t1: int, _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: $2_validator_Validator;
    var $t8: Vec ($2_validator_Validator);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: Vec ($2_validator_Validator);
    var $t14: $2_validator_Validator;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$at(31,7337,7338)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:171:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:171:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/governance/validator_set.move:171:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/governance/validator_set.move:171:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,0):", $t0} $t0 == $t0;

    // trace_local[epoch]($t1) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,1):", $t1} $t1 == $t1;

    // trace_local[computation_charge]($t2) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,2):", $t2} $t2 == $t2;

    // trace_local[total_stake]($t3) at ./sources/governance/validator_set.move:171:5+1
    assume {:print "$track_local(29,6,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:171:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t8 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:178:37+23
    assume {:print "$at(31,7559,7582)"} true;
    $t8 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t9 := vector::length<validator::Validator>($t8) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:178:22+39
    call $t9 := $1_vector_length'$2_validator_Validator'($t8);
    if ($abort_flag) {
        assume {:print "$at(31,7544,7583)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[length]($t9) at ./sources/governance/validator_set.move:178:13+6
    assume {:print "$track_local(29,6,6):", $t9} $t9 == $t9;

    // $t11 := 0 at ./sources/governance/validator_set.move:179:17+1
    assume {:print "$at(31,7601,7602)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:179:13+1
    assume {:print "$track_local(29,6,5):", $t11} $t11 == $t11;

    // label L3 at ./sources/governance/validator_set.move:180:16+1
    assume {:print "$at(31,7619,7620)"} true;
L3:

    // havoc[val]($t11) at ./sources/governance/validator_set.move:180:16+1
    havoc $t11;
    assume $IsValid'u64'($t11);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:180:16+1
    havoc $t12;
    assume $IsValid'bool'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:180:16+1
    havoc $t13;
    assume $IsValid'vec'$2_validator_Validator''($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:180:16+1
    havoc $t14;
    assume $IsValid'$2_validator_Validator'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:180:16+1
    havoc $t15;
    assume $IsValid'u64'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:180:16+1
    havoc $t16;
    assume $IsValid'address'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:180:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:180:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[mut]($t4) at ./sources/governance/validator_set.move:180:16+1
    havoc $temp_0'$2_tx_context_TxContext';
    $t4 := $UpdateMutation($t4, $temp_0'$2_tx_context_TxContext');
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:180:16+1
    assume {:print "$info(): enter loop, variable(s) ctx, i havocked and reassigned"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[i]($t11) at ./sources/governance/validator_set.move:180:16+1
    assume {:print "$track_local(29,6,5):", $t11} $t11 == $t11;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:180:16+1
    assume !$abort_flag;

    // $t12 := <($t11, $t9) at ./sources/governance/validator_set.move:180:18+1
    call $t12 := $Lt($t11, $t9);

    // if ($t12) goto L0 else goto L2 at ./sources/governance/validator_set.move:180:9+372
    if ($t12) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:181:37+4
    assume {:print "$at(31,7669,7673)"} true;
L0:

    // $t13 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:181:36+23
    $t13 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t14 := vector::borrow<validator::Validator>($t13, $t11) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:181:21+42
    call $t14 := $1_vector_borrow'$2_validator_Validator'($t13, $t11);
    if ($abort_flag) {
        assume {:print "$at(31,7653,7695)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[v]($t14) at ./sources/governance/validator_set.move:181:17+1
    assume {:print "$track_local(29,6,7):", $t14} $t14 == $t14;

    // $t15 := validator::delegator_count($t14) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:186:17+29
    assume {:print "$at(31,7842,7871)"} true;
    call $t15 := $2_validator_delegator_count($t14);
    if ($abort_flag) {
        assume {:print "$at(31,7842,7871)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t16 := validator::sui_address($t14) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:187:17+25
    assume {:print "$at(31,7889,7914)"} true;
    call $t16 := $2_validator_sui_address($t14);
    if ($abort_flag) {
        assume {:print "$at(31,7889,7914)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // epoch_reward_record::create($t1, $t2, $t3, $t15, $t16, $t4) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:182:13+241
    assume {:print "$at(31,7709,7950)"} true;
    call $t4 := $2_epoch_reward_record_create($t1, $t2, $t3, $t15, $t16, $t4);
    if ($abort_flag) {
        assume {:print "$at(31,7709,7950)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t17 := 1 at ./sources/governance/validator_set.move:190:21+1
    assume {:print "$at(31,7972,7973)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t11, $t17) on_abort goto L6 with $t10 at ./sources/governance/validator_set.move:190:19+1
    call $t18 := $AddU64($t11, $t17);
    if ($abort_flag) {
        assume {:print "$at(31,7970,7971)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(29,6):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[i]($t18) at ./sources/governance/validator_set.move:190:13+1
    assume {:print "$track_local(29,6,5):", $t18} $t18 == $t18;

    // goto L4 at ./sources/governance/validator_set.move:190:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:180:9+372
    assume {:print "$at(31,7612,7984)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:180:9+372

    // destroy($t4) at ./sources/governance/validator_set.move:180:9+372

    // trace_local[ctx]($t4) at ./sources/governance/validator_set.move:180:9+372
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(29,6,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/governance/validator_set.move:180:9+372
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:180:9+372
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:180:9+372
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:192:5+1
    assume {:print "$at(31,7989,7990)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:192:5+1
    $ret0 := $t4;
    return;

    // label L6 at ./sources/governance/validator_set.move:192:5+1
L6:

    // abort($t10) at ./sources/governance/validator_set.move:192:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun validator_set::derive_next_epoch_validators [baseline] at ./sources/governance/validator_set.move:429:5+1367
procedure {:inline 1} $2_validator_set_derive_next_epoch_validators(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: Vec ($2_validator_ValidatorMetadata))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $2_validator_ValidatorMetadata;
    var $t4: $2_validator_ValidatorMetadata;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: Vec ($2_validator_ValidatorMetadata);
    var $t9: Vec ($2_validator_Validator);
    var $t10: int;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: Vec (int);
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: Vec ($2_validator_Validator);
    var $t30: int;
    var $t31: int;
    var $t32: $2_validator_Validator;
    var $t33: $2_validator_ValidatorMetadata;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t37: int;
    var $t38: Vec ($2_validator_Validator);
    var $t39: int;
    var $t40: bool;
    var $t41: Vec ($2_validator_Validator);
    var $t42: $2_validator_Validator;
    var $t43: $2_validator_ValidatorMetadata;
    var $t44: int;
    var $t45: int;
    var $t46: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t47: Vec ($2_validator_ValidatorMetadata);
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_ValidatorMetadata': $2_validator_ValidatorMetadata;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_ValidatorMetadata'': Vec ($2_validator_ValidatorMetadata);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t36));
    assume IsEmptyVec(p#$Mutation($t46));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:429:5+1
    assume {:print "$at(31,17887,17888)"} true;
    assume {:print "$track_local(29,7,0):", $t0} $t0 == $t0;

    // $t9 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:430:43+23
    assume {:print "$at(31,18012,18035)"} true;
    $t9 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t10 := vector::length<validator::Validator>($t9) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:430:28+39
    call $t10 := $1_vector_length'$2_validator_Validator'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,17997,18036)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[active_count]($t10) at ./sources/governance/validator_set.move:430:13+12
    assume {:print "$track_local(29,7,1):", $t10} $t10 == $t10;

    // $t12 := get_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:431:44+22
    assume {:print "$at(31,18081,18103)"} true;
    $t12 := $pending_removals#$2_validator_set_ValidatorSet($t0);

    // $t13 := vector::length<u64>($t12) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:431:29+38
    call $t13 := $1_vector_length'u64'($t12);
    if ($abort_flag) {
        assume {:print "$at(31,18066,18104)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[removal_count]($t13) at ./sources/governance/validator_set.move:431:13+13
    assume {:print "$track_local(29,7,6):", $t13} $t13 == $t13;

    // $t8 := vector::empty<validator::ValidatorMetadata>() on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:432:22+15
    assume {:print "$at(31,18127,18142)"} true;
    call $t8 := $1_vector_empty'$2_validator_ValidatorMetadata'();
    if ($abort_flag) {
        assume {:print "$at(31,18127,18142)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:432:13+6
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // label L8 at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$at(31,18159,18171)"} true;
L8:

    // havoc[val]($t10) at ./sources/governance/validator_set.move:433:16+12
    havoc $t10;
    assume $IsValid'u64'($t10);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:433:16+12
    havoc $t13;
    assume $IsValid'u64'($t13);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:433:16+12
    havoc $t8;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($t8);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:433:16+12
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:433:16+12
    havoc $t15;
    assume $IsValid'bool'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:433:16+12
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:433:16+12
    havoc $t17;
    assume $IsValid'bool'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:433:16+12
    havoc $t18;
    assume $IsValid'vec'u64''($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:433:16+12
    havoc $t19;
    assume $IsValid'u64'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:433:16+12
    havoc $t20;
    assume $IsValid'u64'($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:433:16+12
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:433:16+12
    havoc $t22;
    assume $IsValid'u64'($t22);

    // havoc[val]($t23) at ./sources/governance/validator_set.move:433:16+12
    havoc $t23;
    assume $IsValid'u64'($t23);

    // havoc[val]($t24) at ./sources/governance/validator_set.move:433:16+12
    havoc $t24;
    assume $IsValid'bool'($t24);

    // havoc[val]($t25) at ./sources/governance/validator_set.move:433:16+12
    havoc $t25;
    assume $IsValid'u64'($t25);

    // havoc[val]($t26) at ./sources/governance/validator_set.move:433:16+12
    havoc $t26;
    assume $IsValid'u64'($t26);

    // havoc[val]($t27) at ./sources/governance/validator_set.move:433:16+12
    havoc $t27;
    assume $IsValid'u64'($t27);

    // havoc[val]($t28) at ./sources/governance/validator_set.move:433:16+12
    havoc $t28;
    assume $IsValid'u64'($t28);

    // havoc[val]($t29) at ./sources/governance/validator_set.move:433:16+12
    havoc $t29;
    assume $IsValid'vec'$2_validator_Validator''($t29);

    // havoc[val]($t30) at ./sources/governance/validator_set.move:433:16+12
    havoc $t30;
    assume $IsValid'u64'($t30);

    // havoc[val]($t31) at ./sources/governance/validator_set.move:433:16+12
    havoc $t31;
    assume $IsValid'u64'($t31);

    // havoc[val]($t32) at ./sources/governance/validator_set.move:433:16+12
    havoc $t32;
    assume $IsValid'$2_validator_Validator'($t32);

    // havoc[val]($t33) at ./sources/governance/validator_set.move:433:16+12
    havoc $t33;
    assume $IsValid'$2_validator_ValidatorMetadata'($t33);

    // havoc[val]($t34) at ./sources/governance/validator_set.move:433:16+12
    havoc $t34;
    assume $IsValid'u64'($t34);

    // havoc[val]($t35) at ./sources/governance/validator_set.move:433:16+12
    havoc $t35;
    assume $IsValid'u64'($t35);

    // havoc[mut_all]($t36) at ./sources/governance/validator_set.move:433:16+12
    havoc $t36;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($Dereference($t36));

    // trace_local[active_count]($t10) at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$info(): enter loop, variable(s) active_count, removal_count, result havocked and reassigned"} true;
    assume {:print "$track_local(29,7,1):", $t10} $t10 == $t10;

    // trace_local[removal_count]($t13) at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$track_local(29,7,6):", $t13} $t13 == $t13;

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:433:16+12
    assume !$abort_flag;

    // $t14 := 0 at ./sources/governance/validator_set.move:433:31+1
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := >($t10, $t14) at ./sources/governance/validator_set.move:433:29+1
    call $t15 := $Gt($t10, $t14);

    // if ($t15) goto L17 else goto L2 at ./sources/governance/validator_set.move:433:9+742
    if ($t15) { goto L17; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:434:17+13
    assume {:print "$at(31,18195,18208)"} true;
L0:

    // $t16 := 0 at ./sources/governance/validator_set.move:434:33+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t13, $t16) at ./sources/governance/validator_set.move:434:31+1
    call $t17 := $Gt($t13, $t16);

    // if ($t17) goto L3 else goto L5 at ./sources/governance/validator_set.move:434:13+454
    if ($t17) { goto L3; } else { goto L5; }

    // label L3 at ./sources/governance/validator_set.move:435:54+4
    assume {:print "$at(31,18269,18273)"} true;
L3:

    // $t18 := get_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:435:53+22
    $t18 := $pending_removals#$2_validator_set_ValidatorSet($t0);

    // $t19 := 1 at ./sources/governance/validator_set.move:435:93+1
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := -($t13, $t19) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:435:91+1
    call $t20 := $Sub($t13, $t19);
    if ($abort_flag) {
        assume {:print "$at(31,18306,18307)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t21 := vector::borrow<u64>($t18, $t20) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:435:38+57
    call $t21 := $1_vector_borrow'u64'($t18, $t20);
    if ($abort_flag) {
        assume {:print "$at(31,18253,18310)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[removal_index]($t21) at ./sources/governance/validator_set.move:435:21+13
    assume {:print "$track_local(29,7,7):", $t21} $t21 == $t21;

    // $t22 := 1 at ./sources/governance/validator_set.move:436:53+1
    assume {:print "$at(31,18364,18365)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := -($t10, $t22) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:436:51+1
    call $t23 := $Sub($t10, $t22);
    if ($abort_flag) {
        assume {:print "$at(31,18362,18363)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t24 := ==($t21, $t23) at ./sources/governance/validator_set.move:436:35+2
    $t24 := $IsEqual'u64'($t21, $t23);

    // if ($t24) goto L6 else goto L5 at ./sources/governance/validator_set.move:436:17+302
    if ($t24) { goto L6; } else { goto L5; }

    // label L6 at ./sources/governance/validator_set.move:438:37+13
    assume {:print "$at(31,18512,18525)"} true;
L6:

    // $t25 := 1 at ./sources/governance/validator_set.move:438:53+1
    $t25 := 1;
    assume $IsValid'u64'($t25);

    // $t26 := -($t13, $t25) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:438:51+1
    call $t26 := $Sub($t13, $t25);
    if ($abort_flag) {
        assume {:print "$at(31,18526,18527)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[removal_count]($t26) at ./sources/governance/validator_set.move:438:21+13
    assume {:print "$track_local(29,7,6):", $t26} $t26 == $t26;

    // $t27 := 1 at ./sources/governance/validator_set.move:439:51+1
    assume {:print "$at(31,18581,18582)"} true;
    $t27 := 1;
    assume $IsValid'u64'($t27);

    // $t28 := -($t10, $t27) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:439:49+1
    call $t28 := $Sub($t10, $t27);
    if ($abort_flag) {
        assume {:print "$at(31,18579,18580)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[active_count]($t28) at ./sources/governance/validator_set.move:439:21+12
    assume {:print "$track_local(29,7,1):", $t28} $t28 == $t28;

    // goto L13 at ./sources/governance/validator_set.move:440:21+8
    assume {:print "$at(31,18604,18612)"} true;
    goto L13;

    // label L5 at ./sources/governance/validator_set.move:444:33+4
    assume {:print "$at(31,18727,18731)"} true;
L5:

    // $t29 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:444:32+23
    $t29 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t30 := 1 at ./sources/governance/validator_set.move:444:72+1
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := -($t10, $t30) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:444:70+1
    call $t31 := $Sub($t10, $t30);
    if ($abort_flag) {
        assume {:print "$at(31,18764,18765)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t32 := vector::borrow<validator::Validator>($t29, $t31) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:444:17+57
    call $t32 := $1_vector_borrow'$2_validator_Validator'($t29, $t31);
    if ($abort_flag) {
        assume {:print "$at(31,18711,18768)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t33 := validator::metadata($t32) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:443:28+109
    assume {:print "$at(31,18674,18783)"} true;
    call $t33 := $2_validator_metadata($t32);
    if ($abort_flag) {
        assume {:print "$at(31,18674,18783)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[metadata]($t33) at ./sources/governance/validator_set.move:443:17+8
    assume {:print "$track_local(29,7,3):", $t33} $t33 == $t33;

    // $t36 := borrow_local($t8) at ./sources/governance/validator_set.move:446:31+11
    assume {:print "$at(31,18815,18826)"} true;
    $t36 := $Mutation($Local(8), EmptyVec(), $t8);

    // vector::push_back<validator::ValidatorMetadata>($t36, $t33) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:446:13+41
    call $t36 := $1_vector_push_back'$2_validator_ValidatorMetadata'($t36, $t33);
    if ($abort_flag) {
        assume {:print "$at(31,18797,18838)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // write_back[LocalRoot($t8)@]($t36) at ./sources/governance/validator_set.move:446:13+41
    $t8 := $Dereference($t36);

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:446:13+41
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // $t34 := 1 at ./sources/governance/validator_set.move:447:43+1
    assume {:print "$at(31,18882,18883)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // $t35 := -($t10, $t34) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:447:41+1
    call $t35 := $Sub($t10, $t34);
    if ($abort_flag) {
        assume {:print "$at(31,18880,18881)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[active_count]($t35) at ./sources/governance/validator_set.move:447:13+12
    assume {:print "$track_local(29,7,1):", $t35} $t35 == $t35;

    // goto L13 at ./sources/governance/validator_set.move:447:44+1
    goto L13;

    // label L2 at ./sources/governance/validator_set.move:449:17+1
    assume {:print "$at(31,18912,18913)"} true;
L2:

    // $t37 := 0 at ./sources/governance/validator_set.move:449:17+1
    $t37 := 0;
    assume $IsValid'u64'($t37);

    // trace_local[i]($t37) at ./sources/governance/validator_set.move:449:13+1
    assume {:print "$track_local(29,7,2):", $t37} $t37 == $t37;

    // $t38 := get_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:450:44+24
    assume {:print "$at(31,18958,18982)"} true;
    $t38 := $pending_validators#$2_validator_set_ValidatorSet($t0);

    // $t39 := vector::length<validator::Validator>($t38) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:450:29+40
    call $t39 := $1_vector_length'$2_validator_Validator'($t38);
    if ($abort_flag) {
        assume {:print "$at(31,18943,18983)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[pending_count]($t39) at ./sources/governance/validator_set.move:450:13+13
    assume {:print "$track_local(29,7,5):", $t39} $t39 == $t39;

    // label L12 at ./sources/governance/validator_set.move:451:16+1
    assume {:print "$at(31,19000,19001)"} true;
L12:

    // havoc[val]($t37) at ./sources/governance/validator_set.move:451:16+1
    havoc $t37;
    assume $IsValid'u64'($t37);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:451:16+1
    havoc $t8;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($t8);

    // havoc[val]($t40) at ./sources/governance/validator_set.move:451:16+1
    havoc $t40;
    assume $IsValid'bool'($t40);

    // havoc[val]($t41) at ./sources/governance/validator_set.move:451:16+1
    havoc $t41;
    assume $IsValid'vec'$2_validator_Validator''($t41);

    // havoc[val]($t42) at ./sources/governance/validator_set.move:451:16+1
    havoc $t42;
    assume $IsValid'$2_validator_Validator'($t42);

    // havoc[val]($t43) at ./sources/governance/validator_set.move:451:16+1
    havoc $t43;
    assume $IsValid'$2_validator_ValidatorMetadata'($t43);

    // havoc[val]($t44) at ./sources/governance/validator_set.move:451:16+1
    havoc $t44;
    assume $IsValid'u64'($t44);

    // havoc[val]($t45) at ./sources/governance/validator_set.move:451:16+1
    havoc $t45;
    assume $IsValid'u64'($t45);

    // havoc[mut_all]($t46) at ./sources/governance/validator_set.move:451:16+1
    havoc $t46;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($Dereference($t46));

    // trace_local[i]($t37) at ./sources/governance/validator_set.move:451:16+1
    assume {:print "$info(): enter loop, variable(s) i, result havocked and reassigned"} true;
    assume {:print "$track_local(29,7,2):", $t37} $t37 == $t37;

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:451:16+1
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:451:16+1
    assume !$abort_flag;

    // $t40 := <($t37, $t39) at ./sources/governance/validator_set.move:451:18+1
    call $t40 := $Lt($t37, $t39);

    // if ($t40) goto L9 else goto L11 at ./sources/governance/validator_set.move:451:9+239
    if ($t40) { goto L9; } else { goto L11; }

    // label L9 at ./sources/governance/validator_set.move:453:33+4
    assume {:print "$at(31,19101,19105)"} true;
L9:

    // $t41 := get_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:453:32+24
    $t41 := $pending_validators#$2_validator_set_ValidatorSet($t0);

    // $t42 := vector::borrow<validator::Validator>($t41, $t37) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:453:17+43
    call $t42 := $1_vector_borrow'$2_validator_Validator'($t41, $t37);
    if ($abort_flag) {
        assume {:print "$at(31,19085,19128)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t43 := validator::metadata($t42) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:452:28+95
    assume {:print "$at(31,19048,19143)"} true;
    call $t43 := $2_validator_metadata($t42);
    if ($abort_flag) {
        assume {:print "$at(31,19048,19143)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[metadata#1]($t43) at ./sources/governance/validator_set.move:452:17+8
    assume {:print "$track_local(29,7,4):", $t43} $t43 == $t43;

    // $t46 := borrow_local($t8) at ./sources/governance/validator_set.move:455:31+11
    assume {:print "$at(31,19175,19186)"} true;
    $t46 := $Mutation($Local(8), EmptyVec(), $t8);

    // vector::push_back<validator::ValidatorMetadata>($t46, $t43) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:455:13+41
    call $t46 := $1_vector_push_back'$2_validator_ValidatorMetadata'($t46, $t43);
    if ($abort_flag) {
        assume {:print "$at(31,19157,19198)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // write_back[LocalRoot($t8)@]($t46) at ./sources/governance/validator_set.move:455:13+41
    $t8 := $Dereference($t46);

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:455:13+41
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // $t44 := 1 at ./sources/governance/validator_set.move:456:21+1
    assume {:print "$at(31,19220,19221)"} true;
    $t44 := 1;
    assume $IsValid'u64'($t44);

    // $t45 := +($t37, $t44) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:456:19+1
    call $t45 := $AddU64($t37, $t44);
    if ($abort_flag) {
        assume {:print "$at(31,19218,19219)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[i]($t45) at ./sources/governance/validator_set.move:456:13+1
    assume {:print "$track_local(29,7,2):", $t45} $t45 == $t45;

    // goto L14 at ./sources/governance/validator_set.move:456:22+1
    goto L14;

    // label L11 at ./sources/governance/validator_set.move:458:9+6
    assume {:print "$at(31,19242,19248)"} true;
L11:

    // destroy($t0) at ./sources/governance/validator_set.move:458:9+6

    // $t47 := move($t8) at ./sources/governance/validator_set.move:458:9+6
    $t47 := $t8;

    // trace_return[0]($t47) at ./sources/governance/validator_set.move:458:9+6
    assume {:print "$track_return(29,7,0):", $t47} $t47 == $t47;

    // goto L15 at ./sources/governance/validator_set.move:458:9+6
    goto L15;

    // label L13 at ./sources/governance/validator_set.move:458:9+6
    // Loop invariant checking block for the loop started with header: L8
L13:

    // stop() at ./sources/governance/validator_set.move:458:9+6
    assume false;
    return;

    // label L14 at ./sources/governance/validator_set.move:458:9+6
    // Loop invariant checking block for the loop started with header: L12
L14:

    // stop() at ./sources/governance/validator_set.move:458:9+6
    assume false;
    return;

    // label L15 at ./sources/governance/validator_set.move:459:5+1
    assume {:print "$at(31,19253,19254)"} true;
L15:

    // return $t47 at ./sources/governance/validator_set.move:459:5+1
    $ret0 := $t47;
    return;

    // label L16 at ./sources/governance/validator_set.move:459:5+1
L16:

    // abort($t11) at ./sources/governance/validator_set.move:459:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L17 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L17:

    // destroy($t46) at <internal>:1:1+10

    // goto L0 at <internal>:1:1+10
    goto L0;

}

// fun validator_set::derive_next_epoch_validators [verification] at ./sources/governance/validator_set.move:429:5+1367
procedure {:timeLimit 40} $2_validator_set_derive_next_epoch_validators$verify(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: Vec ($2_validator_ValidatorMetadata))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: $2_validator_ValidatorMetadata;
    var $t4: $2_validator_ValidatorMetadata;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: Vec ($2_validator_ValidatorMetadata);
    var $t9: Vec ($2_validator_Validator);
    var $t10: int;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: Vec (int);
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: Vec ($2_validator_Validator);
    var $t30: int;
    var $t31: int;
    var $t32: $2_validator_Validator;
    var $t33: $2_validator_ValidatorMetadata;
    var $t34: int;
    var $t35: int;
    var $t36: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t37: int;
    var $t38: Vec ($2_validator_Validator);
    var $t39: int;
    var $t40: bool;
    var $t41: Vec ($2_validator_Validator);
    var $t42: $2_validator_Validator;
    var $t43: $2_validator_ValidatorMetadata;
    var $t44: int;
    var $t45: int;
    var $t46: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t47: Vec ($2_validator_ValidatorMetadata);
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_ValidatorMetadata': $2_validator_ValidatorMetadata;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_ValidatorMetadata'': Vec ($2_validator_ValidatorMetadata);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t36));
    assume IsEmptyVec(p#$Mutation($t46));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:429:5+1
    assume {:print "$at(31,17887,17888)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:429:5+1
    assume {:print "$track_local(29,7,0):", $t0} $t0 == $t0;

    // $t9 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:430:43+23
    assume {:print "$at(31,18012,18035)"} true;
    $t9 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t10 := vector::length<validator::Validator>($t9) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:430:28+39
    call $t10 := $1_vector_length'$2_validator_Validator'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,17997,18036)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[active_count]($t10) at ./sources/governance/validator_set.move:430:13+12
    assume {:print "$track_local(29,7,1):", $t10} $t10 == $t10;

    // $t12 := get_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:431:44+22
    assume {:print "$at(31,18081,18103)"} true;
    $t12 := $pending_removals#$2_validator_set_ValidatorSet($t0);

    // $t13 := vector::length<u64>($t12) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:431:29+38
    call $t13 := $1_vector_length'u64'($t12);
    if ($abort_flag) {
        assume {:print "$at(31,18066,18104)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[removal_count]($t13) at ./sources/governance/validator_set.move:431:13+13
    assume {:print "$track_local(29,7,6):", $t13} $t13 == $t13;

    // $t8 := vector::empty<validator::ValidatorMetadata>() on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:432:22+15
    assume {:print "$at(31,18127,18142)"} true;
    call $t8 := $1_vector_empty'$2_validator_ValidatorMetadata'();
    if ($abort_flag) {
        assume {:print "$at(31,18127,18142)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:432:13+6
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // label L8 at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$at(31,18159,18171)"} true;
L8:

    // havoc[val]($t10) at ./sources/governance/validator_set.move:433:16+12
    havoc $t10;
    assume $IsValid'u64'($t10);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:433:16+12
    havoc $t13;
    assume $IsValid'u64'($t13);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:433:16+12
    havoc $t8;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($t8);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:433:16+12
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:433:16+12
    havoc $t15;
    assume $IsValid'bool'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:433:16+12
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:433:16+12
    havoc $t17;
    assume $IsValid'bool'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:433:16+12
    havoc $t18;
    assume $IsValid'vec'u64''($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:433:16+12
    havoc $t19;
    assume $IsValid'u64'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:433:16+12
    havoc $t20;
    assume $IsValid'u64'($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:433:16+12
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:433:16+12
    havoc $t22;
    assume $IsValid'u64'($t22);

    // havoc[val]($t23) at ./sources/governance/validator_set.move:433:16+12
    havoc $t23;
    assume $IsValid'u64'($t23);

    // havoc[val]($t24) at ./sources/governance/validator_set.move:433:16+12
    havoc $t24;
    assume $IsValid'bool'($t24);

    // havoc[val]($t25) at ./sources/governance/validator_set.move:433:16+12
    havoc $t25;
    assume $IsValid'u64'($t25);

    // havoc[val]($t26) at ./sources/governance/validator_set.move:433:16+12
    havoc $t26;
    assume $IsValid'u64'($t26);

    // havoc[val]($t27) at ./sources/governance/validator_set.move:433:16+12
    havoc $t27;
    assume $IsValid'u64'($t27);

    // havoc[val]($t28) at ./sources/governance/validator_set.move:433:16+12
    havoc $t28;
    assume $IsValid'u64'($t28);

    // havoc[val]($t29) at ./sources/governance/validator_set.move:433:16+12
    havoc $t29;
    assume $IsValid'vec'$2_validator_Validator''($t29);

    // havoc[val]($t30) at ./sources/governance/validator_set.move:433:16+12
    havoc $t30;
    assume $IsValid'u64'($t30);

    // havoc[val]($t31) at ./sources/governance/validator_set.move:433:16+12
    havoc $t31;
    assume $IsValid'u64'($t31);

    // havoc[val]($t32) at ./sources/governance/validator_set.move:433:16+12
    havoc $t32;
    assume $IsValid'$2_validator_Validator'($t32);

    // havoc[val]($t33) at ./sources/governance/validator_set.move:433:16+12
    havoc $t33;
    assume $IsValid'$2_validator_ValidatorMetadata'($t33);

    // havoc[val]($t34) at ./sources/governance/validator_set.move:433:16+12
    havoc $t34;
    assume $IsValid'u64'($t34);

    // havoc[val]($t35) at ./sources/governance/validator_set.move:433:16+12
    havoc $t35;
    assume $IsValid'u64'($t35);

    // havoc[mut_all]($t36) at ./sources/governance/validator_set.move:433:16+12
    havoc $t36;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($Dereference($t36));

    // trace_local[active_count]($t10) at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$info(): enter loop, variable(s) active_count, removal_count, result havocked and reassigned"} true;
    assume {:print "$track_local(29,7,1):", $t10} $t10 == $t10;

    // trace_local[removal_count]($t13) at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$track_local(29,7,6):", $t13} $t13 == $t13;

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:433:16+12
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:433:16+12
    assume !$abort_flag;

    // $t14 := 0 at ./sources/governance/validator_set.move:433:31+1
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := >($t10, $t14) at ./sources/governance/validator_set.move:433:29+1
    call $t15 := $Gt($t10, $t14);

    // if ($t15) goto L17 else goto L2 at ./sources/governance/validator_set.move:433:9+742
    if ($t15) { goto L17; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:434:17+13
    assume {:print "$at(31,18195,18208)"} true;
L0:

    // $t16 := 0 at ./sources/governance/validator_set.move:434:33+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t13, $t16) at ./sources/governance/validator_set.move:434:31+1
    call $t17 := $Gt($t13, $t16);

    // if ($t17) goto L3 else goto L5 at ./sources/governance/validator_set.move:434:13+454
    if ($t17) { goto L3; } else { goto L5; }

    // label L3 at ./sources/governance/validator_set.move:435:54+4
    assume {:print "$at(31,18269,18273)"} true;
L3:

    // $t18 := get_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:435:53+22
    $t18 := $pending_removals#$2_validator_set_ValidatorSet($t0);

    // $t19 := 1 at ./sources/governance/validator_set.move:435:93+1
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := -($t13, $t19) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:435:91+1
    call $t20 := $Sub($t13, $t19);
    if ($abort_flag) {
        assume {:print "$at(31,18306,18307)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t21 := vector::borrow<u64>($t18, $t20) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:435:38+57
    call $t21 := $1_vector_borrow'u64'($t18, $t20);
    if ($abort_flag) {
        assume {:print "$at(31,18253,18310)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[removal_index]($t21) at ./sources/governance/validator_set.move:435:21+13
    assume {:print "$track_local(29,7,7):", $t21} $t21 == $t21;

    // $t22 := 1 at ./sources/governance/validator_set.move:436:53+1
    assume {:print "$at(31,18364,18365)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := -($t10, $t22) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:436:51+1
    call $t23 := $Sub($t10, $t22);
    if ($abort_flag) {
        assume {:print "$at(31,18362,18363)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t24 := ==($t21, $t23) at ./sources/governance/validator_set.move:436:35+2
    $t24 := $IsEqual'u64'($t21, $t23);

    // if ($t24) goto L6 else goto L5 at ./sources/governance/validator_set.move:436:17+302
    if ($t24) { goto L6; } else { goto L5; }

    // label L6 at ./sources/governance/validator_set.move:438:37+13
    assume {:print "$at(31,18512,18525)"} true;
L6:

    // $t25 := 1 at ./sources/governance/validator_set.move:438:53+1
    $t25 := 1;
    assume $IsValid'u64'($t25);

    // $t26 := -($t13, $t25) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:438:51+1
    call $t26 := $Sub($t13, $t25);
    if ($abort_flag) {
        assume {:print "$at(31,18526,18527)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[removal_count]($t26) at ./sources/governance/validator_set.move:438:21+13
    assume {:print "$track_local(29,7,6):", $t26} $t26 == $t26;

    // $t27 := 1 at ./sources/governance/validator_set.move:439:51+1
    assume {:print "$at(31,18581,18582)"} true;
    $t27 := 1;
    assume $IsValid'u64'($t27);

    // $t28 := -($t10, $t27) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:439:49+1
    call $t28 := $Sub($t10, $t27);
    if ($abort_flag) {
        assume {:print "$at(31,18579,18580)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[active_count]($t28) at ./sources/governance/validator_set.move:439:21+12
    assume {:print "$track_local(29,7,1):", $t28} $t28 == $t28;

    // goto L13 at ./sources/governance/validator_set.move:440:21+8
    assume {:print "$at(31,18604,18612)"} true;
    goto L13;

    // label L5 at ./sources/governance/validator_set.move:444:33+4
    assume {:print "$at(31,18727,18731)"} true;
L5:

    // $t29 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:444:32+23
    $t29 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t30 := 1 at ./sources/governance/validator_set.move:444:72+1
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := -($t10, $t30) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:444:70+1
    call $t31 := $Sub($t10, $t30);
    if ($abort_flag) {
        assume {:print "$at(31,18764,18765)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t32 := vector::borrow<validator::Validator>($t29, $t31) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:444:17+57
    call $t32 := $1_vector_borrow'$2_validator_Validator'($t29, $t31);
    if ($abort_flag) {
        assume {:print "$at(31,18711,18768)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t33 := validator::metadata($t32) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:443:28+109
    assume {:print "$at(31,18674,18783)"} true;
    call $t33 := $2_validator_metadata($t32);
    if ($abort_flag) {
        assume {:print "$at(31,18674,18783)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[metadata]($t33) at ./sources/governance/validator_set.move:443:17+8
    assume {:print "$track_local(29,7,3):", $t33} $t33 == $t33;

    // $t36 := borrow_local($t8) at ./sources/governance/validator_set.move:446:31+11
    assume {:print "$at(31,18815,18826)"} true;
    $t36 := $Mutation($Local(8), EmptyVec(), $t8);

    // vector::push_back<validator::ValidatorMetadata>($t36, $t33) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:446:13+41
    call $t36 := $1_vector_push_back'$2_validator_ValidatorMetadata'($t36, $t33);
    if ($abort_flag) {
        assume {:print "$at(31,18797,18838)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // write_back[LocalRoot($t8)@]($t36) at ./sources/governance/validator_set.move:446:13+41
    $t8 := $Dereference($t36);

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:446:13+41
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // $t34 := 1 at ./sources/governance/validator_set.move:447:43+1
    assume {:print "$at(31,18882,18883)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // $t35 := -($t10, $t34) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:447:41+1
    call $t35 := $Sub($t10, $t34);
    if ($abort_flag) {
        assume {:print "$at(31,18880,18881)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[active_count]($t35) at ./sources/governance/validator_set.move:447:13+12
    assume {:print "$track_local(29,7,1):", $t35} $t35 == $t35;

    // goto L13 at ./sources/governance/validator_set.move:447:44+1
    goto L13;

    // label L2 at ./sources/governance/validator_set.move:449:17+1
    assume {:print "$at(31,18912,18913)"} true;
L2:

    // $t37 := 0 at ./sources/governance/validator_set.move:449:17+1
    $t37 := 0;
    assume $IsValid'u64'($t37);

    // trace_local[i]($t37) at ./sources/governance/validator_set.move:449:13+1
    assume {:print "$track_local(29,7,2):", $t37} $t37 == $t37;

    // $t38 := get_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:450:44+24
    assume {:print "$at(31,18958,18982)"} true;
    $t38 := $pending_validators#$2_validator_set_ValidatorSet($t0);

    // $t39 := vector::length<validator::Validator>($t38) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:450:29+40
    call $t39 := $1_vector_length'$2_validator_Validator'($t38);
    if ($abort_flag) {
        assume {:print "$at(31,18943,18983)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[pending_count]($t39) at ./sources/governance/validator_set.move:450:13+13
    assume {:print "$track_local(29,7,5):", $t39} $t39 == $t39;

    // label L12 at ./sources/governance/validator_set.move:451:16+1
    assume {:print "$at(31,19000,19001)"} true;
L12:

    // havoc[val]($t37) at ./sources/governance/validator_set.move:451:16+1
    havoc $t37;
    assume $IsValid'u64'($t37);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:451:16+1
    havoc $t8;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($t8);

    // havoc[val]($t40) at ./sources/governance/validator_set.move:451:16+1
    havoc $t40;
    assume $IsValid'bool'($t40);

    // havoc[val]($t41) at ./sources/governance/validator_set.move:451:16+1
    havoc $t41;
    assume $IsValid'vec'$2_validator_Validator''($t41);

    // havoc[val]($t42) at ./sources/governance/validator_set.move:451:16+1
    havoc $t42;
    assume $IsValid'$2_validator_Validator'($t42);

    // havoc[val]($t43) at ./sources/governance/validator_set.move:451:16+1
    havoc $t43;
    assume $IsValid'$2_validator_ValidatorMetadata'($t43);

    // havoc[val]($t44) at ./sources/governance/validator_set.move:451:16+1
    havoc $t44;
    assume $IsValid'u64'($t44);

    // havoc[val]($t45) at ./sources/governance/validator_set.move:451:16+1
    havoc $t45;
    assume $IsValid'u64'($t45);

    // havoc[mut_all]($t46) at ./sources/governance/validator_set.move:451:16+1
    havoc $t46;
    assume $IsValid'vec'$2_validator_ValidatorMetadata''($Dereference($t46));

    // trace_local[i]($t37) at ./sources/governance/validator_set.move:451:16+1
    assume {:print "$info(): enter loop, variable(s) i, result havocked and reassigned"} true;
    assume {:print "$track_local(29,7,2):", $t37} $t37 == $t37;

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:451:16+1
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:451:16+1
    assume !$abort_flag;

    // $t40 := <($t37, $t39) at ./sources/governance/validator_set.move:451:18+1
    call $t40 := $Lt($t37, $t39);

    // if ($t40) goto L9 else goto L11 at ./sources/governance/validator_set.move:451:9+239
    if ($t40) { goto L9; } else { goto L11; }

    // label L9 at ./sources/governance/validator_set.move:453:33+4
    assume {:print "$at(31,19101,19105)"} true;
L9:

    // $t41 := get_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:453:32+24
    $t41 := $pending_validators#$2_validator_set_ValidatorSet($t0);

    // $t42 := vector::borrow<validator::Validator>($t41, $t37) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:453:17+43
    call $t42 := $1_vector_borrow'$2_validator_Validator'($t41, $t37);
    if ($abort_flag) {
        assume {:print "$at(31,19085,19128)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // $t43 := validator::metadata($t42) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:452:28+95
    assume {:print "$at(31,19048,19143)"} true;
    call $t43 := $2_validator_metadata($t42);
    if ($abort_flag) {
        assume {:print "$at(31,19048,19143)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[metadata#1]($t43) at ./sources/governance/validator_set.move:452:17+8
    assume {:print "$track_local(29,7,4):", $t43} $t43 == $t43;

    // $t46 := borrow_local($t8) at ./sources/governance/validator_set.move:455:31+11
    assume {:print "$at(31,19175,19186)"} true;
    $t46 := $Mutation($Local(8), EmptyVec(), $t8);

    // vector::push_back<validator::ValidatorMetadata>($t46, $t43) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:455:13+41
    call $t46 := $1_vector_push_back'$2_validator_ValidatorMetadata'($t46, $t43);
    if ($abort_flag) {
        assume {:print "$at(31,19157,19198)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // write_back[LocalRoot($t8)@]($t46) at ./sources/governance/validator_set.move:455:13+41
    $t8 := $Dereference($t46);

    // trace_local[result]($t8) at ./sources/governance/validator_set.move:455:13+41
    assume {:print "$track_local(29,7,8):", $t8} $t8 == $t8;

    // $t44 := 1 at ./sources/governance/validator_set.move:456:21+1
    assume {:print "$at(31,19220,19221)"} true;
    $t44 := 1;
    assume $IsValid'u64'($t44);

    // $t45 := +($t37, $t44) on_abort goto L16 with $t11 at ./sources/governance/validator_set.move:456:19+1
    call $t45 := $AddU64($t37, $t44);
    if ($abort_flag) {
        assume {:print "$at(31,19218,19219)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,7):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[i]($t45) at ./sources/governance/validator_set.move:456:13+1
    assume {:print "$track_local(29,7,2):", $t45} $t45 == $t45;

    // goto L14 at ./sources/governance/validator_set.move:456:22+1
    goto L14;

    // label L11 at ./sources/governance/validator_set.move:458:9+6
    assume {:print "$at(31,19242,19248)"} true;
L11:

    // destroy($t0) at ./sources/governance/validator_set.move:458:9+6

    // $t47 := move($t8) at ./sources/governance/validator_set.move:458:9+6
    $t47 := $t8;

    // trace_return[0]($t47) at ./sources/governance/validator_set.move:458:9+6
    assume {:print "$track_return(29,7,0):", $t47} $t47 == $t47;

    // goto L15 at ./sources/governance/validator_set.move:458:9+6
    goto L15;

    // label L13 at ./sources/governance/validator_set.move:458:9+6
    // Loop invariant checking block for the loop started with header: L8
L13:

    // stop() at ./sources/governance/validator_set.move:458:9+6
    assume false;
    return;

    // label L14 at ./sources/governance/validator_set.move:458:9+6
    // Loop invariant checking block for the loop started with header: L12
L14:

    // stop() at ./sources/governance/validator_set.move:458:9+6
    assume false;
    return;

    // label L15 at ./sources/governance/validator_set.move:459:5+1
    assume {:print "$at(31,19253,19254)"} true;
L15:

    // return $t47 at ./sources/governance/validator_set.move:459:5+1
    $ret0 := $t47;
    return;

    // label L16 at ./sources/governance/validator_set.move:459:5+1
L16:

    // abort($t11) at ./sources/governance/validator_set.move:459:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L17 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L17:

    // destroy($t46) at <internal>:1:1+10

    // goto L0 at <internal>:1:1+10
    goto L0;

}

// fun validator_set::distribute_reward [baseline] at ./sources/governance/validator_set.move:409:5+673
procedure {:inline 1} $2_validator_set_distribute_reward(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: Vec (int), _$t2: $Mutation ($2_balance_Balance'$2_sui_SUI'), _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation (Vec ($2_validator_Validator)), $ret1: $Mutation ($2_balance_Balance'$2_sui_SUI'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: $2_balance_Balance'$2_sui_SUI';
    var $t7: int;
    var $t8: $Mutation ($2_validator_Validator);
    var $t9: Vec ($2_validator_Validator);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: $2_balance_Balance'$2_sui_SUI';
    var $t16: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation ($2_validator_Validator);
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: Vec (int);
    var $t2: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:409:5+1
    assume {:print "$at(31,17003,17004)"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[rewards]($t1) at ./sources/governance/validator_set.move:409:5+1
    assume {:print "$track_local(29,8,1):", $t1} $t1 == $t1;

    // trace_local[reward]($t2) at ./sources/governance/validator_set.move:409:5+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t2);
    assume {:print "$track_local(29,8,2):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:409:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,8,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := read_ref($t0) at ./sources/governance/validator_set.move:415:37+10
    assume {:print "$at(31,17208,17218)"} true;
    $t9 := $Dereference($t0);

    // $t10 := vector::length<validator::Validator>($t9) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:415:22+26
    call $t10 := $1_vector_length'$2_validator_Validator'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,17193,17219)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[length]($t10) at ./sources/governance/validator_set.move:415:13+6
    assume {:print "$track_local(29,8,5):", $t10} $t10 == $t10;

    // $t12 := 0 at ./sources/governance/validator_set.move:416:17+1
    assume {:print "$at(31,17237,17238)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:416:13+1
    assume {:print "$track_local(29,8,4):", $t12} $t12 == $t12;

    // label L3 at ./sources/governance/validator_set.move:417:16+1
    assume {:print "$at(31,17255,17256)"} true;
L3:

    // havoc[val]($t12) at ./sources/governance/validator_set.move:417:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:417:16+1
    havoc $t13;
    assume $IsValid'bool'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:417:16+1
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:417:16+1
    havoc $t15;
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:417:16+1
    havoc $t16;
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:417:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:417:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:417:16+1
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut]($t2) at ./sources/governance/validator_set.move:417:16+1
    havoc $temp_0'$2_balance_Balance'$2_sui_SUI'';
    $t2 := $UpdateMutation($t2, $temp_0'$2_balance_Balance'$2_sui_SUI'');
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($Dereference($t2));

    // havoc[mut]($t3) at ./sources/governance/validator_set.move:417:16+1
    havoc $temp_0'$2_tx_context_TxContext';
    $t3 := $UpdateMutation($t3, $temp_0'$2_tx_context_TxContext');
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // havoc[mut_all]($t19) at ./sources/governance/validator_set.move:417:16+1
    havoc $t19;
    assume $IsValid'$2_validator_Validator'($Dereference($t19));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:417:16+1
    assume {:print "$info(): enter loop, variable(s) validators, reward, ctx, i havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[reward]($t2) at ./sources/governance/validator_set.move:417:16+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t2);
    assume {:print "$track_local(29,8,2):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:417:16+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,8,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:417:16+1
    assume {:print "$track_local(29,8,4):", $t12} $t12 == $t12;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:417:16+1
    assume !$abort_flag;

    // $t13 := <($t12, $t10) at ./sources/governance/validator_set.move:417:18+1
    call $t13 := $Lt($t12, $t10);

    // if ($t13) goto L0 else goto L2 at ./sources/governance/validator_set.move:417:9+422
    if ($t13) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:418:48+10
    assume {:print "$at(31,17316,17326)"} true;
L0:

    // $t19 := vector::borrow_mut<validator::Validator>($t0, $t12) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:418:29+33
    call $t19,$t0 := $1_vector_borrow_mut'$2_validator_Validator'($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,17297,17330)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[validator]($t19) at ./sources/governance/validator_set.move:418:17+9
    $temp_0'$2_validator_Validator' := $Dereference($t19);
    assume {:print "$track_local(29,8,8):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t14 := vector::borrow<u64>($t1, $t12) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:419:34+26
    assume {:print "$at(31,17365,17391)"} true;
    call $t14 := $1_vector_borrow'u64'($t1, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,17365,17391)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[reward_amount]($t14) at ./sources/governance/validator_set.move:419:17+13
    assume {:print "$track_local(29,8,7):", $t14} $t14 == $t14;

    // $t15 := balance::split<sui::SUI>($t2, $t14) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:420:26+37
    assume {:print "$at(31,17418,17455)"} true;
    call $t15,$t2 := $2_balance_split'$2_sui_SUI'($t2, $t14);
    if ($abort_flag) {
        assume {:print "$at(31,17418,17455)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[reward#1]($t15) at ./sources/governance/validator_set.move:420:17+6
    assume {:print "$track_local(29,8,6):", $t15} $t15 == $t15;

    // $t16 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/validator_set.move:422:61+14
    assume {:print "$at(31,17616,17630)"} true;

    // assume And(WellFormed($t16), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t16)), 1)) at ./sources/governance/validator_set.move:422:61+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t16) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t16)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t16, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/validator_set.move:422:61+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t16, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t16 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/validator_set.move:422:61+14

    // validator::request_add_stake($t19, $t15, $t16, $t3) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:422:13+68
    call $t19,$t3 := $2_validator_request_add_stake($t19, $t15, $t16, $t3);
    if ($abort_flag) {
        assume {:print "$at(31,17568,17636)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // write_back[Reference($t0)[]]($t19) at ./sources/governance/validator_set.move:422:13+68
    $t0 := $UpdateMutation($t0, UpdateVec($Dereference($t0), ReadVec(p#$Mutation($t19), LenVec(p#$Mutation($t0))), $Dereference($t19)));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:422:13+68
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // $t17 := 1 at ./sources/governance/validator_set.move:423:21+1
    assume {:print "$at(31,17658,17659)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t12, $t17) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:423:19+1
    call $t18 := $AddU64($t12, $t17);
    if ($abort_flag) {
        assume {:print "$at(31,17656,17657)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[i]($t18) at ./sources/governance/validator_set.move:423:13+1
    assume {:print "$track_local(29,8,4):", $t18} $t18 == $t18;

    // goto L4 at ./sources/governance/validator_set.move:423:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:417:9+422
    assume {:print "$at(31,17248,17670)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:417:9+422

    // destroy($t1) at ./sources/governance/validator_set.move:417:9+422

    // destroy($t2) at ./sources/governance/validator_set.move:417:9+422

    // destroy($t3) at ./sources/governance/validator_set.move:417:9+422

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:417:9+422
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[reward]($t2) at ./sources/governance/validator_set.move:417:9+422
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t2);
    assume {:print "$track_local(29,8,2):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:417:9+422
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,8,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/governance/validator_set.move:417:9+422
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:417:9+422
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:417:9+422
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:425:5+1
    assume {:print "$at(31,17675,17676)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:425:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    $ret2 := $t3;
    return;

    // label L6 at ./sources/governance/validator_set.move:425:5+1
L6:

    // abort($t11) at ./sources/governance/validator_set.move:425:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun validator_set::distribute_reward [verification] at ./sources/governance/validator_set.move:409:5+673
procedure {:timeLimit 40} $2_validator_set_distribute_reward$verify(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: Vec (int), _$t2: $Mutation ($2_balance_Balance'$2_sui_SUI'), _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation (Vec ($2_validator_Validator)), $ret1: $Mutation ($2_balance_Balance'$2_sui_SUI'), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: $2_balance_Balance'$2_sui_SUI';
    var $t7: int;
    var $t8: $Mutation ($2_validator_Validator);
    var $t9: Vec ($2_validator_Validator);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: $2_balance_Balance'$2_sui_SUI';
    var $t16: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation ($2_validator_Validator);
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: Vec (int);
    var $t2: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t19));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:409:5+1
    assume {:print "$at(31,17003,17004)"} true;
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:409:5+1
    assume $IsValid'vec'u64''($t1);

    // assume WellFormed($t2) at ./sources/governance/validator_set.move:409:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($Dereference($t2));

    // assume WellFormed($t3) at ./sources/governance/validator_set.move:409:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:409:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[rewards]($t1) at ./sources/governance/validator_set.move:409:5+1
    assume {:print "$track_local(29,8,1):", $t1} $t1 == $t1;

    // trace_local[reward]($t2) at ./sources/governance/validator_set.move:409:5+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t2);
    assume {:print "$track_local(29,8,2):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:409:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,8,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := read_ref($t0) at ./sources/governance/validator_set.move:415:37+10
    assume {:print "$at(31,17208,17218)"} true;
    $t9 := $Dereference($t0);

    // $t10 := vector::length<validator::Validator>($t9) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:415:22+26
    call $t10 := $1_vector_length'$2_validator_Validator'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,17193,17219)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[length]($t10) at ./sources/governance/validator_set.move:415:13+6
    assume {:print "$track_local(29,8,5):", $t10} $t10 == $t10;

    // $t12 := 0 at ./sources/governance/validator_set.move:416:17+1
    assume {:print "$at(31,17237,17238)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:416:13+1
    assume {:print "$track_local(29,8,4):", $t12} $t12 == $t12;

    // label L3 at ./sources/governance/validator_set.move:417:16+1
    assume {:print "$at(31,17255,17256)"} true;
L3:

    // havoc[val]($t12) at ./sources/governance/validator_set.move:417:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:417:16+1
    havoc $t13;
    assume $IsValid'bool'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:417:16+1
    havoc $t14;
    assume $IsValid'u64'($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:417:16+1
    havoc $t15;
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:417:16+1
    havoc $t16;
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:417:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:417:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:417:16+1
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut]($t2) at ./sources/governance/validator_set.move:417:16+1
    havoc $temp_0'$2_balance_Balance'$2_sui_SUI'';
    $t2 := $UpdateMutation($t2, $temp_0'$2_balance_Balance'$2_sui_SUI'');
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($Dereference($t2));

    // havoc[mut]($t3) at ./sources/governance/validator_set.move:417:16+1
    havoc $temp_0'$2_tx_context_TxContext';
    $t3 := $UpdateMutation($t3, $temp_0'$2_tx_context_TxContext');
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // havoc[mut_all]($t19) at ./sources/governance/validator_set.move:417:16+1
    havoc $t19;
    assume $IsValid'$2_validator_Validator'($Dereference($t19));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:417:16+1
    assume {:print "$info(): enter loop, variable(s) validators, reward, ctx, i havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[reward]($t2) at ./sources/governance/validator_set.move:417:16+1
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t2);
    assume {:print "$track_local(29,8,2):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:417:16+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,8,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:417:16+1
    assume {:print "$track_local(29,8,4):", $t12} $t12 == $t12;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:417:16+1
    assume !$abort_flag;

    // $t13 := <($t12, $t10) at ./sources/governance/validator_set.move:417:18+1
    call $t13 := $Lt($t12, $t10);

    // if ($t13) goto L0 else goto L2 at ./sources/governance/validator_set.move:417:9+422
    if ($t13) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:418:48+10
    assume {:print "$at(31,17316,17326)"} true;
L0:

    // $t19 := vector::borrow_mut<validator::Validator>($t0, $t12) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:418:29+33
    call $t19,$t0 := $1_vector_borrow_mut'$2_validator_Validator'($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,17297,17330)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[validator]($t19) at ./sources/governance/validator_set.move:418:17+9
    $temp_0'$2_validator_Validator' := $Dereference($t19);
    assume {:print "$track_local(29,8,8):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // $t14 := vector::borrow<u64>($t1, $t12) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:419:34+26
    assume {:print "$at(31,17365,17391)"} true;
    call $t14 := $1_vector_borrow'u64'($t1, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,17365,17391)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[reward_amount]($t14) at ./sources/governance/validator_set.move:419:17+13
    assume {:print "$track_local(29,8,7):", $t14} $t14 == $t14;

    // $t15 := balance::split<sui::SUI>($t2, $t14) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:420:26+37
    assume {:print "$at(31,17418,17455)"} true;
    call $t15,$t2 := $2_balance_split'$2_sui_SUI'($t2, $t14);
    if ($abort_flag) {
        assume {:print "$at(31,17418,17455)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[reward#1]($t15) at ./sources/governance/validator_set.move:420:17+6
    assume {:print "$track_local(29,8,6):", $t15} $t15 == $t15;

    // $t16 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/validator_set.move:422:61+14
    assume {:print "$at(31,17616,17630)"} true;

    // assume And(WellFormed($t16), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t16)), 1)) at ./sources/governance/validator_set.move:422:61+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t16) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t16)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t16, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/validator_set.move:422:61+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t16, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t16 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/validator_set.move:422:61+14

    // validator::request_add_stake($t19, $t15, $t16, $t3) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:422:13+68
    call $t19,$t3 := $2_validator_request_add_stake($t19, $t15, $t16, $t3);
    if ($abort_flag) {
        assume {:print "$at(31,17568,17636)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // write_back[Reference($t0)[]]($t19) at ./sources/governance/validator_set.move:422:13+68
    $t0 := $UpdateMutation($t0, UpdateVec($Dereference($t0), ReadVec(p#$Mutation($t19), LenVec(p#$Mutation($t0))), $Dereference($t19)));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:422:13+68
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // $t17 := 1 at ./sources/governance/validator_set.move:423:21+1
    assume {:print "$at(31,17658,17659)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t12, $t17) on_abort goto L6 with $t11 at ./sources/governance/validator_set.move:423:19+1
    call $t18 := $AddU64($t12, $t17);
    if ($abort_flag) {
        assume {:print "$at(31,17656,17657)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,8):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[i]($t18) at ./sources/governance/validator_set.move:423:13+1
    assume {:print "$track_local(29,8,4):", $t18} $t18 == $t18;

    // goto L4 at ./sources/governance/validator_set.move:423:22+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:417:9+422
    assume {:print "$at(31,17248,17670)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:417:9+422

    // destroy($t1) at ./sources/governance/validator_set.move:417:9+422

    // destroy($t2) at ./sources/governance/validator_set.move:417:9+422

    // destroy($t3) at ./sources/governance/validator_set.move:417:9+422

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:417:9+422
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,8,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[reward]($t2) at ./sources/governance/validator_set.move:417:9+422
    $temp_0'$2_balance_Balance'$2_sui_SUI'' := $Dereference($t2);
    assume {:print "$track_local(29,8,2):", $temp_0'$2_balance_Balance'$2_sui_SUI''} $temp_0'$2_balance_Balance'$2_sui_SUI'' == $temp_0'$2_balance_Balance'$2_sui_SUI'';

    // trace_local[ctx]($t3) at ./sources/governance/validator_set.move:417:9+422
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(29,8,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L5 at ./sources/governance/validator_set.move:417:9+422
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:417:9+422
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:417:9+422
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:425:5+1
    assume {:print "$at(31,17675,17676)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:425:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    $ret2 := $t3;
    return;

    // label L6 at ./sources/governance/validator_set.move:425:5+1
L6:

    // abort($t11) at ./sources/governance/validator_set.move:425:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun validator_set::find_validator [baseline] at ./sources/governance/validator_set.move:272:5+424
procedure {:inline 1} $2_validator_set_find_validator(_$t0: Vec ($2_validator_Validator), _$t1: int) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $2_validator_Validator;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t16: $1_option_Option'u64';
    var $t0: Vec ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:272:5+1
    assume {:print "$at(31,11518,11519)"} true;
    assume {:print "$track_local(29,9,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:272:5+1
    assume {:print "$track_local(29,9,1):", $t1} $t1 == $t1;

    // $t5 := vector::length<validator::Validator>($t0) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:273:22+26
    assume {:print "$at(31,11633,11659)"} true;
    call $t5 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,11633,11659)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[length]($t5) at ./sources/governance/validator_set.move:273:13+6
    assume {:print "$track_local(29,9,3):", $t5} $t5 == $t5;

    // $t7 := 0 at ./sources/governance/validator_set.move:274:17+1
    assume {:print "$at(31,11677,11678)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:274:13+1
    assume {:print "$track_local(29,9,2):", $t7} $t7 == $t7;

    // label L6 at ./sources/governance/validator_set.move:275:16+1
    assume {:print "$at(31,11695,11696)"} true;
L6:

    // havoc[val]($t7) at ./sources/governance/validator_set.move:275:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:275:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:275:16+1
    havoc $t9;
    assume $IsValid'$2_validator_Validator'($t9);

    // havoc[val]($t10) at ./sources/governance/validator_set.move:275:16+1
    havoc $t10;
    assume $IsValid'address'($t10);

    // havoc[val]($t11) at ./sources/governance/validator_set.move:275:16+1
    havoc $t11;
    assume $IsValid'bool'($t11);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:275:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:275:16+1
    havoc $t13;
    assume $IsValid'u64'($t13);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:275:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(29,9,2):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:275:16+1
    assume !$abort_flag;

    // $t8 := <($t7, $t5) at ./sources/governance/validator_set.move:275:18+1
    call $t8 := $Lt($t7, $t5);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator_set.move:275:9+224
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:276:36+10
    assume {:print "$at(31,11744,11754)"} true;
L0:

    // $t9 := vector::borrow<validator::Validator>($t0, $t7) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:276:21+29
    call $t9 := $1_vector_borrow'$2_validator_Validator'($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,11729,11758)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[v]($t9) at ./sources/governance/validator_set.move:276:17+1
    assume {:print "$track_local(29,9,4):", $t9} $t9 == $t9;

    // $t10 := validator::sui_address($t9) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:277:17+25
    assume {:print "$at(31,11776,11801)"} true;
    call $t10 := $2_validator_sui_address($t9);
    if ($abort_flag) {
        assume {:print "$at(31,11776,11801)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t11 := ==($t10, $t1) at ./sources/governance/validator_set.move:277:43+2
    $t11 := $IsEqual'address'($t10, $t1);

    // if ($t11) goto L3 else goto L5 at ./sources/governance/validator_set.move:277:13+106
    if ($t11) { goto L3; } else { goto L5; }

    // label L3 at ./sources/governance/validator_set.move:278:17+22
    assume {:print "$at(31,11842,11864)"} true;
L3:

    // destroy($t0) at ./sources/governance/validator_set.move:278:17+22

    // $t14 := opaque begin: option::some<u64>($t7) at ./sources/governance/validator_set.move:278:24+15

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec($t14)), 1)) at ./sources/governance/validator_set.move:278:24+15
    assume ($IsValid'$1_option_Option'u64''($t14) && (LenVec($vec#$1_option_Option'u64'($t14)) <= 1));

    // assume Eq<option::Option<u64>>($t14, option::spec_some<u64>($t7)) at ./sources/governance/validator_set.move:278:24+15
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_some'u64'($t7));

    // $t14 := opaque end: option::some<u64>($t7) at ./sources/governance/validator_set.move:278:24+15

    // trace_return[0]($t14) at ./sources/governance/validator_set.move:278:17+22
    assume {:print "$track_return(29,9,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at ./sources/governance/validator_set.move:278:17+22
    $t15 := $t14;

    // goto L8 at ./sources/governance/validator_set.move:278:17+22
    goto L8;

    // label L5 at ./sources/governance/validator_set.move:280:17+1
    assume {:print "$at(31,11896,11897)"} true;
L5:

    // $t12 := 1 at ./sources/governance/validator_set.move:280:21+1
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t7, $t12) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:280:19+1
    call $t13 := $AddU64($t7, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,11898,11899)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t13) at ./sources/governance/validator_set.move:280:13+1
    assume {:print "$track_local(29,9,2):", $t13} $t13 == $t13;

    // goto L7 at ./sources/governance/validator_set.move:280:22+1
    goto L7;

    // label L2 at ./sources/governance/validator_set.move:282:9+14
    assume {:print "$at(31,11922,11936)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:282:9+14

    // $t16 := opaque begin: option::none<u64>() at ./sources/governance/validator_set.move:282:9+14

    // assume And(WellFormed($t16), Le(Len<u64>(select option::Option.vec($t16)), 1)) at ./sources/governance/validator_set.move:282:9+14
    assume ($IsValid'$1_option_Option'u64''($t16) && (LenVec($vec#$1_option_Option'u64'($t16)) <= 1));

    // assume Eq<option::Option<u64>>($t16, option::spec_none<u64>()) at ./sources/governance/validator_set.move:282:9+14
    assume $IsEqual'$1_option_Option'u64''($t16, $1_option_spec_none'u64'());

    // $t16 := opaque end: option::none<u64>() at ./sources/governance/validator_set.move:282:9+14

    // trace_return[0]($t16) at ./sources/governance/validator_set.move:282:9+14
    assume {:print "$track_return(29,9,0):", $t16} $t16 == $t16;

    // $t15 := move($t16) at ./sources/governance/validator_set.move:282:9+14
    $t15 := $t16;

    // goto L8 at ./sources/governance/validator_set.move:282:9+14
    goto L8;

    // label L7 at ./sources/governance/validator_set.move:282:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/governance/validator_set.move:282:9+14
    assume false;
    return;

    // label L8 at ./sources/governance/validator_set.move:283:5+1
    assume {:print "$at(31,11941,11942)"} true;
L8:

    // return $t15 at ./sources/governance/validator_set.move:283:5+1
    $ret0 := $t15;
    return;

    // label L9 at ./sources/governance/validator_set.move:283:5+1
L9:

    // abort($t6) at ./sources/governance/validator_set.move:283:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::find_validator [verification] at ./sources/governance/validator_set.move:272:5+424
procedure {:timeLimit 40} $2_validator_set_find_validator$verify(_$t0: Vec ($2_validator_Validator), _$t1: int) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $2_validator_Validator;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t16: $1_option_Option'u64';
    var $t0: Vec ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:272:5+1
    assume {:print "$at(31,11518,11519)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:272:5+1
    assume $IsValid'address'($t1);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:272:5+1
    assume {:print "$track_local(29,9,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:272:5+1
    assume {:print "$track_local(29,9,1):", $t1} $t1 == $t1;

    // $t5 := vector::length<validator::Validator>($t0) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:273:22+26
    assume {:print "$at(31,11633,11659)"} true;
    call $t5 := $1_vector_length'$2_validator_Validator'($t0);
    if ($abort_flag) {
        assume {:print "$at(31,11633,11659)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[length]($t5) at ./sources/governance/validator_set.move:273:13+6
    assume {:print "$track_local(29,9,3):", $t5} $t5 == $t5;

    // $t7 := 0 at ./sources/governance/validator_set.move:274:17+1
    assume {:print "$at(31,11677,11678)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:274:13+1
    assume {:print "$track_local(29,9,2):", $t7} $t7 == $t7;

    // label L6 at ./sources/governance/validator_set.move:275:16+1
    assume {:print "$at(31,11695,11696)"} true;
L6:

    // havoc[val]($t7) at ./sources/governance/validator_set.move:275:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:275:16+1
    havoc $t8;
    assume $IsValid'bool'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:275:16+1
    havoc $t9;
    assume $IsValid'$2_validator_Validator'($t9);

    // havoc[val]($t10) at ./sources/governance/validator_set.move:275:16+1
    havoc $t10;
    assume $IsValid'address'($t10);

    // havoc[val]($t11) at ./sources/governance/validator_set.move:275:16+1
    havoc $t11;
    assume $IsValid'bool'($t11);

    // havoc[val]($t12) at ./sources/governance/validator_set.move:275:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:275:16+1
    havoc $t13;
    assume $IsValid'u64'($t13);

    // trace_local[i]($t7) at ./sources/governance/validator_set.move:275:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(29,9,2):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:275:16+1
    assume !$abort_flag;

    // $t8 := <($t7, $t5) at ./sources/governance/validator_set.move:275:18+1
    call $t8 := $Lt($t7, $t5);

    // if ($t8) goto L0 else goto L2 at ./sources/governance/validator_set.move:275:9+224
    if ($t8) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:276:36+10
    assume {:print "$at(31,11744,11754)"} true;
L0:

    // $t9 := vector::borrow<validator::Validator>($t0, $t7) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:276:21+29
    call $t9 := $1_vector_borrow'$2_validator_Validator'($t0, $t7);
    if ($abort_flag) {
        assume {:print "$at(31,11729,11758)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[v]($t9) at ./sources/governance/validator_set.move:276:17+1
    assume {:print "$track_local(29,9,4):", $t9} $t9 == $t9;

    // $t10 := validator::sui_address($t9) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:277:17+25
    assume {:print "$at(31,11776,11801)"} true;
    call $t10 := $2_validator_sui_address($t9);
    if ($abort_flag) {
        assume {:print "$at(31,11776,11801)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t11 := ==($t10, $t1) at ./sources/governance/validator_set.move:277:43+2
    $t11 := $IsEqual'address'($t10, $t1);

    // if ($t11) goto L3 else goto L5 at ./sources/governance/validator_set.move:277:13+106
    if ($t11) { goto L3; } else { goto L5; }

    // label L3 at ./sources/governance/validator_set.move:278:17+22
    assume {:print "$at(31,11842,11864)"} true;
L3:

    // destroy($t0) at ./sources/governance/validator_set.move:278:17+22

    // $t14 := opaque begin: option::some<u64>($t7) at ./sources/governance/validator_set.move:278:24+15

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec($t14)), 1)) at ./sources/governance/validator_set.move:278:24+15
    assume ($IsValid'$1_option_Option'u64''($t14) && (LenVec($vec#$1_option_Option'u64'($t14)) <= 1));

    // assume Eq<option::Option<u64>>($t14, option::spec_some<u64>($t7)) at ./sources/governance/validator_set.move:278:24+15
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_some'u64'($t7));

    // $t14 := opaque end: option::some<u64>($t7) at ./sources/governance/validator_set.move:278:24+15

    // trace_return[0]($t14) at ./sources/governance/validator_set.move:278:17+22
    assume {:print "$track_return(29,9,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at ./sources/governance/validator_set.move:278:17+22
    $t15 := $t14;

    // goto L8 at ./sources/governance/validator_set.move:278:17+22
    goto L8;

    // label L5 at ./sources/governance/validator_set.move:280:17+1
    assume {:print "$at(31,11896,11897)"} true;
L5:

    // $t12 := 1 at ./sources/governance/validator_set.move:280:21+1
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t7, $t12) on_abort goto L9 with $t6 at ./sources/governance/validator_set.move:280:19+1
    call $t13 := $AddU64($t7, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,11898,11899)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,9):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t13) at ./sources/governance/validator_set.move:280:13+1
    assume {:print "$track_local(29,9,2):", $t13} $t13 == $t13;

    // goto L7 at ./sources/governance/validator_set.move:280:22+1
    goto L7;

    // label L2 at ./sources/governance/validator_set.move:282:9+14
    assume {:print "$at(31,11922,11936)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:282:9+14

    // $t16 := opaque begin: option::none<u64>() at ./sources/governance/validator_set.move:282:9+14

    // assume And(WellFormed($t16), Le(Len<u64>(select option::Option.vec($t16)), 1)) at ./sources/governance/validator_set.move:282:9+14
    assume ($IsValid'$1_option_Option'u64''($t16) && (LenVec($vec#$1_option_Option'u64'($t16)) <= 1));

    // assume Eq<option::Option<u64>>($t16, option::spec_none<u64>()) at ./sources/governance/validator_set.move:282:9+14
    assume $IsEqual'$1_option_Option'u64''($t16, $1_option_spec_none'u64'());

    // $t16 := opaque end: option::none<u64>() at ./sources/governance/validator_set.move:282:9+14

    // trace_return[0]($t16) at ./sources/governance/validator_set.move:282:9+14
    assume {:print "$track_return(29,9,0):", $t16} $t16 == $t16;

    // $t15 := move($t16) at ./sources/governance/validator_set.move:282:9+14
    $t15 := $t16;

    // goto L8 at ./sources/governance/validator_set.move:282:9+14
    goto L8;

    // label L7 at ./sources/governance/validator_set.move:282:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/governance/validator_set.move:282:9+14
    assume false;
    return;

    // label L8 at ./sources/governance/validator_set.move:283:5+1
    assume {:print "$at(31,11941,11942)"} true;
L8:

    // return $t15 at ./sources/governance/validator_set.move:283:5+1
    $ret0 := $t15;
    return;

    // label L9 at ./sources/governance/validator_set.move:283:5+1
L9:

    // abort($t6) at ./sources/governance/validator_set.move:283:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun validator_set::get_validator_mut [baseline] at ./sources/governance/validator_set.move:285:5+401
procedure {:inline 1} $2_validator_set_get_validator_mut(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: int) returns ($ret0: $Mutation ($2_validator_Validator), $ret1: $Mutation (Vec ($2_validator_Validator)))
{
    // declare local variables
    var $t2: $Mutation (Vec ($2_validator_Validator));
    var $t3: int;
    var $t4: int;
    var $t5: $1_option_Option'u64';
    var $t6: Vec ($2_validator_Validator);
    var $t7: int;
    var $t8: $1_option_Option'u64';
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_option_Option'u64');
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: $Mutation ($2_validator_Validator);
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t15));

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:285:5+1
    assume {:print "$at(31,11948,11949)"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,10,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:285:5+1
    assume {:print "$track_local(29,10,1):", $t1} $t1 == $t1;

    // $t6 := read_ref($t0) at ./sources/governance/validator_set.move:289:49+31
    assume {:print "$at(31,12123,12154)"} true;
    $t6 := $Dereference($t0);

    // $t5 := validator_set::find_validator($t6, $t1) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:289:35+45
    call $t5 := $2_validator_set_find_validator($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,12109,12154)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,10):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:289:13+19
    assume {:print "$track_local(29,10,5):", $t5} $t5 == $t5;

    // $t8 := copy($t5) at ./sources/governance/validator_set.move:290:33+20
    assume {:print "$at(31,12188,12208)"} true;
    $t8 := $t5;

    // $t9 := opaque begin: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:290:17+37

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:290:17+37
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, option::$is_some<u64>($t8)) at ./sources/governance/validator_set.move:290:17+37
    assume $IsEqual'bool'($t9, $1_option_$is_some'u64'($t8));

    // $t9 := opaque end: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:290:17+37

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator_set.move:290:9+49
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:290:9+49
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:290:9+49

    // $t10 := 0 at ./sources/governance/validator_set.move:290:56+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:290:9+49
    assume {:print "$at(31,12164,12213)"} true;
    assume {:print "$track_abort(29,10):", $t10} $t10 == $t10;

    // $t7 := move($t10) at ./sources/governance/validator_set.move:290:9+49
    $t7 := $t10;

    // goto L3 at ./sources/governance/validator_set.move:290:9+49
    goto L3;

    // label L0 at ./sources/governance/validator_set.move:291:47+24
    assume {:print "$at(31,12261,12285)"} true;
L0:

    // $t11 := borrow_local($t5) at ./sources/governance/validator_set.move:291:47+24
    $t11 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t12 := opaque begin: option::extract<u64>($t11) at ./sources/governance/validator_set.move:291:31+41

    // $t13 := read_ref($t11) at ./sources/governance/validator_set.move:291:31+41
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<u64>($t11)) at ./sources/governance/validator_set.move:291:31+41
    assume ($t14 == $1_option_$is_none'u64'($Dereference($t11)));

    // if ($t14) goto L6 else goto L4 at ./sources/governance/validator_set.move:291:31+41
    if ($t14) { goto L6; } else { goto L4; }

    // label L5 at ./sources/governance/validator_set.move:291:31+41
L5:

    // assume And(option::$is_none<u64>($t11), Eq(7, $t7)) at ./sources/governance/validator_set.move:291:31+41
    assume ($1_option_$is_none'u64'($Dereference($t11)) && $IsEqual'num'(7, $t7));

    // trace_abort($t7) at ./sources/governance/validator_set.move:291:31+41
    assume {:print "$at(31,12245,12286)"} true;
    assume {:print "$track_abort(29,10):", $t7} $t7 == $t7;

    // goto L3 at ./sources/governance/validator_set.move:291:31+41
    goto L3;

    // label L4 at ./sources/governance/validator_set.move:291:31+41
L4:

    // havoc[mut]($t11) at ./sources/governance/validator_set.move:291:31+41
    havoc $temp_0'$1_option_Option'u64'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/validator_set.move:291:31+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t11)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/validator_set.move:291:31+41
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, option::$borrow<u64>($t13)) at ./sources/governance/validator_set.move:291:31+41
    assume $IsEqual'u64'($t12, $1_option_$borrow'u64'($t13));

    // assume option::$is_none<u64>($t11) at ./sources/governance/validator_set.move:291:31+41
    assume $1_option_$is_none'u64'($Dereference($t11));

    // $t12 := opaque end: option::extract<u64>($t11) at ./sources/governance/validator_set.move:291:31+41

    // pack_ref_deep($t11) at ./sources/governance/validator_set.move:291:31+41

    // write_back[LocalRoot($t5)@]($t11) at ./sources/governance/validator_set.move:291:31+41
    $t5 := $Dereference($t11);

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:291:31+41
    assume {:print "$track_local(29,10,5):", $t5} $t5 == $t5;

    // trace_local[validator_index]($t12) at ./sources/governance/validator_set.move:291:13+15
    assume {:print "$track_local(29,10,4):", $t12} $t12 == $t12;

    // $t15 := vector::borrow_mut<validator::Validator>($t0, $t12) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:292:9+47
    assume {:print "$at(31,12296,12343)"} true;
    call $t15,$t0 := $1_vector_borrow_mut'$2_validator_Validator'($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,12296,12343)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,10):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_return[0]($t15) at ./sources/governance/validator_set.move:292:9+47
    $temp_0'$2_validator_Validator' := $Dereference($t15);
    assume {:print "$track_return(29,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:292:9+47
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,10,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:292:9+47
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,10,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // label L2 at ./sources/governance/validator_set.move:293:5+1
    assume {:print "$at(31,12348,12349)"} true;
L2:

    // return $t15 at ./sources/governance/validator_set.move:293:5+1
    $ret0 := $t15;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/governance/validator_set.move:293:5+1
L3:

    // abort($t7) at ./sources/governance/validator_set.move:293:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun validator_set::get_validator_mut [verification] at ./sources/governance/validator_set.move:285:5+401
procedure {:timeLimit 40} $2_validator_set_get_validator_mut$verify(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: int) returns ($ret0: $Mutation ($2_validator_Validator), $ret1: $Mutation (Vec ($2_validator_Validator)))
{
    // declare local variables
    var $t2: $Mutation (Vec ($2_validator_Validator));
    var $t3: int;
    var $t4: int;
    var $t5: $1_option_Option'u64';
    var $t6: Vec ($2_validator_Validator);
    var $t7: int;
    var $t8: $1_option_Option'u64';
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_option_Option'u64');
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: $Mutation ($2_validator_Validator);
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t15));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:285:5+1
    assume {:print "$at(31,11948,11949)"} true;
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:285:5+1
    assume $IsValid'address'($t1);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:285:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,10,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:285:5+1
    assume {:print "$track_local(29,10,1):", $t1} $t1 == $t1;

    // $t6 := read_ref($t0) at ./sources/governance/validator_set.move:289:49+31
    assume {:print "$at(31,12123,12154)"} true;
    $t6 := $Dereference($t0);

    // $t5 := validator_set::find_validator($t6, $t1) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:289:35+45
    call $t5 := $2_validator_set_find_validator($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,12109,12154)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,10):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:289:13+19
    assume {:print "$track_local(29,10,5):", $t5} $t5 == $t5;

    // $t8 := copy($t5) at ./sources/governance/validator_set.move:290:33+20
    assume {:print "$at(31,12188,12208)"} true;
    $t8 := $t5;

    // $t9 := opaque begin: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:290:17+37

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:290:17+37
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, option::$is_some<u64>($t8)) at ./sources/governance/validator_set.move:290:17+37
    assume $IsEqual'bool'($t9, $1_option_$is_some'u64'($t8));

    // $t9 := opaque end: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:290:17+37

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator_set.move:290:9+49
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:290:9+49
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:290:9+49

    // $t10 := 0 at ./sources/governance/validator_set.move:290:56+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:290:9+49
    assume {:print "$at(31,12164,12213)"} true;
    assume {:print "$track_abort(29,10):", $t10} $t10 == $t10;

    // $t7 := move($t10) at ./sources/governance/validator_set.move:290:9+49
    $t7 := $t10;

    // goto L3 at ./sources/governance/validator_set.move:290:9+49
    goto L3;

    // label L0 at ./sources/governance/validator_set.move:291:47+24
    assume {:print "$at(31,12261,12285)"} true;
L0:

    // $t11 := borrow_local($t5) at ./sources/governance/validator_set.move:291:47+24
    $t11 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t12 := opaque begin: option::extract<u64>($t11) at ./sources/governance/validator_set.move:291:31+41

    // $t13 := read_ref($t11) at ./sources/governance/validator_set.move:291:31+41
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<u64>($t11)) at ./sources/governance/validator_set.move:291:31+41
    assume ($t14 == $1_option_$is_none'u64'($Dereference($t11)));

    // if ($t14) goto L6 else goto L4 at ./sources/governance/validator_set.move:291:31+41
    if ($t14) { goto L6; } else { goto L4; }

    // label L5 at ./sources/governance/validator_set.move:291:31+41
L5:

    // assume And(option::$is_none<u64>($t11), Eq(7, $t7)) at ./sources/governance/validator_set.move:291:31+41
    assume ($1_option_$is_none'u64'($Dereference($t11)) && $IsEqual'num'(7, $t7));

    // trace_abort($t7) at ./sources/governance/validator_set.move:291:31+41
    assume {:print "$at(31,12245,12286)"} true;
    assume {:print "$track_abort(29,10):", $t7} $t7 == $t7;

    // goto L3 at ./sources/governance/validator_set.move:291:31+41
    goto L3;

    // label L4 at ./sources/governance/validator_set.move:291:31+41
L4:

    // havoc[mut]($t11) at ./sources/governance/validator_set.move:291:31+41
    havoc $temp_0'$1_option_Option'u64'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/validator_set.move:291:31+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t11)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/validator_set.move:291:31+41
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, option::$borrow<u64>($t13)) at ./sources/governance/validator_set.move:291:31+41
    assume $IsEqual'u64'($t12, $1_option_$borrow'u64'($t13));

    // assume option::$is_none<u64>($t11) at ./sources/governance/validator_set.move:291:31+41
    assume $1_option_$is_none'u64'($Dereference($t11));

    // $t12 := opaque end: option::extract<u64>($t11) at ./sources/governance/validator_set.move:291:31+41

    // assert Le(Len<u64>(select option::Option.vec($t11)), 1) at ./deps/move-stdlib/sources/option.move:17:9+24
    // data invariant at ./deps/move-stdlib/sources/option.move:17:9+24
    assume {:print "$at(16,632,656)"} true;
    assert {:msg "assert_failed(16,632,656): data invariant does not hold"}
      (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1);

    // write_back[LocalRoot($t5)@]($t11) at ./sources/governance/validator_set.move:291:31+41
    assume {:print "$at(31,12245,12286)"} true;
    $t5 := $Dereference($t11);

    // trace_local[validator_index_opt]($t5) at ./sources/governance/validator_set.move:291:31+41
    assume {:print "$track_local(29,10,5):", $t5} $t5 == $t5;

    // trace_local[validator_index]($t12) at ./sources/governance/validator_set.move:291:13+15
    assume {:print "$track_local(29,10,4):", $t12} $t12 == $t12;

    // $t15 := vector::borrow_mut<validator::Validator>($t0, $t12) on_abort goto L3 with $t7 at ./sources/governance/validator_set.move:292:9+47
    assume {:print "$at(31,12296,12343)"} true;
    call $t15,$t0 := $1_vector_borrow_mut'$2_validator_Validator'($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,12296,12343)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,10):", $t7} $t7 == $t7;
        goto L3;
    }

    // trace_return[0]($t15) at ./sources/governance/validator_set.move:292:9+47
    $temp_0'$2_validator_Validator' := $Dereference($t15);
    assume {:print "$track_return(29,10,0):", $temp_0'$2_validator_Validator'} $temp_0'$2_validator_Validator' == $temp_0'$2_validator_Validator';

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:292:9+47
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,10,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:292:9+47
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,10,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // label L2 at ./sources/governance/validator_set.move:293:5+1
    assume {:print "$at(31,12348,12349)"} true;
L2:

    // return $t15 at ./sources/governance/validator_set.move:293:5+1
    $ret0 := $t15;
    $ret1 := $t0;
    return;

    // label L3 at ./sources/governance/validator_set.move:293:5+1
L3:

    // abort($t7) at ./sources/governance/validator_set.move:293:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L6 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L6:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun validator_set::get_validator_ref [baseline] at ./sources/governance/validator_set.move:295:5+389
procedure {:inline 1} $2_validator_set_get_validator_ref(_$t0: Vec ($2_validator_Validator), _$t1: int) returns ($ret0: $2_validator_Validator)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: $1_option_Option'u64';
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation ($1_option_Option'u64');
    var $t9: int;
    var $t10: $1_option_Option'u64';
    var $t11: bool;
    var $t12: $2_validator_Validator;
    var $t0: Vec ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:295:5+1
    assume {:print "$at(31,12355,12356)"} true;
    assume {:print "$track_local(29,11,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:295:5+1
    assume {:print "$track_local(29,11,1):", $t1} $t1 == $t1;

    // $t3 := validator_set::find_validator($t0, $t1) on_abort goto L3 with $t4 at ./sources/governance/validator_set.move:299:35+45
    assume {:print "$at(31,12508,12553)"} true;
    call $t3 := $2_validator_set_find_validator($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,12508,12553)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,11):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[validator_index_opt]($t3) at ./sources/governance/validator_set.move:299:13+19
    assume {:print "$track_local(29,11,3):", $t3} $t3 == $t3;

    // $t5 := copy($t3) at ./sources/governance/validator_set.move:300:33+20
    assume {:print "$at(31,12587,12607)"} true;
    $t5 := $t3;

    // $t6 := opaque begin: option::is_some<u64>($t5) at ./sources/governance/validator_set.move:300:17+37

    // assume WellFormed($t6) at ./sources/governance/validator_set.move:300:17+37
    assume $IsValid'bool'($t6);

    // assume Eq<bool>($t6, option::$is_some<u64>($t5)) at ./sources/governance/validator_set.move:300:17+37
    assume $IsEqual'bool'($t6, $1_option_$is_some'u64'($t5));

    // $t6 := opaque end: option::is_some<u64>($t5) at ./sources/governance/validator_set.move:300:17+37

    // if ($t6) goto L0 else goto L1 at ./sources/governance/validator_set.move:300:9+49
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:300:9+49
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:300:9+49

    // $t7 := 0 at ./sources/governance/validator_set.move:300:56+1
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/governance/validator_set.move:300:9+49
    assume {:print "$at(31,12563,12612)"} true;
    assume {:print "$track_abort(29,11):", $t7} $t7 == $t7;

    // $t4 := move($t7) at ./sources/governance/validator_set.move:300:9+49
    $t4 := $t7;

    // goto L3 at ./sources/governance/validator_set.move:300:9+49
    goto L3;

    // label L0 at ./sources/governance/validator_set.move:301:47+24
    assume {:print "$at(31,12660,12684)"} true;
L0:

    // $t8 := borrow_local($t3) at ./sources/governance/validator_set.move:301:47+24
    $t8 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t9 := opaque begin: option::extract<u64>($t8) at ./sources/governance/validator_set.move:301:31+41

    // $t10 := read_ref($t8) at ./sources/governance/validator_set.move:301:31+41
    $t10 := $Dereference($t8);

    // assume Identical($t11, option::$is_none<u64>($t8)) at ./sources/governance/validator_set.move:301:31+41
    assume ($t11 == $1_option_$is_none'u64'($Dereference($t8)));

    // if ($t11) goto L5 else goto L4 at ./sources/governance/validator_set.move:301:31+41
    if ($t11) { goto L5; } else { goto L4; }

    // label L5 at ./sources/governance/validator_set.move:301:31+41
L5:

    // assume And(option::$is_none<u64>($t8), Eq(7, $t4)) at ./sources/governance/validator_set.move:301:31+41
    assume ($1_option_$is_none'u64'($Dereference($t8)) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/governance/validator_set.move:301:31+41
    assume {:print "$at(31,12644,12685)"} true;
    assume {:print "$track_abort(29,11):", $t4} $t4 == $t4;

    // goto L3 at ./sources/governance/validator_set.move:301:31+41
    goto L3;

    // label L4 at ./sources/governance/validator_set.move:301:31+41
L4:

    // havoc[mut]($t8) at ./sources/governance/validator_set.move:301:31+41
    havoc $temp_0'$1_option_Option'u64'';
    $t8 := $UpdateMutation($t8, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t8));

    // assume And(WellFormed($t8), Le(Len<u64>(select option::Option.vec($t8)), 1)) at ./sources/governance/validator_set.move:301:31+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t8)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t8))) <= 1));

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:301:31+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, option::$borrow<u64>($t10)) at ./sources/governance/validator_set.move:301:31+41
    assume $IsEqual'u64'($t9, $1_option_$borrow'u64'($t10));

    // assume option::$is_none<u64>($t8) at ./sources/governance/validator_set.move:301:31+41
    assume $1_option_$is_none'u64'($Dereference($t8));

    // $t9 := opaque end: option::extract<u64>($t8) at ./sources/governance/validator_set.move:301:31+41

    // pack_ref_deep($t8) at ./sources/governance/validator_set.move:301:31+41

    // write_back[LocalRoot($t3)@]($t8) at ./sources/governance/validator_set.move:301:31+41
    $t3 := $Dereference($t8);

    // trace_local[validator_index_opt]($t3) at ./sources/governance/validator_set.move:301:31+41
    assume {:print "$track_local(29,11,3):", $t3} $t3 == $t3;

    // trace_local[validator_index]($t9) at ./sources/governance/validator_set.move:301:13+15
    assume {:print "$track_local(29,11,2):", $t9} $t9 == $t9;

    // $t12 := vector::borrow<validator::Validator>($t0, $t9) on_abort goto L3 with $t4 at ./sources/governance/validator_set.move:302:9+43
    assume {:print "$at(31,12695,12738)"} true;
    call $t12 := $1_vector_borrow'$2_validator_Validator'($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(31,12695,12738)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,11):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t12) at ./sources/governance/validator_set.move:302:9+43
    assume {:print "$track_return(29,11,0):", $t12} $t12 == $t12;

    // label L2 at ./sources/governance/validator_set.move:303:5+1
    assume {:print "$at(31,12743,12744)"} true;
L2:

    // return $t12 at ./sources/governance/validator_set.move:303:5+1
    $ret0 := $t12;
    return;

    // label L3 at ./sources/governance/validator_set.move:303:5+1
L3:

    // abort($t4) at ./sources/governance/validator_set.move:303:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator_set::get_validator_ref [verification] at ./sources/governance/validator_set.move:295:5+389
procedure {:timeLimit 40} $2_validator_set_get_validator_ref$verify(_$t0: Vec ($2_validator_Validator), _$t1: int) returns ($ret0: $2_validator_Validator)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: $1_option_Option'u64';
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation ($1_option_Option'u64');
    var $t9: int;
    var $t10: $1_option_Option'u64';
    var $t11: bool;
    var $t12: $2_validator_Validator;
    var $t0: Vec ($2_validator_Validator);
    var $t1: int;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:295:5+1
    assume {:print "$at(31,12355,12356)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:295:5+1
    assume $IsValid'address'($t1);

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:295:5+1
    assume {:print "$track_local(29,11,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:295:5+1
    assume {:print "$track_local(29,11,1):", $t1} $t1 == $t1;

    // $t3 := validator_set::find_validator($t0, $t1) on_abort goto L3 with $t4 at ./sources/governance/validator_set.move:299:35+45
    assume {:print "$at(31,12508,12553)"} true;
    call $t3 := $2_validator_set_find_validator($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,12508,12553)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,11):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[validator_index_opt]($t3) at ./sources/governance/validator_set.move:299:13+19
    assume {:print "$track_local(29,11,3):", $t3} $t3 == $t3;

    // $t5 := copy($t3) at ./sources/governance/validator_set.move:300:33+20
    assume {:print "$at(31,12587,12607)"} true;
    $t5 := $t3;

    // $t6 := opaque begin: option::is_some<u64>($t5) at ./sources/governance/validator_set.move:300:17+37

    // assume WellFormed($t6) at ./sources/governance/validator_set.move:300:17+37
    assume $IsValid'bool'($t6);

    // assume Eq<bool>($t6, option::$is_some<u64>($t5)) at ./sources/governance/validator_set.move:300:17+37
    assume $IsEqual'bool'($t6, $1_option_$is_some'u64'($t5));

    // $t6 := opaque end: option::is_some<u64>($t5) at ./sources/governance/validator_set.move:300:17+37

    // if ($t6) goto L0 else goto L1 at ./sources/governance/validator_set.move:300:9+49
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:300:9+49
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:300:9+49

    // $t7 := 0 at ./sources/governance/validator_set.move:300:56+1
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/governance/validator_set.move:300:9+49
    assume {:print "$at(31,12563,12612)"} true;
    assume {:print "$track_abort(29,11):", $t7} $t7 == $t7;

    // $t4 := move($t7) at ./sources/governance/validator_set.move:300:9+49
    $t4 := $t7;

    // goto L3 at ./sources/governance/validator_set.move:300:9+49
    goto L3;

    // label L0 at ./sources/governance/validator_set.move:301:47+24
    assume {:print "$at(31,12660,12684)"} true;
L0:

    // $t8 := borrow_local($t3) at ./sources/governance/validator_set.move:301:47+24
    $t8 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t9 := opaque begin: option::extract<u64>($t8) at ./sources/governance/validator_set.move:301:31+41

    // $t10 := read_ref($t8) at ./sources/governance/validator_set.move:301:31+41
    $t10 := $Dereference($t8);

    // assume Identical($t11, option::$is_none<u64>($t8)) at ./sources/governance/validator_set.move:301:31+41
    assume ($t11 == $1_option_$is_none'u64'($Dereference($t8)));

    // if ($t11) goto L5 else goto L4 at ./sources/governance/validator_set.move:301:31+41
    if ($t11) { goto L5; } else { goto L4; }

    // label L5 at ./sources/governance/validator_set.move:301:31+41
L5:

    // assume And(option::$is_none<u64>($t8), Eq(7, $t4)) at ./sources/governance/validator_set.move:301:31+41
    assume ($1_option_$is_none'u64'($Dereference($t8)) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/governance/validator_set.move:301:31+41
    assume {:print "$at(31,12644,12685)"} true;
    assume {:print "$track_abort(29,11):", $t4} $t4 == $t4;

    // goto L3 at ./sources/governance/validator_set.move:301:31+41
    goto L3;

    // label L4 at ./sources/governance/validator_set.move:301:31+41
L4:

    // havoc[mut]($t8) at ./sources/governance/validator_set.move:301:31+41
    havoc $temp_0'$1_option_Option'u64'';
    $t8 := $UpdateMutation($t8, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t8));

    // assume And(WellFormed($t8), Le(Len<u64>(select option::Option.vec($t8)), 1)) at ./sources/governance/validator_set.move:301:31+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t8)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t8))) <= 1));

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:301:31+41
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, option::$borrow<u64>($t10)) at ./sources/governance/validator_set.move:301:31+41
    assume $IsEqual'u64'($t9, $1_option_$borrow'u64'($t10));

    // assume option::$is_none<u64>($t8) at ./sources/governance/validator_set.move:301:31+41
    assume $1_option_$is_none'u64'($Dereference($t8));

    // $t9 := opaque end: option::extract<u64>($t8) at ./sources/governance/validator_set.move:301:31+41

    // assert Le(Len<u64>(select option::Option.vec($t8)), 1) at ./deps/move-stdlib/sources/option.move:17:9+24
    // data invariant at ./deps/move-stdlib/sources/option.move:17:9+24
    assume {:print "$at(16,632,656)"} true;
    assert {:msg "assert_failed(16,632,656): data invariant does not hold"}
      (LenVec($vec#$1_option_Option'u64'($Dereference($t8))) <= 1);

    // write_back[LocalRoot($t3)@]($t8) at ./sources/governance/validator_set.move:301:31+41
    assume {:print "$at(31,12644,12685)"} true;
    $t3 := $Dereference($t8);

    // trace_local[validator_index_opt]($t3) at ./sources/governance/validator_set.move:301:31+41
    assume {:print "$track_local(29,11,3):", $t3} $t3 == $t3;

    // trace_local[validator_index]($t9) at ./sources/governance/validator_set.move:301:13+15
    assume {:print "$track_local(29,11,2):", $t9} $t9 == $t9;

    // $t12 := vector::borrow<validator::Validator>($t0, $t9) on_abort goto L3 with $t4 at ./sources/governance/validator_set.move:302:9+43
    assume {:print "$at(31,12695,12738)"} true;
    call $t12 := $1_vector_borrow'$2_validator_Validator'($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(31,12695,12738)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,11):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t12) at ./sources/governance/validator_set.move:302:9+43
    assume {:print "$track_return(29,11,0):", $t12} $t12 == $t12;

    // label L2 at ./sources/governance/validator_set.move:303:5+1
    assume {:print "$at(31,12743,12744)"} true;
L2:

    // return $t12 at ./sources/governance/validator_set.move:303:5+1
    $ret0 := $t12;
    return;

    // label L3 at ./sources/governance/validator_set.move:303:5+1
L3:

    // abort($t4) at ./sources/governance/validator_set.move:303:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator_set::is_active_validator [verification] at ./sources/governance/validator_set.move:134:5+209
procedure {:timeLimit 40} $2_validator_set_is_active_validator$verify(_$t0: $2_validator_set_ValidatorSet, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: Vec ($2_validator_Validator);
    var $t4: $1_option_Option'u64';
    var $t5: int;
    var $t6: bool;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:134:5+1
    assume {:print "$at(31,5772,5773)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:134:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:134:5+1
    assume {:print "$track_local(29,12,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:134:5+1
    assume {:print "$track_local(29,12,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:138:41+23
    assume {:print "$at(31,5931,5954)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t4 := validator_set::find_validator($t3, $t1) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:138:26+58
    call $t4 := $2_validator_set_find_validator($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,5916,5974)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,12):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := opaque begin: option::is_some<u64>($t4) at ./sources/governance/validator_set.move:138:9+76

    // assume WellFormed($t6) at ./sources/governance/validator_set.move:138:9+76
    assume $IsValid'bool'($t6);

    // assume Eq<bool>($t6, option::$is_some<u64>($t4)) at ./sources/governance/validator_set.move:138:9+76
    assume $IsEqual'bool'($t6, $1_option_$is_some'u64'($t4));

    // $t6 := opaque end: option::is_some<u64>($t4) at ./sources/governance/validator_set.move:138:9+76

    // trace_return[0]($t6) at ./sources/governance/validator_set.move:138:9+76
    assume {:print "$track_return(29,12,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/governance/validator_set.move:139:5+1
    assume {:print "$at(31,5980,5981)"} true;
L1:

    // return $t6 at ./sources/governance/validator_set.move:139:5+1
    $ret0 := $t6;
    return;

    // label L2 at ./sources/governance/validator_set.move:139:5+1
L2:

    // abort($t5) at ./sources/governance/validator_set.move:139:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::next_epoch_validator_count [baseline] at ./sources/governance/validator_set.move:66:5+131
procedure {:inline 1} $2_validator_set_next_epoch_validator_count(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_validator_ValidatorMetadata);
    var $t2: int;
    var $t3: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:66:5+1
    assume {:print "$at(31,2560,2561)"} true;
    assume {:print "$track_local(29,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:67:24+27
    assume {:print "$at(31,2657,2684)"} true;
    $t1 := $next_epoch_validators#$2_validator_set_ValidatorSet($t0);

    // $t2 := vector::length<validator::ValidatorMetadata>($t1) on_abort goto L2 with $t3 at ./sources/governance/validator_set.move:67:9+43
    call $t2 := $1_vector_length'$2_validator_ValidatorMetadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(31,2642,2685)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/governance/validator_set.move:67:9+43
    assume {:print "$track_return(29,14,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/governance/validator_set.move:68:5+1
    assume {:print "$at(31,2690,2691)"} true;
L1:

    // return $t2 at ./sources/governance/validator_set.move:68:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/governance/validator_set.move:68:5+1
L2:

    // abort($t3) at ./sources/governance/validator_set.move:68:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun validator_set::next_epoch_validator_count [verification] at ./sources/governance/validator_set.move:66:5+131
procedure {:timeLimit 40} $2_validator_set_next_epoch_validator_count$verify(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_validator_ValidatorMetadata);
    var $t2: int;
    var $t3: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:66:5+1
    assume {:print "$at(31,2560,2561)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:66:5+1
    assume {:print "$track_local(29,14,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:67:24+27
    assume {:print "$at(31,2657,2684)"} true;
    $t1 := $next_epoch_validators#$2_validator_set_ValidatorSet($t0);

    // $t2 := vector::length<validator::ValidatorMetadata>($t1) on_abort goto L2 with $t3 at ./sources/governance/validator_set.move:67:9+43
    call $t2 := $1_vector_length'$2_validator_ValidatorMetadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(31,2642,2685)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/governance/validator_set.move:67:9+43
    assume {:print "$track_return(29,14,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/governance/validator_set.move:68:5+1
    assume {:print "$at(31,2690,2691)"} true;
L1:

    // return $t2 at ./sources/governance/validator_set.move:68:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/governance/validator_set.move:68:5+1
L2:

    // abort($t3) at ./sources/governance/validator_set.move:68:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun validator_set::process_pending_removals [baseline] at ./sources/governance/validator_set.move:307:5+385
procedure {:inline 1} $2_validator_set_process_pending_removals(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: $Mutation (Vec (int))) returns ($ret0: $Mutation (Vec ($2_validator_Validator)), $ret1: $Mutation (Vec (int)))
{
    // declare local variables
    var $t2: int;
    var $t3: $2_validator_Validator;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: $2_validator_Validator;
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: $Mutation (Vec (int));
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:307:5+1
    assume {:print "$at(31,12921,12922)"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,15,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[withdraw_list]($t1) at ./sources/governance/validator_set.move:307:5+1
    $temp_0'vec'u64'' := $Dereference($t1);
    assume {:print "$track_local(29,15,1):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // validator_set::sort_removal_list($t1) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:310:9+32
    assume {:print "$at(31,13043,13075)"} true;
    call $t1 := $2_validator_set_sort_removal_list($t1);
    if ($abort_flag) {
        assume {:print "$at(31,13043,13075)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // label L3 at ./sources/governance/validator_set.move:311:34+13
    assume {:print "$at(31,13110,13123)"} true;
L3:

    // havoc[val]($t5) at ./sources/governance/validator_set.move:311:34+13
    havoc $t5;
    assume $IsValid'vec'u64''($t5);

    // havoc[val]($t6) at ./sources/governance/validator_set.move:311:34+13
    havoc $t6;
    assume $IsValid'bool'($t6);

    // havoc[val]($t7) at ./sources/governance/validator_set.move:311:34+13
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:311:34+13
    havoc $t8;
    assume $IsValid'u64'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:311:34+13
    havoc $t9;
    assume $IsValid'$2_validator_Validator'($t9);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:311:34+13
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut]($t1) at ./sources/governance/validator_set.move:311:34+13
    havoc $temp_0'vec'u64'';
    $t1 := $UpdateMutation($t1, $temp_0'vec'u64'');
    assume $IsValid'vec'u64''($Dereference($t1));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:311:34+13
    assume {:print "$info(): enter loop, variable(s) validators, withdraw_list havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,15,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[withdraw_list]($t1) at ./sources/governance/validator_set.move:311:34+13
    $temp_0'vec'u64'' := $Dereference($t1);
    assume {:print "$track_local(29,15,1):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:311:34+13
    assume !$abort_flag;

    // $t5 := read_ref($t1) at ./sources/governance/validator_set.move:311:34+13
    $t5 := $Dereference($t1);

    // $t6 := vector::is_empty<u64>($t5) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:311:17+31
    call $t6 := $1_vector_is_empty'u64'($t5);
    if ($abort_flag) {
        assume {:print "$at(31,13093,13124)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t7 := !($t6) at ./sources/governance/validator_set.move:311:16+1
    call $t7 := $Not($t6);

    // if ($t7) goto L0 else goto L2 at ./sources/governance/validator_set.move:311:9+215
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:312:42+13
    assume {:print "$at(31,13169,13182)"} true;
L0:

    // $t8 := vector::pop_back<u64>($t1) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:312:25+31
    call $t8,$t1 := $1_vector_pop_back'u64'($t1);
    if ($abort_flag) {
        assume {:print "$at(31,13152,13183)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_local[index]($t8) at ./sources/governance/validator_set.move:312:17+5
    assume {:print "$track_local(29,15,2):", $t8} $t8 == $t8;

    // $t9 := vector::remove<validator::Validator>($t0, $t8) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:313:29+33
    assume {:print "$at(31,13213,13246)"} true;
    call $t9,$t0 := $1_vector_remove'$2_validator_Validator'($t0, $t8);
    if ($abort_flag) {
        assume {:print "$at(31,13213,13246)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_local[validator]($t9) at ./sources/governance/validator_set.move:313:17+9
    assume {:print "$track_local(29,15,3):", $t9} $t9 == $t9;

    // validator::destroy($t9) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:314:13+29
    assume {:print "$at(31,13260,13289)"} true;
    call $2_validator_destroy($t9);
    if ($abort_flag) {
        assume {:print "$at(31,13260,13289)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // goto L4 at ./sources/governance/validator_set.move:314:42+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:311:9+215
    assume {:print "$at(31,13085,13300)"} true;
L2:

    // destroy($t1) at ./sources/governance/validator_set.move:311:9+215

    // destroy($t0) at ./sources/governance/validator_set.move:311:9+215

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:311:9+215
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,15,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[withdraw_list]($t1) at ./sources/governance/validator_set.move:311:9+215
    $temp_0'vec'u64'' := $Dereference($t1);
    assume {:print "$track_local(29,15,1):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // goto L5 at ./sources/governance/validator_set.move:311:9+215
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:311:9+215
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:311:9+215
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:316:5+1
    assume {:print "$at(31,13305,13306)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:316:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L6 at ./sources/governance/validator_set.move:316:5+1
L6:

    // abort($t4) at ./sources/governance/validator_set.move:316:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator_set::process_pending_removals [verification] at ./sources/governance/validator_set.move:307:5+385
procedure {:timeLimit 40} $2_validator_set_process_pending_removals$verify(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: $Mutation (Vec (int))) returns ($ret0: $Mutation (Vec ($2_validator_Validator)), $ret1: $Mutation (Vec (int)))
{
    // declare local variables
    var $t2: int;
    var $t3: $2_validator_Validator;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: $2_validator_Validator;
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: $Mutation (Vec (int));
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:307:5+1
    assume {:print "$at(31,12921,12922)"} true;
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:307:5+1
    assume $IsValid'vec'u64''($Dereference($t1));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:307:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,15,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[withdraw_list]($t1) at ./sources/governance/validator_set.move:307:5+1
    $temp_0'vec'u64'' := $Dereference($t1);
    assume {:print "$track_local(29,15,1):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // validator_set::sort_removal_list($t1) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:310:9+32
    assume {:print "$at(31,13043,13075)"} true;
    call $t1 := $2_validator_set_sort_removal_list($t1);
    if ($abort_flag) {
        assume {:print "$at(31,13043,13075)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // label L3 at ./sources/governance/validator_set.move:311:34+13
    assume {:print "$at(31,13110,13123)"} true;
L3:

    // havoc[val]($t5) at ./sources/governance/validator_set.move:311:34+13
    havoc $t5;
    assume $IsValid'vec'u64''($t5);

    // havoc[val]($t6) at ./sources/governance/validator_set.move:311:34+13
    havoc $t6;
    assume $IsValid'bool'($t6);

    // havoc[val]($t7) at ./sources/governance/validator_set.move:311:34+13
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/governance/validator_set.move:311:34+13
    havoc $t8;
    assume $IsValid'u64'($t8);

    // havoc[val]($t9) at ./sources/governance/validator_set.move:311:34+13
    havoc $t9;
    assume $IsValid'$2_validator_Validator'($t9);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:311:34+13
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut]($t1) at ./sources/governance/validator_set.move:311:34+13
    havoc $temp_0'vec'u64'';
    $t1 := $UpdateMutation($t1, $temp_0'vec'u64'');
    assume $IsValid'vec'u64''($Dereference($t1));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:311:34+13
    assume {:print "$info(): enter loop, variable(s) validators, withdraw_list havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,15,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[withdraw_list]($t1) at ./sources/governance/validator_set.move:311:34+13
    $temp_0'vec'u64'' := $Dereference($t1);
    assume {:print "$track_local(29,15,1):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:311:34+13
    assume !$abort_flag;

    // $t5 := read_ref($t1) at ./sources/governance/validator_set.move:311:34+13
    $t5 := $Dereference($t1);

    // $t6 := vector::is_empty<u64>($t5) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:311:17+31
    call $t6 := $1_vector_is_empty'u64'($t5);
    if ($abort_flag) {
        assume {:print "$at(31,13093,13124)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // $t7 := !($t6) at ./sources/governance/validator_set.move:311:16+1
    call $t7 := $Not($t6);

    // if ($t7) goto L0 else goto L2 at ./sources/governance/validator_set.move:311:9+215
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:312:42+13
    assume {:print "$at(31,13169,13182)"} true;
L0:

    // $t8 := vector::pop_back<u64>($t1) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:312:25+31
    call $t8,$t1 := $1_vector_pop_back'u64'($t1);
    if ($abort_flag) {
        assume {:print "$at(31,13152,13183)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_local[index]($t8) at ./sources/governance/validator_set.move:312:17+5
    assume {:print "$track_local(29,15,2):", $t8} $t8 == $t8;

    // $t9 := vector::remove<validator::Validator>($t0, $t8) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:313:29+33
    assume {:print "$at(31,13213,13246)"} true;
    call $t9,$t0 := $1_vector_remove'$2_validator_Validator'($t0, $t8);
    if ($abort_flag) {
        assume {:print "$at(31,13213,13246)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // trace_local[validator]($t9) at ./sources/governance/validator_set.move:313:17+9
    assume {:print "$track_local(29,15,3):", $t9} $t9 == $t9;

    // validator::destroy($t9) on_abort goto L6 with $t4 at ./sources/governance/validator_set.move:314:13+29
    assume {:print "$at(31,13260,13289)"} true;
    call $2_validator_destroy($t9);
    if ($abort_flag) {
        assume {:print "$at(31,13260,13289)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,15):", $t4} $t4 == $t4;
        goto L6;
    }

    // goto L4 at ./sources/governance/validator_set.move:314:42+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:311:9+215
    assume {:print "$at(31,13085,13300)"} true;
L2:

    // destroy($t1) at ./sources/governance/validator_set.move:311:9+215

    // destroy($t0) at ./sources/governance/validator_set.move:311:9+215

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:311:9+215
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,15,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[withdraw_list]($t1) at ./sources/governance/validator_set.move:311:9+215
    $temp_0'vec'u64'' := $Dereference($t1);
    assume {:print "$track_local(29,15,1):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // goto L5 at ./sources/governance/validator_set.move:311:9+215
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:311:9+215
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:311:9+215
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:316:5+1
    assume {:print "$at(31,13305,13306)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:316:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L6 at ./sources/governance/validator_set.move:316:5+1
L6:

    // abort($t4) at ./sources/governance/validator_set.move:316:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun validator_set::process_pending_validators [baseline] at ./sources/governance/validator_set.move:319:5+302
procedure {:inline 1} $2_validator_set_process_pending_validators(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: $Mutation (Vec ($2_validator_Validator))) returns ($ret0: $Mutation (Vec ($2_validator_Validator)), $ret1: $Mutation (Vec ($2_validator_Validator)))
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: bool;
    var $t5: bool;
    var $t6: $2_validator_Validator;
    var $t7: int;
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: $Mutation (Vec ($2_validator_Validator));
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:319:5+1
    assume {:print "$at(31,13400,13401)"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,16,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[pending_validators]($t1) at ./sources/governance/validator_set.move:319:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t1);
    assume {:print "$track_local(29,16,1):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // label L3 at ./sources/governance/validator_set.move:322:34+18
    assume {:print "$at(31,13560,13578)"} true;
L3:

    // havoc[val]($t3) at ./sources/governance/validator_set.move:322:34+18
    havoc $t3;
    assume $IsValid'vec'$2_validator_Validator''($t3);

    // havoc[val]($t4) at ./sources/governance/validator_set.move:322:34+18
    havoc $t4;
    assume $IsValid'bool'($t4);

    // havoc[val]($t5) at ./sources/governance/validator_set.move:322:34+18
    havoc $t5;
    assume $IsValid'bool'($t5);

    // havoc[val]($t6) at ./sources/governance/validator_set.move:322:34+18
    havoc $t6;
    assume $IsValid'$2_validator_Validator'($t6);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:322:34+18
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut]($t1) at ./sources/governance/validator_set.move:322:34+18
    havoc $temp_0'vec'$2_validator_Validator'';
    $t1 := $UpdateMutation($t1, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t1));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:322:34+18
    assume {:print "$info(): enter loop, variable(s) validators, pending_validators havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,16,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[pending_validators]($t1) at ./sources/governance/validator_set.move:322:34+18
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t1);
    assume {:print "$track_local(29,16,1):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:322:34+18
    assume !$abort_flag;

    // $t3 := read_ref($t1) at ./sources/governance/validator_set.move:322:34+18
    $t3 := $Dereference($t1);

    // $t4 := vector::is_empty<validator::Validator>($t3) on_abort goto L6 with $t7 at ./sources/governance/validator_set.move:322:17+36
    call $t4 := $1_vector_is_empty'$2_validator_Validator'($t3);
    if ($abort_flag) {
        assume {:print "$at(31,13543,13579)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,16):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t5 := !($t4) at ./sources/governance/validator_set.move:322:16+1
    call $t5 := $Not($t4);

    // if ($t5) goto L0 else goto L2 at ./sources/governance/validator_set.move:322:9+161
    if ($t5) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:323:38+18
    assume {:print "$at(31,13620,13638)"} true;
L0:

    // $t6 := vector::pop_back<validator::Validator>($t1) on_abort goto L6 with $t7 at ./sources/governance/validator_set.move:323:21+36
    call $t6,$t1 := $1_vector_pop_back'$2_validator_Validator'($t1);
    if ($abort_flag) {
        assume {:print "$at(31,13603,13639)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,16):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[v]($t6) at ./sources/governance/validator_set.move:323:17+1
    assume {:print "$track_local(29,16,2):", $t6} $t6 == $t6;

    // vector::push_back<validator::Validator>($t0, $t6) on_abort goto L6 with $t7 at ./sources/governance/validator_set.move:324:13+32
    assume {:print "$at(31,13653,13685)"} true;
    call $t0 := $1_vector_push_back'$2_validator_Validator'($t0, $t6);
    if ($abort_flag) {
        assume {:print "$at(31,13653,13685)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,16):", $t7} $t7 == $t7;
        goto L6;
    }

    // goto L4 at ./sources/governance/validator_set.move:324:45+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:322:9+161
    assume {:print "$at(31,13535,13696)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:322:9+161

    // destroy($t1) at ./sources/governance/validator_set.move:322:9+161

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:322:9+161
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,16,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[pending_validators]($t1) at ./sources/governance/validator_set.move:322:9+161
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t1);
    assume {:print "$track_local(29,16,1):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // goto L5 at ./sources/governance/validator_set.move:322:9+161
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:322:9+161
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:322:9+161
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:326:5+1
    assume {:print "$at(31,13701,13702)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:326:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L6 at ./sources/governance/validator_set.move:326:5+1
L6:

    // abort($t7) at ./sources/governance/validator_set.move:326:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun validator_set::process_pending_validators [verification] at ./sources/governance/validator_set.move:319:5+302
procedure {:timeLimit 40} $2_validator_set_process_pending_validators$verify(_$t0: $Mutation (Vec ($2_validator_Validator)), _$t1: $Mutation (Vec ($2_validator_Validator))) returns ($ret0: $Mutation (Vec ($2_validator_Validator)), $ret1: $Mutation (Vec ($2_validator_Validator)))
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: bool;
    var $t5: bool;
    var $t6: $2_validator_Validator;
    var $t7: int;
    var $t0: $Mutation (Vec ($2_validator_Validator));
    var $t1: $Mutation (Vec ($2_validator_Validator));
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:319:5+1
    assume {:print "$at(31,13400,13401)"} true;
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:319:5+1
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t1));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:319:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,16,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[pending_validators]($t1) at ./sources/governance/validator_set.move:319:5+1
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t1);
    assume {:print "$track_local(29,16,1):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // label L3 at ./sources/governance/validator_set.move:322:34+18
    assume {:print "$at(31,13560,13578)"} true;
L3:

    // havoc[val]($t3) at ./sources/governance/validator_set.move:322:34+18
    havoc $t3;
    assume $IsValid'vec'$2_validator_Validator''($t3);

    // havoc[val]($t4) at ./sources/governance/validator_set.move:322:34+18
    havoc $t4;
    assume $IsValid'bool'($t4);

    // havoc[val]($t5) at ./sources/governance/validator_set.move:322:34+18
    havoc $t5;
    assume $IsValid'bool'($t5);

    // havoc[val]($t6) at ./sources/governance/validator_set.move:322:34+18
    havoc $t6;
    assume $IsValid'$2_validator_Validator'($t6);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:322:34+18
    havoc $temp_0'vec'$2_validator_Validator'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t0));

    // havoc[mut]($t1) at ./sources/governance/validator_set.move:322:34+18
    havoc $temp_0'vec'$2_validator_Validator'';
    $t1 := $UpdateMutation($t1, $temp_0'vec'$2_validator_Validator'');
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t1));

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:322:34+18
    assume {:print "$info(): enter loop, variable(s) validators, pending_validators havocked and reassigned"} true;
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,16,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[pending_validators]($t1) at ./sources/governance/validator_set.move:322:34+18
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t1);
    assume {:print "$track_local(29,16,1):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:322:34+18
    assume !$abort_flag;

    // $t3 := read_ref($t1) at ./sources/governance/validator_set.move:322:34+18
    $t3 := $Dereference($t1);

    // $t4 := vector::is_empty<validator::Validator>($t3) on_abort goto L6 with $t7 at ./sources/governance/validator_set.move:322:17+36
    call $t4 := $1_vector_is_empty'$2_validator_Validator'($t3);
    if ($abort_flag) {
        assume {:print "$at(31,13543,13579)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,16):", $t7} $t7 == $t7;
        goto L6;
    }

    // $t5 := !($t4) at ./sources/governance/validator_set.move:322:16+1
    call $t5 := $Not($t4);

    // if ($t5) goto L0 else goto L2 at ./sources/governance/validator_set.move:322:9+161
    if ($t5) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:323:38+18
    assume {:print "$at(31,13620,13638)"} true;
L0:

    // $t6 := vector::pop_back<validator::Validator>($t1) on_abort goto L6 with $t7 at ./sources/governance/validator_set.move:323:21+36
    call $t6,$t1 := $1_vector_pop_back'$2_validator_Validator'($t1);
    if ($abort_flag) {
        assume {:print "$at(31,13603,13639)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,16):", $t7} $t7 == $t7;
        goto L6;
    }

    // trace_local[v]($t6) at ./sources/governance/validator_set.move:323:17+1
    assume {:print "$track_local(29,16,2):", $t6} $t6 == $t6;

    // vector::push_back<validator::Validator>($t0, $t6) on_abort goto L6 with $t7 at ./sources/governance/validator_set.move:324:13+32
    assume {:print "$at(31,13653,13685)"} true;
    call $t0 := $1_vector_push_back'$2_validator_Validator'($t0, $t6);
    if ($abort_flag) {
        assume {:print "$at(31,13653,13685)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(29,16):", $t7} $t7 == $t7;
        goto L6;
    }

    // goto L4 at ./sources/governance/validator_set.move:324:45+1
    goto L4;

    // label L2 at ./sources/governance/validator_set.move:322:9+161
    assume {:print "$at(31,13535,13696)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:322:9+161

    // destroy($t1) at ./sources/governance/validator_set.move:322:9+161

    // trace_local[validators]($t0) at ./sources/governance/validator_set.move:322:9+161
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t0);
    assume {:print "$track_local(29,16,0):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // trace_local[pending_validators]($t1) at ./sources/governance/validator_set.move:322:9+161
    $temp_0'vec'$2_validator_Validator'' := $Dereference($t1);
    assume {:print "$track_local(29,16,1):", $temp_0'vec'$2_validator_Validator''} $temp_0'vec'$2_validator_Validator'' == $temp_0'vec'$2_validator_Validator'';

    // goto L5 at ./sources/governance/validator_set.move:322:9+161
    goto L5;

    // label L4 at ./sources/governance/validator_set.move:322:9+161
    // Loop invariant checking block for the loop started with header: L3
L4:

    // stop() at ./sources/governance/validator_set.move:322:9+161
    assume false;
    return;

    // label L5 at ./sources/governance/validator_set.move:326:5+1
    assume {:print "$at(31,13701,13702)"} true;
L5:

    // return () at ./sources/governance/validator_set.move:326:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L6 at ./sources/governance/validator_set.move:326:5+1
L6:

    // abort($t7) at ./sources/governance/validator_set.move:326:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun validator_set::request_add_validator [baseline] at ./sources/governance/validator_set.move:72:5+445
procedure {:inline 1} $2_validator_set_request_add_validator(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $2_validator_Validator) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t2: bool;
    var $t3: Vec ($2_validator_Validator);
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: Vec ($2_validator_Validator);
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation (Vec ($2_validator_Validator));
    var $t12: $2_validator_set_ValidatorSet;
    var $t13: Vec ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t14));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:72:5+1
    assume {:print "$at(31,2826,2827)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[validator]($t1) at ./sources/governance/validator_set.move:72:5+1
    assume {:print "$track_local(29,19,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:74:43+23
    assume {:print "$at(31,2975,2998)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t4 := validator_set::contains_duplicate_validator($t3, $t1) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:74:14+65
    call $t4 := $2_validator_set_contains_duplicate_validator($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,2946,3011)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t6 := !($t4) at ./sources/governance/validator_set.move:74:13+1
    call $t6 := $Not($t4);

    // if ($t6) goto L0 else goto L2 at ./sources/governance/validator_set.move:74:13+153
    if ($t6) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:75:51+4
    assume {:print "$at(31,3062,3066)"} true;
L0:

    // $t7 := get_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:75:50+24
    $t7 := $pending_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t8 := validator_set::contains_duplicate_validator($t7, $t1) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:75:21+66
    call $t8 := $2_validator_set_contains_duplicate_validator($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,3032,3098)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t2 := !($t8) at ./sources/governance/validator_set.move:75:20+1
    call $t2 := $Not($t8);

    // goto L3 at ./sources/governance/validator_set.move:74:13+153
    assume {:print "$at(31,2945,3098)"} true;
    goto L3;

    // label L2 at ./sources/governance/validator_set.move:74:13+153
L2:

    // $t9 := false at ./sources/governance/validator_set.move:74:13+153
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t2 := $t9 at ./sources/governance/validator_set.move:74:13+153
    $t2 := $t9;

    // label L3 at ./sources/governance/validator_set.move:74:13+153
L3:

    // if ($t2) goto L4 else goto L5 at ./sources/governance/validator_set.move:73:9+199
    assume {:print "$at(31,2924,3123)"} true;
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at ./sources/governance/validator_set.move:73:9+199
L5:

    // destroy($t0) at ./sources/governance/validator_set.move:73:9+199

    // $t10 := 0 at ./sources/governance/validator_set.move:76:13+1
    assume {:print "$at(31,3112,3113)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:73:9+199
    assume {:print "$at(31,2924,3123)"} true;
    assume {:print "$track_abort(29,19):", $t10} $t10 == $t10;

    // $t5 := move($t10) at ./sources/governance/validator_set.move:73:9+199
    $t5 := $t10;

    // goto L7 at ./sources/governance/validator_set.move:73:9+199
    goto L7;

    // label L4 at ./sources/governance/validator_set.move:78:32+4
    assume {:print "$at(31,3156,3160)"} true;
L4:

    // $t11 := borrow_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:78:27+28
    $t11 := $ChildMutation($t0, 4, $pending_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // vector::push_back<validator::Validator>($t11, $t1) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:78:9+58
    call $t11 := $1_vector_push_back'$2_validator_Validator'($t11, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,3133,3191)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // write_back[Reference($t0).pending_validators (vector<validator::Validator>)]($t11) at ./sources/governance/validator_set.move:78:9+58
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_validators($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:78:9+58
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t12 := read_ref($t0) at ./sources/governance/validator_set.move:79:67+4
    assume {:print "$at(31,3259,3263)"} true;
    $t12 := $Dereference($t0);

    // $t13 := validator_set::derive_next_epoch_validators($t12) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:79:38+34
    call $t13 := $2_validator_set_derive_next_epoch_validators($t12);
    if ($abort_flag) {
        assume {:print "$at(31,3230,3264)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t14 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:79:9+26
    $t14 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t14, $t13) at ./sources/governance/validator_set.move:79:9+63
    $t14 := $UpdateMutation($t14, $t13);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t14) at ./sources/governance/validator_set.move:79:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t14)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:79:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:79:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L6 at ./sources/governance/validator_set.move:80:5+1
    assume {:print "$at(31,3270,3271)"} true;
L6:

    // return () at ./sources/governance/validator_set.move:80:5+1
    $ret0 := $t0;
    return;

    // label L7 at ./sources/governance/validator_set.move:80:5+1
L7:

    // abort($t5) at ./sources/governance/validator_set.move:80:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::request_add_validator [verification] at ./sources/governance/validator_set.move:72:5+445
procedure {:timeLimit 40} $2_validator_set_request_add_validator$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $2_validator_Validator) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t2: bool;
    var $t3: Vec ($2_validator_Validator);
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: Vec ($2_validator_Validator);
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation (Vec ($2_validator_Validator));
    var $t12: $2_validator_set_ValidatorSet;
    var $t13: Vec ($2_validator_ValidatorMetadata);
    var $t14: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $2_validator_Validator;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t14));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:72:5+1
    assume {:print "$at(31,2826,2827)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:72:5+1
    assume $IsValid'$2_validator_Validator'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:72:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[validator]($t1) at ./sources/governance/validator_set.move:72:5+1
    assume {:print "$track_local(29,19,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:74:43+23
    assume {:print "$at(31,2975,2998)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t4 := validator_set::contains_duplicate_validator($t3, $t1) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:74:14+65
    call $t4 := $2_validator_set_contains_duplicate_validator($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,2946,3011)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t6 := !($t4) at ./sources/governance/validator_set.move:74:13+1
    call $t6 := $Not($t4);

    // if ($t6) goto L0 else goto L2 at ./sources/governance/validator_set.move:74:13+153
    if ($t6) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:75:51+4
    assume {:print "$at(31,3062,3066)"} true;
L0:

    // $t7 := get_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:75:50+24
    $t7 := $pending_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t8 := validator_set::contains_duplicate_validator($t7, $t1) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:75:21+66
    call $t8 := $2_validator_set_contains_duplicate_validator($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,3032,3098)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t2 := !($t8) at ./sources/governance/validator_set.move:75:20+1
    call $t2 := $Not($t8);

    // goto L3 at ./sources/governance/validator_set.move:74:13+153
    assume {:print "$at(31,2945,3098)"} true;
    goto L3;

    // label L2 at ./sources/governance/validator_set.move:74:13+153
L2:

    // $t9 := false at ./sources/governance/validator_set.move:74:13+153
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t2 := $t9 at ./sources/governance/validator_set.move:74:13+153
    $t2 := $t9;

    // label L3 at ./sources/governance/validator_set.move:74:13+153
L3:

    // if ($t2) goto L4 else goto L5 at ./sources/governance/validator_set.move:73:9+199
    assume {:print "$at(31,2924,3123)"} true;
    if ($t2) { goto L4; } else { goto L5; }

    // label L5 at ./sources/governance/validator_set.move:73:9+199
L5:

    // destroy($t0) at ./sources/governance/validator_set.move:73:9+199

    // $t10 := 0 at ./sources/governance/validator_set.move:76:13+1
    assume {:print "$at(31,3112,3113)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:73:9+199
    assume {:print "$at(31,2924,3123)"} true;
    assume {:print "$track_abort(29,19):", $t10} $t10 == $t10;

    // $t5 := move($t10) at ./sources/governance/validator_set.move:73:9+199
    $t5 := $t10;

    // goto L7 at ./sources/governance/validator_set.move:73:9+199
    goto L7;

    // label L4 at ./sources/governance/validator_set.move:78:32+4
    assume {:print "$at(31,3156,3160)"} true;
L4:

    // $t11 := borrow_field<validator_set::ValidatorSet>.pending_validators($t0) at ./sources/governance/validator_set.move:78:27+28
    $t11 := $ChildMutation($t0, 4, $pending_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // vector::push_back<validator::Validator>($t11, $t1) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:78:9+58
    call $t11 := $1_vector_push_back'$2_validator_Validator'($t11, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,3133,3191)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // write_back[Reference($t0).pending_validators (vector<validator::Validator>)]($t11) at ./sources/governance/validator_set.move:78:9+58
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_validators($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:78:9+58
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t12 := read_ref($t0) at ./sources/governance/validator_set.move:79:67+4
    assume {:print "$at(31,3259,3263)"} true;
    $t12 := $Dereference($t0);

    // $t13 := validator_set::derive_next_epoch_validators($t12) on_abort goto L7 with $t5 at ./sources/governance/validator_set.move:79:38+34
    call $t13 := $2_validator_set_derive_next_epoch_validators($t12);
    if ($abort_flag) {
        assume {:print "$at(31,3230,3264)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,19):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t14 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:79:9+26
    $t14 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t14, $t13) at ./sources/governance/validator_set.move:79:9+63
    $t14 := $UpdateMutation($t14, $t13);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t14) at ./sources/governance/validator_set.move:79:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t14)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:79:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:79:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,19,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L6 at ./sources/governance/validator_set.move:80:5+1
    assume {:print "$at(31,3270,3271)"} true;
L6:

    // return () at ./sources/governance/validator_set.move:80:5+1
    $ret0 := $t0;
    return;

    // label L7 at ./sources/governance/validator_set.move:80:5+1
L7:

    // abort($t5) at ./sources/governance/validator_set.move:80:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::request_remove_validator [baseline] at ./sources/governance/validator_set.move:86:5+659
procedure {:inline 1} $2_validator_set_request_remove_validator(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $2_tx_context_TxContext) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_option_Option'u64';
    var $t5: int;
    var $t6: int;
    var $t7: Vec ($2_validator_Validator);
    var $t8: $1_option_Option'u64';
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_option_Option'u64');
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: Vec (int);
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: $Mutation (Vec (int));
    var $t20: $2_validator_set_ValidatorSet;
    var $t21: Vec ($2_validator_ValidatorMetadata);
    var $t22: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $2_tx_context_TxContext;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t19));
    assume IsEmptyVec(p#$Mutation($t22));

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:86:5+1
    assume {:print "$at(31,3508,3509)"} true;
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[ctx]($t1) at ./sources/governance/validator_set.move:86:5+1
    assume {:print "$track_local(29,21,1):", $t1} $t1 == $t1;

    // $t5 := tx_context::sender($t1) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:90:33+23
    assume {:print "$at(31,3651,3674)"} true;
    call $t5 := $2_tx_context_sender($t1);
    if ($abort_flag) {
        assume {:print "$at(31,3651,3674)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[validator_address]($t5) at ./sources/governance/validator_set.move:90:13+17
    assume {:print "$track_local(29,21,2):", $t5} $t5 == $t5;

    // $t7 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:91:50+23
    assume {:print "$at(31,3725,3748)"} true;
    $t7 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t4 := validator_set::find_validator($t7, $t5) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:91:35+58
    call $t4 := $2_validator_set_find_validator($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(31,3710,3768)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[validator_index_opt]($t4) at ./sources/governance/validator_set.move:91:13+19
    assume {:print "$track_local(29,21,4):", $t4} $t4 == $t4;

    // $t8 := copy($t4) at ./sources/governance/validator_set.move:92:33+20
    assume {:print "$at(31,3802,3822)"} true;
    $t8 := $t4;

    // $t9 := opaque begin: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:92:17+37

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:92:17+37
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, option::$is_some<u64>($t8)) at ./sources/governance/validator_set.move:92:17+37
    assume $IsEqual'bool'($t9, $1_option_$is_some'u64'($t8));

    // $t9 := opaque end: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:92:17+37

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator_set.move:92:9+49
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:92:9+49
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:92:9+49

    // $t10 := 0 at ./sources/governance/validator_set.move:92:56+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:92:9+49
    assume {:print "$at(31,3778,3827)"} true;
    assume {:print "$track_abort(29,21):", $t10} $t10 == $t10;

    // $t6 := move($t10) at ./sources/governance/validator_set.move:92:9+49
    $t6 := $t10;

    // goto L5 at ./sources/governance/validator_set.move:92:9+49
    goto L5;

    // label L0 at ./sources/governance/validator_set.move:93:47+24
    assume {:print "$at(31,3875,3899)"} true;
L0:

    // $t11 := borrow_local($t4) at ./sources/governance/validator_set.move:93:47+24
    $t11 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t12 := opaque begin: option::extract<u64>($t11) at ./sources/governance/validator_set.move:93:31+41

    // $t13 := read_ref($t11) at ./sources/governance/validator_set.move:93:31+41
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<u64>($t11)) at ./sources/governance/validator_set.move:93:31+41
    assume ($t14 == $1_option_$is_none'u64'($Dereference($t11)));

    // if ($t14) goto L8 else goto L6 at ./sources/governance/validator_set.move:93:31+41
    if ($t14) { goto L8; } else { goto L6; }

    // label L7 at ./sources/governance/validator_set.move:93:31+41
L7:

    // assume And(option::$is_none<u64>($t11), Eq(7, $t6)) at ./sources/governance/validator_set.move:93:31+41
    assume ($1_option_$is_none'u64'($Dereference($t11)) && $IsEqual'num'(7, $t6));

    // trace_abort($t6) at ./sources/governance/validator_set.move:93:31+41
    assume {:print "$at(31,3859,3900)"} true;
    assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;

    // goto L5 at ./sources/governance/validator_set.move:93:31+41
    goto L5;

    // label L6 at ./sources/governance/validator_set.move:93:31+41
L6:

    // havoc[mut]($t11) at ./sources/governance/validator_set.move:93:31+41
    havoc $temp_0'$1_option_Option'u64'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/validator_set.move:93:31+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t11)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/validator_set.move:93:31+41
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, option::$borrow<u64>($t13)) at ./sources/governance/validator_set.move:93:31+41
    assume $IsEqual'u64'($t12, $1_option_$borrow'u64'($t13));

    // assume option::$is_none<u64>($t11) at ./sources/governance/validator_set.move:93:31+41
    assume $1_option_$is_none'u64'($Dereference($t11));

    // $t12 := opaque end: option::extract<u64>($t11) at ./sources/governance/validator_set.move:93:31+41

    // pack_ref_deep($t11) at ./sources/governance/validator_set.move:93:31+41

    // write_back[LocalRoot($t4)@]($t11) at ./sources/governance/validator_set.move:93:31+41
    $t4 := $Dereference($t11);

    // trace_local[validator_index_opt]($t4) at ./sources/governance/validator_set.move:93:31+41
    assume {:print "$track_local(29,21,4):", $t4} $t4 == $t4;

    // trace_local[validator_index]($t12) at ./sources/governance/validator_set.move:93:13+15
    assume {:print "$track_local(29,21,3):", $t12} $t12 == $t12;

    // $t15 := get_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:95:31+22
    assume {:print "$at(31,3949,3971)"} true;
    $t15 := $pending_removals#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t16 := vector::contains<u64>($t15, $t12) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:95:14+58
    call $t16 := $1_vector_contains'u64'($t15, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,3932,3990)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // $t17 := !($t16) at ./sources/governance/validator_set.move:95:13+1
    call $t17 := $Not($t16);

    // if ($t17) goto L2 else goto L3 at ./sources/governance/validator_set.move:94:9+105
    assume {:print "$at(31,3910,4015)"} true;
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/validator_set.move:94:9+105
L3:

    // destroy($t0) at ./sources/governance/validator_set.move:94:9+105

    // $t18 := 0 at ./sources/governance/validator_set.move:96:13+1
    assume {:print "$at(31,4004,4005)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at ./sources/governance/validator_set.move:94:9+105
    assume {:print "$at(31,3910,4015)"} true;
    assume {:print "$track_abort(29,21):", $t18} $t18 == $t18;

    // $t6 := move($t18) at ./sources/governance/validator_set.move:94:9+105
    $t6 := $t18;

    // goto L5 at ./sources/governance/validator_set.move:94:9+105
    goto L5;

    // label L2 at ./sources/governance/validator_set.move:98:32+4
    assume {:print "$at(31,4048,4052)"} true;
L2:

    // $t19 := borrow_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:98:27+26
    $t19 := $ChildMutation($t0, 5, $pending_removals#$2_validator_set_ValidatorSet($Dereference($t0)));

    // vector::push_back<u64>($t19, $t12) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:98:9+62
    call $t19 := $1_vector_push_back'u64'($t19, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,4025,4087)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // write_back[Reference($t0).pending_removals (vector<u64>)]($t19) at ./sources/governance/validator_set.move:98:9+62
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_removals($Dereference($t0), $Dereference($t19)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:98:9+62
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t20 := read_ref($t0) at ./sources/governance/validator_set.move:99:67+4
    assume {:print "$at(31,4155,4159)"} true;
    $t20 := $Dereference($t0);

    // $t21 := validator_set::derive_next_epoch_validators($t20) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:99:38+34
    call $t21 := $2_validator_set_derive_next_epoch_validators($t20);
    if ($abort_flag) {
        assume {:print "$at(31,4126,4160)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // $t22 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:99:9+26
    $t22 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t22, $t21) at ./sources/governance/validator_set.move:99:9+63
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t22) at ./sources/governance/validator_set.move:99:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:99:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:99:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L4 at ./sources/governance/validator_set.move:100:5+1
    assume {:print "$at(31,4166,4167)"} true;
L4:

    // return () at ./sources/governance/validator_set.move:100:5+1
    $ret0 := $t0;
    return;

    // label L5 at ./sources/governance/validator_set.move:100:5+1
L5:

    // abort($t6) at ./sources/governance/validator_set.move:100:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t0) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun validator_set::request_remove_validator [verification] at ./sources/governance/validator_set.move:86:5+659
procedure {:timeLimit 40} $2_validator_set_request_remove_validator$verify(_$t0: $Mutation ($2_validator_set_ValidatorSet), _$t1: $2_tx_context_TxContext) returns ($ret0: $Mutation ($2_validator_set_ValidatorSet))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_option_Option'u64';
    var $t5: int;
    var $t6: int;
    var $t7: Vec ($2_validator_Validator);
    var $t8: $1_option_Option'u64';
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_option_Option'u64');
    var $t12: int;
    var $t13: $1_option_Option'u64';
    var $t14: bool;
    var $t15: Vec (int);
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: $Mutation (Vec (int));
    var $t20: $2_validator_set_ValidatorSet;
    var $t21: Vec ($2_validator_ValidatorMetadata);
    var $t22: $Mutation (Vec ($2_validator_ValidatorMetadata));
    var $t0: $Mutation ($2_validator_set_ValidatorSet);
    var $t1: $2_tx_context_TxContext;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t19));
    assume IsEmptyVec(p#$Mutation($t22));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:86:5+1
    assume {:print "$at(31,3508,3509)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:86:5+1
    assume $IsValid'$2_tx_context_TxContext'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:86:5+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[ctx]($t1) at ./sources/governance/validator_set.move:86:5+1
    assume {:print "$track_local(29,21,1):", $t1} $t1 == $t1;

    // $t5 := tx_context::sender($t1) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:90:33+23
    assume {:print "$at(31,3651,3674)"} true;
    call $t5 := $2_tx_context_sender($t1);
    if ($abort_flag) {
        assume {:print "$at(31,3651,3674)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[validator_address]($t5) at ./sources/governance/validator_set.move:90:13+17
    assume {:print "$track_local(29,21,2):", $t5} $t5 == $t5;

    // $t7 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:91:50+23
    assume {:print "$at(31,3725,3748)"} true;
    $t7 := $active_validators#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t4 := validator_set::find_validator($t7, $t5) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:91:35+58
    call $t4 := $2_validator_set_find_validator($t7, $t5);
    if ($abort_flag) {
        assume {:print "$at(31,3710,3768)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // trace_local[validator_index_opt]($t4) at ./sources/governance/validator_set.move:91:13+19
    assume {:print "$track_local(29,21,4):", $t4} $t4 == $t4;

    // $t8 := copy($t4) at ./sources/governance/validator_set.move:92:33+20
    assume {:print "$at(31,3802,3822)"} true;
    $t8 := $t4;

    // $t9 := opaque begin: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:92:17+37

    // assume WellFormed($t9) at ./sources/governance/validator_set.move:92:17+37
    assume $IsValid'bool'($t9);

    // assume Eq<bool>($t9, option::$is_some<u64>($t8)) at ./sources/governance/validator_set.move:92:17+37
    assume $IsEqual'bool'($t9, $1_option_$is_some'u64'($t8));

    // $t9 := opaque end: option::is_some<u64>($t8) at ./sources/governance/validator_set.move:92:17+37

    // if ($t9) goto L0 else goto L1 at ./sources/governance/validator_set.move:92:9+49
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/validator_set.move:92:9+49
L1:

    // destroy($t0) at ./sources/governance/validator_set.move:92:9+49

    // $t10 := 0 at ./sources/governance/validator_set.move:92:56+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at ./sources/governance/validator_set.move:92:9+49
    assume {:print "$at(31,3778,3827)"} true;
    assume {:print "$track_abort(29,21):", $t10} $t10 == $t10;

    // $t6 := move($t10) at ./sources/governance/validator_set.move:92:9+49
    $t6 := $t10;

    // goto L5 at ./sources/governance/validator_set.move:92:9+49
    goto L5;

    // label L0 at ./sources/governance/validator_set.move:93:47+24
    assume {:print "$at(31,3875,3899)"} true;
L0:

    // $t11 := borrow_local($t4) at ./sources/governance/validator_set.move:93:47+24
    $t11 := $Mutation($Local(4), EmptyVec(), $t4);

    // $t12 := opaque begin: option::extract<u64>($t11) at ./sources/governance/validator_set.move:93:31+41

    // $t13 := read_ref($t11) at ./sources/governance/validator_set.move:93:31+41
    $t13 := $Dereference($t11);

    // assume Identical($t14, option::$is_none<u64>($t11)) at ./sources/governance/validator_set.move:93:31+41
    assume ($t14 == $1_option_$is_none'u64'($Dereference($t11)));

    // if ($t14) goto L8 else goto L6 at ./sources/governance/validator_set.move:93:31+41
    if ($t14) { goto L8; } else { goto L6; }

    // label L7 at ./sources/governance/validator_set.move:93:31+41
L7:

    // assume And(option::$is_none<u64>($t11), Eq(7, $t6)) at ./sources/governance/validator_set.move:93:31+41
    assume ($1_option_$is_none'u64'($Dereference($t11)) && $IsEqual'num'(7, $t6));

    // trace_abort($t6) at ./sources/governance/validator_set.move:93:31+41
    assume {:print "$at(31,3859,3900)"} true;
    assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;

    // goto L5 at ./sources/governance/validator_set.move:93:31+41
    goto L5;

    // label L6 at ./sources/governance/validator_set.move:93:31+41
L6:

    // havoc[mut]($t11) at ./sources/governance/validator_set.move:93:31+41
    havoc $temp_0'$1_option_Option'u64'';
    $t11 := $UpdateMutation($t11, $temp_0'$1_option_Option'u64'');
    assume $IsValid'$1_option_Option'u64''($Dereference($t11));

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec($t11)), 1)) at ./sources/governance/validator_set.move:93:31+41
    assume ($IsValid'$1_option_Option'u64''($Dereference($t11)) && (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1));

    // assume WellFormed($t12) at ./sources/governance/validator_set.move:93:31+41
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, option::$borrow<u64>($t13)) at ./sources/governance/validator_set.move:93:31+41
    assume $IsEqual'u64'($t12, $1_option_$borrow'u64'($t13));

    // assume option::$is_none<u64>($t11) at ./sources/governance/validator_set.move:93:31+41
    assume $1_option_$is_none'u64'($Dereference($t11));

    // $t12 := opaque end: option::extract<u64>($t11) at ./sources/governance/validator_set.move:93:31+41

    // assert Le(Len<u64>(select option::Option.vec($t11)), 1) at ./deps/move-stdlib/sources/option.move:17:9+24
    // data invariant at ./deps/move-stdlib/sources/option.move:17:9+24
    assume {:print "$at(16,632,656)"} true;
    assert {:msg "assert_failed(16,632,656): data invariant does not hold"}
      (LenVec($vec#$1_option_Option'u64'($Dereference($t11))) <= 1);

    // write_back[LocalRoot($t4)@]($t11) at ./sources/governance/validator_set.move:93:31+41
    assume {:print "$at(31,3859,3900)"} true;
    $t4 := $Dereference($t11);

    // trace_local[validator_index_opt]($t4) at ./sources/governance/validator_set.move:93:31+41
    assume {:print "$track_local(29,21,4):", $t4} $t4 == $t4;

    // trace_local[validator_index]($t12) at ./sources/governance/validator_set.move:93:13+15
    assume {:print "$track_local(29,21,3):", $t12} $t12 == $t12;

    // $t15 := get_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:95:31+22
    assume {:print "$at(31,3949,3971)"} true;
    $t15 := $pending_removals#$2_validator_set_ValidatorSet($Dereference($t0));

    // $t16 := vector::contains<u64>($t15, $t12) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:95:14+58
    call $t16 := $1_vector_contains'u64'($t15, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,3932,3990)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // $t17 := !($t16) at ./sources/governance/validator_set.move:95:13+1
    call $t17 := $Not($t16);

    // if ($t17) goto L2 else goto L3 at ./sources/governance/validator_set.move:94:9+105
    assume {:print "$at(31,3910,4015)"} true;
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/validator_set.move:94:9+105
L3:

    // destroy($t0) at ./sources/governance/validator_set.move:94:9+105

    // $t18 := 0 at ./sources/governance/validator_set.move:96:13+1
    assume {:print "$at(31,4004,4005)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at ./sources/governance/validator_set.move:94:9+105
    assume {:print "$at(31,3910,4015)"} true;
    assume {:print "$track_abort(29,21):", $t18} $t18 == $t18;

    // $t6 := move($t18) at ./sources/governance/validator_set.move:94:9+105
    $t6 := $t18;

    // goto L5 at ./sources/governance/validator_set.move:94:9+105
    goto L5;

    // label L2 at ./sources/governance/validator_set.move:98:32+4
    assume {:print "$at(31,4048,4052)"} true;
L2:

    // $t19 := borrow_field<validator_set::ValidatorSet>.pending_removals($t0) at ./sources/governance/validator_set.move:98:27+26
    $t19 := $ChildMutation($t0, 5, $pending_removals#$2_validator_set_ValidatorSet($Dereference($t0)));

    // vector::push_back<u64>($t19, $t12) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:98:9+62
    call $t19 := $1_vector_push_back'u64'($t19, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,4025,4087)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // write_back[Reference($t0).pending_removals (vector<u64>)]($t19) at ./sources/governance/validator_set.move:98:9+62
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_pending_removals($Dereference($t0), $Dereference($t19)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:98:9+62
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // $t20 := read_ref($t0) at ./sources/governance/validator_set.move:99:67+4
    assume {:print "$at(31,4155,4159)"} true;
    $t20 := $Dereference($t0);

    // $t21 := validator_set::derive_next_epoch_validators($t20) on_abort goto L5 with $t6 at ./sources/governance/validator_set.move:99:38+34
    call $t21 := $2_validator_set_derive_next_epoch_validators($t20);
    if ($abort_flag) {
        assume {:print "$at(31,4126,4160)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(29,21):", $t6} $t6 == $t6;
        goto L5;
    }

    // $t22 := borrow_field<validator_set::ValidatorSet>.next_epoch_validators($t0) at ./sources/governance/validator_set.move:99:9+26
    $t22 := $ChildMutation($t0, 6, $next_epoch_validators#$2_validator_set_ValidatorSet($Dereference($t0)));

    // write_ref($t22, $t21) at ./sources/governance/validator_set.move:99:9+63
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).next_epoch_validators (vector<validator::ValidatorMetadata>)]($t22) at ./sources/governance/validator_set.move:99:9+63
    $t0 := $UpdateMutation($t0, $Update'$2_validator_set_ValidatorSet'_next_epoch_validators($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:99:9+63
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:99:72+1
    $temp_0'$2_validator_set_ValidatorSet' := $Dereference($t0);
    assume {:print "$track_local(29,21,0):", $temp_0'$2_validator_set_ValidatorSet'} $temp_0'$2_validator_set_ValidatorSet' == $temp_0'$2_validator_set_ValidatorSet';

    // label L4 at ./sources/governance/validator_set.move:100:5+1
    assume {:print "$at(31,4166,4167)"} true;
L4:

    // return () at ./sources/governance/validator_set.move:100:5+1
    $ret0 := $t0;
    return;

    // label L5 at ./sources/governance/validator_set.move:100:5+1
L5:

    // abort($t6) at ./sources/governance/validator_set.move:100:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t0) at <internal>:1:1+10

    // goto L7 at <internal>:1:1+10
    goto L7;

}

// fun validator_set::sort_removal_list [baseline] at ./sources/governance/validator_set.move:329:5+538
procedure {:inline 1} $2_validator_set_sort_removal_list(_$t0: $Mutation (Vec (int))) returns ($ret0: $Mutation (Vec (int)))
{
    // declare local variables
    var $t1: $Mutation (Vec (int));
    var $t2: int;
    var $t3: $Mutation (Vec (int));
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: Vec (int);
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: Vec (int);
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t0: $Mutation (Vec (int));
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t3));

    // bytecode translation starts here
    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:329:5+1
    assume {:print "$at(31,13754,13755)"} true;
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // $t9 := read_ref($t0) at ./sources/governance/validator_set.move:330:37+13
    assume {:print "$at(31,13847,13860)"} true;
    $t9 := $Dereference($t0);

    // $t10 := vector::length<u64>($t9) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:330:22+29
    call $t10 := $1_vector_length'u64'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,13832,13861)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[length]($t10) at ./sources/governance/validator_set.move:330:13+6
    assume {:print "$track_local(29,23,8):", $t10} $t10 == $t10;

    // $t12 := 1 at ./sources/governance/validator_set.move:331:17+1
    assume {:print "$at(31,13879,13880)"} true;
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:331:13+1
    assume {:print "$track_local(29,23,6):", $t12} $t12 == $t12;

    // label L9 at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$at(31,13897,13898)"} true;
L9:

    // havoc[val]($t12) at ./sources/governance/validator_set.move:332:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t7) at ./sources/governance/validator_set.move:332:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:332:16+1
    havoc $t13;
    assume $IsValid'bool'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:332:16+1
    havoc $t14;
    assume $IsValid'vec'u64''($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:332:16+1
    havoc $t15;
    assume $IsValid'u64'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:332:16+1
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:332:16+1
    havoc $t17;
    assume $IsValid'bool'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:332:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:332:16+1
    havoc $t19;
    assume $IsValid'u64'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:332:16+1
    havoc $t20;
    assume $IsValid'vec'u64''($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:332:16+1
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:332:16+1
    havoc $t22;
    assume $IsValid'bool'($t22);

    // havoc[val]($t23) at ./sources/governance/validator_set.move:332:16+1
    havoc $t23;
    assume $IsValid'u64'($t23);

    // havoc[val]($t24) at ./sources/governance/validator_set.move:332:16+1
    havoc $t24;
    assume $IsValid'u64'($t24);

    // havoc[val]($t25) at ./sources/governance/validator_set.move:332:16+1
    havoc $t25;
    assume $IsValid'u64'($t25);

    // havoc[val]($t26) at ./sources/governance/validator_set.move:332:16+1
    havoc $t26;
    assume $IsValid'u64'($t26);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:332:16+1
    havoc $temp_0'vec'u64'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'u64'');
    assume $IsValid'vec'u64''($Dereference($t0));

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$info(): enter loop, variable(s) withdraw_list, i, j havocked and reassigned"} true;
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$track_local(29,23,6):", $t12} $t12 == $t12;

    // trace_local[j]($t7) at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$track_local(29,23,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:332:16+1
    assume !$abort_flag;

    // $t13 := <($t12, $t10) at ./sources/governance/validator_set.move:332:18+1
    call $t13 := $Lt($t12, $t10);

    // if ($t13) goto L0 else goto L2 at ./sources/governance/validator_set.move:332:9+395
    if ($t13) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:333:39+13
    assume {:print "$at(31,13949,13962)"} true;
L0:

    // $t14 := read_ref($t0) at ./sources/governance/validator_set.move:333:38+18
    $t14 := $Dereference($t0);

    // $t15 := vector::borrow<u64>($t14, $t12) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:333:24+32
    call $t15 := $1_vector_borrow'u64'($t14, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,13934,13966)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[cur]($t15) at ./sources/governance/validator_set.move:333:17+3
    assume {:print "$track_local(29,23,5):", $t15} $t15 == $t15;

    // trace_local[j]($t12) at ./sources/governance/validator_set.move:334:17+1
    assume {:print "$at(31,13984,13985)"} true;
    assume {:print "$track_local(29,23,7):", $t12} $t12 == $t12;

    // label L8 at ./sources/governance/validator_set.move:335:20+1
    assume {:print "$at(31,14010,14011)"} true;
L8:

    // havoc[val]($t12) at ./sources/governance/validator_set.move:335:20+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:335:20+1
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:335:20+1
    havoc $t17;
    assume $IsValid'bool'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:335:20+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:335:20+1
    havoc $t19;
    assume $IsValid'u64'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:335:20+1
    havoc $t20;
    assume $IsValid'vec'u64''($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:335:20+1
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:335:20+1
    havoc $t22;
    assume $IsValid'bool'($t22);

    // havoc[val]($t23) at ./sources/governance/validator_set.move:335:20+1
    havoc $t23;
    assume $IsValid'u64'($t23);

    // havoc[val]($t24) at ./sources/governance/validator_set.move:335:20+1
    havoc $t24;
    assume $IsValid'u64'($t24);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:335:20+1
    havoc $temp_0'vec'u64'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'u64'');
    assume $IsValid'vec'u64''($Dereference($t0));

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:335:20+1
    assume {:print "$info(): enter loop, variable(s) withdraw_list, j havocked and reassigned"} true;
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // trace_local[j]($t12) at ./sources/governance/validator_set.move:335:20+1
    assume {:print "$track_local(29,23,7):", $t12} $t12 == $t12;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:335:20+1
    assume !$abort_flag;

    // $t16 := 0 at ./sources/governance/validator_set.move:335:24+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t12, $t16) at ./sources/governance/validator_set.move:335:22+1
    call $t17 := $Gt($t12, $t16);

    // if ($t17) goto L3 else goto L14 at ./sources/governance/validator_set.move:335:13+248
    if ($t17) { goto L3; } else { goto L14; }

    // label L3 at ./sources/governance/validator_set.move:336:21+1
    assume {:print "$at(31,14039,14040)"} true;
L3:

    // $t18 := 1 at ./sources/governance/validator_set.move:336:25+1
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // $t19 := -($t12, $t18) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:336:23+1
    call $t19 := $Sub($t12, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,14041,14042)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[j]($t19) at ./sources/governance/validator_set.move:336:17+1
    assume {:print "$track_local(29,23,7):", $t19} $t19 == $t19;

    // $t20 := read_ref($t0) at ./sources/governance/validator_set.move:337:36+18
    assume {:print "$at(31,14081,14099)"} true;
    $t20 := $Dereference($t0);

    // $t21 := vector::borrow<u64>($t20, $t19) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:337:22+32
    call $t21 := $1_vector_borrow'u64'($t20, $t19);
    if ($abort_flag) {
        assume {:print "$at(31,14067,14099)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // $t22 := >($t21, $t15) at ./sources/governance/validator_set.move:337:55+1
    call $t22 := $Gt($t21, $t15);

    // if ($t22) goto L6 else goto L15 at ./sources/governance/validator_set.move:337:17+174
    if ($t22) { goto L6; } else { goto L15; }

    // label L6 at ./sources/governance/validator_set.move:338:34+13
    assume {:print "$at(31,14142,14155)"} true;
L6:

    // $t23 := 1 at ./sources/governance/validator_set.move:338:56+1
    $t23 := 1;
    assume $IsValid'u64'($t23);

    // $t24 := +($t19, $t23) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:338:54+1
    call $t24 := $AddU64($t19, $t23);
    if ($abort_flag) {
        assume {:print "$at(31,14162,14163)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // vector::swap<u64>($t0, $t19, $t24) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:338:21+37
    call $t0 := $1_vector_swap'u64'($t0, $t19, $t24);
    if ($abort_flag) {
        assume {:print "$at(31,14129,14166)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // goto L10 at ./sources/governance/validator_set.move:341:18+1
    assume {:print "$at(31,14236,14237)"} true;
    goto L10;

    // label L5 at ./sources/governance/validator_set.move:343:17+1
    assume {:print "$at(31,14269,14270)"} true;
L5:

    // $t25 := 1 at ./sources/governance/validator_set.move:343:21+1
    $t25 := 1;
    assume $IsValid'u64'($t25);

    // $t26 := +($t12, $t25) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:343:19+1
    call $t26 := $AddU64($t12, $t25);
    if ($abort_flag) {
        assume {:print "$at(31,14271,14272)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[i]($t26) at ./sources/governance/validator_set.move:343:13+1
    assume {:print "$track_local(29,23,6):", $t26} $t26 == $t26;

    // goto L11 at ./sources/governance/validator_set.move:343:22+1
    goto L11;

    // label L2 at ./sources/governance/validator_set.move:344:10+1
    assume {:print "$at(31,14285,14286)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:344:10+1

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:344:10+1
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // goto L12 at ./sources/governance/validator_set.move:344:10+1
    goto L12;

    // label L10 at ./sources/governance/validator_set.move:344:10+1
    // Loop invariant checking block for the loop started with header: L8
L10:

    // stop() at ./sources/governance/validator_set.move:344:10+1
    assume false;
    return;

    // label L11 at ./sources/governance/validator_set.move:344:10+1
    // Loop invariant checking block for the loop started with header: L9
L11:

    // stop() at ./sources/governance/validator_set.move:344:10+1
    assume false;
    return;

    // label L12 at ./sources/governance/validator_set.move:345:5+1
    assume {:print "$at(31,14291,14292)"} true;
L12:

    // return () at ./sources/governance/validator_set.move:345:5+1
    $ret0 := $t0;
    return;

    // label L13 at ./sources/governance/validator_set.move:345:5+1
L13:

    // abort($t11) at ./sources/governance/validator_set.move:345:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L14 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L14:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L15 at <internal>:1:1+10
L15:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun validator_set::sort_removal_list [verification] at ./sources/governance/validator_set.move:329:5+538
procedure {:timeLimit 40} $2_validator_set_sort_removal_list$verify(_$t0: $Mutation (Vec (int))) returns ($ret0: $Mutation (Vec (int)))
{
    // declare local variables
    var $t1: $Mutation (Vec (int));
    var $t2: int;
    var $t3: $Mutation (Vec (int));
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: Vec (int);
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: Vec (int);
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t0: $Mutation (Vec (int));
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t1));
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:329:5+1
    assume {:print "$at(31,13754,13755)"} true;
    assume $IsValid'vec'u64''($Dereference($t0));

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:329:5+1
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // $t9 := read_ref($t0) at ./sources/governance/validator_set.move:330:37+13
    assume {:print "$at(31,13847,13860)"} true;
    $t9 := $Dereference($t0);

    // $t10 := vector::length<u64>($t9) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:330:22+29
    call $t10 := $1_vector_length'u64'($t9);
    if ($abort_flag) {
        assume {:print "$at(31,13832,13861)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[length]($t10) at ./sources/governance/validator_set.move:330:13+6
    assume {:print "$track_local(29,23,8):", $t10} $t10 == $t10;

    // $t12 := 1 at ./sources/governance/validator_set.move:331:17+1
    assume {:print "$at(31,13879,13880)"} true;
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:331:13+1
    assume {:print "$track_local(29,23,6):", $t12} $t12 == $t12;

    // label L9 at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$at(31,13897,13898)"} true;
L9:

    // havoc[val]($t12) at ./sources/governance/validator_set.move:332:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t7) at ./sources/governance/validator_set.move:332:16+1
    havoc $t7;
    assume $IsValid'u64'($t7);

    // havoc[val]($t13) at ./sources/governance/validator_set.move:332:16+1
    havoc $t13;
    assume $IsValid'bool'($t13);

    // havoc[val]($t14) at ./sources/governance/validator_set.move:332:16+1
    havoc $t14;
    assume $IsValid'vec'u64''($t14);

    // havoc[val]($t15) at ./sources/governance/validator_set.move:332:16+1
    havoc $t15;
    assume $IsValid'u64'($t15);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:332:16+1
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:332:16+1
    havoc $t17;
    assume $IsValid'bool'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:332:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:332:16+1
    havoc $t19;
    assume $IsValid'u64'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:332:16+1
    havoc $t20;
    assume $IsValid'vec'u64''($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:332:16+1
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:332:16+1
    havoc $t22;
    assume $IsValid'bool'($t22);

    // havoc[val]($t23) at ./sources/governance/validator_set.move:332:16+1
    havoc $t23;
    assume $IsValid'u64'($t23);

    // havoc[val]($t24) at ./sources/governance/validator_set.move:332:16+1
    havoc $t24;
    assume $IsValid'u64'($t24);

    // havoc[val]($t25) at ./sources/governance/validator_set.move:332:16+1
    havoc $t25;
    assume $IsValid'u64'($t25);

    // havoc[val]($t26) at ./sources/governance/validator_set.move:332:16+1
    havoc $t26;
    assume $IsValid'u64'($t26);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:332:16+1
    havoc $temp_0'vec'u64'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'u64'');
    assume $IsValid'vec'u64''($Dereference($t0));

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$info(): enter loop, variable(s) withdraw_list, i, j havocked and reassigned"} true;
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // trace_local[i]($t12) at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$track_local(29,23,6):", $t12} $t12 == $t12;

    // trace_local[j]($t7) at ./sources/governance/validator_set.move:332:16+1
    assume {:print "$track_local(29,23,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:332:16+1
    assume !$abort_flag;

    // $t13 := <($t12, $t10) at ./sources/governance/validator_set.move:332:18+1
    call $t13 := $Lt($t12, $t10);

    // if ($t13) goto L0 else goto L2 at ./sources/governance/validator_set.move:332:9+395
    if ($t13) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/validator_set.move:333:39+13
    assume {:print "$at(31,13949,13962)"} true;
L0:

    // $t14 := read_ref($t0) at ./sources/governance/validator_set.move:333:38+18
    $t14 := $Dereference($t0);

    // $t15 := vector::borrow<u64>($t14, $t12) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:333:24+32
    call $t15 := $1_vector_borrow'u64'($t14, $t12);
    if ($abort_flag) {
        assume {:print "$at(31,13934,13966)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[cur]($t15) at ./sources/governance/validator_set.move:333:17+3
    assume {:print "$track_local(29,23,5):", $t15} $t15 == $t15;

    // trace_local[j]($t12) at ./sources/governance/validator_set.move:334:17+1
    assume {:print "$at(31,13984,13985)"} true;
    assume {:print "$track_local(29,23,7):", $t12} $t12 == $t12;

    // label L8 at ./sources/governance/validator_set.move:335:20+1
    assume {:print "$at(31,14010,14011)"} true;
L8:

    // havoc[val]($t12) at ./sources/governance/validator_set.move:335:20+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t16) at ./sources/governance/validator_set.move:335:20+1
    havoc $t16;
    assume $IsValid'u64'($t16);

    // havoc[val]($t17) at ./sources/governance/validator_set.move:335:20+1
    havoc $t17;
    assume $IsValid'bool'($t17);

    // havoc[val]($t18) at ./sources/governance/validator_set.move:335:20+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[val]($t19) at ./sources/governance/validator_set.move:335:20+1
    havoc $t19;
    assume $IsValid'u64'($t19);

    // havoc[val]($t20) at ./sources/governance/validator_set.move:335:20+1
    havoc $t20;
    assume $IsValid'vec'u64''($t20);

    // havoc[val]($t21) at ./sources/governance/validator_set.move:335:20+1
    havoc $t21;
    assume $IsValid'u64'($t21);

    // havoc[val]($t22) at ./sources/governance/validator_set.move:335:20+1
    havoc $t22;
    assume $IsValid'bool'($t22);

    // havoc[val]($t23) at ./sources/governance/validator_set.move:335:20+1
    havoc $t23;
    assume $IsValid'u64'($t23);

    // havoc[val]($t24) at ./sources/governance/validator_set.move:335:20+1
    havoc $t24;
    assume $IsValid'u64'($t24);

    // havoc[mut]($t0) at ./sources/governance/validator_set.move:335:20+1
    havoc $temp_0'vec'u64'';
    $t0 := $UpdateMutation($t0, $temp_0'vec'u64'');
    assume $IsValid'vec'u64''($Dereference($t0));

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:335:20+1
    assume {:print "$info(): enter loop, variable(s) withdraw_list, j havocked and reassigned"} true;
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // trace_local[j]($t12) at ./sources/governance/validator_set.move:335:20+1
    assume {:print "$track_local(29,23,7):", $t12} $t12 == $t12;

    // assume Not(AbortFlag()) at ./sources/governance/validator_set.move:335:20+1
    assume !$abort_flag;

    // $t16 := 0 at ./sources/governance/validator_set.move:335:24+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t12, $t16) at ./sources/governance/validator_set.move:335:22+1
    call $t17 := $Gt($t12, $t16);

    // if ($t17) goto L3 else goto L14 at ./sources/governance/validator_set.move:335:13+248
    if ($t17) { goto L3; } else { goto L14; }

    // label L3 at ./sources/governance/validator_set.move:336:21+1
    assume {:print "$at(31,14039,14040)"} true;
L3:

    // $t18 := 1 at ./sources/governance/validator_set.move:336:25+1
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // $t19 := -($t12, $t18) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:336:23+1
    call $t19 := $Sub($t12, $t18);
    if ($abort_flag) {
        assume {:print "$at(31,14041,14042)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[j]($t19) at ./sources/governance/validator_set.move:336:17+1
    assume {:print "$track_local(29,23,7):", $t19} $t19 == $t19;

    // $t20 := read_ref($t0) at ./sources/governance/validator_set.move:337:36+18
    assume {:print "$at(31,14081,14099)"} true;
    $t20 := $Dereference($t0);

    // $t21 := vector::borrow<u64>($t20, $t19) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:337:22+32
    call $t21 := $1_vector_borrow'u64'($t20, $t19);
    if ($abort_flag) {
        assume {:print "$at(31,14067,14099)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // $t22 := >($t21, $t15) at ./sources/governance/validator_set.move:337:55+1
    call $t22 := $Gt($t21, $t15);

    // if ($t22) goto L6 else goto L15 at ./sources/governance/validator_set.move:337:17+174
    if ($t22) { goto L6; } else { goto L15; }

    // label L6 at ./sources/governance/validator_set.move:338:34+13
    assume {:print "$at(31,14142,14155)"} true;
L6:

    // $t23 := 1 at ./sources/governance/validator_set.move:338:56+1
    $t23 := 1;
    assume $IsValid'u64'($t23);

    // $t24 := +($t19, $t23) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:338:54+1
    call $t24 := $AddU64($t19, $t23);
    if ($abort_flag) {
        assume {:print "$at(31,14162,14163)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // vector::swap<u64>($t0, $t19, $t24) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:338:21+37
    call $t0 := $1_vector_swap'u64'($t0, $t19, $t24);
    if ($abort_flag) {
        assume {:print "$at(31,14129,14166)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // goto L10 at ./sources/governance/validator_set.move:341:18+1
    assume {:print "$at(31,14236,14237)"} true;
    goto L10;

    // label L5 at ./sources/governance/validator_set.move:343:17+1
    assume {:print "$at(31,14269,14270)"} true;
L5:

    // $t25 := 1 at ./sources/governance/validator_set.move:343:21+1
    $t25 := 1;
    assume $IsValid'u64'($t25);

    // $t26 := +($t12, $t25) on_abort goto L13 with $t11 at ./sources/governance/validator_set.move:343:19+1
    call $t26 := $AddU64($t12, $t25);
    if ($abort_flag) {
        assume {:print "$at(31,14271,14272)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(29,23):", $t11} $t11 == $t11;
        goto L13;
    }

    // trace_local[i]($t26) at ./sources/governance/validator_set.move:343:13+1
    assume {:print "$track_local(29,23,6):", $t26} $t26 == $t26;

    // goto L11 at ./sources/governance/validator_set.move:343:22+1
    goto L11;

    // label L2 at ./sources/governance/validator_set.move:344:10+1
    assume {:print "$at(31,14285,14286)"} true;
L2:

    // destroy($t0) at ./sources/governance/validator_set.move:344:10+1

    // trace_local[withdraw_list]($t0) at ./sources/governance/validator_set.move:344:10+1
    $temp_0'vec'u64'' := $Dereference($t0);
    assume {:print "$track_local(29,23,0):", $temp_0'vec'u64''} $temp_0'vec'u64'' == $temp_0'vec'u64'';

    // goto L12 at ./sources/governance/validator_set.move:344:10+1
    goto L12;

    // label L10 at ./sources/governance/validator_set.move:344:10+1
    // Loop invariant checking block for the loop started with header: L8
L10:

    // stop() at ./sources/governance/validator_set.move:344:10+1
    assume false;
    return;

    // label L11 at ./sources/governance/validator_set.move:344:10+1
    // Loop invariant checking block for the loop started with header: L9
L11:

    // stop() at ./sources/governance/validator_set.move:344:10+1
    assume false;
    return;

    // label L12 at ./sources/governance/validator_set.move:345:5+1
    assume {:print "$at(31,14291,14292)"} true;
L12:

    // return () at ./sources/governance/validator_set.move:345:5+1
    $ret0 := $t0;
    return;

    // label L13 at ./sources/governance/validator_set.move:345:5+1
L13:

    // abort($t11) at ./sources/governance/validator_set.move:345:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

    // label L14 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L14:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L15 at <internal>:1:1+10
L15:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun validator_set::total_delegation_stake [baseline] at ./sources/governance/validator_set.move:235:5+103
procedure {:inline 1} $2_validator_set_total_delegation_stake(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:235:5+1
    assume {:print "$at(31,9921,9922)"} true;
    assume {:print "$track_local(29,24,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator_set::ValidatorSet>.total_delegation_stake($t0) at ./sources/governance/validator_set.move:236:9+27
    assume {:print "$at(31,9991,10018)"} true;
    $t1 := $total_delegation_stake#$2_validator_set_ValidatorSet($t0);

    // trace_return[0]($t1) at ./sources/governance/validator_set.move:236:9+27
    assume {:print "$track_return(29,24,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator_set.move:237:5+1
    assume {:print "$at(31,10023,10024)"} true;
L1:

    // return $t1 at ./sources/governance/validator_set.move:237:5+1
    $ret0 := $t1;
    return;

}

// fun validator_set::total_delegation_stake [verification] at ./sources/governance/validator_set.move:235:5+103
procedure {:timeLimit 40} $2_validator_set_total_delegation_stake$verify(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:235:5+1
    assume {:print "$at(31,9921,9922)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:235:5+1
    assume {:print "$track_local(29,24,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator_set::ValidatorSet>.total_delegation_stake($t0) at ./sources/governance/validator_set.move:236:9+27
    assume {:print "$at(31,9991,10018)"} true;
    $t1 := $total_delegation_stake#$2_validator_set_ValidatorSet($t0);

    // trace_return[0]($t1) at ./sources/governance/validator_set.move:236:9+27
    assume {:print "$track_return(29,24,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator_set.move:237:5+1
    assume {:print "$at(31,10023,10024)"} true;
L1:

    // return $t1 at ./sources/governance/validator_set.move:237:5+1
    $ret0 := $t1;
    return;

}

// fun validator_set::total_validator_stake [baseline] at ./sources/governance/validator_set.move:231:5+101
procedure {:inline 1} $2_validator_set_total_validator_stake(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:231:5+1
    assume {:print "$at(31,9814,9815)"} true;
    assume {:print "$track_local(29,25,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator_set::ValidatorSet>.total_validator_stake($t0) at ./sources/governance/validator_set.move:232:9+26
    assume {:print "$at(31,9883,9909)"} true;
    $t1 := $total_validator_stake#$2_validator_set_ValidatorSet($t0);

    // trace_return[0]($t1) at ./sources/governance/validator_set.move:232:9+26
    assume {:print "$track_return(29,25,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator_set.move:233:5+1
    assume {:print "$at(31,9914,9915)"} true;
L1:

    // return $t1 at ./sources/governance/validator_set.move:233:5+1
    $ret0 := $t1;
    return;

}

// fun validator_set::total_validator_stake [verification] at ./sources/governance/validator_set.move:231:5+101
procedure {:timeLimit 40} $2_validator_set_total_validator_stake$verify(_$t0: $2_validator_set_ValidatorSet) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:231:5+1
    assume {:print "$at(31,9814,9815)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:231:5+1
    assume {:print "$track_local(29,25,0):", $t0} $t0 == $t0;

    // $t1 := get_field<validator_set::ValidatorSet>.total_validator_stake($t0) at ./sources/governance/validator_set.move:232:9+26
    assume {:print "$at(31,9883,9909)"} true;
    $t1 := $total_validator_stake#$2_validator_set_ValidatorSet($t0);

    // trace_return[0]($t1) at ./sources/governance/validator_set.move:232:9+26
    assume {:print "$track_return(29,25,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/validator_set.move:233:5+1
    assume {:print "$at(31,9914,9915)"} true;
L1:

    // return $t1 at ./sources/governance/validator_set.move:233:5+1
    $ret0 := $t1;
    return;

}

// fun validator_set::validator_delegate_amount [baseline] at ./sources/governance/validator_set.move:244:5+231
procedure {:inline 1} $2_validator_set_validator_delegate_amount(_$t0: $2_validator_set_ValidatorSet, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:244:5+1
    assume {:print "$at(31,10261,10262)"} true;
    assume {:print "$track_local(29,26,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:244:5+1
    assume {:print "$track_local(29,26,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:245:43+23
    assume {:print "$at(31,10396,10419)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t4 := validator_set::get_validator_ref($t3, $t1) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:245:25+61
    call $t4 := $2_validator_set_get_validator_ref($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,10378,10439)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,26):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[validator]($t4) at ./sources/governance/validator_set.move:245:13+9
    assume {:print "$track_local(29,26,2):", $t4} $t4 == $t4;

    // $t6 := validator::delegate_amount($t4) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:246:9+37
    assume {:print "$at(31,10449,10486)"} true;
    call $t6 := $2_validator_delegate_amount($t4);
    if ($abort_flag) {
        assume {:print "$at(31,10449,10486)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,26):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at ./sources/governance/validator_set.move:246:9+37
    assume {:print "$track_return(29,26,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/governance/validator_set.move:247:5+1
    assume {:print "$at(31,10491,10492)"} true;
L1:

    // return $t6 at ./sources/governance/validator_set.move:247:5+1
    $ret0 := $t6;
    return;

    // label L2 at ./sources/governance/validator_set.move:247:5+1
L2:

    // abort($t5) at ./sources/governance/validator_set.move:247:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::validator_delegate_amount [verification] at ./sources/governance/validator_set.move:244:5+231
procedure {:timeLimit 40} $2_validator_set_validator_delegate_amount$verify(_$t0: $2_validator_set_ValidatorSet, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:244:5+1
    assume {:print "$at(31,10261,10262)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:244:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:244:5+1
    assume {:print "$track_local(29,26,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:244:5+1
    assume {:print "$track_local(29,26,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:245:43+23
    assume {:print "$at(31,10396,10419)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t4 := validator_set::get_validator_ref($t3, $t1) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:245:25+61
    call $t4 := $2_validator_set_get_validator_ref($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,10378,10439)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,26):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[validator]($t4) at ./sources/governance/validator_set.move:245:13+9
    assume {:print "$track_local(29,26,2):", $t4} $t4 == $t4;

    // $t6 := validator::delegate_amount($t4) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:246:9+37
    assume {:print "$at(31,10449,10486)"} true;
    call $t6 := $2_validator_delegate_amount($t4);
    if ($abort_flag) {
        assume {:print "$at(31,10449,10486)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,26):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at ./sources/governance/validator_set.move:246:9+37
    assume {:print "$track_return(29,26,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/governance/validator_set.move:247:5+1
    assume {:print "$at(31,10491,10492)"} true;
L1:

    // return $t6 at ./sources/governance/validator_set.move:247:5+1
    $ret0 := $t6;
    return;

    // label L2 at ./sources/governance/validator_set.move:247:5+1
L2:

    // abort($t5) at ./sources/governance/validator_set.move:247:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::validator_delegator_count [baseline] at ./sources/governance/validator_set.move:249:5+231
procedure {:inline 1} $2_validator_set_validator_delegator_count(_$t0: $2_validator_set_ValidatorSet, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/governance/validator_set.move:249:5+1
    assume {:print "$at(31,10498,10499)"} true;
    assume {:print "$track_local(29,27,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:249:5+1
    assume {:print "$track_local(29,27,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:250:43+23
    assume {:print "$at(31,10633,10656)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t4 := validator_set::get_validator_ref($t3, $t1) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:250:25+61
    call $t4 := $2_validator_set_get_validator_ref($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,10615,10676)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[validator]($t4) at ./sources/governance/validator_set.move:250:13+9
    assume {:print "$track_local(29,27,2):", $t4} $t4 == $t4;

    // $t6 := validator::delegator_count($t4) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:251:9+37
    assume {:print "$at(31,10686,10723)"} true;
    call $t6 := $2_validator_delegator_count($t4);
    if ($abort_flag) {
        assume {:print "$at(31,10686,10723)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at ./sources/governance/validator_set.move:251:9+37
    assume {:print "$track_return(29,27,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/governance/validator_set.move:252:5+1
    assume {:print "$at(31,10728,10729)"} true;
L1:

    // return $t6 at ./sources/governance/validator_set.move:252:5+1
    $ret0 := $t6;
    return;

    // label L2 at ./sources/governance/validator_set.move:252:5+1
L2:

    // abort($t5) at ./sources/governance/validator_set.move:252:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::validator_delegator_count [verification] at ./sources/governance/validator_set.move:249:5+231
procedure {:timeLimit 40} $2_validator_set_validator_delegator_count$verify(_$t0: $2_validator_set_ValidatorSet, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:249:5+1
    assume {:print "$at(31,10498,10499)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:249:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:249:5+1
    assume {:print "$track_local(29,27,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:249:5+1
    assume {:print "$track_local(29,27,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:250:43+23
    assume {:print "$at(31,10633,10656)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t4 := validator_set::get_validator_ref($t3, $t1) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:250:25+61
    call $t4 := $2_validator_set_get_validator_ref($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,10615,10676)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[validator]($t4) at ./sources/governance/validator_set.move:250:13+9
    assume {:print "$track_local(29,27,2):", $t4} $t4 == $t4;

    // $t6 := validator::delegator_count($t4) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:251:9+37
    assume {:print "$at(31,10686,10723)"} true;
    call $t6 := $2_validator_delegator_count($t4);
    if ($abort_flag) {
        assume {:print "$at(31,10686,10723)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,27):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at ./sources/governance/validator_set.move:251:9+37
    assume {:print "$track_return(29,27,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/governance/validator_set.move:252:5+1
    assume {:print "$at(31,10728,10729)"} true;
L1:

    // return $t6 at ./sources/governance/validator_set.move:252:5+1
    $ret0 := $t6;
    return;

    // label L2 at ./sources/governance/validator_set.move:252:5+1
L2:

    // abort($t5) at ./sources/governance/validator_set.move:252:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun validator_set::validator_stake_amount [verification] at ./sources/governance/validator_set.move:239:5+225
procedure {:timeLimit 40} $2_validator_set_validator_stake_amount$verify(_$t0: $2_validator_set_ValidatorSet, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_Validator;
    var $t3: Vec ($2_validator_Validator);
    var $t4: $2_validator_Validator;
    var $t5: int;
    var $t6: int;
    var $t0: $2_validator_set_ValidatorSet;
    var $t1: int;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'$2_validator_set_ValidatorSet': $2_validator_set_ValidatorSet;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/validator_set.move:239:5+1
    assume {:print "$at(31,10030,10031)"} true;
    assume $IsValid'$2_validator_set_ValidatorSet'($t0);

    // assume WellFormed($t1) at ./sources/governance/validator_set.move:239:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/validator_set.move:239:5+1
    assume {:print "$track_local(29,28,0):", $t0} $t0 == $t0;

    // trace_local[validator_address]($t1) at ./sources/governance/validator_set.move:239:5+1
    assume {:print "$track_local(29,28,1):", $t1} $t1 == $t1;

    // $t3 := get_field<validator_set::ValidatorSet>.active_validators($t0) at ./sources/governance/validator_set.move:240:43+23
    assume {:print "$at(31,10162,10185)"} true;
    $t3 := $active_validators#$2_validator_set_ValidatorSet($t0);

    // $t4 := validator_set::get_validator_ref($t3, $t1) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:240:25+61
    call $t4 := $2_validator_set_get_validator_ref($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(31,10144,10205)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,28):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[validator]($t4) at ./sources/governance/validator_set.move:240:13+9
    assume {:print "$track_local(29,28,2):", $t4} $t4 == $t4;

    // $t6 := validator::stake_amount($t4) on_abort goto L2 with $t5 at ./sources/governance/validator_set.move:241:9+34
    assume {:print "$at(31,10215,10249)"} true;
    call $t6 := $2_validator_stake_amount($t4);
    if ($abort_flag) {
        assume {:print "$at(31,10215,10249)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,28):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t6) at ./sources/governance/validator_set.move:241:9+34
    assume {:print "$track_return(29,28,0):", $t6} $t6 == $t6;

    // label L1 at ./sources/governance/validator_set.move:242:5+1
    assume {:print "$at(31,10254,10255)"} true;
L1:

    // return $t6 at ./sources/governance/validator_set.move:242:5+1
    $ret0 := $t6;
    return;

    // label L2 at ./sources/governance/validator_set.move:242:5+1
L2:

    // abort($t5) at ./sources/governance/validator_set.move:242:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct sui_system::SuiSystemState at ./sources/governance/sui_system.move:41:5+639
type {:datatype} $2_sui_system_SuiSystemState;
function {:constructor} $2_sui_system_SuiSystemState($id: $2_object_UID, $epoch: int, $validators: $2_validator_set_ValidatorSet, $sui_supply: $2_balance_Supply'$2_sui_SUI', $storage_fund: $2_balance_Balance'$2_sui_SUI', $parameters: $2_sui_system_SystemParameters, $delegation_reward: $2_balance_Balance'$2_sui_SUI'): $2_sui_system_SuiSystemState;
function {:inline} $Update'$2_sui_system_SuiSystemState'_id(s: $2_sui_system_SuiSystemState, x: $2_object_UID): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState(x, $epoch#$2_sui_system_SuiSystemState(s), $validators#$2_sui_system_SuiSystemState(s), $sui_supply#$2_sui_system_SuiSystemState(s), $storage_fund#$2_sui_system_SuiSystemState(s), $parameters#$2_sui_system_SuiSystemState(s), $delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $Update'$2_sui_system_SuiSystemState'_epoch(s: $2_sui_system_SuiSystemState, x: int): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState($id#$2_sui_system_SuiSystemState(s), x, $validators#$2_sui_system_SuiSystemState(s), $sui_supply#$2_sui_system_SuiSystemState(s), $storage_fund#$2_sui_system_SuiSystemState(s), $parameters#$2_sui_system_SuiSystemState(s), $delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $Update'$2_sui_system_SuiSystemState'_validators(s: $2_sui_system_SuiSystemState, x: $2_validator_set_ValidatorSet): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState($id#$2_sui_system_SuiSystemState(s), $epoch#$2_sui_system_SuiSystemState(s), x, $sui_supply#$2_sui_system_SuiSystemState(s), $storage_fund#$2_sui_system_SuiSystemState(s), $parameters#$2_sui_system_SuiSystemState(s), $delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $Update'$2_sui_system_SuiSystemState'_sui_supply(s: $2_sui_system_SuiSystemState, x: $2_balance_Supply'$2_sui_SUI'): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState($id#$2_sui_system_SuiSystemState(s), $epoch#$2_sui_system_SuiSystemState(s), $validators#$2_sui_system_SuiSystemState(s), x, $storage_fund#$2_sui_system_SuiSystemState(s), $parameters#$2_sui_system_SuiSystemState(s), $delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $Update'$2_sui_system_SuiSystemState'_storage_fund(s: $2_sui_system_SuiSystemState, x: $2_balance_Balance'$2_sui_SUI'): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState($id#$2_sui_system_SuiSystemState(s), $epoch#$2_sui_system_SuiSystemState(s), $validators#$2_sui_system_SuiSystemState(s), $sui_supply#$2_sui_system_SuiSystemState(s), x, $parameters#$2_sui_system_SuiSystemState(s), $delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $Update'$2_sui_system_SuiSystemState'_parameters(s: $2_sui_system_SuiSystemState, x: $2_sui_system_SystemParameters): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState($id#$2_sui_system_SuiSystemState(s), $epoch#$2_sui_system_SuiSystemState(s), $validators#$2_sui_system_SuiSystemState(s), $sui_supply#$2_sui_system_SuiSystemState(s), $storage_fund#$2_sui_system_SuiSystemState(s), x, $delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $Update'$2_sui_system_SuiSystemState'_delegation_reward(s: $2_sui_system_SuiSystemState, x: $2_balance_Balance'$2_sui_SUI'): $2_sui_system_SuiSystemState {
    $2_sui_system_SuiSystemState($id#$2_sui_system_SuiSystemState(s), $epoch#$2_sui_system_SuiSystemState(s), $validators#$2_sui_system_SuiSystemState(s), $sui_supply#$2_sui_system_SuiSystemState(s), $storage_fund#$2_sui_system_SuiSystemState(s), $parameters#$2_sui_system_SuiSystemState(s), x)
}
function $IsValid'$2_sui_system_SuiSystemState'(s: $2_sui_system_SuiSystemState): bool {
    $IsValid'$2_object_UID'($id#$2_sui_system_SuiSystemState(s))
      && $IsValid'u64'($epoch#$2_sui_system_SuiSystemState(s))
      && $IsValid'$2_validator_set_ValidatorSet'($validators#$2_sui_system_SuiSystemState(s))
      && $IsValid'$2_balance_Supply'$2_sui_SUI''($sui_supply#$2_sui_system_SuiSystemState(s))
      && $IsValid'$2_balance_Balance'$2_sui_SUI''($storage_fund#$2_sui_system_SuiSystemState(s))
      && $IsValid'$2_sui_system_SystemParameters'($parameters#$2_sui_system_SuiSystemState(s))
      && $IsValid'$2_balance_Balance'$2_sui_SUI''($delegation_reward#$2_sui_system_SuiSystemState(s))
}
function {:inline} $IsEqual'$2_sui_system_SuiSystemState'(s1: $2_sui_system_SuiSystemState, s2: $2_sui_system_SuiSystemState): bool {
    $IsEqual'$2_object_UID'($id#$2_sui_system_SuiSystemState(s1), $id#$2_sui_system_SuiSystemState(s2))
    && $IsEqual'u64'($epoch#$2_sui_system_SuiSystemState(s1), $epoch#$2_sui_system_SuiSystemState(s2))
    && $IsEqual'$2_validator_set_ValidatorSet'($validators#$2_sui_system_SuiSystemState(s1), $validators#$2_sui_system_SuiSystemState(s2))
    && $IsEqual'$2_balance_Supply'$2_sui_SUI''($sui_supply#$2_sui_system_SuiSystemState(s1), $sui_supply#$2_sui_system_SuiSystemState(s2))
    && $IsEqual'$2_balance_Balance'$2_sui_SUI''($storage_fund#$2_sui_system_SuiSystemState(s1), $storage_fund#$2_sui_system_SuiSystemState(s2))
    && $IsEqual'$2_sui_system_SystemParameters'($parameters#$2_sui_system_SuiSystemState(s1), $parameters#$2_sui_system_SuiSystemState(s2))
    && $IsEqual'$2_balance_Balance'$2_sui_SUI''($delegation_reward#$2_sui_system_SuiSystemState(s1), $delegation_reward#$2_sui_system_SuiSystemState(s2))}
var $2_sui_system_SuiSystemState_$memory: $Memory $2_sui_system_SuiSystemState;

// struct sui_system::SystemParameters at ./sources/governance/sui_system.move:30:5+429
type {:datatype} $2_sui_system_SystemParameters;
function {:constructor} $2_sui_system_SystemParameters($min_validator_stake: int, $max_validator_candidate_count: int, $storage_gas_price: int): $2_sui_system_SystemParameters;
function {:inline} $Update'$2_sui_system_SystemParameters'_min_validator_stake(s: $2_sui_system_SystemParameters, x: int): $2_sui_system_SystemParameters {
    $2_sui_system_SystemParameters(x, $max_validator_candidate_count#$2_sui_system_SystemParameters(s), $storage_gas_price#$2_sui_system_SystemParameters(s))
}
function {:inline} $Update'$2_sui_system_SystemParameters'_max_validator_candidate_count(s: $2_sui_system_SystemParameters, x: int): $2_sui_system_SystemParameters {
    $2_sui_system_SystemParameters($min_validator_stake#$2_sui_system_SystemParameters(s), x, $storage_gas_price#$2_sui_system_SystemParameters(s))
}
function {:inline} $Update'$2_sui_system_SystemParameters'_storage_gas_price(s: $2_sui_system_SystemParameters, x: int): $2_sui_system_SystemParameters {
    $2_sui_system_SystemParameters($min_validator_stake#$2_sui_system_SystemParameters(s), $max_validator_candidate_count#$2_sui_system_SystemParameters(s), x)
}
function $IsValid'$2_sui_system_SystemParameters'(s: $2_sui_system_SystemParameters): bool {
    $IsValid'u64'($min_validator_stake#$2_sui_system_SystemParameters(s))
      && $IsValid'u64'($max_validator_candidate_count#$2_sui_system_SystemParameters(s))
      && $IsValid'u64'($storage_gas_price#$2_sui_system_SystemParameters(s))
}
function {:inline} $IsEqual'$2_sui_system_SystemParameters'(s1: $2_sui_system_SystemParameters, s2: $2_sui_system_SystemParameters): bool {
    s1 == s2
}

// fun sui_system::epoch [verification] at ./sources/governance/sui_system.move:317:5+71
procedure {:timeLimit 40} $2_sui_system_epoch$verify(_$t0: $2_sui_system_SuiSystemState) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $2_sui_system_SuiSystemState;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:317:5+1
    assume {:print "$at(53,12503,12504)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($t0);

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:317:5+1
    assume {:print "$track_local(30,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:318:9+10
    assume {:print "$at(53,12558,12568)"} true;
    $t1 := $epoch#$2_sui_system_SuiSystemState($t0);

    // trace_return[0]($t1) at ./sources/governance/sui_system.move:318:9+10
    assume {:print "$track_return(30,3,0):", $t1} $t1 == $t1;

    // label L1 at ./sources/governance/sui_system.move:319:5+1
    assume {:print "$at(53,12573,12574)"} true;
L1:

    // return $t1 at ./sources/governance/sui_system.move:319:5+1
    $ret0 := $t1;
    return;

}

// fun sui_system::create [baseline] at ./sources/governance/sui_system.move:62:5+776
procedure {:inline 1} $2_sui_system_create(_$t0: Vec ($2_validator_Validator), _$t1: $2_balance_Supply'$2_sui_SUI', _$t2: $2_balance_Balance'$2_sui_SUI', _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: $2_sui_system_SuiSystemState;
    var $t7: $2_object_UID;
    var $t8: int;
    var $t9: int;
    var $t10: $2_validator_set_ValidatorSet;
    var $t11: $2_sui_system_SystemParameters;
    var $t12: $2_balance_Balance'$2_sui_SUI';
    var $t13: $2_sui_system_SuiSystemState;
    var $t0: Vec ($2_validator_Validator);
    var $t1: $2_balance_Supply'$2_sui_SUI';
    var $t2: $2_balance_Balance'$2_sui_SUI';
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // trace_local[validators]($t0) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$at(53,2374,2375)"} true;
    assume {:print "$track_local(30,2,0):", $t0} $t0 == $t0;

    // trace_local[sui_supply]($t1) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,1):", $t1} $t1 == $t1;

    // trace_local[storage_fund]($t2) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,2):", $t2} $t2 == $t2;

    // trace_local[max_validator_candidate_count]($t3) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,3):", $t3} $t3 == $t3;

    // trace_local[min_validator_stake]($t4) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,4):", $t4} $t4 == $t4;

    // trace_local[storage_gas_price]($t5) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,5):", $t5} $t5 == $t5;

    // $t7 := object::sui_system_state() on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:72:17+26
    assume {:print "$at(53,2715,2741)"} true;
    call $t7 := $2_object_sui_system_state();
    if ($abort_flag) {
        assume {:print "$at(53,2715,2741)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t9 := 0 at ./sources/governance/sui_system.move:73:20+1
    assume {:print "$at(53,2762,2763)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := validator_set::new($t0) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:74:25+30
    assume {:print "$at(53,2789,2819)"} true;
    call $t10 := $2_validator_set_new($t0);
    if ($abort_flag) {
        assume {:print "$at(53,2789,2819)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := pack sui_system::SystemParameters($t4, $t3, $t5) at ./sources/governance/sui_system.move:77:25+150
    assume {:print "$at(53,2895,3045)"} true;
    $t11 := $2_sui_system_SystemParameters($t4, $t3, $t5);

    // $t12 := balance::zero<sui::SUI>() on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:82:32+15
    assume {:print "$at(53,3078,3093)"} true;
    call $t12 := $2_balance_zero'$2_sui_SUI'();
    if ($abort_flag) {
        assume {:print "$at(53,3078,3093)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t13 := pack sui_system::SuiSystemState($t7, $t9, $t10, $t1, $t2, $t11, $t12) at ./sources/governance/sui_system.move:70:21+457
    assume {:print "$at(53,2647,3104)"} true;
    $t13 := $2_sui_system_SuiSystemState($t7, $t9, $t10, $t1, $t2, $t11, $t12);

    // trace_local[state]($t13) at ./sources/governance/sui_system.move:70:13+5
    assume {:print "$track_local(30,2,6):", $t13} $t13 == $t13;

    // transfer::share_object<sui_system::SuiSystemState>($t13) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:84:9+29
    assume {:print "$at(53,3114,3143)"} true;
    call $2_transfer_share_object'$2_sui_system_SuiSystemState'($t13);
    if ($abort_flag) {
        assume {:print "$at(53,3114,3143)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at ./sources/governance/sui_system.move:85:5+1
    assume {:print "$at(53,3149,3150)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:85:5+1
    return;

    // label L2 at ./sources/governance/sui_system.move:85:5+1
L2:

    // abort($t8) at ./sources/governance/sui_system.move:85:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun sui_system::create [verification] at ./sources/governance/sui_system.move:62:5+776
procedure {:timeLimit 40} $2_sui_system_create$verify(_$t0: Vec ($2_validator_Validator), _$t1: $2_balance_Supply'$2_sui_SUI', _$t2: $2_balance_Balance'$2_sui_SUI', _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: $2_sui_system_SuiSystemState;
    var $t7: $2_object_UID;
    var $t8: int;
    var $t9: int;
    var $t10: $2_validator_set_ValidatorSet;
    var $t11: $2_sui_system_SystemParameters;
    var $t12: $2_balance_Balance'$2_sui_SUI';
    var $t13: $2_sui_system_SuiSystemState;
    var $t0: Vec ($2_validator_Validator);
    var $t1: $2_balance_Supply'$2_sui_SUI';
    var $t2: $2_balance_Balance'$2_sui_SUI';
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$at(53,2374,2375)"} true;
    assume $IsValid'vec'$2_validator_Validator''($t0);

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:62:5+1
    assume $IsValid'$2_balance_Supply'$2_sui_SUI''($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:62:5+1
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:62:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/governance/sui_system.move:62:5+1
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at ./sources/governance/sui_system.move:62:5+1
    assume $IsValid'u64'($t5);

    // trace_local[validators]($t0) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,0):", $t0} $t0 == $t0;

    // trace_local[sui_supply]($t1) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,1):", $t1} $t1 == $t1;

    // trace_local[storage_fund]($t2) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,2):", $t2} $t2 == $t2;

    // trace_local[max_validator_candidate_count]($t3) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,3):", $t3} $t3 == $t3;

    // trace_local[min_validator_stake]($t4) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,4):", $t4} $t4 == $t4;

    // trace_local[storage_gas_price]($t5) at ./sources/governance/sui_system.move:62:5+1
    assume {:print "$track_local(30,2,5):", $t5} $t5 == $t5;

    // $t7 := object::sui_system_state() on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:72:17+26
    assume {:print "$at(53,2715,2741)"} true;
    call $t7 := $2_object_sui_system_state();
    if ($abort_flag) {
        assume {:print "$at(53,2715,2741)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t9 := 0 at ./sources/governance/sui_system.move:73:20+1
    assume {:print "$at(53,2762,2763)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := validator_set::new($t0) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:74:25+30
    assume {:print "$at(53,2789,2819)"} true;
    call $t10 := $2_validator_set_new($t0);
    if ($abort_flag) {
        assume {:print "$at(53,2789,2819)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := pack sui_system::SystemParameters($t4, $t3, $t5) at ./sources/governance/sui_system.move:77:25+150
    assume {:print "$at(53,2895,3045)"} true;
    $t11 := $2_sui_system_SystemParameters($t4, $t3, $t5);

    // $t12 := balance::zero<sui::SUI>() on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:82:32+15
    assume {:print "$at(53,3078,3093)"} true;
    call $t12 := $2_balance_zero'$2_sui_SUI'();
    if ($abort_flag) {
        assume {:print "$at(53,3078,3093)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t13 := pack sui_system::SuiSystemState($t7, $t9, $t10, $t1, $t2, $t11, $t12) at ./sources/governance/sui_system.move:70:21+457
    assume {:print "$at(53,2647,3104)"} true;
    $t13 := $2_sui_system_SuiSystemState($t7, $t9, $t10, $t1, $t2, $t11, $t12);

    // trace_local[state]($t13) at ./sources/governance/sui_system.move:70:13+5
    assume {:print "$track_local(30,2,6):", $t13} $t13 == $t13;

    // transfer::share_object<sui_system::SuiSystemState>($t13) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:84:9+29
    assume {:print "$at(53,3114,3143)"} true;
    call $2_transfer_share_object'$2_sui_system_SuiSystemState'($t13);
    if ($abort_flag) {
        assume {:print "$at(53,3114,3143)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at ./sources/governance/sui_system.move:85:5+1
    assume {:print "$at(53,3149,3150)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:85:5+1
    return;

    // label L2 at ./sources/governance/sui_system.move:85:5+1
L2:

    // abort($t8) at ./sources/governance/sui_system.move:85:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun sui_system::request_add_delegation [verification] at ./sources/governance/sui_system.move:190:5+516
procedure {:timeLimit 40} $2_sui_system_request_add_delegation$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $2_coin_Coin'$2_sui_SUI', _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($2_validator_set_ValidatorSet);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $2_coin_Coin'$2_sui_SUI';
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:190:5+1
    assume {:print "$at(53,6844,6845)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:190:5+1
    assume $IsValid'$2_coin_Coin'$2_sui_SUI''($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:190:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:190:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:190:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,4,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegate_stake]($t1) at ./sources/governance/sui_system.move:190:5+1
    assume {:print "$track_local(30,4,1):", $t1} $t1 == $t1;

    // trace_local[validator_address]($t2) at ./sources/governance/sui_system.move:190:5+1
    assume {:print "$track_local(30,4,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:190:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := coin::value<sui::SUI>($t1) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:196:22+28
    assume {:print "$at(53,7049,7077)"} true;
    call $t6 := $2_coin_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(53,7049,7077)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[amount]($t6) at ./sources/governance/sui_system.move:196:13+6
    assume {:print "$track_local(30,4,4):", $t6} $t6 == $t6;

    // $t8 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:197:47+20
    assume {:print "$at(53,7125,7145)"} true;
    $t8 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // validator_set::request_add_delegation($t8, $t2, $t6) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:197:9+86
    call $t8 := $2_validator_set_request_add_delegation($t8, $t2, $t6);
    if ($abort_flag) {
        assume {:print "$at(53,7087,7173)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t8) at ./sources/governance/sui_system.move:197:9+86
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:197:9+86
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,4,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // $t9 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:200:30+10
    assume {:print "$at(53,7255,7265)"} true;
    $t9 := $epoch#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t10 := 1 at ./sources/governance/sui_system.move:200:43+1
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := +($t9, $t10) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:200:41+1
    call $t11 := $AddU64($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(53,7266,7267)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[starting_epoch]($t11) at ./sources/governance/sui_system.move:200:13+14
    assume {:print "$track_local(30,4,5):", $t11} $t11 == $t11;

    // delegation::create($t11, $t2, $t1, $t3) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:201:9+74
    assume {:print "$at(53,7279,7353)"} true;
    call $t3 := $2_delegation_create($t11, $t2, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,7279,7353)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:201:83+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,4,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:201:83+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,4,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:202:5+1
    assume {:print "$at(53,7359,7360)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:202:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/governance/sui_system.move:202:5+1
L2:

    // abort($t7) at ./sources/governance/sui_system.move:202:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun sui_system::request_add_stake [verification] at ./sources/governance/sui_system.move:142:5+317
procedure {:timeLimit 40} $2_sui_system_request_add_stake$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $2_coin_Coin'$2_sui_SUI', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $Mutation ($2_validator_set_ValidatorSet);
    var $t4: $2_balance_Balance'$2_sui_SUI';
    var $t5: int;
    var $t6: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $2_coin_Coin'$2_sui_SUI';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:142:5+1
    assume {:print "$at(53,5162,5163)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:142:5+1
    assume $IsValid'$2_coin_Coin'$2_sui_SUI''($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:142:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:142:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,6,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[new_stake]($t1) at ./sources/governance/sui_system.move:142:5+1
    assume {:print "$track_local(30,6,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/sui_system.move:142:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(30,6,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:148:13+20
    assume {:print "$at(53,5354,5374)"} true;
    $t3 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t4 := coin::into_balance<sui::SUI>($t1) on_abort goto L2 with $t5 at ./sources/governance/sui_system.move:149:13+29
    assume {:print "$at(53,5388,5417)"} true;
    call $t4 := $2_coin_into_balance'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(53,5388,5417)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t6 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/sui_system.move:150:13+14
    assume {:print "$at(53,5431,5445)"} true;

    // assume And(WellFormed($t6), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t6)), 1)) at ./sources/governance/sui_system.move:150:13+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t6) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t6)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t6, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/sui_system.move:150:13+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t6, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t6 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/sui_system.move:150:13+14

    // validator_set::request_add_stake($t3, $t4, $t6, $t2) on_abort goto L2 with $t5 at ./sources/governance/sui_system.move:147:9+165
    assume {:print "$at(53,5308,5473)"} true;
    call $t3,$t2 := $2_validator_set_request_add_stake($t3, $t4, $t6, $t2);
    if ($abort_flag) {
        assume {:print "$at(53,5308,5473)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,6):", $t5} $t5 == $t5;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t3) at ./sources/governance/sui_system.move:147:9+165
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t3)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:147:9+165
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,6,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:147:9+165
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,6,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t2) at ./sources/governance/sui_system.move:147:9+165
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(30,6,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:153:5+1
    assume {:print "$at(53,5478,5479)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:153:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/governance/sui_system.move:153:5+1
L2:

    // abort($t5) at ./sources/governance/sui_system.move:153:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun sui_system::request_remove_delegation [verification] at ./sources/governance/sui_system.move:218:5+413
procedure {:timeLimit 40} $2_sui_system_request_remove_delegation$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $Mutation ($2_delegation_Delegation), _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_delegation_Delegation), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $Mutation ($2_validator_set_ValidatorSet);
    var $t4: $2_delegation_Delegation;
    var $t5: int;
    var $t6: int;
    var $t7: $2_delegation_Delegation;
    var $t8: int;
    var $t9: int;
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $Mutation ($2_delegation_Delegation);
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:218:5+1
    assume {:print "$at(53,7935,7936)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume And(WellFormed($t1), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t1))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t1))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t1))), 1))) at ./sources/governance/sui_system.move:218:5+1
    assume ($IsValid'$2_delegation_Delegation'($Dereference($t1)) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($Dereference($t1)))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($Dereference($t1)))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t1)))) <= 1)));

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:218:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:218:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,9,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegation]($t1) at ./sources/governance/sui_system.move:218:5+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t1);
    assume {:print "$track_local(30,9,1):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/sui_system.move:218:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(30,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:224:13+20
    assume {:print "$at(53,8150,8170)"} true;
    $t3 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t4 := read_ref($t1) at ./sources/governance/sui_system.move:225:35+10
    assume {:print "$at(53,8206,8216)"} true;
    $t4 := $Dereference($t1);

    // $t5 := delegation::validator($t4) on_abort goto L2 with $t6 at ./sources/governance/sui_system.move:225:13+33
    call $t5 := $2_delegation_validator($t4);
    if ($abort_flag) {
        assume {:print "$at(53,8184,8217)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,9):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := read_ref($t1) at ./sources/governance/sui_system.move:226:41+10
    assume {:print "$at(53,8259,8269)"} true;
    $t7 := $Dereference($t1);

    // $t8 := delegation::delegate_amount($t7) on_abort goto L2 with $t6 at ./sources/governance/sui_system.move:226:13+39
    call $t8 := $2_delegation_delegate_amount($t7);
    if ($abort_flag) {
        assume {:print "$at(53,8231,8270)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,9):", $t6} $t6 == $t6;
        goto L2;
    }

    // validator_set::request_remove_delegation($t3, $t5, $t8) on_abort goto L2 with $t6 at ./sources/governance/sui_system.move:223:9+185
    assume {:print "$at(53,8096,8281)"} true;
    call $t3 := $2_validator_set_request_remove_delegation($t3, $t5, $t8);
    if ($abort_flag) {
        assume {:print "$at(53,8096,8281)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,9):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t3) at ./sources/governance/sui_system.move:223:9+185
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t3)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:223:9+185
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,9,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // $t9 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:228:44+10
    assume {:print "$at(53,8326,8336)"} true;
    $t9 := $epoch#$2_sui_system_SuiSystemState($Dereference($t0));

    // delegation::undelegate($t1, $t9, $t2) on_abort goto L2 with $t6 at ./sources/governance/sui_system.move:228:9+51
    call $t1,$t2 := $2_delegation_undelegate($t1, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(53,8291,8342)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,9):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:228:9+51
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,9,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegation]($t1) at ./sources/governance/sui_system.move:228:9+51
    $temp_0'$2_delegation_Delegation' := $Dereference($t1);
    assume {:print "$track_local(30,9,1):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t2) at ./sources/governance/sui_system.move:228:9+51
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(30,9,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:229:5+1
    assume {:print "$at(53,8347,8348)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:229:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t2;
    return;

    // label L2 at ./sources/governance/sui_system.move:229:5+1
L2:

    // abort($t6) at ./sources/governance/sui_system.move:229:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun sui_system::request_withdraw_stake [verification] at ./sources/governance/sui_system.move:175:5+380
procedure {:timeLimit 40} $2_sui_system_request_withdraw_stake$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $Mutation ($2_stake_Stake), _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_stake_Stake), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $Mutation ($2_validator_set_ValidatorSet);
    var $t5: $2_sui_system_SystemParameters;
    var $t6: int;
    var $t7: int;
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $Mutation ($2_stake_Stake);
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_stake_Stake': $2_stake_Stake;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:175:5+1
    assume {:print "$at(53,6458,6459)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume And(WellFormed($t1), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select stake::Stake.locked_until_epoch($t1))), 1)) at ./sources/governance/sui_system.move:175:5+1
    assume ($IsValid'$2_stake_Stake'($Dereference($t1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($locked_until_epoch#$2_stake_Stake($Dereference($t1)))) <= 1));

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:175:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:175:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:175:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,12,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[stake]($t1) at ./sources/governance/sui_system.move:175:5+1
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(30,12,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[withdraw_amount]($t2) at ./sources/governance/sui_system.move:175:5+1
    assume {:print "$track_local(30,12,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:175:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,12,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:182:13+20
    assume {:print "$at(53,6687,6707)"} true;
    $t4 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t5 := get_field<sui_system::SuiSystemState>.parameters($t0) at ./sources/governance/sui_system.move:185:13+15
    assume {:print "$at(53,6769,6784)"} true;
    $t5 := $parameters#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t6 := get_field<sui_system::SystemParameters>.min_validator_stake($t5) at ./sources/governance/sui_system.move:185:13+35
    $t6 := $min_validator_stake#$2_sui_system_SystemParameters($t5);

    // validator_set::request_withdraw_stake($t4, $t1, $t2, $t6, $t3) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:181:9+196
    assume {:print "$at(53,6636,6832)"} true;
    call $t4,$t1,$t3 := $2_validator_set_request_withdraw_stake($t4, $t1, $t2, $t6, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,6636,6832)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,12):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t4) at ./sources/governance/sui_system.move:181:9+196
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t4)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:181:9+196
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,12,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:181:9+196
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,12,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[stake]($t1) at ./sources/governance/sui_system.move:181:9+196
    $temp_0'$2_stake_Stake' := $Dereference($t1);
    assume {:print "$track_local(30,12,1):", $temp_0'$2_stake_Stake'} $temp_0'$2_stake_Stake' == $temp_0'$2_stake_Stake';

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:181:9+196
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,12,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:188:5+1
    assume {:print "$at(53,6837,6838)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:188:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t3;
    return;

    // label L2 at ./sources/governance/sui_system.move:188:5+1
L2:

    // abort($t7) at ./sources/governance/sui_system.move:188:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun sui_system::advance_epoch [verification] at ./sources/governance/sui_system.move:271:5+1891
procedure {:timeLimit 40} $2_sui_system_advance_epoch$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: int, _$t2: int, _$t3: int, _$t4: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: int;
    var $t7: $2_balance_Balance'$2_sui_SUI';
    var $t8: int;
    var $t9: int;
    var $t10: $2_balance_Balance'$2_sui_SUI';
    var $t11: int;
    var $t12: int;
    var $t13: $2_tx_context_TxContext;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: $Mutation ($2_balance_Supply'$2_sui_SUI');
    var $t20: $2_balance_Balance'$2_sui_SUI';
    var $t21: $Mutation ($2_balance_Supply'$2_sui_SUI');
    var $t22: $2_validator_set_ValidatorSet;
    var $t23: int;
    var $t24: $2_validator_set_ValidatorSet;
    var $t25: int;
    var $t26: $2_balance_Balance'$2_sui_SUI';
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t33: $2_balance_Balance'$2_sui_SUI';
    var $t34: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t35: int;
    var $t36: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t37: int;
    var $t38: $2_validator_set_ValidatorSet;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: $Mutation (int);
    var $t44: int;
    var $t45: bool;
    var $t46: int;
    var $t47: $Mutation ($2_validator_set_ValidatorSet);
    var $t48: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t49: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t50: $2_balance_Balance'$2_sui_SUI';
    var $t51: int;
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    assume IsEmptyVec(p#$Mutation($t19));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t32));
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t36));
    assume IsEmptyVec(p#$Mutation($t43));
    assume IsEmptyVec(p#$Mutation($t47));
    assume IsEmptyVec(p#$Mutation($t48));
    assume IsEmptyVec(p#$Mutation($t49));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t4) == $Param(4);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:271:5+1
    assume {:print "$at(53,10399,10400)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:271:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:271:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:271:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at ./sources/governance/sui_system.move:271:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t4));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:271:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[new_epoch]($t1) at ./sources/governance/sui_system.move:271:5+1
    assume {:print "$track_local(30,0,1):", $t1} $t1 == $t1;

    // trace_local[storage_charge]($t2) at ./sources/governance/sui_system.move:271:5+1
    assume {:print "$track_local(30,0,2):", $t2} $t2 == $t2;

    // trace_local[computation_charge]($t3) at ./sources/governance/sui_system.move:271:5+1
    assume {:print "$track_local(30,0,3):", $t3} $t3 == $t3;

    // trace_local[ctx]($t4) at ./sources/governance/sui_system.move:271:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(30,0,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t13 := read_ref($t4) at ./sources/governance/sui_system.move:279:36+3
    assume {:print "$at(53,10701,10704)"} true;
    $t13 := $Dereference($t4);

    // $t14 := tx_context::sender($t13) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:279:17+23
    call $t14 := $2_tx_context_sender($t13);
    if ($abort_flag) {
        assume {:print "$at(53,10682,10705)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // $t16 := 0x0 at ./sources/governance/sui_system.move:279:44+4
    $t16 := 0;
    assume $IsValid'address'($t16);

    // $t17 := ==($t14, $t16) at ./sources/governance/sui_system.move:279:41+2
    $t17 := $IsEqual'address'($t14, $t16);

    // if ($t17) goto L0 else goto L1 at ./sources/governance/sui_system.move:279:9+43
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/sui_system.move:279:9+43
L1:

    // destroy($t0) at ./sources/governance/sui_system.move:279:9+43

    // destroy($t4) at ./sources/governance/sui_system.move:279:9+43

    // $t18 := 0 at ./sources/governance/sui_system.move:279:50+1
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at ./sources/governance/sui_system.move:279:9+43
    assume {:print "$at(53,10674,10717)"} true;
    assume {:print "$track_abort(30,0):", $t18} $t18 == $t18;

    // $t15 := move($t18) at ./sources/governance/sui_system.move:279:9+43
    $t15 := $t18;

    // goto L5 at ./sources/governance/sui_system.move:279:9+43
    goto L5;

    // label L0 at ./sources/governance/sui_system.move:281:60+4
    assume {:print "$at(53,10779,10783)"} true;
L0:

    // $t19 := borrow_field<sui_system::SuiSystemState>.sui_supply($t0) at ./sources/governance/sui_system.move:281:55+20
    $t19 := $ChildMutation($t0, 3, $sui_supply#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t20 := balance::increase_supply<sui::SUI>($t19, $t2) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:281:30+62
    call $t20,$t19 := $2_balance_increase_supply'$2_sui_SUI'($t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(53,10749,10811)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[Reference($t0).sui_supply (balance::Supply<sui::SUI>)]($t19) at ./sources/governance/sui_system.move:281:30+62
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_sui_supply($Dereference($t0), $Dereference($t19)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:281:30+62
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[storage_reward]($t20) at ./sources/governance/sui_system.move:281:13+14
    assume {:print "$track_local(30,0,10):", $t20} $t20 == $t20;

    // $t21 := borrow_field<sui_system::SuiSystemState>.sui_supply($t0) at ./sources/governance/sui_system.move:282:59+20
    assume {:print "$at(53,10871,10891)"} true;
    $t21 := $ChildMutation($t0, 3, $sui_supply#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t5 := balance::increase_supply<sui::SUI>($t21, $t3) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:282:34+66
    call $t5,$t21 := $2_balance_increase_supply'$2_sui_SUI'($t21, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,10846,10912)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[Reference($t0).sui_supply (balance::Supply<sui::SUI>)]($t21) at ./sources/governance/sui_system.move:282:34+66
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_sui_supply($Dereference($t0), $Dereference($t21)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:282:34+66
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[computation_reward]($t5) at ./sources/governance/sui_system.move:282:13+18
    assume {:print "$track_local(30,0,5):", $t5} $t5 == $t5;

    // $t22 := get_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:284:70+16
    assume {:print "$at(53,10984,11000)"} true;
    $t22 := $validators#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t23 := validator_set::total_delegation_stake($t22) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:284:32+55
    call $t23 := $2_validator_set_total_delegation_stake($t22);
    if ($abort_flag) {
        assume {:print "$at(53,10946,11001)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // trace_local[delegation_stake]($t23) at ./sources/governance/sui_system.move:284:13+16
    assume {:print "$track_local(30,0,6):", $t23} $t23 == $t23;

    // $t24 := get_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:285:68+16
    assume {:print "$at(53,11070,11086)"} true;
    $t24 := $validators#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t25 := validator_set::total_validator_stake($t24) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:285:31+54
    call $t25 := $2_validator_set_total_validator_stake($t24);
    if ($abort_flag) {
        assume {:print "$at(53,11033,11087)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // trace_local[validator_stake]($t25) at ./sources/governance/sui_system.move:285:13+15
    assume {:print "$track_local(30,0,12):", $t25} $t25 == $t25;

    // $t26 := get_field<sui_system::SuiSystemState>.storage_fund($t0) at ./sources/governance/sui_system.move:286:43+18
    assume {:print "$at(53,11131,11149)"} true;
    $t26 := $storage_fund#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t27 := balance::value<sui::SUI>($t26) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:286:28+34
    call $t27 := $2_balance_value'$2_sui_SUI'($t26);
    if ($abort_flag) {
        assume {:print "$at(53,11116,11150)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // trace_local[storage_fund]($t27) at ./sources/governance/sui_system.move:286:13+12
    assume {:print "$track_local(30,0,9):", $t27} $t27 == $t27;

    // $t28 := +($t23, $t25) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:287:44+1
    assume {:print "$at(53,11195,11196)"} true;
    call $t28 := $AddU64($t23, $t25);
    if ($abort_flag) {
        assume {:print "$at(53,11195,11196)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // $t29 := +($t28, $t27) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:287:62+1
    call $t29 := $AddU64($t28, $t27);
    if ($abort_flag) {
        assume {:print "$at(53,11213,11214)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // trace_local[total_stake]($t29) at ./sources/governance/sui_system.move:287:13+11
    assume {:print "$track_local(30,0,11):", $t29} $t29 == $t29;

    // $t30 := *($t23, $t3) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:289:56+1
    assume {:print "$at(53,11285,11286)"} true;
    call $t30 := $MulU64($t23, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,11285,11286)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // $t31 := /($t30, $t29) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:289:77+1
    call $t31 := $Div($t30, $t29);
    if ($abort_flag) {
        assume {:print "$at(53,11306,11307)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // trace_local[delegator_reward_amount]($t31) at ./sources/governance/sui_system.move:289:13+23
    assume {:print "$track_local(30,0,8):", $t31} $t31 == $t31;

    // $t32 := borrow_local($t5) at ./sources/governance/sui_system.move:290:47+23
    assume {:print "$at(53,11367,11390)"} true;
    $t32 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t33 := balance::split<sui::SUI>($t32, $t31) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:290:32+64
    call $t33,$t32 := $2_balance_split'$2_sui_SUI'($t32, $t31);
    if ($abort_flag) {
        assume {:print "$at(53,11352,11416)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[LocalRoot($t5)@]($t32) at ./sources/governance/sui_system.move:290:32+64
    $t5 := $Dereference($t32);

    // trace_local[computation_reward]($t5) at ./sources/governance/sui_system.move:290:32+64
    assume {:print "$track_local(30,0,5):", $t5} $t5 == $t5;

    // trace_local[delegator_reward]($t33) at ./sources/governance/sui_system.move:290:13+16
    assume {:print "$track_local(30,0,7):", $t33} $t33 == $t33;

    // $t34 := borrow_field<sui_system::SuiSystemState>.storage_fund($t0) at ./sources/governance/sui_system.move:291:23+22
    assume {:print "$at(53,11440,11462)"} true;
    $t34 := $ChildMutation($t0, 4, $storage_fund#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t35 := balance::join<sui::SUI>($t34, $t20) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:291:9+53
    call $t35,$t34 := $2_balance_join'$2_sui_SUI'($t34, $t20);
    if ($abort_flag) {
        assume {:print "$at(53,11426,11479)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[Reference($t0).storage_fund (balance::Balance<sui::SUI>)]($t34) at ./sources/governance/sui_system.move:291:9+53
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_storage_fund($Dereference($t0), $Dereference($t34)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:291:9+53
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // destroy($t35) at ./sources/governance/sui_system.move:291:9+53

    // $t36 := borrow_field<sui_system::SuiSystemState>.delegation_reward($t0) at ./sources/governance/sui_system.move:292:23+27
    assume {:print "$at(53,11503,11530)"} true;
    $t36 := $ChildMutation($t0, 6, $delegation_reward#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t37 := balance::join<sui::SUI>($t36, $t33) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:292:9+60
    call $t37,$t36 := $2_balance_join'$2_sui_SUI'($t36, $t33);
    if ($abort_flag) {
        assume {:print "$at(53,11489,11549)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[Reference($t0).delegation_reward (balance::Balance<sui::SUI>)]($t36) at ./sources/governance/sui_system.move:292:9+60
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_delegation_reward($Dereference($t0), $Dereference($t36)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:292:9+60
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // destroy($t37) at ./sources/governance/sui_system.move:292:9+60

    // $t38 := get_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:295:13+16
    assume {:print "$at(53,11609,11625)"} true;
    $t38 := $validators#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t39 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:296:13+10
    assume {:print "$at(53,11639,11649)"} true;
    $t39 := $epoch#$2_sui_system_SuiSystemState($Dereference($t0));

    // validator_set::create_epoch_records($t38, $t39, $t3, $t29, $t4) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:294:9+174
    assume {:print "$at(53,11560,11734)"} true;
    call $t4 := $2_validator_set_create_epoch_records($t38, $t39, $t3, $t29, $t4);
    if ($abort_flag) {
        assume {:print "$at(53,11560,11734)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // $t40 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:302:22+10
    assume {:print "$at(53,11758,11768)"} true;
    $t40 := $epoch#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t41 := 1 at ./sources/governance/sui_system.move:302:35+1
    $t41 := 1;
    assume $IsValid'u64'($t41);

    // $t42 := +($t40, $t41) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:302:33+1
    call $t42 := $AddU64($t40, $t41);
    if ($abort_flag) {
        assume {:print "$at(53,11769,11770)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // $t43 := borrow_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:302:9+10
    $t43 := $ChildMutation($t0, 1, $epoch#$2_sui_system_SuiSystemState($Dereference($t0)));

    // write_ref($t43, $t42) at ./sources/governance/sui_system.move:302:9+27
    $t43 := $UpdateMutation($t43, $t42);

    // write_back[Reference($t0).epoch (u64)]($t43) at ./sources/governance/sui_system.move:302:9+27
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_epoch($Dereference($t0), $Dereference($t43)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:302:9+27
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // $t44 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:304:30+10
    assume {:print "$at(53,11877,11887)"} true;
    $t44 := $epoch#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t45 := ==($t1, $t44) at ./sources/governance/sui_system.move:304:27+2
    $t45 := $IsEqual'u64'($t1, $t44);

    // if ($t45) goto L2 else goto L3 at ./sources/governance/sui_system.move:304:9+35
    if ($t45) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/sui_system.move:304:9+35
L3:

    // destroy($t0) at ./sources/governance/sui_system.move:304:9+35

    // destroy($t4) at ./sources/governance/sui_system.move:304:9+35

    // $t46 := 0 at ./sources/governance/sui_system.move:304:42+1
    $t46 := 0;
    assume $IsValid'u64'($t46);

    // trace_abort($t46) at ./sources/governance/sui_system.move:304:9+35
    assume {:print "$at(53,11856,11891)"} true;
    assume {:print "$track_abort(30,0):", $t46} $t46 == $t46;

    // $t15 := move($t46) at ./sources/governance/sui_system.move:304:9+35
    $t15 := $t46;

    // goto L5 at ./sources/governance/sui_system.move:304:9+35
    goto L5;

    // label L2 at ./sources/governance/sui_system.move:306:18+4
    assume {:print "$at(53,11948,11952)"} true;
L2:

    // $t47 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:306:13+20
    $t47 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t48 := borrow_local($t5) at ./sources/governance/sui_system.move:307:13+23
    assume {:print "$at(53,11977,12000)"} true;
    $t48 := $Mutation($Local(5), EmptyVec(), $t5);

    // validator_set::advance_epoch($t47, $t48, $t4) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:305:9+127
    assume {:print "$at(53,11901,12028)"} true;
    call $t47,$t48,$t4 := $2_validator_set_advance_epoch($t47, $t48, $t4);
    if ($abort_flag) {
        assume {:print "$at(53,11901,12028)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t47) at ./sources/governance/sui_system.move:305:9+127
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t47)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:305:9+127
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // write_back[LocalRoot($t5)@]($t48) at ./sources/governance/sui_system.move:305:9+127
    $t5 := $Dereference($t48);

    // trace_local[computation_reward]($t5) at ./sources/governance/sui_system.move:305:9+127
    assume {:print "$track_local(30,0,5):", $t5} $t5 == $t5;

    // $t49 := borrow_field<sui_system::SuiSystemState>.storage_fund($t0) at ./sources/governance/sui_system.move:312:23+22
    assume {:print "$at(53,12240,12262)"} true;
    $t49 := $ChildMutation($t0, 4, $storage_fund#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t50 := move($t5) at ./sources/governance/sui_system.move:312:47+18
    $t50 := $t5;

    // $t51 := balance::join<sui::SUI>($t49, $t50) on_abort goto L5 with $t15 at ./sources/governance/sui_system.move:312:9+57
    call $t51,$t49 := $2_balance_join'$2_sui_SUI'($t49, $t50);
    if ($abort_flag) {
        assume {:print "$at(53,12226,12283)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(30,0):", $t15} $t15 == $t15;
        goto L5;
    }

    // write_back[Reference($t0).storage_fund (balance::Balance<sui::SUI>)]($t49) at ./sources/governance/sui_system.move:312:9+57
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_storage_fund($Dereference($t0), $Dereference($t49)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:312:9+57
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // destroy($t51) at ./sources/governance/sui_system.move:312:9+57

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:312:66+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,0,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t4) at ./sources/governance/sui_system.move:312:66+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t4);
    assume {:print "$track_local(30,0,4):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L4 at ./sources/governance/sui_system.move:313:5+1
    assume {:print "$at(53,12289,12290)"} true;
L4:

    // return () at ./sources/governance/sui_system.move:313:5+1
    $ret0 := $t0;
    $ret1 := $t4;
    return;

    // label L5 at ./sources/governance/sui_system.move:313:5+1
L5:

    // abort($t15) at ./sources/governance/sui_system.move:313:5+1
    $abort_code := $t15;
    $abort_flag := true;
    return;

}

// fun sui_system::request_add_validator [verification] at ./sources/governance/sui_system.move:94:5+948
procedure {:timeLimit 40} $2_sui_system_request_add_validator$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: Vec (int), _$t2: Vec (int), _$t3: Vec (int), _$t4: Vec (int), _$t5: $2_coin_Coin'$2_sui_SUI', _$t6: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t7: int;
    var $t8: $2_validator_Validator;
    var $t9: $2_validator_set_ValidatorSet;
    var $t10: int;
    var $t11: int;
    var $t12: $2_sui_system_SystemParameters;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $2_sui_system_SystemParameters;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: $2_tx_context_TxContext;
    var $t22: int;
    var $t23: $2_balance_Balance'$2_sui_SUI';
    var $t24: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t25: $2_validator_Validator;
    var $t26: $Mutation ($2_validator_set_ValidatorSet);
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: $2_coin_Coin'$2_sui_SUI';
    var $t6: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_coin_Coin'$2_sui_SUI'': $2_coin_Coin'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'$2_validator_Validator': $2_validator_Validator;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    assume IsEmptyVec(p#$Mutation($t26));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t6) == $Param(6);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:94:5+1
    assume {:print "$at(53,3549,3550)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:94:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:94:5+1
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:94:5+1
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at ./sources/governance/sui_system.move:94:5+1
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at ./sources/governance/sui_system.move:94:5+1
    assume $IsValid'$2_coin_Coin'$2_sui_SUI''($t5);

    // assume WellFormed($t6) at ./sources/governance/sui_system.move:94:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t6));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:94:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,8,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[pubkey_bytes]($t1) at ./sources/governance/sui_system.move:94:5+1
    assume {:print "$track_local(30,8,1):", $t1} $t1 == $t1;

    // trace_local[proof_of_possession]($t2) at ./sources/governance/sui_system.move:94:5+1
    assume {:print "$track_local(30,8,2):", $t2} $t2 == $t2;

    // trace_local[name]($t3) at ./sources/governance/sui_system.move:94:5+1
    assume {:print "$track_local(30,8,3):", $t3} $t3 == $t3;

    // trace_local[net_address]($t4) at ./sources/governance/sui_system.move:94:5+1
    assume {:print "$track_local(30,8,4):", $t4} $t4 == $t4;

    // trace_local[stake]($t5) at ./sources/governance/sui_system.move:94:5+1
    assume {:print "$track_local(30,8,5):", $t5} $t5 == $t5;

    // trace_local[ctx]($t6) at ./sources/governance/sui_system.move:94:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(30,8,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t9 := get_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:104:55+16
    assume {:print "$at(53,3892,3908)"} true;
    $t9 := $validators#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t10 := validator_set::next_epoch_validator_count($t9) on_abort goto L5 with $t11 at ./sources/governance/sui_system.move:104:13+59
    call $t10 := $2_validator_set_next_epoch_validator_count($t9);
    if ($abort_flag) {
        assume {:print "$at(53,3850,3909)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,8):", $t11} $t11 == $t11;
        goto L5;
    }

    // $t12 := get_field<sui_system::SuiSystemState>.parameters($t0) at ./sources/governance/sui_system.move:104:75+15
    $t12 := $parameters#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t13 := get_field<sui_system::SystemParameters>.max_validator_candidate_count($t12) at ./sources/governance/sui_system.move:104:75+45
    $t13 := $max_validator_candidate_count#$2_sui_system_SystemParameters($t12);

    // $t14 := <($t10, $t13) at ./sources/governance/sui_system.move:104:73+1
    call $t14 := $Lt($t10, $t13);

    // if ($t14) goto L0 else goto L1 at ./sources/governance/sui_system.move:103:9+153
    assume {:print "$at(53,3829,3982)"} true;
    if ($t14) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/sui_system.move:103:9+153
L1:

    // destroy($t0) at ./sources/governance/sui_system.move:103:9+153

    // destroy($t6) at ./sources/governance/sui_system.move:103:9+153

    // $t15 := 0 at ./sources/governance/sui_system.move:105:13+1
    assume {:print "$at(53,3971,3972)"} true;
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at ./sources/governance/sui_system.move:103:9+153
    assume {:print "$at(53,3829,3982)"} true;
    assume {:print "$track_abort(30,8):", $t15} $t15 == $t15;

    // $t11 := move($t15) at ./sources/governance/sui_system.move:103:9+153
    $t11 := $t15;

    // goto L5 at ./sources/governance/sui_system.move:103:9+153
    goto L5;

    // label L0 at ./sources/governance/sui_system.move:107:40+6
    assume {:print "$at(53,4023,4029)"} true;
L0:

    // $t16 := coin::value<sui::SUI>($t5) on_abort goto L5 with $t11 at ./sources/governance/sui_system.move:107:28+19
    call $t16 := $2_coin_value'$2_sui_SUI'($t5);
    if ($abort_flag) {
        assume {:print "$at(53,4011,4030)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,8):", $t11} $t11 == $t11;
        goto L5;
    }

    // trace_local[stake_amount]($t16) at ./sources/governance/sui_system.move:107:13+12
    assume {:print "$track_local(30,8,7):", $t16} $t16 == $t16;

    // $t17 := get_field<sui_system::SuiSystemState>.parameters($t0) at ./sources/governance/sui_system.move:109:29+15
    assume {:print "$at(53,4077,4092)"} true;
    $t17 := $parameters#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t18 := get_field<sui_system::SystemParameters>.min_validator_stake($t17) at ./sources/governance/sui_system.move:109:29+35
    $t18 := $min_validator_stake#$2_sui_system_SystemParameters($t17);

    // $t19 := >=($t16, $t18) at ./sources/governance/sui_system.move:109:26+2
    call $t19 := $Ge($t16, $t18);

    // if ($t19) goto L2 else goto L3 at ./sources/governance/sui_system.move:108:9+97
    assume {:print "$at(53,4040,4137)"} true;
    if ($t19) { goto L2; } else { goto L3; }

    // label L3 at ./sources/governance/sui_system.move:108:9+97
L3:

    // destroy($t0) at ./sources/governance/sui_system.move:108:9+97

    // destroy($t6) at ./sources/governance/sui_system.move:108:9+97

    // $t20 := 0 at ./sources/governance/sui_system.move:110:13+1
    assume {:print "$at(53,4126,4127)"} true;
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // trace_abort($t20) at ./sources/governance/sui_system.move:108:9+97
    assume {:print "$at(53,4040,4137)"} true;
    assume {:print "$track_abort(30,8):", $t20} $t20 == $t20;

    // $t11 := move($t20) at ./sources/governance/sui_system.move:108:9+97
    $t11 := $t20;

    // goto L5 at ./sources/governance/sui_system.move:108:9+97
    goto L5;

    // label L2 at ./sources/governance/sui_system.move:113:32+3
    assume {:print "$at(53,4210,4213)"} true;
L2:

    // $t21 := read_ref($t6) at ./sources/governance/sui_system.move:113:32+3
    $t21 := $Dereference($t6);

    // $t22 := tx_context::sender($t21) on_abort goto L5 with $t11 at ./sources/governance/sui_system.move:113:13+23
    call $t22 := $2_tx_context_sender($t21);
    if ($abort_flag) {
        assume {:print "$at(53,4191,4214)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,8):", $t11} $t11 == $t11;
        goto L5;
    }

    // $t23 := coin::into_balance<sui::SUI>($t5) on_abort goto L5 with $t11 at ./sources/governance/sui_system.move:118:13+25
    assume {:print "$at(53,4330,4355)"} true;
    call $t23 := $2_coin_into_balance'$2_sui_SUI'($t5);
    if ($abort_flag) {
        assume {:print "$at(53,4330,4355)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,8):", $t11} $t11 == $t11;
        goto L5;
    }

    // $t24 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/sui_system.move:119:13+14
    assume {:print "$at(53,4369,4383)"} true;

    // assume And(WellFormed($t24), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t24)), 1)) at ./sources/governance/sui_system.move:119:13+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t24) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t24)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t24, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/sui_system.move:119:13+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t24, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t24 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/sui_system.move:119:13+14

    // $t25 := validator::new($t22, $t1, $t2, $t3, $t4, $t23, $t24, $t6) on_abort goto L5 with $t11 at ./sources/governance/sui_system.move:112:25+247
    assume {:print "$at(53,4163,4410)"} true;
    call $t25,$t6 := $2_validator_new($t22, $t1, $t2, $t3, $t4, $t23, $t24, $t6);
    if ($abort_flag) {
        assume {:print "$at(53,4163,4410)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,8):", $t11} $t11 == $t11;
        goto L5;
    }

    // trace_local[validator]($t25) at ./sources/governance/sui_system.move:112:13+9
    assume {:print "$track_local(30,8,8):", $t25} $t25 == $t25;

    // $t26 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:123:46+20
    assume {:print "$at(53,4458,4478)"} true;
    $t26 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // validator_set::request_add_validator($t26, $t25) on_abort goto L5 with $t11 at ./sources/governance/sui_system.move:123:9+69
    call $t26 := $2_validator_set_request_add_validator($t26, $t25);
    if ($abort_flag) {
        assume {:print "$at(53,4421,4490)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,8):", $t11} $t11 == $t11;
        goto L5;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t26) at ./sources/governance/sui_system.move:123:9+69
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t26)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:123:9+69
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,8,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:123:78+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,8,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t6) at ./sources/governance/sui_system.move:123:78+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(30,8,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L4 at ./sources/governance/sui_system.move:124:5+1
    assume {:print "$at(53,4496,4497)"} true;
L4:

    // return () at ./sources/governance/sui_system.move:124:5+1
    $ret0 := $t0;
    $ret1 := $t6;
    return;

    // label L5 at ./sources/governance/sui_system.move:124:5+1
L5:

    // abort($t11) at ./sources/governance/sui_system.move:124:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun sui_system::request_remove_validator [verification] at ./sources/governance/sui_system.move:131:5+230
procedure {:timeLimit 40} $2_sui_system_request_remove_validator$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $Mutation ($2_validator_set_ValidatorSet);
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $t4: $Mutation ($2_validator_set_ValidatorSet);
    var $t5: $2_tx_context_TxContext;
    var $t6: int;
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t4));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:131:5+1
    assume {:print "$at(53,4831,4832)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:131:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:131:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,10,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t1) at ./sources/governance/sui_system.move:131:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(30,10,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t4 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:136:13+20
    assume {:print "$at(53,5007,5027)"} true;
    $t4 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t5 := read_ref($t1) at ./sources/governance/sui_system.move:135:48+62
    assume {:print "$at(53,4993,5055)"} true;
    $t5 := $Dereference($t1);

    // validator_set::request_remove_validator($t4, $t5) on_abort goto L2 with $t6 at ./sources/governance/sui_system.move:135:9+101
    call $t4 := $2_validator_set_request_remove_validator($t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(53,4954,5055)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,10):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t4) at ./sources/governance/sui_system.move:135:9+101
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t4)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:135:9+101
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,10,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:135:9+101
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,10,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t1) at ./sources/governance/sui_system.move:135:9+101
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(30,10,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:139:5+1
    assume {:print "$at(53,5060,5061)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:139:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L2 at ./sources/governance/sui_system.move:139:5+1
L2:

    // abort($t6) at ./sources/governance/sui_system.move:139:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun sui_system::validator_delegate_amount [verification] at ./sources/governance/sui_system.move:323:5+180
procedure {:timeLimit 40} $2_sui_system_validator_delegate_amount$verify(_$t0: $2_sui_system_SuiSystemState, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_set_ValidatorSet;
    var $t3: int;
    var $t4: int;
    var $t0: $2_sui_system_SuiSystemState;
    var $t1: int;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:323:5+1
    assume {:print "$at(53,12710,12711)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($t0);

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:323:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:323:5+1
    assume {:print "$track_local(30,13,0):", $t0} $t0 == $t0;

    // trace_local[validator_addr]($t1) at ./sources/governance/sui_system.move:323:5+1
    assume {:print "$track_local(30,13,1):", $t1} $t1 == $t1;

    // $t2 := get_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:324:50+16
    assume {:print "$at(53,12851,12867)"} true;
    $t2 := $validators#$2_sui_system_SuiSystemState($t0);

    // $t3 := validator_set::validator_delegate_amount($t2, $t1) on_abort goto L2 with $t4 at ./sources/governance/sui_system.move:324:9+74
    call $t3 := $2_validator_set_validator_delegate_amount($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(53,12810,12884)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(30,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/governance/sui_system.move:324:9+74
    assume {:print "$track_return(30,13,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/governance/sui_system.move:325:5+1
    assume {:print "$at(53,12889,12890)"} true;
L1:

    // return $t3 at ./sources/governance/sui_system.move:325:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/sui_system.move:325:5+1
L2:

    // abort($t4) at ./sources/governance/sui_system.move:325:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun sui_system::validator_delegator_count [verification] at ./sources/governance/sui_system.move:329:5+180
procedure {:timeLimit 40} $2_sui_system_validator_delegator_count$verify(_$t0: $2_sui_system_SuiSystemState, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: $2_validator_set_ValidatorSet;
    var $t3: int;
    var $t4: int;
    var $t0: $2_sui_system_SuiSystemState;
    var $t1: int;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:329:5+1
    assume {:print "$at(53,13040,13041)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($t0);

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:329:5+1
    assume $IsValid'address'($t1);

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:329:5+1
    assume {:print "$track_local(30,14,0):", $t0} $t0 == $t0;

    // trace_local[validator_addr]($t1) at ./sources/governance/sui_system.move:329:5+1
    assume {:print "$track_local(30,14,1):", $t1} $t1 == $t1;

    // $t2 := get_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:330:50+16
    assume {:print "$at(53,13181,13197)"} true;
    $t2 := $validators#$2_sui_system_SuiSystemState($t0);

    // $t3 := validator_set::validator_delegator_count($t2, $t1) on_abort goto L2 with $t4 at ./sources/governance/sui_system.move:330:9+74
    call $t3 := $2_validator_set_validator_delegator_count($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(53,13140,13214)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(30,14):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at ./sources/governance/sui_system.move:330:9+74
    assume {:print "$track_return(30,14,0):", $t3} $t3 == $t3;

    // label L1 at ./sources/governance/sui_system.move:331:5+1
    assume {:print "$at(53,13219,13220)"} true;
L1:

    // return $t3 at ./sources/governance/sui_system.move:331:5+1
    $ret0 := $t3;
    return;

    // label L2 at ./sources/governance/sui_system.move:331:5+1
L2:

    // abort($t4) at ./sources/governance/sui_system.move:331:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun sui_system::claim_delegation_reward [verification] at ./sources/governance/sui_system.move:248:5+735
procedure {:timeLimit 40} $2_sui_system_claim_delegation_reward$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $Mutation ($2_delegation_Delegation), _$t2: $Mutation ($2_epoch_reward_record_EpochRewardRecord), _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_delegation_Delegation), $ret2: $Mutation ($2_epoch_reward_record_EpochRewardRecord), $ret3: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: $Mutation ($2_delegation_Delegation);
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $2_balance_Balance'$2_sui_SUI';
    var $t9: int;
    var $t10: int;
    var $t11: $2_epoch_reward_record_EpochRewardRecord;
    var $t12: int;
    var $t13: int;
    var $t14: $2_epoch_reward_record_EpochRewardRecord;
    var $t15: int;
    var $t16: $2_delegation_Delegation;
    var $t17: bool;
    var $t18: int;
    var $t19: $2_delegation_Delegation;
    var $t20: int;
    var $t21: int;
    var $t22: $Mutation ($2_balance_Balance'$2_sui_SUI');
    var $t23: $2_balance_Balance'$2_sui_SUI';
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $Mutation ($2_delegation_Delegation);
    var $t2: $Mutation ($2_epoch_reward_record_EpochRewardRecord);
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_epoch_reward_record_EpochRewardRecord': $2_epoch_reward_record_EpochRewardRecord;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t22));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t2) == $Param(2);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:248:5+1
    assume {:print "$at(53,9268,9269)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume And(WellFormed($t1), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t1))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t1))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t1))), 1))) at ./sources/governance/sui_system.move:248:5+1
    assume ($IsValid'$2_delegation_Delegation'($Dereference($t1)) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($Dereference($t1)))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($Dereference($t1)))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t1)))) <= 1)));

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:248:5+1
    assume $IsValid'$2_epoch_reward_record_EpochRewardRecord'($Dereference($t2));

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:248:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:248:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,1,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegation]($t1) at ./sources/governance/sui_system.move:248:5+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t1);
    assume {:print "$track_local(30,1,1):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[epoch_reward_record]($t2) at ./sources/governance/sui_system.move:248:5+1
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t2);
    assume {:print "$track_local(30,1,2):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:248:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t11 := read_ref($t2) at ./sources/governance/sui_system.move:254:48+19
    assume {:print "$at(53,9519,9538)"} true;
    $t11 := $Dereference($t2);

    // $t12 := epoch_reward_record::epoch($t11) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:254:21+47
    call $t12 := $2_epoch_reward_record_epoch($t11);
    if ($abort_flag) {
        assume {:print "$at(53,9492,9539)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[epoch]($t12) at ./sources/governance/sui_system.move:254:13+5
    assume {:print "$track_local(30,1,7):", $t12} $t12 == $t12;

    // $t14 := read_ref($t2) at ./sources/governance/sui_system.move:255:56+19
    assume {:print "$at(53,9596,9615)"} true;
    $t14 := $Dereference($t2);

    // $t15 := epoch_reward_record::validator($t14) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:255:25+51
    call $t15 := $2_epoch_reward_record_validator($t14);
    if ($abort_flag) {
        assume {:print "$at(53,9565,9616)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[validator]($t15) at ./sources/governance/sui_system.move:255:13+9
    assume {:print "$track_local(30,1,10):", $t15} $t15 == $t15;

    // $t16 := read_ref($t1) at ./sources/governance/sui_system.move:256:45+30
    assume {:print "$at(53,9662,9692)"} true;
    $t16 := $Dereference($t1);

    // $t17 := delegation::can_claim_reward($t16, $t12, $t15) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:256:17+58
    call $t17 := $2_delegation_can_claim_reward($t16, $t12, $t15);
    if ($abort_flag) {
        assume {:print "$at(53,9634,9692)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // if ($t17) goto L0 else goto L1 at ./sources/governance/sui_system.move:256:9+70
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at ./sources/governance/sui_system.move:256:9+70
L1:

    // destroy($t0) at ./sources/governance/sui_system.move:256:9+70

    // destroy($t2) at ./sources/governance/sui_system.move:256:9+70

    // destroy($t1) at ./sources/governance/sui_system.move:256:9+70

    // destroy($t3) at ./sources/governance/sui_system.move:256:9+70

    // $t18 := 0 at ./sources/governance/sui_system.move:256:77+1
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at ./sources/governance/sui_system.move:256:9+70
    assume {:print "$at(53,9626,9696)"} true;
    assume {:print "$track_abort(30,1):", $t18} $t18 == $t18;

    // $t13 := move($t18) at ./sources/governance/sui_system.move:256:9+70
    $t13 := $t18;

    // goto L3 at ./sources/governance/sui_system.move:256:9+70
    goto L3;

    // label L0 at ./sources/governance/sui_system.move:258:13+19
    assume {:print "$at(53,9773,9792)"} true;
L0:

    // $t19 := read_ref($t1) at ./sources/governance/sui_system.move:259:41+10
    assume {:print "$at(53,9834,9844)"} true;
    $t19 := $Dereference($t1);

    // $t20 := delegation::delegate_amount($t19) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:259:13+39
    call $t20 := $2_delegation_delegate_amount($t19);
    if ($abort_flag) {
        assume {:print "$at(53,9806,9845)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // $t21 := epoch_reward_record::claim_reward($t2, $t20) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:257:29+130
    assume {:print "$at(53,9726,9856)"} true;
    call $t21,$t2 := $2_epoch_reward_record_claim_reward($t2, $t20);
    if ($abort_flag) {
        assume {:print "$at(53,9726,9856)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[reward_amount]($t21) at ./sources/governance/sui_system.move:257:13+13
    assume {:print "$track_local(30,1,9):", $t21} $t21 == $t21;

    // $t22 := borrow_field<sui_system::SuiSystemState>.delegation_reward($t0) at ./sources/governance/sui_system.move:261:37+27
    assume {:print "$at(53,9894,9921)"} true;
    $t22 := $ChildMutation($t0, 6, $delegation_reward#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t23 := balance::split<sui::SUI>($t22, $t21) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:261:22+58
    call $t23,$t22 := $2_balance_split'$2_sui_SUI'($t22, $t21);
    if ($abort_flag) {
        assume {:print "$at(53,9879,9937)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // write_back[Reference($t0).delegation_reward (balance::Balance<sui::SUI>)]($t22) at ./sources/governance/sui_system.move:261:22+58
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_delegation_reward($Dereference($t0), $Dereference($t22)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:261:22+58
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,1,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[reward]($t23) at ./sources/governance/sui_system.move:261:13+6
    assume {:print "$track_local(30,1,8):", $t23} $t23 == $t23;

    // delegation::claim_reward($t1, $t23, $t3) on_abort goto L3 with $t13 at ./sources/governance/sui_system.move:262:9+49
    assume {:print "$at(53,9947,9996)"} true;
    call $t1,$t3 := $2_delegation_claim_reward($t1, $t23, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,9947,9996)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(30,1):", $t13} $t13 == $t13;
        goto L3;
    }

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:262:58+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,1,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegation]($t1) at ./sources/governance/sui_system.move:262:58+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t1);
    assume {:print "$track_local(30,1,1):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[epoch_reward_record]($t2) at ./sources/governance/sui_system.move:262:58+1
    $temp_0'$2_epoch_reward_record_EpochRewardRecord' := $Dereference($t2);
    assume {:print "$track_local(30,1,2):", $temp_0'$2_epoch_reward_record_EpochRewardRecord'} $temp_0'$2_epoch_reward_record_EpochRewardRecord' == $temp_0'$2_epoch_reward_record_EpochRewardRecord';

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:262:58+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,1,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L2 at ./sources/governance/sui_system.move:263:5+1
    assume {:print "$at(53,10002,10003)"} true;
L2:

    // return () at ./sources/governance/sui_system.move:263:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t2;
    $ret3 := $t3;
    return;

    // label L3 at ./sources/governance/sui_system.move:263:5+1
L3:

    // abort($t13) at ./sources/governance/sui_system.move:263:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun sui_system::request_add_delegation_with_locked_coin [verification] at ./sources/governance/sui_system.move:204:5+563
procedure {:timeLimit 40} $2_sui_system_request_add_delegation_with_locked_coin$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $2_locked_coin_LockedCoin'$2_sui_SUI', _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $Mutation ($2_validator_set_ValidatorSet);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:204:5+1
    assume {:print "$at(53,7366,7367)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:204:5+1
    assume $IsValid'$2_locked_coin_LockedCoin'$2_sui_SUI''($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:204:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:204:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:204:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,5,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegate_stake]($t1) at ./sources/governance/sui_system.move:204:5+1
    assume {:print "$track_local(30,5,1):", $t1} $t1 == $t1;

    // trace_local[validator_address]($t2) at ./sources/governance/sui_system.move:204:5+1
    assume {:print "$track_local(30,5,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:204:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,5,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := locked_coin::value<sui::SUI>($t1) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:210:22+35
    assume {:print "$at(53,7594,7629)"} true;
    call $t6 := $2_locked_coin_value'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(53,7594,7629)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[amount]($t6) at ./sources/governance/sui_system.move:210:13+6
    assume {:print "$track_local(30,5,4):", $t6} $t6 == $t6;

    // $t8 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:211:47+20
    assume {:print "$at(53,7677,7697)"} true;
    $t8 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // validator_set::request_add_delegation($t8, $t2, $t6) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:211:9+86
    call $t8 := $2_validator_set_request_add_delegation($t8, $t2, $t6);
    if ($abort_flag) {
        assume {:print "$at(53,7639,7725)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t8) at ./sources/governance/sui_system.move:211:9+86
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:211:9+86
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,5,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // $t9 := get_field<sui_system::SuiSystemState>.epoch($t0) at ./sources/governance/sui_system.move:214:30+10
    assume {:print "$at(53,7807,7817)"} true;
    $t9 := $epoch#$2_sui_system_SuiSystemState($Dereference($t0));

    // $t10 := 1 at ./sources/governance/sui_system.move:214:43+1
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := +($t9, $t10) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:214:41+1
    call $t11 := $AddU64($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(53,7818,7819)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[starting_epoch]($t11) at ./sources/governance/sui_system.move:214:13+14
    assume {:print "$track_local(30,5,5):", $t11} $t11 == $t11;

    // delegation::create_from_locked_coin($t11, $t2, $t1, $t3) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:215:9+91
    assume {:print "$at(53,7831,7922)"} true;
    call $t3 := $2_delegation_create_from_locked_coin($t11, $t2, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,7831,7922)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,5):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:215:100+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,5,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:215:100+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,5,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:216:5+1
    assume {:print "$at(53,7928,7929)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:216:5+1
    $ret0 := $t0;
    $ret1 := $t3;
    return;

    // label L2 at ./sources/governance/sui_system.move:216:5+1
L2:

    // abort($t7) at ./sources/governance/sui_system.move:216:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun sui_system::request_add_stake_with_locked_coin [verification] at ./sources/governance/sui_system.move:156:5+412
procedure {:timeLimit 40} $2_sui_system_request_add_stake_with_locked_coin$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $2_locked_coin_LockedCoin'$2_sui_SUI', _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_balance_Balance'$2_sui_SUI';
    var $t4: $2_epoch_time_lock_EpochTimeLock;
    var $t5: $2_balance_Balance'$2_sui_SUI';
    var $t6: $2_epoch_time_lock_EpochTimeLock;
    var $t7: int;
    var $t8: $Mutation ($2_validator_set_ValidatorSet);
    var $t9: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_epoch_time_lock_EpochTimeLock': $2_epoch_time_lock_EpochTimeLock;
    var $temp_0'$2_locked_coin_LockedCoin'$2_sui_SUI'': $2_locked_coin_LockedCoin'$2_sui_SUI';
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t8));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:156:5+1
    assume {:print "$at(53,5600,5601)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/governance/sui_system.move:156:5+1
    assume $IsValid'$2_locked_coin_LockedCoin'$2_sui_SUI''($t1);

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:156:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:156:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,7,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[new_stake]($t1) at ./sources/governance/sui_system.move:156:5+1
    assume {:print "$track_local(30,7,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/governance/sui_system.move:156:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(30,7,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // ($t5, $t6) := locked_coin::into_balance<sui::SUI>($t1) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:161:42+36
    assume {:print "$at(53,5802,5838)"} true;
    call $t5,$t6 := $2_locked_coin_into_balance'$2_sui_SUI'($t1);
    if ($abort_flag) {
        assume {:print "$at(53,5802,5838)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,7):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[epoch_time_lock]($t6) at ./sources/governance/sui_system.move:161:23+15
    assume {:print "$track_local(30,7,4):", $t6} $t6 == $t6;

    // trace_local[balance]($t5) at ./sources/governance/sui_system.move:161:14+7
    assume {:print "$track_local(30,7,3):", $t5} $t5 == $t5;

    // $t8 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:163:13+20
    assume {:print "$at(53,5894,5914)"} true;
    $t8 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // $t9 := opaque begin: option::some<epoch_time_lock::EpochTimeLock>($t6) at ./sources/governance/sui_system.move:165:13+29
    assume {:print "$at(53,5949,5978)"} true;

    // assume And(WellFormed($t9), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t9)), 1)) at ./sources/governance/sui_system.move:165:13+29
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t9) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t9)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t9, option::spec_some<epoch_time_lock::EpochTimeLock>($t6)) at ./sources/governance/sui_system.move:165:13+29
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t9, $1_option_spec_some'$2_epoch_time_lock_EpochTimeLock'($t6));

    // $t9 := opaque end: option::some<epoch_time_lock::EpochTimeLock>($t6) at ./sources/governance/sui_system.move:165:13+29

    // validator_set::request_add_stake($t8, $t5, $t9, $t2) on_abort goto L2 with $t7 at ./sources/governance/sui_system.move:162:9+158
    assume {:print "$at(53,5848,6006)"} true;
    call $t8,$t2 := $2_validator_set_request_add_stake($t8, $t5, $t9, $t2);
    if ($abort_flag) {
        assume {:print "$at(53,5848,6006)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(30,7):", $t7} $t7 == $t7;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t8) at ./sources/governance/sui_system.move:162:9+158
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t8)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:162:9+158
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,7,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:162:9+158
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,7,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[ctx]($t2) at ./sources/governance/sui_system.move:162:9+158
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(30,7,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:168:5+1
    assume {:print "$at(53,6011,6012)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:168:5+1
    $ret0 := $t0;
    $ret1 := $t2;
    return;

    // label L2 at ./sources/governance/sui_system.move:168:5+1
L2:

    // abort($t7) at ./sources/governance/sui_system.move:168:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun sui_system::request_switch_delegation [verification] at ./sources/governance/sui_system.move:232:5+613
procedure {:timeLimit 40} $2_sui_system_request_switch_delegation$verify(_$t0: $Mutation ($2_sui_system_SuiSystemState), _$t1: $Mutation ($2_delegation_Delegation), _$t2: int, _$t3: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_sui_system_SuiSystemState), $ret1: $Mutation ($2_delegation_Delegation), $ret2: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t4: int;
    var $t5: int;
    var $t6: $2_delegation_Delegation;
    var $t7: int;
    var $t8: int;
    var $t9: $2_delegation_Delegation;
    var $t10: int;
    var $t11: $Mutation ($2_validator_set_ValidatorSet);
    var $t12: $Mutation ($2_validator_set_ValidatorSet);
    var $t0: $Mutation ($2_sui_system_SuiSystemState);
    var $t1: $Mutation ($2_delegation_Delegation);
    var $t2: int;
    var $t3: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_delegation_Delegation': $2_delegation_Delegation;
    var $temp_0'$2_sui_system_SuiSystemState': $2_sui_system_SuiSystemState;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t12));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);
    assume l#$Mutation($t1) == $Param(1);
    assume l#$Mutation($t3) == $Param(3);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/sui_system.move:232:5+1
    assume {:print "$at(53,8420,8421)"} true;
    assume $IsValid'$2_sui_system_SuiSystemState'($Dereference($t0));

    // assume And(WellFormed($t1), And(And(Le(Len<balance::Balance<sui::SUI>>(select option::Option.vec(select delegation::Delegation.active_delegation($t1))), 1), Le(Len<u64>(select option::Option.vec(select delegation::Delegation.ending_epoch($t1))), 1)), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec(select delegation::Delegation.coin_locked_until_epoch($t1))), 1))) at ./sources/governance/sui_system.move:232:5+1
    assume ($IsValid'$2_delegation_Delegation'($Dereference($t1)) && (((LenVec($vec#$1_option_Option'$2_balance_Balance'$2_sui_SUI''($active_delegation#$2_delegation_Delegation($Dereference($t1)))) <= 1) && (LenVec($vec#$1_option_Option'u64'($ending_epoch#$2_delegation_Delegation($Dereference($t1)))) <= 1)) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($coin_locked_until_epoch#$2_delegation_Delegation($Dereference($t1)))) <= 1)));

    // assume WellFormed($t2) at ./sources/governance/sui_system.move:232:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at ./sources/governance/sui_system.move:232:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t3));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:232:5+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,11,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegation]($t1) at ./sources/governance/sui_system.move:232:5+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t1);
    assume {:print "$track_local(30,11,1):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[new_validator_address]($t2) at ./sources/governance/sui_system.move:232:5+1
    assume {:print "$track_local(30,11,2):", $t2} $t2 == $t2;

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:232:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,11,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t6 := read_ref($t1) at ./sources/governance/sui_system.move:238:59+10
    assume {:print "$at(53,8671,8681)"} true;
    $t6 := $Dereference($t1);

    // $t7 := delegation::validator($t6) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:238:37+33
    call $t7 := $2_delegation_validator($t6);
    if ($abort_flag) {
        assume {:print "$at(53,8649,8682)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,11):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[old_validator_address]($t7) at ./sources/governance/sui_system.move:238:13+21
    assume {:print "$track_local(30,11,5):", $t7} $t7 == $t7;

    // $t9 := read_ref($t1) at ./sources/governance/sui_system.move:239:50+10
    assume {:print "$at(53,8733,8743)"} true;
    $t9 := $Dereference($t1);

    // $t10 := delegation::delegate_amount($t9) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:239:22+39
    call $t10 := $2_delegation_delegate_amount($t9);
    if ($abort_flag) {
        assume {:print "$at(53,8705,8744)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,11):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[amount]($t10) at ./sources/governance/sui_system.move:239:13+6
    assume {:print "$track_local(30,11,4):", $t10} $t10 == $t10;

    // $t11 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:240:50+20
    assume {:print "$at(53,8795,8815)"} true;
    $t11 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // validator_set::request_remove_delegation($t11, $t7, $t10) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:240:9+93
    call $t11 := $2_validator_set_request_remove_delegation($t11, $t7, $t10);
    if ($abort_flag) {
        assume {:print "$at(53,8754,8847)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,11):", $t8} $t8 == $t8;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t11) at ./sources/governance/sui_system.move:240:9+93
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t11)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:240:9+93
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,11,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // $t12 := borrow_field<sui_system::SuiSystemState>.validators($t0) at ./sources/governance/sui_system.move:241:47+20
    assume {:print "$at(53,8895,8915)"} true;
    $t12 := $ChildMutation($t0, 2, $validators#$2_sui_system_SuiSystemState($Dereference($t0)));

    // validator_set::request_add_delegation($t12, $t2, $t10) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:241:9+90
    call $t12 := $2_validator_set_request_add_delegation($t12, $t2, $t10);
    if ($abort_flag) {
        assume {:print "$at(53,8857,8947)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,11):", $t8} $t8 == $t8;
        goto L2;
    }

    // write_back[Reference($t0).validators (validator_set::ValidatorSet)]($t12) at ./sources/governance/sui_system.move:241:9+90
    $t0 := $UpdateMutation($t0, $Update'$2_sui_system_SuiSystemState'_validators($Dereference($t0), $Dereference($t12)));

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:241:9+90
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,11,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // delegation::switch_delegation($t1, $t2, $t3) on_abort goto L2 with $t8 at ./sources/governance/sui_system.move:242:9+69
    assume {:print "$at(53,8957,9026)"} true;
    call $t1,$t3 := $2_delegation_switch_delegation($t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(53,8957,9026)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,11):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[self]($t0) at ./sources/governance/sui_system.move:242:78+1
    $temp_0'$2_sui_system_SuiSystemState' := $Dereference($t0);
    assume {:print "$track_local(30,11,0):", $temp_0'$2_sui_system_SuiSystemState'} $temp_0'$2_sui_system_SuiSystemState' == $temp_0'$2_sui_system_SuiSystemState';

    // trace_local[delegation]($t1) at ./sources/governance/sui_system.move:242:78+1
    $temp_0'$2_delegation_Delegation' := $Dereference($t1);
    assume {:print "$track_local(30,11,1):", $temp_0'$2_delegation_Delegation'} $temp_0'$2_delegation_Delegation' == $temp_0'$2_delegation_Delegation';

    // trace_local[ctx]($t3) at ./sources/governance/sui_system.move:242:78+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t3);
    assume {:print "$track_local(30,11,3):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/governance/sui_system.move:243:5+1
    assume {:print "$at(53,9032,9033)"} true;
L1:

    // return () at ./sources/governance/sui_system.move:243:5+1
    $ret0 := $t0;
    $ret1 := $t1;
    $ret2 := $t3;
    return;

    // label L2 at ./sources/governance/sui_system.move:243:5+1
L2:

    // abort($t8) at ./sources/governance/sui_system.move:243:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun genesis::create [verification] at ./sources/governance/genesis.move:30:5+1945
procedure {:timeLimit 40} $2_genesis_create$verify(_$t0: Vec (Vec (int)), _$t1: Vec (Vec (int)), _$t2: Vec (int), _$t3: Vec (Vec (int)), _$t4: Vec (Vec (int)), _$t5: Vec (int), _$t6: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t7: bool;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: Vec (int);
    var $t14: Vec (int);
    var $t15: Vec (int);
    var $t16: int;
    var $t17: $2_balance_Balance'$2_sui_SUI';
    var $t18: int;
    var $t19: $2_balance_Supply'$2_sui_SUI';
    var $t20: Vec ($2_validator_Validator);
    var $t21: int;
    var $t22: $Mutation ($2_balance_Supply'$2_sui_SUI');
    var $t23: int;
    var $t24: $2_balance_Balance'$2_sui_SUI';
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: Vec (int);
    var $t39: Vec (int);
    var $t40: Vec (int);
    var $t41: Vec (int);
    var $t42: int;
    var $t43: $2_balance_Balance'$2_sui_SUI';
    var $t44: $1_option_Option'$2_epoch_time_lock_EpochTimeLock';
    var $t45: $2_validator_Validator;
    var $t46: int;
    var $t47: int;
    var $t48: $Mutation (Vec ($2_validator_Validator));
    var $t49: $Mutation ($2_balance_Supply'$2_sui_SUI');
    var $t50: Vec ($2_validator_Validator);
    var $t51: $2_balance_Supply'$2_sui_SUI';
    var $t52: int;
    var $t53: int;
    var $t54: int;
    var $t0: Vec (Vec (int));
    var $t1: Vec (Vec (int));
    var $t2: Vec (int);
    var $t3: Vec (Vec (int));
    var $t4: Vec (Vec (int));
    var $t5: Vec (int);
    var $t6: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_balance_Balance'$2_sui_SUI'': $2_balance_Balance'$2_sui_SUI';
    var $temp_0'$2_balance_Supply'$2_sui_SUI'': $2_balance_Supply'$2_sui_SUI';
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$2_validator_Validator'': Vec ($2_validator_Validator);
    var $temp_0'vec'address'': Vec (int);
    var $temp_0'vec'u64'': Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    var $temp_0'vec'vec'u8''': Vec (Vec (int));
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t48));
    assume IsEmptyVec(p#$Mutation($t49));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t6) == $Param(6);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$at(49,968,969)"} true;
    assume $IsValid'vec'vec'u8'''($t0);

    // assume WellFormed($t1) at ./sources/governance/genesis.move:30:5+1
    assume $IsValid'vec'vec'u8'''($t1);

    // assume WellFormed($t2) at ./sources/governance/genesis.move:30:5+1
    assume $IsValid'vec'address''($t2);

    // assume WellFormed($t3) at ./sources/governance/genesis.move:30:5+1
    assume $IsValid'vec'vec'u8'''($t3);

    // assume WellFormed($t4) at ./sources/governance/genesis.move:30:5+1
    assume $IsValid'vec'vec'u8'''($t4);

    // assume WellFormed($t5) at ./sources/governance/genesis.move:30:5+1
    assume $IsValid'vec'u64''($t5);

    // assume WellFormed($t6) at ./sources/governance/genesis.move:30:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t6));

    // trace_local[validator_pubkeys]($t0) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$track_local(31,0,0):", $t0} $t0 == $t0;

    // trace_local[validator_proof_of_possessions]($t1) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$track_local(31,0,1):", $t1} $t1 == $t1;

    // trace_local[validator_sui_addresses]($t2) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$track_local(31,0,2):", $t2} $t2 == $t2;

    // trace_local[validator_names]($t3) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$track_local(31,0,3):", $t3} $t3 == $t3;

    // trace_local[validator_net_addresses]($t4) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$track_local(31,0,4):", $t4} $t4 == $t4;

    // trace_local[validator_stakes]($t5) at ./sources/governance/genesis.move:30:5+1
    assume {:print "$track_local(31,0,5):", $t5} $t5 == $t5;

    // trace_local[ctx]($t6) at ./sources/governance/genesis.move:30:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(31,0,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t19 := sui::new() on_abort goto L20 with $t21 at ./sources/governance/genesis.move:39:26+10
    assume {:print "$at(49,1336,1346)"} true;
    call $t19 := $2_sui_new();
    if ($abort_flag) {
        assume {:print "$at(49,1336,1346)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[sui_supply]($t19) at ./sources/governance/genesis.move:39:13+10
    assume {:print "$track_local(31,0,19):", $t19} $t19 == $t19;

    // $t22 := borrow_local($t19) at ./sources/governance/genesis.move:40:53+15
    assume {:print "$at(49,1400,1415)"} true;
    $t22 := $Mutation($Local(19), EmptyVec(), $t19);

    // $t23 := 100000000000000 at ./sources/governance/genesis.move:40:70+17
    $t23 := 100000000000000;
    assume $IsValid'u64'($t23);

    // $t24 := balance::increase_supply<sui::SUI>($t22, $t23) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:40:28+60
    call $t24,$t22 := $2_balance_increase_supply'$2_sui_SUI'($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(49,1375,1435)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // write_back[LocalRoot($t19)@]($t22) at ./sources/governance/genesis.move:40:28+60
    $t19 := $Dereference($t22);

    // trace_local[sui_supply]($t19) at ./sources/governance/genesis.move:40:28+60
    assume {:print "$track_local(31,0,19):", $t19} $t19 == $t19;

    // trace_local[storage_fund]($t24) at ./sources/governance/genesis.move:40:13+12
    assume {:print "$track_local(31,0,17):", $t24} $t24 == $t24;

    // $t20 := vector::empty<validator::Validator>() on_abort goto L20 with $t21 at ./sources/governance/genesis.move:41:26+15
    assume {:print "$at(49,1462,1477)"} true;
    call $t20 := $1_vector_empty'$2_validator_Validator'();
    if ($abort_flag) {
        assume {:print "$at(49,1462,1477)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[validators]($t20) at ./sources/governance/genesis.move:41:13+10
    assume {:print "$track_local(31,0,20):", $t20} $t20 == $t20;

    // $t25 := vector::length<vector<u8>>($t0) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:42:21+34
    assume {:print "$at(49,1499,1533)"} true;
    call $t25 := $1_vector_length'vec'u8''($t0);
    if ($abort_flag) {
        assume {:print "$at(49,1499,1533)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[count]($t25) at ./sources/governance/genesis.move:42:13+5
    assume {:print "$track_local(31,0,10):", $t25} $t25 == $t25;

    // $t26 := vector::length<address>($t2) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:44:13+40
    assume {:print "$at(49,1564,1604)"} true;
    call $t26 := $1_vector_length'address'($t2);
    if ($abort_flag) {
        assume {:print "$at(49,1564,1604)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // $t27 := ==($t26, $t25) at ./sources/governance/genesis.move:44:54+2
    $t27 := $IsEqual'u64'($t26, $t25);

    // if ($t27) goto L0 else goto L2 at ./sources/governance/genesis.move:44:13+111
    if ($t27) { goto L0; } else { goto L2; }

    // label L0 at ./sources/governance/genesis.move:45:35+17
    assume {:print "$at(49,1648,1665)"} true;
L0:

    // $t28 := vector::length<u64>($t5) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:45:20+33
    call $t28 := $1_vector_length'u64'($t5);
    if ($abort_flag) {
        assume {:print "$at(49,1633,1666)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // $t7 := ==($t28, $t25) at ./sources/governance/genesis.move:45:54+2
    $t7 := $IsEqual'u64'($t28, $t25);

    // goto L3 at ./sources/governance/genesis.move:44:13+111
    assume {:print "$at(49,1564,1675)"} true;
    goto L3;

    // label L2 at ./sources/governance/genesis.move:44:13+111
L2:

    // $t29 := false at ./sources/governance/genesis.move:44:13+111
    $t29 := false;
    assume $IsValid'bool'($t29);

    // $t7 := $t29 at ./sources/governance/genesis.move:44:13+111
    $t7 := $t29;

    // label L3 at ./sources/governance/genesis.move:44:13+111
L3:

    // if ($t7) goto L4 else goto L6 at ./sources/governance/genesis.move:44:13+172
    if ($t7) { goto L4; } else { goto L6; }

    // label L4 at ./sources/governance/genesis.move:46:35+16
    assume {:print "$at(49,1710,1726)"} true;
L4:

    // $t30 := vector::length<vector<u8>>($t3) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:46:20+32
    call $t30 := $1_vector_length'vec'u8''($t3);
    if ($abort_flag) {
        assume {:print "$at(49,1695,1727)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // $t8 := ==($t30, $t25) at ./sources/governance/genesis.move:46:53+2
    $t8 := $IsEqual'u64'($t30, $t25);

    // goto L7 at ./sources/governance/genesis.move:44:13+172
    assume {:print "$at(49,1564,1736)"} true;
    goto L7;

    // label L6 at ./sources/governance/genesis.move:44:13+172
L6:

    // $t31 := false at ./sources/governance/genesis.move:44:13+172
    $t31 := false;
    assume $IsValid'bool'($t31);

    // $t8 := $t31 at ./sources/governance/genesis.move:44:13+172
    $t8 := $t31;

    // label L7 at ./sources/governance/genesis.move:44:13+172
L7:

    // if ($t8) goto L8 else goto L10 at ./sources/governance/genesis.move:44:13+241
    if ($t8) { goto L8; } else { goto L10; }

    // label L8 at ./sources/governance/genesis.move:47:35+24
    assume {:print "$at(49,1771,1795)"} true;
L8:

    // $t32 := vector::length<vector<u8>>($t4) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:47:20+40
    call $t32 := $1_vector_length'vec'u8''($t4);
    if ($abort_flag) {
        assume {:print "$at(49,1756,1796)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // $t9 := ==($t32, $t25) at ./sources/governance/genesis.move:47:61+2
    $t9 := $IsEqual'u64'($t32, $t25);

    // goto L11 at ./sources/governance/genesis.move:44:13+241
    assume {:print "$at(49,1564,1805)"} true;
    goto L11;

    // label L10 at ./sources/governance/genesis.move:44:13+241
L10:

    // $t33 := false at ./sources/governance/genesis.move:44:13+241
    $t33 := false;
    assume $IsValid'bool'($t33);

    // $t9 := $t33 at ./sources/governance/genesis.move:44:13+241
    $t9 := $t33;

    // label L11 at ./sources/governance/genesis.move:44:13+241
L11:

    // if ($t9) goto L12 else goto L21 at ./sources/governance/genesis.move:43:9+287
    assume {:print "$at(49,1543,1830)"} true;
    if ($t9) { goto L12; } else { goto L21; }

    // label L13 at ./sources/governance/genesis.move:43:9+287
L13:

    // destroy($t6) at ./sources/governance/genesis.move:43:9+287

    // $t34 := 1 at ./sources/governance/genesis.move:48:13+1
    assume {:print "$at(49,1819,1820)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // trace_abort($t34) at ./sources/governance/genesis.move:43:9+287
    assume {:print "$at(49,1543,1830)"} true;
    assume {:print "$track_abort(31,0):", $t34} $t34 == $t34;

    // $t21 := move($t34) at ./sources/governance/genesis.move:43:9+287
    $t21 := $t34;

    // goto L20 at ./sources/governance/genesis.move:43:9+287
    goto L20;

    // label L12 at ./sources/governance/genesis.move:50:17+1
    assume {:print "$at(49,1848,1849)"} true;
L12:

    // $t35 := 0 at ./sources/governance/genesis.move:50:17+1
    $t35 := 0;
    assume $IsValid'u64'($t35);

    // trace_local[i]($t35) at ./sources/governance/genesis.move:50:13+1
    assume {:print "$track_local(31,0,11):", $t35} $t35 == $t35;

    // label L17 at ./sources/governance/genesis.move:51:16+1
    assume {:print "$at(49,1866,1867)"} true;
L17:

    // havoc[val]($t35) at ./sources/governance/genesis.move:51:16+1
    havoc $t35;
    assume $IsValid'u64'($t35);

    // havoc[val]($t19) at ./sources/governance/genesis.move:51:16+1
    havoc $t19;
    assume $IsValid'$2_balance_Supply'$2_sui_SUI''($t19);

    // havoc[val]($t20) at ./sources/governance/genesis.move:51:16+1
    havoc $t20;
    assume $IsValid'vec'$2_validator_Validator''($t20);

    // havoc[val]($t36) at ./sources/governance/genesis.move:51:16+1
    havoc $t36;
    assume $IsValid'bool'($t36);

    // havoc[val]($t37) at ./sources/governance/genesis.move:51:16+1
    havoc $t37;
    assume $IsValid'address'($t37);

    // havoc[val]($t38) at ./sources/governance/genesis.move:51:16+1
    havoc $t38;
    assume $IsValid'vec'u8''($t38);

    // havoc[val]($t39) at ./sources/governance/genesis.move:51:16+1
    havoc $t39;
    assume $IsValid'vec'u8''($t39);

    // havoc[val]($t40) at ./sources/governance/genesis.move:51:16+1
    havoc $t40;
    assume $IsValid'vec'u8''($t40);

    // havoc[val]($t41) at ./sources/governance/genesis.move:51:16+1
    havoc $t41;
    assume $IsValid'vec'u8''($t41);

    // havoc[val]($t42) at ./sources/governance/genesis.move:51:16+1
    havoc $t42;
    assume $IsValid'u64'($t42);

    // havoc[val]($t43) at ./sources/governance/genesis.move:51:16+1
    havoc $t43;
    assume $IsValid'$2_balance_Balance'$2_sui_SUI''($t43);

    // havoc[val]($t44) at ./sources/governance/genesis.move:51:16+1
    havoc $t44;
    assume $IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t44);

    // havoc[val]($t45) at ./sources/governance/genesis.move:51:16+1
    havoc $t45;
    assume $IsValid'$2_validator_Validator'($t45);

    // havoc[val]($t46) at ./sources/governance/genesis.move:51:16+1
    havoc $t46;
    assume $IsValid'u64'($t46);

    // havoc[val]($t47) at ./sources/governance/genesis.move:51:16+1
    havoc $t47;
    assume $IsValid'u64'($t47);

    // havoc[mut]($t6) at ./sources/governance/genesis.move:51:16+1
    havoc $temp_0'$2_tx_context_TxContext';
    $t6 := $UpdateMutation($t6, $temp_0'$2_tx_context_TxContext');
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t6));

    // havoc[mut_all]($t48) at ./sources/governance/genesis.move:51:16+1
    havoc $t48;
    assume $IsValid'vec'$2_validator_Validator''($Dereference($t48));

    // havoc[mut_all]($t49) at ./sources/governance/genesis.move:51:16+1
    havoc $t49;
    assume $IsValid'$2_balance_Supply'$2_sui_SUI''($Dereference($t49));

    // trace_local[ctx]($t6) at ./sources/governance/genesis.move:51:16+1
    assume {:print "$info(): enter loop, variable(s) ctx, i, sui_supply, validators havocked and reassigned"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(31,0,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // trace_local[i]($t35) at ./sources/governance/genesis.move:51:16+1
    assume {:print "$track_local(31,0,11):", $t35} $t35 == $t35;

    // trace_local[sui_supply]($t19) at ./sources/governance/genesis.move:51:16+1
    assume {:print "$track_local(31,0,19):", $t19} $t19 == $t19;

    // trace_local[validators]($t20) at ./sources/governance/genesis.move:51:16+1
    assume {:print "$track_local(31,0,20):", $t20} $t20 == $t20;

    // assume Not(AbortFlag()) at ./sources/governance/genesis.move:51:16+1
    assume !$abort_flag;

    // $t36 := <($t35, $t25) at ./sources/governance/genesis.move:51:18+1
    call $t36 := $Lt($t35, $t25);

    // if ($t36) goto L14 else goto L16 at ./sources/governance/genesis.move:51:9+822
    if ($t36) { goto L14; } else { goto L16; }

    // label L14 at ./sources/governance/genesis.move:52:47+24
    assume {:print "$at(49,1925,1949)"} true;
L14:

    // $t37 := vector::borrow<address>($t2, $t35) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:52:32+43
    call $t37 := $1_vector_borrow'address'($t2, $t35);
    if ($abort_flag) {
        assume {:print "$at(49,1910,1953)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[sui_address]($t37) at ./sources/governance/genesis.move:52:17+11
    assume {:print "$track_local(31,0,18):", $t37} $t37 == $t37;

    // $t38 := vector::borrow<vector<u8>>($t1, $t35) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:53:40+50
    assume {:print "$at(49,1994,2044)"} true;
    call $t38 := $1_vector_borrow'vec'u8''($t1, $t35);
    if ($abort_flag) {
        assume {:print "$at(49,1994,2044)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[proof_of_possession]($t38) at ./sources/governance/genesis.move:53:17+19
    assume {:print "$track_local(31,0,14):", $t38} $t38 == $t38;

    // $t39 := vector::borrow<vector<u8>>($t0, $t35) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:54:27+37
    assume {:print "$at(49,2072,2109)"} true;
    call $t39 := $1_vector_borrow'vec'u8''($t0, $t35);
    if ($abort_flag) {
        assume {:print "$at(49,2072,2109)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[pubkey]($t39) at ./sources/governance/genesis.move:54:17+6
    assume {:print "$track_local(31,0,15):", $t39} $t39 == $t39;

    // $t40 := vector::borrow<vector<u8>>($t3, $t35) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:55:25+35
    assume {:print "$at(49,2135,2170)"} true;
    call $t40 := $1_vector_borrow'vec'u8''($t3, $t35);
    if ($abort_flag) {
        assume {:print "$at(49,2135,2170)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[name]($t40) at ./sources/governance/genesis.move:55:17+4
    assume {:print "$track_local(31,0,12):", $t40} $t40 == $t40;

    // $t41 := vector::borrow<vector<u8>>($t4, $t35) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:56:32+43
    assume {:print "$at(49,2203,2246)"} true;
    call $t41 := $1_vector_borrow'vec'u8''($t4, $t35);
    if ($abort_flag) {
        assume {:print "$at(49,2203,2246)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[net_address]($t41) at ./sources/governance/genesis.move:56:17+11
    assume {:print "$track_local(31,0,13):", $t41} $t41 == $t41;

    // $t42 := vector::borrow<u64>($t5, $t35) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:57:26+36
    assume {:print "$at(49,2273,2309)"} true;
    call $t42 := $1_vector_borrow'u64'($t5, $t35);
    if ($abort_flag) {
        assume {:print "$at(49,2273,2309)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[stake]($t42) at ./sources/governance/genesis.move:57:17+5
    assume {:print "$track_local(31,0,16):", $t42} $t42 == $t42;

    // $t48 := borrow_local($t20) at ./sources/governance/genesis.move:58:31+15
    assume {:print "$at(49,2341,2356)"} true;
    $t48 := $Mutation($Local(20), EmptyVec(), $t20);

    // $t49 := borrow_local($t19) at ./sources/governance/genesis.move:64:42+15
    assume {:print "$at(49,2556,2571)"} true;
    $t49 := $Mutation($Local(19), EmptyVec(), $t19);

    // $t43 := balance::increase_supply<sui::SUI>($t49, $t42) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:64:17+48
    call $t43,$t49 := $2_balance_increase_supply'$2_sui_SUI'($t49, $t42);
    if ($abort_flag) {
        assume {:print "$at(49,2531,2579)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // write_back[LocalRoot($t19)@]($t49) at ./sources/governance/genesis.move:64:17+48
    $t19 := $Dereference($t49);

    // trace_local[sui_supply]($t19) at ./sources/governance/genesis.move:64:17+48
    assume {:print "$track_local(31,0,19):", $t19} $t19 == $t19;

    // $t44 := opaque begin: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/genesis.move:65:17+14
    assume {:print "$at(49,2597,2611)"} true;

    // assume And(WellFormed($t44), Le(Len<epoch_time_lock::EpochTimeLock>(select option::Option.vec($t44)), 1)) at ./sources/governance/genesis.move:65:17+14
    assume ($IsValid'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t44) && (LenVec($vec#$1_option_Option'$2_epoch_time_lock_EpochTimeLock'($t44)) <= 1));

    // assume Eq<option::Option<epoch_time_lock::EpochTimeLock>>($t44, option::spec_none<epoch_time_lock::EpochTimeLock>()) at ./sources/governance/genesis.move:65:17+14
    assume $IsEqual'$1_option_Option'$2_epoch_time_lock_EpochTimeLock''($t44, $1_option_spec_none'$2_epoch_time_lock_EpochTimeLock'());

    // $t44 := opaque end: option::none<epoch_time_lock::EpochTimeLock>() at ./sources/governance/genesis.move:65:17+14

    // $t45 := validator::new($t37, $t39, $t38, $t40, $t41, $t43, $t44, $t6) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:58:48+288
    assume {:print "$at(49,2358,2646)"} true;
    call $t45,$t6 := $2_validator_new($t37, $t39, $t38, $t40, $t41, $t43, $t44, $t6);
    if ($abort_flag) {
        assume {:print "$at(49,2358,2646)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // vector::push_back<validator::Validator>($t48, $t45) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:58:13+324
    call $t48 := $1_vector_push_back'$2_validator_Validator'($t48, $t45);
    if ($abort_flag) {
        assume {:print "$at(49,2323,2647)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // write_back[LocalRoot($t20)@]($t48) at ./sources/governance/genesis.move:58:13+324
    $t20 := $Dereference($t48);

    // trace_local[validators]($t20) at ./sources/governance/genesis.move:58:13+324
    assume {:print "$track_local(31,0,20):", $t20} $t20 == $t20;

    // $t46 := 1 at ./sources/governance/genesis.move:68:21+1
    assume {:print "$at(49,2669,2670)"} true;
    $t46 := 1;
    assume $IsValid'u64'($t46);

    // $t47 := +($t35, $t46) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:68:19+1
    call $t47 := $AddU64($t35, $t46);
    if ($abort_flag) {
        assume {:print "$at(49,2667,2668)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[i]($t47) at ./sources/governance/genesis.move:68:13+1
    assume {:print "$track_local(31,0,11):", $t47} $t47 == $t47;

    // goto L18 at ./sources/governance/genesis.move:68:22+1
    goto L18;

    // label L16 at ./sources/governance/genesis.move:70:9+215
    assume {:print "$at(49,2691,2906)"} true;
L16:

    // destroy($t6) at ./sources/governance/genesis.move:70:9+215

    // $t50 := move($t20) at ./sources/governance/genesis.move:71:13+10
    assume {:print "$at(49,2723,2733)"} true;
    $t50 := $t20;

    // $t51 := move($t19) at ./sources/governance/genesis.move:72:13+10
    assume {:print "$at(49,2747,2757)"} true;
    $t51 := $t19;

    // $t52 := 100 at ./sources/governance/genesis.move:74:13+24
    assume {:print "$at(49,2797,2821)"} true;
    $t52 := 100;
    assume $IsValid'u64'($t52);

    // $t53 := 100000000000000 at ./sources/governance/genesis.move:75:13+24
    assume {:print "$at(49,2835,2859)"} true;
    $t53 := 100000000000000;
    assume $IsValid'u64'($t53);

    // $t54 := 1 at ./sources/governance/genesis.move:76:13+22
    assume {:print "$at(49,2873,2895)"} true;
    $t54 := 1;
    assume $IsValid'u64'($t54);

    // sui_system::create($t50, $t51, $t24, $t52, $t53, $t54) on_abort goto L20 with $t21 at ./sources/governance/genesis.move:70:9+215
    assume {:print "$at(49,2691,2906)"} true;
    call $2_sui_system_create($t50, $t51, $t24, $t52, $t53, $t54);
    if ($abort_flag) {
        assume {:print "$at(49,2691,2906)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(31,0):", $t21} $t21 == $t21;
        goto L20;
    }

    // trace_local[ctx]($t6) at ./sources/governance/genesis.move:77:10+1
    assume {:print "$at(49,2906,2907)"} true;
    $temp_0'$2_tx_context_TxContext' := $Dereference($t6);
    assume {:print "$track_local(31,0,6):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // goto L19 at ./sources/governance/genesis.move:77:10+1
    goto L19;

    // label L18 at ./sources/governance/genesis.move:70:9+215
    // Loop invariant checking block for the loop started with header: L17
    assume {:print "$at(49,2691,2906)"} true;
L18:

    // stop() at ./sources/governance/genesis.move:70:9+215
    assume false;
    return;

    // label L19 at ./sources/governance/genesis.move:78:5+1
    assume {:print "$at(49,2912,2913)"} true;
L19:

    // return () at ./sources/governance/genesis.move:78:5+1
    $ret0 := $t6;
    return;

    // label L20 at ./sources/governance/genesis.move:78:5+1
L20:

    // abort($t21) at ./sources/governance/genesis.move:78:5+1
    $abort_code := $t21;
    $abort_flag := true;
    return;

    // label L21 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L21:

    // destroy($t48) at <internal>:1:1+10

    // destroy($t49) at <internal>:1:1+10

    // goto L13 at <internal>:1:1+10
    goto L13;

}

// struct object_basics::NewValueEvent at ./sources/object_basics.move:21:5+66
type {:datatype} $2_object_basics_NewValueEvent;
function {:constructor} $2_object_basics_NewValueEvent($new_value: int): $2_object_basics_NewValueEvent;
function {:inline} $Update'$2_object_basics_NewValueEvent'_new_value(s: $2_object_basics_NewValueEvent, x: int): $2_object_basics_NewValueEvent {
    $2_object_basics_NewValueEvent(x)
}
function $IsValid'$2_object_basics_NewValueEvent'(s: $2_object_basics_NewValueEvent): bool {
    $IsValid'u64'($new_value#$2_object_basics_NewValueEvent(s))
}
function {:inline} $IsEqual'$2_object_basics_NewValueEvent'(s1: $2_object_basics_NewValueEvent, s2: $2_object_basics_NewValueEvent): bool {
    s1 == s2
}

// struct object_basics::Object at ./sources/object_basics.move:11:5+73
type {:datatype} $2_object_basics_Object;
function {:constructor} $2_object_basics_Object($id: $2_object_UID, $value: int): $2_object_basics_Object;
function {:inline} $Update'$2_object_basics_Object'_id(s: $2_object_basics_Object, x: $2_object_UID): $2_object_basics_Object {
    $2_object_basics_Object(x, $value#$2_object_basics_Object(s))
}
function {:inline} $Update'$2_object_basics_Object'_value(s: $2_object_basics_Object, x: int): $2_object_basics_Object {
    $2_object_basics_Object($id#$2_object_basics_Object(s), x)
}
function $IsValid'$2_object_basics_Object'(s: $2_object_basics_Object): bool {
    $IsValid'$2_object_UID'($id#$2_object_basics_Object(s))
      && $IsValid'u64'($value#$2_object_basics_Object(s))
}
function {:inline} $IsEqual'$2_object_basics_Object'(s1: $2_object_basics_Object, s2: $2_object_basics_Object): bool {
    s1 == s2
}
var $2_object_basics_Object_$memory: $Memory $2_object_basics_Object;

// struct object_basics::Wrapper at ./sources/object_basics.move:16:5+65
type {:datatype} $2_object_basics_Wrapper;
function {:constructor} $2_object_basics_Wrapper($id: $2_object_UID, $o: $2_object_basics_Object): $2_object_basics_Wrapper;
function {:inline} $Update'$2_object_basics_Wrapper'_id(s: $2_object_basics_Wrapper, x: $2_object_UID): $2_object_basics_Wrapper {
    $2_object_basics_Wrapper(x, $o#$2_object_basics_Wrapper(s))
}
function {:inline} $Update'$2_object_basics_Wrapper'_o(s: $2_object_basics_Wrapper, x: $2_object_basics_Object): $2_object_basics_Wrapper {
    $2_object_basics_Wrapper($id#$2_object_basics_Wrapper(s), x)
}
function $IsValid'$2_object_basics_Wrapper'(s: $2_object_basics_Wrapper): bool {
    $IsValid'$2_object_UID'($id#$2_object_basics_Wrapper(s))
      && $IsValid'$2_object_basics_Object'($o#$2_object_basics_Wrapper(s))
}
function {:inline} $IsEqual'$2_object_basics_Wrapper'(s1: $2_object_basics_Wrapper, s2: $2_object_basics_Wrapper): bool {
    s1 == s2
}
var $2_object_basics_Wrapper_$memory: $Memory $2_object_basics_Wrapper;

// fun object_basics::update [verification] at ./sources/object_basics.move:45:5+209
procedure {:timeLimit 40} $2_object_basics_update$verify(_$t0: $Mutation ($2_object_basics_Object), _$t1: $2_object_basics_Object) returns ($ret0: $Mutation ($2_object_basics_Object))
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation (int);
    var $t4: int;
    var $t5: $2_object_basics_NewValueEvent;
    var $t6: int;
    var $t0: $Mutation ($2_object_basics_Object);
    var $t1: $2_object_basics_Object;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t3));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:45:5+1
    assume {:print "$at(44,1073,1074)"} true;
    assume $IsValid'$2_object_basics_Object'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/object_basics.move:45:5+1
    assume $IsValid'$2_object_basics_Object'($t1);

    // trace_local[o1]($t0) at ./sources/object_basics.move:45:5+1
    $temp_0'$2_object_basics_Object' := $Dereference($t0);
    assume {:print "$track_local(32,6,0):", $temp_0'$2_object_basics_Object'} $temp_0'$2_object_basics_Object' == $temp_0'$2_object_basics_Object';

    // trace_local[o2]($t1) at ./sources/object_basics.move:45:5+1
    assume {:print "$track_local(32,6,1):", $t1} $t1 == $t1;

    // $t2 := get_field<object_basics::Object>.value($t1) at ./sources/object_basics.move:46:20+8
    assume {:print "$at(44,1148,1156)"} true;
    $t2 := $value#$2_object_basics_Object($t1);

    // $t3 := borrow_field<object_basics::Object>.value($t0) at ./sources/object_basics.move:46:9+8
    $t3 := $ChildMutation($t0, 1, $value#$2_object_basics_Object($Dereference($t0)));

    // write_ref($t3, $t2) at ./sources/object_basics.move:46:9+19
    $t3 := $UpdateMutation($t3, $t2);

    // write_back[Reference($t0).value (u64)]($t3) at ./sources/object_basics.move:46:9+19
    $t0 := $UpdateMutation($t0, $Update'$2_object_basics_Object'_value($Dereference($t0), $Dereference($t3)));

    // trace_local[o1]($t0) at ./sources/object_basics.move:46:9+19
    $temp_0'$2_object_basics_Object' := $Dereference($t0);
    assume {:print "$track_local(32,6,0):", $temp_0'$2_object_basics_Object'} $temp_0'$2_object_basics_Object' == $temp_0'$2_object_basics_Object';

    // $t4 := get_field<object_basics::Object>.value($t1) at ./sources/object_basics.move:48:48+8
    assume {:print "$at(44,1265,1273)"} true;
    $t4 := $value#$2_object_basics_Object($t1);

    // $t5 := pack object_basics::NewValueEvent($t4) at ./sources/object_basics.move:48:21+37
    $t5 := $2_object_basics_NewValueEvent($t4);

    // event::emit<object_basics::NewValueEvent>($t5) on_abort goto L2 with $t6 at ./sources/object_basics.move:48:9+50
    call $2_event_emit'$2_object_basics_NewValueEvent'($t5);
    if ($abort_flag) {
        assume {:print "$at(44,1226,1276)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,6):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[o1]($t0) at ./sources/object_basics.move:48:9+50
    $temp_0'$2_object_basics_Object' := $Dereference($t0);
    assume {:print "$track_local(32,6,0):", $temp_0'$2_object_basics_Object'} $temp_0'$2_object_basics_Object' == $temp_0'$2_object_basics_Object';

    // label L1 at ./sources/object_basics.move:49:5+1
    assume {:print "$at(44,1281,1282)"} true;
L1:

    // return () at ./sources/object_basics.move:49:5+1
    $ret0 := $t0;
    return;

    // label L2 at ./sources/object_basics.move:49:5+1
L2:

    // abort($t6) at ./sources/object_basics.move:49:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun object_basics::delete [verification] at ./sources/object_basics.move:51:5+111
procedure {:timeLimit 40} $2_object_basics_delete$verify(_$t0: $2_object_basics_Object) returns ()
{
    // declare local variables
    var $t1: $2_object_UID;
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: int;
    var $t0: $2_object_basics_Object;
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:51:5+1
    assume {:print "$at(44,1288,1289)"} true;
    assume $IsValid'$2_object_basics_Object'($t0);

    // trace_local[o]($t0) at ./sources/object_basics.move:51:5+1
    assume {:print "$track_local(32,1,0):", $t0} $t0 == $t0;

    // ($t2, $t3) := unpack object_basics::Object($t0) at ./sources/object_basics.move:52:13+23
    assume {:print "$at(44,1337,1360)"} true;
    $t2 := $id#$2_object_basics_Object($t0);
    $t3 := $value#$2_object_basics_Object($t0);

    // destroy($t3) at ./sources/object_basics.move:52:33+1

    // trace_local[id]($t2) at ./sources/object_basics.move:52:22+2
    assume {:print "$track_local(32,1,1):", $t2} $t2 == $t2;

    // object::delete($t2) on_abort goto L2 with $t4 at ./sources/object_basics.move:53:9+18
    assume {:print "$at(44,1374,1392)"} true;
    call $2_object_delete($t2);
    if ($abort_flag) {
        assume {:print "$at(44,1374,1392)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(32,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at ./sources/object_basics.move:54:5+1
    assume {:print "$at(44,1398,1399)"} true;
L1:

    // return () at ./sources/object_basics.move:54:5+1
    return;

    // label L2 at ./sources/object_basics.move:54:5+1
L2:

    // abort($t4) at ./sources/object_basics.move:54:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object_basics::transfer [verification] at ./sources/object_basics.move:32:5+105
procedure {:timeLimit 40} $2_object_basics_transfer$verify(_$t0: $2_object_basics_Object, _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t0: $2_object_basics_Object;
    var $t1: int;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:32:5+1
    assume {:print "$at(44,729,730)"} true;
    assume $IsValid'$2_object_basics_Object'($t0);

    // assume WellFormed($t1) at ./sources/object_basics.move:32:5+1
    assume $IsValid'address'($t1);

    // trace_local[o]($t0) at ./sources/object_basics.move:32:5+1
    assume {:print "$track_local(32,4,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/object_basics.move:32:5+1
    assume {:print "$track_local(32,4,1):", $t1} $t1 == $t1;

    // transfer::transfer<object_basics::Object>($t0, $t1) on_abort goto L2 with $t2 at ./sources/object_basics.move:33:9+32
    assume {:print "$at(44,796,828)"} true;
    call $2_transfer_transfer'$2_object_basics_Object'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(44,796,828)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(32,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // label L1 at ./sources/object_basics.move:34:5+1
    assume {:print "$at(44,833,834)"} true;
L1:

    // return () at ./sources/object_basics.move:34:5+1
    return;

    // label L2 at ./sources/object_basics.move:34:5+1
L2:

    // abort($t2) at ./sources/object_basics.move:34:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun object_basics::freeze_object [verification] at ./sources/object_basics.move:36:5+84
procedure {:timeLimit 40} $2_object_basics_freeze_object$verify(_$t0: $2_object_basics_Object) returns ()
{
    // declare local variables
    var $t1: int;
    var $t0: $2_object_basics_Object;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:36:5+1
    assume {:print "$at(44,840,841)"} true;
    assume $IsValid'$2_object_basics_Object'($t0);

    // trace_local[o]($t0) at ./sources/object_basics.move:36:5+1
    assume {:print "$track_local(32,2,0):", $t0} $t0 == $t0;

    // transfer::freeze_object<object_basics::Object>($t0) on_abort goto L2 with $t1 at ./sources/object_basics.move:37:9+26
    assume {:print "$at(44,892,918)"} true;
    call $2_transfer_freeze_object'$2_object_basics_Object'($t0);
    if ($abort_flag) {
        assume {:print "$at(44,892,918)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(32,2):", $t1} $t1 == $t1;
        goto L2;
    }

    // label L1 at ./sources/object_basics.move:38:5+1
    assume {:print "$at(44,923,924)"} true;
L1:

    // return () at ./sources/object_basics.move:38:5+1
    return;

    // label L2 at ./sources/object_basics.move:38:5+1
L2:

    // abort($t1) at ./sources/object_basics.move:38:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun object_basics::create [verification] at ./sources/object_basics.move:25:5+196
procedure {:timeLimit 40} $2_object_basics_create$verify(_$t0: int, _$t1: int, _$t2: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t3: $2_object_UID;
    var $t4: int;
    var $t5: $2_object_basics_Object;
    var $t0: int;
    var $t1: int;
    var $t2: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t2) == $Param(2);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:25:5+1
    assume {:print "$at(44,527,528)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at ./sources/object_basics.move:25:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at ./sources/object_basics.move:25:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t2));

    // trace_local[value]($t0) at ./sources/object_basics.move:25:5+1
    assume {:print "$track_local(32,0,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at ./sources/object_basics.move:25:5+1
    assume {:print "$track_local(32,0,1):", $t1} $t1 == $t1;

    // trace_local[ctx]($t2) at ./sources/object_basics.move:25:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(32,0,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t3 := object::new($t2) on_abort goto L2 with $t4 at ./sources/object_basics.move:27:26+16
    assume {:print "$at(44,659,675)"} true;
    call $t3,$t2 := $2_object_new($t2);
    if ($abort_flag) {
        assume {:print "$at(44,659,675)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(32,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := pack object_basics::Object($t3, $t0) at ./sources/object_basics.move:27:13+38
    $t5 := $2_object_basics_Object($t3, $t0);

    // transfer::transfer<object_basics::Object>($t5, $t1) on_abort goto L2 with $t4 at ./sources/object_basics.move:26:9+103
    assume {:print "$at(44,614,717)"} true;
    call $2_transfer_transfer'$2_object_basics_Object'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(44,614,717)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(32,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[ctx]($t2) at ./sources/object_basics.move:26:9+103
    $temp_0'$2_tx_context_TxContext' := $Dereference($t2);
    assume {:print "$track_local(32,0,2):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/object_basics.move:30:5+1
    assume {:print "$at(44,722,723)"} true;
L1:

    // return () at ./sources/object_basics.move:30:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/object_basics.move:30:5+1
L2:

    // abort($t4) at ./sources/object_basics.move:30:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object_basics::set_value [verification] at ./sources/object_basics.move:40:5+87
procedure {:timeLimit 40} $2_object_basics_set_value$verify(_$t0: $Mutation ($2_object_basics_Object), _$t1: int) returns ($ret0: $Mutation ($2_object_basics_Object))
{
    // declare local variables
    var $t2: $Mutation (int);
    var $t0: $Mutation ($2_object_basics_Object);
    var $t1: int;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:40:5+1
    assume {:print "$at(44,930,931)"} true;
    assume $IsValid'$2_object_basics_Object'($Dereference($t0));

    // assume WellFormed($t1) at ./sources/object_basics.move:40:5+1
    assume $IsValid'u64'($t1);

    // trace_local[o]($t0) at ./sources/object_basics.move:40:5+1
    $temp_0'$2_object_basics_Object' := $Dereference($t0);
    assume {:print "$track_local(32,3,0):", $temp_0'$2_object_basics_Object'} $temp_0'$2_object_basics_Object' == $temp_0'$2_object_basics_Object';

    // trace_local[value]($t1) at ./sources/object_basics.move:40:5+1
    assume {:print "$track_local(32,3,1):", $t1} $t1 == $t1;

    // $t2 := borrow_field<object_basics::Object>.value($t0) at ./sources/object_basics.move:41:9+7
    assume {:print "$at(44,995,1002)"} true;
    $t2 := $ChildMutation($t0, 1, $value#$2_object_basics_Object($Dereference($t0)));

    // write_ref($t2, $t1) at ./sources/object_basics.move:41:9+15
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).value (u64)]($t2) at ./sources/object_basics.move:41:9+15
    $t0 := $UpdateMutation($t0, $Update'$2_object_basics_Object'_value($Dereference($t0), $Dereference($t2)));

    // trace_local[o]($t0) at ./sources/object_basics.move:41:9+15
    $temp_0'$2_object_basics_Object' := $Dereference($t0);
    assume {:print "$track_local(32,3,0):", $temp_0'$2_object_basics_Object'} $temp_0'$2_object_basics_Object' == $temp_0'$2_object_basics_Object';

    // trace_local[o]($t0) at ./sources/object_basics.move:41:24+1
    $temp_0'$2_object_basics_Object' := $Dereference($t0);
    assume {:print "$track_local(32,3,0):", $temp_0'$2_object_basics_Object'} $temp_0'$2_object_basics_Object' == $temp_0'$2_object_basics_Object';

    // label L1 at ./sources/object_basics.move:42:5+1
    assume {:print "$at(44,1016,1017)"} true;
L1:

    // return () at ./sources/object_basics.move:42:5+1
    $ret0 := $t0;
    return;

}

// fun object_basics::unwrap [verification] at ./sources/object_basics.move:60:5+182
procedure {:timeLimit 40} $2_object_basics_unwrap$verify(_$t0: $2_object_basics_Wrapper, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: $2_object_basics_Object;
    var $t4: $2_object_UID;
    var $t5: $2_object_basics_Object;
    var $t6: int;
    var $t7: $2_tx_context_TxContext;
    var $t8: int;
    var $t0: $2_object_basics_Wrapper;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_object_UID': $2_object_UID;
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    var $temp_0'$2_object_basics_Wrapper': $2_object_basics_Wrapper;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:60:5+1
    assume {:print "$at(44,1561,1562)"} true;
    assume $IsValid'$2_object_basics_Wrapper'($t0);

    // assume WellFormed($t1) at ./sources/object_basics.move:60:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[w]($t0) at ./sources/object_basics.move:60:5+1
    assume {:print "$track_local(32,5,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/object_basics.move:60:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(32,5,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // ($t4, $t5) := unpack object_basics::Wrapper($t0) at ./sources/object_basics.move:61:13+17
    assume {:print "$at(44,1632,1649)"} true;
    $t4 := $id#$2_object_basics_Wrapper($t0);
    $t5 := $o#$2_object_basics_Wrapper($t0);

    // trace_local[o]($t5) at ./sources/object_basics.move:61:27+1
    assume {:print "$track_local(32,5,3):", $t5} $t5 == $t5;

    // trace_local[id]($t4) at ./sources/object_basics.move:61:23+2
    assume {:print "$track_local(32,5,2):", $t4} $t4 == $t4;

    // object::delete($t4) on_abort goto L2 with $t6 at ./sources/object_basics.move:62:9+18
    assume {:print "$at(44,1663,1681)"} true;
    call $2_object_delete($t4);
    if ($abort_flag) {
        assume {:print "$at(44,1663,1681)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,5):", $t6} $t6 == $t6;
        goto L2;
    }

    // $t7 := read_ref($t1) at ./sources/object_basics.move:63:50+3
    assume {:print "$at(44,1732,1735)"} true;
    $t7 := $Dereference($t1);

    // $t8 := tx_context::sender($t7) on_abort goto L2 with $t6 at ./sources/object_basics.move:63:31+23
    call $t8 := $2_tx_context_sender($t7);
    if ($abort_flag) {
        assume {:print "$at(44,1713,1736)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,5):", $t6} $t6 == $t6;
        goto L2;
    }

    // transfer::transfer<object_basics::Object>($t5, $t8) on_abort goto L2 with $t6 at ./sources/object_basics.move:63:9+46
    call $2_transfer_transfer'$2_object_basics_Object'($t5, $t8);
    if ($abort_flag) {
        assume {:print "$at(44,1691,1737)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,5):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/object_basics.move:63:9+46
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(32,5,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/object_basics.move:64:5+1
    assume {:print "$at(44,1742,1743)"} true;
L1:

    // return () at ./sources/object_basics.move:64:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/object_basics.move:64:5+1
L2:

    // abort($t6) at ./sources/object_basics.move:64:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun object_basics::wrap [verification] at ./sources/object_basics.move:56:5+150
procedure {:timeLimit 40} $2_object_basics_wrap$verify(_$t0: $2_object_basics_Object, _$t1: $Mutation ($2_tx_context_TxContext)) returns ($ret0: $Mutation ($2_tx_context_TxContext))
{
    // declare local variables
    var $t2: $2_object_UID;
    var $t3: int;
    var $t4: $2_object_basics_Wrapper;
    var $t5: $2_tx_context_TxContext;
    var $t6: int;
    var $t0: $2_object_basics_Object;
    var $t1: $Mutation ($2_tx_context_TxContext);
    var $temp_0'$2_object_basics_Object': $2_object_basics_Object;
    var $temp_0'$2_tx_context_TxContext': $2_tx_context_TxContext;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/object_basics.move:56:5+1
    assume {:print "$at(44,1405,1406)"} true;
    assume $IsValid'$2_object_basics_Object'($t0);

    // assume WellFormed($t1) at ./sources/object_basics.move:56:5+1
    assume $IsValid'$2_tx_context_TxContext'($Dereference($t1));

    // trace_local[o]($t0) at ./sources/object_basics.move:56:5+1
    assume {:print "$track_local(32,7,0):", $t0} $t0 == $t0;

    // trace_local[ctx]($t1) at ./sources/object_basics.move:56:5+1
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(32,7,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // $t2 := object::new($t1) on_abort goto L2 with $t3 at ./sources/object_basics.move:57:42+16
    assume {:print "$at(44,1502,1518)"} true;
    call $t2,$t1 := $2_object_new($t1);
    if ($abort_flag) {
        assume {:print "$at(44,1502,1518)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(32,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := pack object_basics::Wrapper($t2, $t0) at ./sources/object_basics.move:57:28+35
    $t4 := $2_object_basics_Wrapper($t2, $t0);

    // $t5 := read_ref($t1) at ./sources/object_basics.move:57:84+3
    $t5 := $Dereference($t1);

    // $t6 := tx_context::sender($t5) on_abort goto L2 with $t3 at ./sources/object_basics.move:57:65+23
    call $t6 := $2_tx_context_sender($t5);
    if ($abort_flag) {
        assume {:print "$at(44,1525,1548)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(32,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // transfer::transfer<object_basics::Wrapper>($t4, $t6) on_abort goto L2 with $t3 at ./sources/object_basics.move:57:9+80
    call $2_transfer_transfer'$2_object_basics_Wrapper'($t4, $t6);
    if ($abort_flag) {
        assume {:print "$at(44,1469,1549)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(32,7):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_local[ctx]($t1) at ./sources/object_basics.move:57:9+80
    $temp_0'$2_tx_context_TxContext' := $Dereference($t1);
    assume {:print "$track_local(32,7,1):", $temp_0'$2_tx_context_TxContext'} $temp_0'$2_tx_context_TxContext' == $temp_0'$2_tx_context_TxContext';

    // label L1 at ./sources/object_basics.move:58:5+1
    assume {:print "$at(44,1554,1555)"} true;
L1:

    // return () at ./sources/object_basics.move:58:5+1
    $ret0 := $t1;
    return;

    // label L2 at ./sources/object_basics.move:58:5+1
L2:

    // abort($t3) at ./sources/object_basics.move:58:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// struct vec_map::Entry<#0, #1> at ./sources/vec_map.move:31:5+88
type {:datatype} $2_vec_map_Entry'#0_#1';
function {:constructor} $2_vec_map_Entry'#0_#1'($key: #0, $value: #1): $2_vec_map_Entry'#0_#1';
function {:inline} $Update'$2_vec_map_Entry'#0_#1''_key(s: $2_vec_map_Entry'#0_#1', x: #0): $2_vec_map_Entry'#0_#1' {
    $2_vec_map_Entry'#0_#1'(x, $value#$2_vec_map_Entry'#0_#1'(s))
}
function {:inline} $Update'$2_vec_map_Entry'#0_#1''_value(s: $2_vec_map_Entry'#0_#1', x: #1): $2_vec_map_Entry'#0_#1' {
    $2_vec_map_Entry'#0_#1'($key#$2_vec_map_Entry'#0_#1'(s), x)
}
function $IsValid'$2_vec_map_Entry'#0_#1''(s: $2_vec_map_Entry'#0_#1'): bool {
    $IsValid'#0'($key#$2_vec_map_Entry'#0_#1'(s))
      && $IsValid'#1'($value#$2_vec_map_Entry'#0_#1'(s))
}
function {:inline} $IsEqual'$2_vec_map_Entry'#0_#1''(s1: $2_vec_map_Entry'#0_#1', s2: $2_vec_map_Entry'#0_#1'): bool {
    s1 == s2
}

// struct vec_map::VecMap<#0, #1> at ./sources/vec_map.move:26:5+94
type {:datatype} $2_vec_map_VecMap'#0_#1';
function {:constructor} $2_vec_map_VecMap'#0_#1'($contents: Vec ($2_vec_map_Entry'#0_#1')): $2_vec_map_VecMap'#0_#1';
function {:inline} $Update'$2_vec_map_VecMap'#0_#1''_contents(s: $2_vec_map_VecMap'#0_#1', x: Vec ($2_vec_map_Entry'#0_#1')): $2_vec_map_VecMap'#0_#1' {
    $2_vec_map_VecMap'#0_#1'(x)
}
function $IsValid'$2_vec_map_VecMap'#0_#1''(s: $2_vec_map_VecMap'#0_#1'): bool {
    $IsValid'vec'$2_vec_map_Entry'#0_#1'''($contents#$2_vec_map_VecMap'#0_#1'(s))
}
function {:inline} $IsEqual'$2_vec_map_VecMap'#0_#1''(s1: $2_vec_map_VecMap'#0_#1', s2: $2_vec_map_VecMap'#0_#1'): bool {
    $IsEqual'vec'$2_vec_map_Entry'#0_#1'''($contents#$2_vec_map_VecMap'#0_#1'(s1), $contents#$2_vec_map_VecMap'#0_#1'(s2))}

// fun vec_map::contains<#0, #1> [baseline] at ./sources/vec_map.move:72:5+124
procedure {:inline 1} $2_vec_map_contains'#0_#1'(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_map.move:72:5+1
    assume {:print "$at(5,2760,2761)"} true;
    assume {:print "$track_local(33,0,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:72:5+1
    assume {:print "$track_local(33,0,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L2 with $t4 at ./sources/vec_map.move:73:26+22
    assume {:print "$at(5,2855,2877)"} true;
    call $t3 := $2_vec_map_get_idx_opt'#0_#1'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,2855,2877)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_map.move:73:9+40

    // assume WellFormed($t5) at ./sources/vec_map.move:73:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_map.move:73:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_map.move:73:9+40

    // trace_return[0]($t5) at ./sources/vec_map.move:73:9+40
    assume {:print "$track_return(33,0,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/vec_map.move:74:5+1
    assume {:print "$at(5,2883,2884)"} true;
L1:

    // return $t5 at ./sources/vec_map.move:74:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/vec_map.move:74:5+1
L2:

    // abort($t4) at ./sources/vec_map.move:74:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::contains [verification] at ./sources/vec_map.move:72:5+124
procedure {:timeLimit 40} $2_vec_map_contains$verify(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: bool)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:72:5+1
    assume {:print "$at(5,2760,2761)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // assume WellFormed($t1) at ./sources/vec_map.move:72:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:72:5+1
    assume {:print "$track_local(33,0,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:72:5+1
    assume {:print "$track_local(33,0,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L2 with $t4 at ./sources/vec_map.move:73:26+22
    assume {:print "$at(5,2855,2877)"} true;
    call $t3 := $2_vec_map_get_idx_opt'#0_#1'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,2855,2877)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,0):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_map.move:73:9+40

    // assume WellFormed($t5) at ./sources/vec_map.move:73:9+40
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_map.move:73:9+40
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_map.move:73:9+40

    // trace_return[0]($t5) at ./sources/vec_map.move:73:9+40
    assume {:print "$track_return(33,0,0):", $t5} $t5 == $t5;

    // label L1 at ./sources/vec_map.move:74:5+1
    assume {:print "$at(5,2883,2884)"} true;
L1:

    // return $t5 at ./sources/vec_map.move:74:5+1
    $ret0 := $t5;
    return;

    // label L2 at ./sources/vec_map.move:74:5+1
L2:

    // abort($t4) at ./sources/vec_map.move:74:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::destroy_empty [verification] at ./sources/vec_map.move:87:5+204
procedure {:timeLimit 40} $2_vec_map_destroy_empty$verify(_$t0: $2_vec_map_VecMap'#0_#1') returns ()
{
    // declare local variables
    var $t1: Vec ($2_vec_map_Entry'#0_#1');
    var $t2: Vec ($2_vec_map_Entry'#0_#1');
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'vec'$2_vec_map_Entry'#0_#1''': Vec ($2_vec_map_Entry'#0_#1');
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:87:5+1
    assume {:print "$at(5,3262,3263)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // trace_local[self]($t0) at ./sources/vec_map.move:87:5+1
    assume {:print "$track_local(33,1,0):", $t0} $t0 == $t0;

    // $t2 := unpack vec_map::VecMap<#0, #1>($t0) at ./sources/vec_map.move:88:13+19
    assume {:print "$at(5,3333,3352)"} true;
    $t2 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // trace_local[contents]($t2) at ./sources/vec_map.move:88:22+8
    assume {:print "$track_local(33,1,1):", $t2} $t2 == $t2;

    // $t3 := vector::is_empty<vec_map::Entry<#0, #1>>($t2) on_abort goto L3 with $t4 at ./sources/vec_map.move:89:17+27
    assume {:print "$at(5,3377,3404)"} true;
    call $t3 := $1_vector_is_empty'$2_vec_map_Entry'#0_#1''($t2);
    if ($abort_flag) {
        assume {:print "$at(5,3377,3404)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // if ($t3) goto L0 else goto L1 at ./sources/vec_map.move:89:9+50
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_map.move:89:46+12
L1:

    // $t5 := 2 at ./sources/vec_map.move:89:46+12
    $t5 := 2;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at ./sources/vec_map.move:89:9+50
    assume {:print "$at(5,3369,3419)"} true;
    assume {:print "$track_abort(33,1):", $t5} $t5 == $t5;

    // $t4 := move($t5) at ./sources/vec_map.move:89:9+50
    $t4 := $t5;

    // goto L3 at ./sources/vec_map.move:89:9+50
    goto L3;

    // label L0 at ./sources/vec_map.move:90:31+8
    assume {:print "$at(5,3451,3459)"} true;
L0:

    // vector::destroy_empty<vec_map::Entry<#0, #1>>($t2) on_abort goto L3 with $t4 at ./sources/vec_map.move:90:9+31
    call $1_vector_destroy_empty'$2_vec_map_Entry'#0_#1''($t2);
    if ($abort_flag) {
        assume {:print "$at(5,3429,3460)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // label L2 at ./sources/vec_map.move:91:5+1
    assume {:print "$at(5,3465,3466)"} true;
L2:

    // return () at ./sources/vec_map.move:91:5+1
    return;

    // label L3 at ./sources/vec_map.move:91:5+1
L3:

    // abort($t4) at ./sources/vec_map.move:91:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::empty [verification] at ./sources/vec_map.move:37:5+96
procedure {:timeLimit 40} $2_vec_map_empty$verify() returns ($ret0: $2_vec_map_VecMap'#0_#1')
{
    // declare local variables
    var $t0: Vec ($2_vec_map_Entry'#0_#1');
    var $t1: int;
    var $t2: $2_vec_map_VecMap'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := vector::empty<vec_map::Entry<#0, #1>>() on_abort goto L2 with $t1 at ./sources/vec_map.move:38:28+15
    assume {:print "$at(5,1393,1408)"} true;
    call $t0 := $1_vector_empty'$2_vec_map_Entry'#0_#1''();
    if ($abort_flag) {
        assume {:print "$at(5,1393,1408)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(33,2):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack vec_map::VecMap<#0, #1>($t0) at ./sources/vec_map.move:38:9+36
    $t2 := $2_vec_map_VecMap'#0_#1'($t0);

    // trace_return[0]($t2) at ./sources/vec_map.move:38:9+36
    assume {:print "$track_return(33,2,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_map.move:39:5+1
    assume {:print "$at(5,1415,1416)"} true;
L1:

    // return $t2 at ./sources/vec_map.move:39:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_map.move:39:5+1
L2:

    // abort($t1) at ./sources/vec_map.move:39:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun vec_map::is_empty [verification] at ./sources/vec_map.move:82:5+89
procedure {:timeLimit 40} $2_vec_map_is_empty$verify(_$t0: $2_vec_map_VecMap'#0_#1') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:82:5+1
    assume {:print "$at(5,3104,3105)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // trace_local[self]($t0) at ./sources/vec_map.move:82:5+1
    assume {:print "$track_local(33,11,0):", $t0} $t0 == $t0;

    // $t1 := vec_map::size<#0, #1>($t0) on_abort goto L2 with $t2 at ./sources/vec_map.move:83:9+10
    assume {:print "$at(5,3172,3182)"} true;
    call $t1 := $2_vec_map_size'#0_#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(5,3172,3182)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(33,11):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := 0 at ./sources/vec_map.move:83:23+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := ==($t1, $t3) at ./sources/vec_map.move:83:20+2
    $t4 := $IsEqual'u64'($t1, $t3);

    // trace_return[0]($t4) at ./sources/vec_map.move:83:9+15
    assume {:print "$track_return(33,11,0):", $t4} $t4 == $t4;

    // label L1 at ./sources/vec_map.move:84:5+1
    assume {:print "$at(5,3192,3193)"} true;
L1:

    // return $t4 at ./sources/vec_map.move:84:5+1
    $ret0 := $t4;
    return;

    // label L2 at ./sources/vec_map.move:84:5+1
L2:

    // abort($t2) at ./sources/vec_map.move:84:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun vec_map::remove [verification] at ./sources/vec_map.move:49:5+213
procedure {:timeLimit 40} $2_vec_map_remove$verify(_$t0: $Mutation ($2_vec_map_VecMap'#0_#1'), _$t1: #0) returns ($ret0: #0, $ret1: #1, $ret2: $Mutation ($2_vec_map_VecMap'#0_#1'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t3: #0;
    var $t4: int;
    var $t5: #0;
    var $t6: #1;
    var $t7: $2_vec_map_VecMap'#0_#1';
    var $t8: int;
    var $t9: int;
    var $t10: $Mutation (Vec ($2_vec_map_Entry'#0_#1'));
    var $t11: $2_vec_map_Entry'#0_#1';
    var $t12: #0;
    var $t13: #1;
    var $t0: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t10));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:49:5+1
    assume {:print "$at(5,1834,1835)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/vec_map.move:49:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:49:5+1
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,12,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[key]($t1) at ./sources/vec_map.move:49:5+1
    assume {:print "$track_local(33,12,1):", $t1} $t1 == $t1;

    // $t7 := read_ref($t0) at ./sources/vec_map.move:50:26+11
    assume {:print "$at(5,1932,1943)"} true;
    $t7 := $Dereference($t0);

    // $t8 := vec_map::get_idx<#0, #1>($t7, $t1) on_abort goto L2 with $t9 at ./sources/vec_map.move:50:19+18
    call $t8 := $2_vec_map_get_idx'#0_#1'($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,1925,1943)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[idx]($t8) at ./sources/vec_map.move:50:13+3
    assume {:print "$track_local(33,12,4):", $t8} $t8 == $t8;

    // $t10 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:51:51+18
    assume {:print "$at(5,1995,2013)"} true;
    $t10 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'#0_#1'($Dereference($t0)));

    // $t11 := vector::remove<vec_map::Entry<#0, #1>>($t10, $t8) on_abort goto L2 with $t9 at ./sources/vec_map.move:51:36+39
    call $t11,$t10 := $1_vector_remove'$2_vec_map_Entry'#0_#1''($t10, $t8);
    if ($abort_flag) {
        assume {:print "$at(5,1980,2019)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[Reference($t0).contents (vector<vec_map::Entry<#0, #1>>)]($t10) at ./sources/vec_map.move:51:36+39
    $t0 := $UpdateMutation($t0, $Update'$2_vec_map_VecMap'#0_#1''_contents($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/vec_map.move:51:36+39
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,12,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // ($t12, $t13) := unpack vec_map::Entry<#0, #1>($t11) at ./sources/vec_map.move:51:13+20
    $t12 := $key#$2_vec_map_Entry'#0_#1'($t11);
    $t13 := $value#$2_vec_map_Entry'#0_#1'($t11);

    // trace_local[value]($t13) at ./sources/vec_map.move:51:26+5
    assume {:print "$track_local(33,12,6):", $t13} $t13 == $t13;

    // trace_local[key#3]($t12) at ./sources/vec_map.move:51:21+3
    assume {:print "$track_local(33,12,5):", $t12} $t12 == $t12;

    // trace_return[0]($t12) at ./sources/vec_map.move:52:9+12
    assume {:print "$at(5,2029,2041)"} true;
    assume {:print "$track_return(33,12,0):", $t12} $t12 == $t12;

    // trace_return[1]($t13) at ./sources/vec_map.move:52:9+12
    assume {:print "$track_return(33,12,1):", $t13} $t13 == $t13;

    // trace_local[self]($t0) at ./sources/vec_map.move:52:9+12
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,12,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // label L1 at ./sources/vec_map.move:53:5+1
    assume {:print "$at(5,2046,2047)"} true;
L1:

    // return ($t12, $t13) at ./sources/vec_map.move:53:5+1
    $ret0 := $t12;
    $ret1 := $t13;
    $ret2 := $t0;
    return;

    // label L2 at ./sources/vec_map.move:53:5+1
L2:

    // abort($t9) at ./sources/vec_map.move:53:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx<#0, #1> [baseline] at ./sources/vec_map.move:129:5+218
procedure {:inline 1} $2_vec_map_get_idx'#0_#1'(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_map.move:129:5+1
    assume {:print "$at(5,4974,4975)"} true;
    assume {:print "$track_local(33,6,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:129:5+1
    assume {:print "$track_local(33,6,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L3 with $t4 at ./sources/vec_map.move:130:23+22
    assume {:print "$at(5,5063,5085)"} true;
    call $t3 := $2_vec_map_get_idx_opt'#0_#1'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,5063,5085)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[idx_opt]($t3) at ./sources/vec_map.move:130:13+7
    assume {:print "$track_local(33,6,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_map.move:131:17+25
    assume {:print "$at(5,5103,5128)"} true;

    // assume WellFormed($t5) at ./sources/vec_map.move:131:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_map.move:131:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_map.move:131:17+25

    // if ($t5) goto L0 else goto L1 at ./sources/vec_map.move:131:9+52
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_map.move:131:44+16
L1:

    // $t6 := 1 at ./sources/vec_map.move:131:44+16
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/vec_map.move:131:9+52
    assume {:print "$at(5,5095,5147)"} true;
    assume {:print "$track_abort(33,6):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/vec_map.move:131:9+52
    $t4 := $t6;

    // goto L3 at ./sources/vec_map.move:131:9+52
    goto L3;

    // label L0 at ./sources/vec_map.move:132:30+7
    assume {:print "$at(5,5178,5185)"} true;
L0:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./sources/vec_map.move:132:9+29

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./sources/vec_map.move:132:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L5 else goto L4 at ./sources/vec_map.move:132:9+29
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./sources/vec_map.move:132:9+29
L5:

    // assume And(option::$is_none<u64>($t3), Eq(7, $t4)) at ./sources/vec_map.move:132:9+29
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/vec_map.move:132:9+29
    assume {:print "$at(5,5157,5186)"} true;
    assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;

    // goto L3 at ./sources/vec_map.move:132:9+29
    goto L3;

    // label L4 at ./sources/vec_map.move:132:9+29
L4:

    // assume WellFormed($t7) at ./sources/vec_map.move:132:9+29
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./sources/vec_map.move:132:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./sources/vec_map.move:132:9+29

    // trace_return[0]($t7) at ./sources/vec_map.move:132:9+29
    assume {:print "$track_return(33,6,0):", $t7} $t7 == $t7;

    // label L2 at ./sources/vec_map.move:133:5+1
    assume {:print "$at(5,5191,5192)"} true;
L2:

    // return $t7 at ./sources/vec_map.move:133:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./sources/vec_map.move:133:5+1
L3:

    // abort($t4) at ./sources/vec_map.move:133:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx [verification] at ./sources/vec_map.move:129:5+218
procedure {:timeLimit 40} $2_vec_map_get_idx$verify(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: int)
{
    // declare local variables
    var $t2: $1_option_Option'u64';
    var $t3: $1_option_Option'u64';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:129:5+1
    assume {:print "$at(5,4974,4975)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // assume WellFormed($t1) at ./sources/vec_map.move:129:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:129:5+1
    assume {:print "$track_local(33,6,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:129:5+1
    assume {:print "$track_local(33,6,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::get_idx_opt<#0, #1>($t0, $t1) on_abort goto L3 with $t4 at ./sources/vec_map.move:130:23+22
    assume {:print "$at(5,5063,5085)"} true;
    call $t3 := $2_vec_map_get_idx_opt'#0_#1'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,5063,5085)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[idx_opt]($t3) at ./sources/vec_map.move:130:13+7
    assume {:print "$track_local(33,6,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: option::is_some<u64>($t3) at ./sources/vec_map.move:131:17+25
    assume {:print "$at(5,5103,5128)"} true;

    // assume WellFormed($t5) at ./sources/vec_map.move:131:17+25
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::$is_some<u64>($t3)) at ./sources/vec_map.move:131:17+25
    assume $IsEqual'bool'($t5, $1_option_$is_some'u64'($t3));

    // $t5 := opaque end: option::is_some<u64>($t3) at ./sources/vec_map.move:131:17+25

    // if ($t5) goto L0 else goto L1 at ./sources/vec_map.move:131:9+52
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_map.move:131:44+16
L1:

    // $t6 := 1 at ./sources/vec_map.move:131:44+16
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/vec_map.move:131:9+52
    assume {:print "$at(5,5095,5147)"} true;
    assume {:print "$track_abort(33,6):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/vec_map.move:131:9+52
    $t4 := $t6;

    // goto L3 at ./sources/vec_map.move:131:9+52
    goto L3;

    // label L0 at ./sources/vec_map.move:132:30+7
    assume {:print "$at(5,5178,5185)"} true;
L0:

    // $t7 := opaque begin: option::destroy_some<u64>($t3) at ./sources/vec_map.move:132:9+29

    // assume Identical($t8, option::$is_none<u64>($t3)) at ./sources/vec_map.move:132:9+29
    assume ($t8 == $1_option_$is_none'u64'($t3));

    // if ($t8) goto L5 else goto L4 at ./sources/vec_map.move:132:9+29
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at ./sources/vec_map.move:132:9+29
L5:

    // assume And(option::$is_none<u64>($t3), Eq(7, $t4)) at ./sources/vec_map.move:132:9+29
    assume ($1_option_$is_none'u64'($t3) && $IsEqual'num'(7, $t4));

    // trace_abort($t4) at ./sources/vec_map.move:132:9+29
    assume {:print "$at(5,5157,5186)"} true;
    assume {:print "$track_abort(33,6):", $t4} $t4 == $t4;

    // goto L3 at ./sources/vec_map.move:132:9+29
    goto L3;

    // label L4 at ./sources/vec_map.move:132:9+29
L4:

    // assume WellFormed($t7) at ./sources/vec_map.move:132:9+29
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::$borrow<u64>($t3)) at ./sources/vec_map.move:132:9+29
    assume $IsEqual'u64'($t7, $1_option_$borrow'u64'($t3));

    // $t7 := opaque end: option::destroy_some<u64>($t3) at ./sources/vec_map.move:132:9+29

    // trace_return[0]($t7) at ./sources/vec_map.move:132:9+29
    assume {:print "$track_return(33,6,0):", $t7} $t7 == $t7;

    // label L2 at ./sources/vec_map.move:133:5+1
    assume {:print "$at(5,5191,5192)"} true;
L2:

    // return $t7 at ./sources/vec_map.move:133:5+1
    $ret0 := $t7;
    return;

    // label L3 at ./sources/vec_map.move:133:5+1
L3:

    // abort($t4) at ./sources/vec_map.move:133:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx_opt<#0, #1> [baseline] at ./sources/vec_map.move:115:5+331
procedure {:inline 1} $2_vec_map_get_idx_opt'#0_#1'(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec ($2_vec_map_Entry'#0_#1');
    var $t9: $2_vec_map_Entry'#0_#1';
    var $t10: #0;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t16: $1_option_Option'u64';
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_map.move:115:5+1
    assume {:print "$at(5,4479,4480)"} true;
    assume {:print "$track_local(33,7,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:115:5+1
    assume {:print "$track_local(33,7,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./sources/vec_map.move:116:17+1
    assume {:print "$at(5,4574,4575)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at ./sources/vec_map.move:116:13+1
    assume {:print "$track_local(33,7,2):", $t4} $t4 == $t4;

    // $t5 := vec_map::size<#0, #1>($t0) on_abort goto L9 with $t6 at ./sources/vec_map.move:117:17+10
    assume {:print "$at(5,4593,4603)"} true;
    call $t5 := $2_vec_map_size'#0_#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(5,4593,4603)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(33,7):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[n]($t5) at ./sources/vec_map.move:117:13+1
    assume {:print "$track_local(33,7,3):", $t5} $t5 == $t5;

    // label L6 at ./sources/vec_map.move:118:16+1
    assume {:print "$at(5,4620,4621)"} true;
L6:

    // havoc[val]($t4) at ./sources/vec_map.move:118:16+1
    havoc $t4;
    assume $IsValid'u64'($t4);

    // havoc[val]($t7) at ./sources/vec_map.move:118:16+1
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/vec_map.move:118:16+1
    havoc $t8;
    assume $IsValid'vec'$2_vec_map_Entry'#0_#1'''($t8);

    // havoc[val]($t9) at ./sources/vec_map.move:118:16+1
    havoc $t9;
    assume $IsValid'$2_vec_map_Entry'#0_#1''($t9);

    // havoc[val]($t10) at ./sources/vec_map.move:118:16+1
    havoc $t10;
    assume $IsValid'#0'($t10);

    // havoc[val]($t11) at ./sources/vec_map.move:118:16+1
    havoc $t11;
    assume $IsValid'bool'($t11);

    // havoc[val]($t12) at ./sources/vec_map.move:118:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t13) at ./sources/vec_map.move:118:16+1
    havoc $t13;
    assume $IsValid'u64'($t13);

    // trace_local[i]($t4) at ./sources/vec_map.move:118:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(33,7,2):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/vec_map.move:118:16+1
    assume !$abort_flag;

    // $t7 := <($t4, $t5) at ./sources/vec_map.move:118:18+1
    call $t7 := $Lt($t4, $t5);

    // if ($t7) goto L0 else goto L2 at ./sources/vec_map.move:118:9+167
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/vec_map.move:119:34+4
    assume {:print "$at(5,4662,4666)"} true;
L0:

    // $t8 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:119:33+14
    $t8 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // $t9 := vector::borrow<vec_map::Entry<#0, #1>>($t8, $t4) on_abort goto L9 with $t6 at ./sources/vec_map.move:119:18+33
    call $t9 := $1_vector_borrow'$2_vec_map_Entry'#0_#1''($t8, $t4);
    if ($abort_flag) {
        assume {:print "$at(5,4646,4679)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(33,7):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t10 := get_field<vec_map::Entry<#0, #1>>.key($t9) at ./sources/vec_map.move:119:17+38
    $t10 := $key#$2_vec_map_Entry'#0_#1'($t9);

    // $t11 := ==($t10, $t1) at ./sources/vec_map.move:119:56+2
    $t11 := $IsEqual'#0'($t10, $t1);

    // if ($t11) goto L3 else goto L5 at ./sources/vec_map.move:119:13+105
    if ($t11) { goto L3; } else { goto L5; }

    // label L3 at ./sources/vec_map.move:120:17+22
    assume {:print "$at(5,4710,4732)"} true;
L3:

    // destroy($t0) at ./sources/vec_map.move:120:17+22

    // destroy($t1) at ./sources/vec_map.move:120:17+22

    // $t14 := opaque begin: option::some<u64>($t4) at ./sources/vec_map.move:120:24+15

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec($t14)), 1)) at ./sources/vec_map.move:120:24+15
    assume ($IsValid'$1_option_Option'u64''($t14) && (LenVec($vec#$1_option_Option'u64'($t14)) <= 1));

    // assume Eq<option::Option<u64>>($t14, option::spec_some<u64>($t4)) at ./sources/vec_map.move:120:24+15
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_some'u64'($t4));

    // $t14 := opaque end: option::some<u64>($t4) at ./sources/vec_map.move:120:24+15

    // trace_return[0]($t14) at ./sources/vec_map.move:120:17+22
    assume {:print "$track_return(33,7,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at ./sources/vec_map.move:120:17+22
    $t15 := $t14;

    // goto L8 at ./sources/vec_map.move:120:17+22
    goto L8;

    // label L5 at ./sources/vec_map.move:122:17+1
    assume {:print "$at(5,4764,4765)"} true;
L5:

    // $t12 := 1 at ./sources/vec_map.move:122:21+1
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t4, $t12) on_abort goto L9 with $t6 at ./sources/vec_map.move:122:19+1
    call $t13 := $AddU64($t4, $t12);
    if ($abort_flag) {
        assume {:print "$at(5,4766,4767)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(33,7):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t13) at ./sources/vec_map.move:122:13+1
    assume {:print "$track_local(33,7,2):", $t13} $t13 == $t13;

    // goto L7 at ./sources/vec_map.move:122:22+1
    goto L7;

    // label L2 at ./sources/vec_map.move:124:9+14
    assume {:print "$at(5,4790,4804)"} true;
L2:

    // destroy($t0) at ./sources/vec_map.move:124:9+14

    // destroy($t1) at ./sources/vec_map.move:124:9+14

    // $t16 := opaque begin: option::none<u64>() at ./sources/vec_map.move:124:9+14

    // assume And(WellFormed($t16), Le(Len<u64>(select option::Option.vec($t16)), 1)) at ./sources/vec_map.move:124:9+14
    assume ($IsValid'$1_option_Option'u64''($t16) && (LenVec($vec#$1_option_Option'u64'($t16)) <= 1));

    // assume Eq<option::Option<u64>>($t16, option::spec_none<u64>()) at ./sources/vec_map.move:124:9+14
    assume $IsEqual'$1_option_Option'u64''($t16, $1_option_spec_none'u64'());

    // $t16 := opaque end: option::none<u64>() at ./sources/vec_map.move:124:9+14

    // trace_return[0]($t16) at ./sources/vec_map.move:124:9+14
    assume {:print "$track_return(33,7,0):", $t16} $t16 == $t16;

    // $t15 := move($t16) at ./sources/vec_map.move:124:9+14
    $t15 := $t16;

    // goto L8 at ./sources/vec_map.move:124:9+14
    goto L8;

    // label L7 at ./sources/vec_map.move:124:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/vec_map.move:124:9+14
    assume false;
    return;

    // label L8 at ./sources/vec_map.move:125:5+1
    assume {:print "$at(5,4809,4810)"} true;
L8:

    // return $t15 at ./sources/vec_map.move:125:5+1
    $ret0 := $t15;
    return;

    // label L9 at ./sources/vec_map.move:125:5+1
L9:

    // abort($t6) at ./sources/vec_map.move:125:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::get_idx_opt [verification] at ./sources/vec_map.move:115:5+331
procedure {:timeLimit 40} $2_vec_map_get_idx_opt$verify(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: $1_option_Option'u64')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: Vec ($2_vec_map_Entry'#0_#1');
    var $t9: $2_vec_map_Entry'#0_#1';
    var $t10: #0;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: $1_option_Option'u64';
    var $t15: $1_option_Option'u64';
    var $t16: $1_option_Option'u64';
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'$1_option_Option'u64'': $1_option_Option'u64';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:115:5+1
    assume {:print "$at(5,4479,4480)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // assume WellFormed($t1) at ./sources/vec_map.move:115:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:115:5+1
    assume {:print "$track_local(33,7,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:115:5+1
    assume {:print "$track_local(33,7,1):", $t1} $t1 == $t1;

    // $t4 := 0 at ./sources/vec_map.move:116:17+1
    assume {:print "$at(5,4574,4575)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at ./sources/vec_map.move:116:13+1
    assume {:print "$track_local(33,7,2):", $t4} $t4 == $t4;

    // $t5 := vec_map::size<#0, #1>($t0) on_abort goto L9 with $t6 at ./sources/vec_map.move:117:17+10
    assume {:print "$at(5,4593,4603)"} true;
    call $t5 := $2_vec_map_size'#0_#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(5,4593,4603)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(33,7):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[n]($t5) at ./sources/vec_map.move:117:13+1
    assume {:print "$track_local(33,7,3):", $t5} $t5 == $t5;

    // label L6 at ./sources/vec_map.move:118:16+1
    assume {:print "$at(5,4620,4621)"} true;
L6:

    // havoc[val]($t4) at ./sources/vec_map.move:118:16+1
    havoc $t4;
    assume $IsValid'u64'($t4);

    // havoc[val]($t7) at ./sources/vec_map.move:118:16+1
    havoc $t7;
    assume $IsValid'bool'($t7);

    // havoc[val]($t8) at ./sources/vec_map.move:118:16+1
    havoc $t8;
    assume $IsValid'vec'$2_vec_map_Entry'#0_#1'''($t8);

    // havoc[val]($t9) at ./sources/vec_map.move:118:16+1
    havoc $t9;
    assume $IsValid'$2_vec_map_Entry'#0_#1''($t9);

    // havoc[val]($t10) at ./sources/vec_map.move:118:16+1
    havoc $t10;
    assume $IsValid'#0'($t10);

    // havoc[val]($t11) at ./sources/vec_map.move:118:16+1
    havoc $t11;
    assume $IsValid'bool'($t11);

    // havoc[val]($t12) at ./sources/vec_map.move:118:16+1
    havoc $t12;
    assume $IsValid'u64'($t12);

    // havoc[val]($t13) at ./sources/vec_map.move:118:16+1
    havoc $t13;
    assume $IsValid'u64'($t13);

    // trace_local[i]($t4) at ./sources/vec_map.move:118:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(33,7,2):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at ./sources/vec_map.move:118:16+1
    assume !$abort_flag;

    // $t7 := <($t4, $t5) at ./sources/vec_map.move:118:18+1
    call $t7 := $Lt($t4, $t5);

    // if ($t7) goto L0 else goto L2 at ./sources/vec_map.move:118:9+167
    if ($t7) { goto L0; } else { goto L2; }

    // label L0 at ./sources/vec_map.move:119:34+4
    assume {:print "$at(5,4662,4666)"} true;
L0:

    // $t8 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:119:33+14
    $t8 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // $t9 := vector::borrow<vec_map::Entry<#0, #1>>($t8, $t4) on_abort goto L9 with $t6 at ./sources/vec_map.move:119:18+33
    call $t9 := $1_vector_borrow'$2_vec_map_Entry'#0_#1''($t8, $t4);
    if ($abort_flag) {
        assume {:print "$at(5,4646,4679)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(33,7):", $t6} $t6 == $t6;
        goto L9;
    }

    // $t10 := get_field<vec_map::Entry<#0, #1>>.key($t9) at ./sources/vec_map.move:119:17+38
    $t10 := $key#$2_vec_map_Entry'#0_#1'($t9);

    // $t11 := ==($t10, $t1) at ./sources/vec_map.move:119:56+2
    $t11 := $IsEqual'#0'($t10, $t1);

    // if ($t11) goto L3 else goto L5 at ./sources/vec_map.move:119:13+105
    if ($t11) { goto L3; } else { goto L5; }

    // label L3 at ./sources/vec_map.move:120:17+22
    assume {:print "$at(5,4710,4732)"} true;
L3:

    // destroy($t0) at ./sources/vec_map.move:120:17+22

    // destroy($t1) at ./sources/vec_map.move:120:17+22

    // $t14 := opaque begin: option::some<u64>($t4) at ./sources/vec_map.move:120:24+15

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec($t14)), 1)) at ./sources/vec_map.move:120:24+15
    assume ($IsValid'$1_option_Option'u64''($t14) && (LenVec($vec#$1_option_Option'u64'($t14)) <= 1));

    // assume Eq<option::Option<u64>>($t14, option::spec_some<u64>($t4)) at ./sources/vec_map.move:120:24+15
    assume $IsEqual'$1_option_Option'u64''($t14, $1_option_spec_some'u64'($t4));

    // $t14 := opaque end: option::some<u64>($t4) at ./sources/vec_map.move:120:24+15

    // trace_return[0]($t14) at ./sources/vec_map.move:120:17+22
    assume {:print "$track_return(33,7,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at ./sources/vec_map.move:120:17+22
    $t15 := $t14;

    // goto L8 at ./sources/vec_map.move:120:17+22
    goto L8;

    // label L5 at ./sources/vec_map.move:122:17+1
    assume {:print "$at(5,4764,4765)"} true;
L5:

    // $t12 := 1 at ./sources/vec_map.move:122:21+1
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t4, $t12) on_abort goto L9 with $t6 at ./sources/vec_map.move:122:19+1
    call $t13 := $AddU64($t4, $t12);
    if ($abort_flag) {
        assume {:print "$at(5,4766,4767)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(33,7):", $t6} $t6 == $t6;
        goto L9;
    }

    // trace_local[i]($t13) at ./sources/vec_map.move:122:13+1
    assume {:print "$track_local(33,7,2):", $t13} $t13 == $t13;

    // goto L7 at ./sources/vec_map.move:122:22+1
    goto L7;

    // label L2 at ./sources/vec_map.move:124:9+14
    assume {:print "$at(5,4790,4804)"} true;
L2:

    // destroy($t0) at ./sources/vec_map.move:124:9+14

    // destroy($t1) at ./sources/vec_map.move:124:9+14

    // $t16 := opaque begin: option::none<u64>() at ./sources/vec_map.move:124:9+14

    // assume And(WellFormed($t16), Le(Len<u64>(select option::Option.vec($t16)), 1)) at ./sources/vec_map.move:124:9+14
    assume ($IsValid'$1_option_Option'u64''($t16) && (LenVec($vec#$1_option_Option'u64'($t16)) <= 1));

    // assume Eq<option::Option<u64>>($t16, option::spec_none<u64>()) at ./sources/vec_map.move:124:9+14
    assume $IsEqual'$1_option_Option'u64''($t16, $1_option_spec_none'u64'());

    // $t16 := opaque end: option::none<u64>() at ./sources/vec_map.move:124:9+14

    // trace_return[0]($t16) at ./sources/vec_map.move:124:9+14
    assume {:print "$track_return(33,7,0):", $t16} $t16 == $t16;

    // $t15 := move($t16) at ./sources/vec_map.move:124:9+14
    $t15 := $t16;

    // goto L8 at ./sources/vec_map.move:124:9+14
    goto L8;

    // label L7 at ./sources/vec_map.move:124:9+14
    // Loop invariant checking block for the loop started with header: L6
L7:

    // stop() at ./sources/vec_map.move:124:9+14
    assume false;
    return;

    // label L8 at ./sources/vec_map.move:125:5+1
    assume {:print "$at(5,4809,4810)"} true;
L8:

    // return $t15 at ./sources/vec_map.move:125:5+1
    $ret0 := $t15;
    return;

    // label L9 at ./sources/vec_map.move:125:5+1
L9:

    // abort($t6) at ./sources/vec_map.move:125:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun vec_map::insert [verification] at ./sources/vec_map.move:43:5+206
procedure {:timeLimit 40} $2_vec_map_insert$verify(_$t0: $Mutation ($2_vec_map_VecMap'#0_#1'), _$t1: #0, _$t2: #1) returns ($ret0: $Mutation ($2_vec_map_VecMap'#0_#1'))
{
    // declare local variables
    var $t3: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t4: #0;
    var $t5: $2_vec_map_VecMap'#0_#1';
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation (Vec ($2_vec_map_Entry'#0_#1'));
    var $t11: $2_vec_map_Entry'#0_#1';
    var $t0: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t1: #0;
    var $t2: #1;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t3));
    assume IsEmptyVec(p#$Mutation($t10));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:43:5+1
    assume {:print "$at(5,1528,1529)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/vec_map.move:43:5+1
    assume $IsValid'#0'($t1);

    // assume WellFormed($t2) at ./sources/vec_map.move:43:5+1
    assume $IsValid'#1'($t2);

    // trace_local[self]($t0) at ./sources/vec_map.move:43:5+1
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,9,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[key]($t1) at ./sources/vec_map.move:43:5+1
    assume {:print "$track_local(33,9,1):", $t1} $t1 == $t1;

    // trace_local[value]($t2) at ./sources/vec_map.move:43:5+1
    assume {:print "$track_local(33,9,2):", $t2} $t2 == $t2;

    // $t5 := read_ref($t0) at ./sources/vec_map.move:44:26+12
    assume {:print "$at(5,1627,1639)"} true;
    $t5 := $Dereference($t0);

    // $t6 := vec_map::contains<#0, #1>($t5, $t1) on_abort goto L3 with $t7 at ./sources/vec_map.move:44:18+20
    call $t6 := $2_vec_map_contains'#0_#1'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,1619,1639)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(33,9):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t8 := !($t6) at ./sources/vec_map.move:44:17+1
    call $t8 := $Not($t6);

    // if ($t8) goto L0 else goto L1 at ./sources/vec_map.move:44:9+49
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_map.move:44:9+49
L1:

    // destroy($t0) at ./sources/vec_map.move:44:9+49

    // $t9 := 0 at ./sources/vec_map.move:44:40+17
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at ./sources/vec_map.move:44:9+49
    assume {:print "$at(5,1610,1659)"} true;
    assume {:print "$track_abort(33,9):", $t9} $t9 == $t9;

    // $t7 := move($t9) at ./sources/vec_map.move:44:9+49
    $t7 := $t9;

    // goto L3 at ./sources/vec_map.move:44:9+49
    goto L3;

    // label L0 at ./sources/vec_map.move:45:32+4
    assume {:print "$at(5,1692,1696)"} true;
L0:

    // $t10 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:45:27+18
    $t10 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'#0_#1'($Dereference($t0)));

    // $t11 := pack vec_map::Entry<#0, #1>($t1, $t2) at ./sources/vec_map.move:45:47+20
    $t11 := $2_vec_map_Entry'#0_#1'($t1, $t2);

    // vector::push_back<vec_map::Entry<#0, #1>>($t10, $t11) on_abort goto L3 with $t7 at ./sources/vec_map.move:45:9+59
    call $t10 := $1_vector_push_back'$2_vec_map_Entry'#0_#1''($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(5,1669,1728)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(33,9):", $t7} $t7 == $t7;
        goto L3;
    }

    // write_back[Reference($t0).contents (vector<vec_map::Entry<#0, #1>>)]($t10) at ./sources/vec_map.move:45:9+59
    $t0 := $UpdateMutation($t0, $Update'$2_vec_map_VecMap'#0_#1''_contents($Dereference($t0), $Dereference($t10)));

    // trace_local[self]($t0) at ./sources/vec_map.move:45:9+59
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,9,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[self]($t0) at ./sources/vec_map.move:45:9+59
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,9,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // label L2 at ./sources/vec_map.move:46:5+1
    assume {:print "$at(5,1733,1734)"} true;
L2:

    // return () at ./sources/vec_map.move:46:5+1
    $ret0 := $t0;
    return;

    // label L3 at ./sources/vec_map.move:46:5+1
L3:

    // abort($t7) at ./sources/vec_map.move:46:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun vec_map::size<#0, #1> [baseline] at ./sources/vec_map.move:77:5+99
procedure {:inline 1} $2_vec_map_size'#0_#1'(_$t0: $2_vec_map_VecMap'#0_#1') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_vec_map_Entry'#0_#1');
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[self]($t0) at ./sources/vec_map.move:77:5+1
    assume {:print "$at(5,2937,2938)"} true;
    assume {:print "$track_local(33,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:78:24+14
    assume {:print "$at(5,3015,3029)"} true;
    $t1 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // $t2 := vector::length<vec_map::Entry<#0, #1>>($t1) on_abort goto L2 with $t3 at ./sources/vec_map.move:78:9+30
    call $t2 := $1_vector_length'$2_vec_map_Entry'#0_#1''($t1);
    if ($abort_flag) {
        assume {:print "$at(5,3000,3030)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(33,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/vec_map.move:78:9+30
    assume {:print "$track_return(33,13,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_map.move:79:5+1
    assume {:print "$at(5,3035,3036)"} true;
L1:

    // return $t2 at ./sources/vec_map.move:79:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_map.move:79:5+1
L2:

    // abort($t3) at ./sources/vec_map.move:79:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vec_map::size [verification] at ./sources/vec_map.move:77:5+99
procedure {:timeLimit 40} $2_vec_map_size$verify(_$t0: $2_vec_map_VecMap'#0_#1') returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec ($2_vec_map_Entry'#0_#1');
    var $t2: int;
    var $t3: int;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:77:5+1
    assume {:print "$at(5,2937,2938)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // trace_local[self]($t0) at ./sources/vec_map.move:77:5+1
    assume {:print "$track_local(33,13,0):", $t0} $t0 == $t0;

    // $t1 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:78:24+14
    assume {:print "$at(5,3015,3029)"} true;
    $t1 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // $t2 := vector::length<vec_map::Entry<#0, #1>>($t1) on_abort goto L2 with $t3 at ./sources/vec_map.move:78:9+30
    call $t2 := $1_vector_length'$2_vec_map_Entry'#0_#1''($t1);
    if ($abort_flag) {
        assume {:print "$at(5,3000,3030)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(33,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at ./sources/vec_map.move:78:9+30
    assume {:print "$track_return(33,13,0):", $t2} $t2 == $t2;

    // label L1 at ./sources/vec_map.move:79:5+1
    assume {:print "$at(5,3035,3036)"} true;
L1:

    // return $t2 at ./sources/vec_map.move:79:5+1
    $ret0 := $t2;
    return;

    // label L2 at ./sources/vec_map.move:79:5+1
L2:

    // abort($t3) at ./sources/vec_map.move:79:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun vec_map::get [verification] at ./sources/vec_map.move:65:5+183
procedure {:timeLimit 40} $2_vec_map_get$verify(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: #0) returns ($ret0: #1)
{
    // declare local variables
    var $t2: $2_vec_map_Entry'#0_#1';
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: Vec ($2_vec_map_Entry'#0_#1');
    var $t7: $2_vec_map_Entry'#0_#1';
    var $t8: #1;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_Entry'#0_#1'': $2_vec_map_Entry'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:65:5+1
    assume {:print "$at(5,2496,2497)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // assume WellFormed($t1) at ./sources/vec_map.move:65:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:65:5+1
    assume {:print "$track_local(33,3,0):", $t0} $t0 == $t0;

    // trace_local[key]($t1) at ./sources/vec_map.move:65:5+1
    assume {:print "$track_local(33,3,1):", $t1} $t1 == $t1;

    // $t4 := vec_map::get_idx<#0, #1>($t0, $t1) on_abort goto L2 with $t5 at ./sources/vec_map.move:66:19+18
    assume {:print "$at(5,2576,2594)"} true;
    call $t4 := $2_vec_map_get_idx'#0_#1'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,2576,2594)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[idx]($t4) at ./sources/vec_map.move:66:13+3
    assume {:print "$track_local(33,3,3):", $t4} $t4 == $t4;

    // $t6 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:67:36+14
    assume {:print "$at(5,2631,2645)"} true;
    $t6 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // $t7 := vector::borrow<vec_map::Entry<#0, #1>>($t6, $t4) on_abort goto L2 with $t5 at ./sources/vec_map.move:67:21+35
    call $t7 := $1_vector_borrow'$2_vec_map_Entry'#0_#1''($t6, $t4);
    if ($abort_flag) {
        assume {:print "$at(5,2616,2651)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,3):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[entry]($t7) at ./sources/vec_map.move:67:13+5
    assume {:print "$track_local(33,3,2):", $t7} $t7 == $t7;

    // $t8 := get_field<vec_map::Entry<#0, #1>>.value($t7) at ./sources/vec_map.move:68:9+12
    assume {:print "$at(5,2661,2673)"} true;
    $t8 := $value#$2_vec_map_Entry'#0_#1'($t7);

    // trace_return[0]($t8) at ./sources/vec_map.move:68:9+12
    assume {:print "$track_return(33,3,0):", $t8} $t8 == $t8;

    // label L1 at ./sources/vec_map.move:69:5+1
    assume {:print "$at(5,2678,2679)"} true;
L1:

    // return $t8 at ./sources/vec_map.move:69:5+1
    $ret0 := $t8;
    return;

    // label L2 at ./sources/vec_map.move:69:5+1
L2:

    // abort($t5) at ./sources/vec_map.move:69:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun vec_map::get_entry_by_idx [verification] at ./sources/vec_map.move:138:5+234
procedure {:timeLimit 40} $2_vec_map_get_entry_by_idx$verify(_$t0: $2_vec_map_VecMap'#0_#1', _$t1: int) returns ($ret0: #0, $ret1: #1)
{
    // declare local variables
    var $t2: $2_vec_map_Entry'#0_#1';
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: Vec ($2_vec_map_Entry'#0_#1');
    var $t8: $2_vec_map_Entry'#0_#1';
    var $t9: #0;
    var $t10: #1;
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $t1: int;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_Entry'#0_#1'': $2_vec_map_Entry'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:138:5+1
    assume {:print "$at(5,5482,5483)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // assume WellFormed($t1) at ./sources/vec_map.move:138:5+1
    assume $IsValid'u64'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:138:5+1
    assume {:print "$track_local(33,4,0):", $t0} $t0 == $t0;

    // trace_local[idx]($t1) at ./sources/vec_map.move:138:5+1
    assume {:print "$track_local(33,4,1):", $t1} $t1 == $t1;

    // $t3 := vec_map::size<#0, #1>($t0) on_abort goto L3 with $t4 at ./sources/vec_map.move:139:23+10
    assume {:print "$at(5,5587,5597)"} true;
    call $t3 := $2_vec_map_size'#0_#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(5,5587,5597)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,4):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := <($t1, $t3) at ./sources/vec_map.move:139:21+1
    call $t5 := $Lt($t1, $t3);

    // if ($t5) goto L0 else goto L1 at ./sources/vec_map.move:139:9+44
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_map.move:139:9+44
L1:

    // destroy($t0) at ./sources/vec_map.move:139:9+44

    // $t6 := 3 at ./sources/vec_map.move:139:35+17
    $t6 := 3;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at ./sources/vec_map.move:139:9+44
    assume {:print "$at(5,5573,5617)"} true;
    assume {:print "$track_abort(33,4):", $t6} $t6 == $t6;

    // $t4 := move($t6) at ./sources/vec_map.move:139:9+44
    $t4 := $t6;

    // goto L3 at ./sources/vec_map.move:139:9+44
    goto L3;

    // label L0 at ./sources/vec_map.move:140:37+4
    assume {:print "$at(5,5655,5659)"} true;
L0:

    // $t7 := get_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:140:36+14
    $t7 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // $t8 := vector::borrow<vec_map::Entry<#0, #1>>($t7, $t1) on_abort goto L3 with $t4 at ./sources/vec_map.move:140:21+35
    call $t8 := $1_vector_borrow'$2_vec_map_Entry'#0_#1''($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,5639,5674)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(33,4):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_local[entry]($t8) at ./sources/vec_map.move:140:13+5
    assume {:print "$track_local(33,4,2):", $t8} $t8 == $t8;

    // $t9 := get_field<vec_map::Entry<#0, #1>>.key($t8) at ./sources/vec_map.move:141:10+10
    assume {:print "$at(5,5685,5695)"} true;
    $t9 := $key#$2_vec_map_Entry'#0_#1'($t8);

    // $t10 := get_field<vec_map::Entry<#0, #1>>.value($t8) at ./sources/vec_map.move:141:22+12
    $t10 := $value#$2_vec_map_Entry'#0_#1'($t8);

    // trace_return[0]($t9) at ./sources/vec_map.move:141:9+26
    assume {:print "$track_return(33,4,0):", $t9} $t9 == $t9;

    // trace_return[1]($t10) at ./sources/vec_map.move:141:9+26
    assume {:print "$track_return(33,4,1):", $t10} $t10 == $t10;

    // label L2 at ./sources/vec_map.move:142:5+1
    assume {:print "$at(5,5715,5716)"} true;
L2:

    // return ($t9, $t10) at ./sources/vec_map.move:142:5+1
    $ret0 := $t9;
    $ret1 := $t10;
    return;

    // label L3 at ./sources/vec_map.move:142:5+1
L3:

    // abort($t4) at ./sources/vec_map.move:142:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun vec_map::get_entry_by_idx_mut [verification] at ./sources/vec_map.move:147:5+258
procedure {:timeLimit 40} $2_vec_map_get_entry_by_idx_mut$verify(_$t0: $Mutation ($2_vec_map_VecMap'#0_#1'), _$t1: int) returns ($ret0: #0, $ret1: $Mutation (#1), $ret2: $Mutation ($2_vec_map_VecMap'#0_#1'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_map_Entry'#0_#1');
    var $t3: $2_vec_map_VecMap'#0_#1';
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation (Vec ($2_vec_map_Entry'#0_#1'));
    var $t9: $Mutation ($2_vec_map_Entry'#0_#1');
    var $t10: #0;
    var $t11: $Mutation (#1);
    var $t0: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t1: int;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_Entry'#0_#1'': $2_vec_map_Entry'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t11));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:147:5+1
    assume {:print "$at(5,6014,6015)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/vec_map.move:147:5+1
    assume $IsValid'u64'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:147:5+1
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,5,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[idx]($t1) at ./sources/vec_map.move:147:5+1
    assume {:print "$track_local(33,5,1):", $t1} $t1 == $t1;

    // $t3 := read_ref($t0) at ./sources/vec_map.move:148:28+4
    assume {:print "$at(5,6136,6140)"} true;
    $t3 := $Dereference($t0);

    // $t4 := vec_map::size<#0, #1>($t3) on_abort goto L3 with $t5 at ./sources/vec_map.move:148:23+10
    call $t4 := $2_vec_map_size'#0_#1'($t3);
    if ($abort_flag) {
        assume {:print "$at(5,6131,6141)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,5):", $t5} $t5 == $t5;
        goto L3;
    }

    // $t6 := <($t1, $t4) at ./sources/vec_map.move:148:21+1
    call $t6 := $Lt($t1, $t4);

    // if ($t6) goto L0 else goto L1 at ./sources/vec_map.move:148:9+44
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at ./sources/vec_map.move:148:9+44
L1:

    // destroy($t0) at ./sources/vec_map.move:148:9+44

    // $t7 := 3 at ./sources/vec_map.move:148:35+17
    $t7 := 3;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at ./sources/vec_map.move:148:9+44
    assume {:print "$at(5,6117,6161)"} true;
    assume {:print "$track_abort(33,5):", $t7} $t7 == $t7;

    // $t5 := move($t7) at ./sources/vec_map.move:148:9+44
    $t5 := $t7;

    // goto L3 at ./sources/vec_map.move:148:9+44
    goto L3;

    // label L0 at ./sources/vec_map.move:149:45+4
    assume {:print "$at(5,6207,6211)"} true;
L0:

    // $t8 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:149:40+18
    $t8 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'#0_#1'($Dereference($t0)));

    // $t9 := vector::borrow_mut<vec_map::Entry<#0, #1>>($t8, $t1) on_abort goto L3 with $t5 at ./sources/vec_map.move:149:21+43
    call $t9,$t8 := $1_vector_borrow_mut'$2_vec_map_Entry'#0_#1''($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,6183,6226)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(33,5):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_local[entry]($t9) at ./sources/vec_map.move:149:13+5
    $temp_0'$2_vec_map_Entry'#0_#1'' := $Dereference($t9);
    assume {:print "$track_local(33,5,2):", $temp_0'$2_vec_map_Entry'#0_#1''} $temp_0'$2_vec_map_Entry'#0_#1'' == $temp_0'$2_vec_map_Entry'#0_#1'';

    // $t10 := get_field<vec_map::Entry<#0, #1>>.key($t9) at ./sources/vec_map.move:150:10+10
    assume {:print "$at(5,6237,6247)"} true;
    $t10 := $key#$2_vec_map_Entry'#0_#1'($Dereference($t9));

    // $t11 := borrow_field<vec_map::Entry<#0, #1>>.value($t9) at ./sources/vec_map.move:150:22+16
    $t11 := $ChildMutation($t9, 1, $value#$2_vec_map_Entry'#0_#1'($Dereference($t9)));

    // trace_return[0]($t10) at ./sources/vec_map.move:150:9+30
    assume {:print "$track_return(33,5,0):", $t10} $t10 == $t10;

    // trace_return[1]($t11) at ./sources/vec_map.move:150:9+30
    $temp_0'#1' := $Dereference($t11);
    assume {:print "$track_return(33,5,1):", $temp_0'#1'} $temp_0'#1' == $temp_0'#1';

    // trace_local[self]($t0) at ./sources/vec_map.move:150:9+30
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,5,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[self]($t0) at ./sources/vec_map.move:150:9+30
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,5,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // label L2 at ./sources/vec_map.move:151:5+1
    assume {:print "$at(5,6271,6272)"} true;
L2:

    // return ($t10, $t11) at ./sources/vec_map.move:151:5+1
    $ret0 := $t10;
    $ret1 := $t11;
    $ret2 := $t0;
    return;

    // label L3 at ./sources/vec_map.move:151:5+1
L3:

    // abort($t5) at ./sources/vec_map.move:151:5+1
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun vec_map::get_mut [verification] at ./sources/vec_map.move:57:5+207
procedure {:timeLimit 40} $2_vec_map_get_mut$verify(_$t0: $Mutation ($2_vec_map_VecMap'#0_#1'), _$t1: #0) returns ($ret0: $Mutation (#1), $ret1: $Mutation ($2_vec_map_VecMap'#0_#1'))
{
    // declare local variables
    var $t2: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t3: #0;
    var $t4: $Mutation ($2_vec_map_Entry'#0_#1');
    var $t5: int;
    var $t6: $2_vec_map_VecMap'#0_#1';
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (Vec ($2_vec_map_Entry'#0_#1'));
    var $t10: $Mutation ($2_vec_map_Entry'#0_#1');
    var $t11: $Mutation (#1);
    var $t0: $Mutation ($2_vec_map_VecMap'#0_#1');
    var $t1: #0;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_Entry'#0_#1'': $2_vec_map_Entry'#0_#1';
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t4));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t11));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:57:5+1
    assume {:print "$at(5,2172,2173)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($Dereference($t0));

    // assume WellFormed($t1) at ./sources/vec_map.move:57:5+1
    assume $IsValid'#0'($t1);

    // trace_local[self]($t0) at ./sources/vec_map.move:57:5+1
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,8,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[key]($t1) at ./sources/vec_map.move:57:5+1
    assume {:print "$track_local(33,8,1):", $t1} $t1 == $t1;

    // $t6 := read_ref($t0) at ./sources/vec_map.move:58:26+11
    assume {:print "$at(5,2271,2282)"} true;
    $t6 := $Dereference($t0);

    // $t7 := vec_map::get_idx<#0, #1>($t6, $t1) on_abort goto L2 with $t8 at ./sources/vec_map.move:58:19+18
    call $t7 := $2_vec_map_get_idx'#0_#1'($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(5,2264,2282)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(33,8):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[idx]($t7) at ./sources/vec_map.move:58:13+3
    assume {:print "$track_local(33,8,5):", $t7} $t7 == $t7;

    // $t9 := borrow_field<vec_map::VecMap<#0, #1>>.contents($t0) at ./sources/vec_map.move:59:40+18
    assume {:print "$at(5,2323,2341)"} true;
    $t9 := $ChildMutation($t0, 0, $contents#$2_vec_map_VecMap'#0_#1'($Dereference($t0)));

    // $t10 := vector::borrow_mut<vec_map::Entry<#0, #1>>($t9, $t7) on_abort goto L2 with $t8 at ./sources/vec_map.move:59:21+43
    call $t10,$t9 := $1_vector_borrow_mut'$2_vec_map_Entry'#0_#1''($t9, $t7);
    if ($abort_flag) {
        assume {:print "$at(5,2304,2347)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(33,8):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[entry]($t10) at ./sources/vec_map.move:59:13+5
    $temp_0'$2_vec_map_Entry'#0_#1'' := $Dereference($t10);
    assume {:print "$track_local(33,8,4):", $temp_0'$2_vec_map_Entry'#0_#1''} $temp_0'$2_vec_map_Entry'#0_#1'' == $temp_0'$2_vec_map_Entry'#0_#1'';

    // $t11 := borrow_field<vec_map::Entry<#0, #1>>.value($t10) at ./sources/vec_map.move:60:9+16
    assume {:print "$at(5,2357,2373)"} true;
    $t11 := $ChildMutation($t10, 1, $value#$2_vec_map_Entry'#0_#1'($Dereference($t10)));

    // trace_return[0]($t11) at ./sources/vec_map.move:60:9+16
    $temp_0'#1' := $Dereference($t11);
    assume {:print "$track_return(33,8,0):", $temp_0'#1'} $temp_0'#1' == $temp_0'#1';

    // trace_local[self]($t0) at ./sources/vec_map.move:60:9+16
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,8,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // trace_local[self]($t0) at ./sources/vec_map.move:60:9+16
    $temp_0'$2_vec_map_VecMap'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(33,8,0):", $temp_0'$2_vec_map_VecMap'#0_#1''} $temp_0'$2_vec_map_VecMap'#0_#1'' == $temp_0'$2_vec_map_VecMap'#0_#1'';

    // label L1 at ./sources/vec_map.move:61:5+1
    assume {:print "$at(5,2378,2379)"} true;
L1:

    // return $t11 at ./sources/vec_map.move:61:5+1
    $ret0 := $t11;
    $ret1 := $t0;
    return;

    // label L2 at ./sources/vec_map.move:61:5+1
L2:

    // abort($t8) at ./sources/vec_map.move:61:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun vec_map::into_keys_values [verification] at ./sources/vec_map.move:95:5+690
procedure {:timeLimit 40} $2_vec_map_into_keys_values$verify(_$t0: $2_vec_map_VecMap'#0_#1') returns ($ret0: Vec (#0), $ret1: Vec (#1))
{
    // declare local variables
    var $t1: Vec ($2_vec_map_Entry'#0_#1');
    var $t2: int;
    var $t3: #0;
    var $t4: Vec (#0);
    var $t5: int;
    var $t6: #1;
    var $t7: Vec (#1);
    var $t8: $Mutation (Vec ($2_vec_map_Entry'#0_#1'));
    var $t9: int;
    var $t10: int;
    var $t11: Vec ($2_vec_map_Entry'#0_#1');
    var $t12: int;
    var $t13: bool;
    var $t14: $2_vec_map_Entry'#0_#1';
    var $t15: #0;
    var $t16: #1;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation (Vec ($2_vec_map_Entry'#0_#1'));
    var $t20: $Mutation (Vec (#0));
    var $t21: $Mutation (Vec (#1));
    var $t22: Vec ($2_vec_map_Entry'#0_#1');
    var $t23: Vec (#0);
    var $t24: Vec (#1);
    var $t0: $2_vec_map_VecMap'#0_#1';
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$2_vec_map_VecMap'#0_#1'': $2_vec_map_VecMap'#0_#1';
    var $temp_0'u64': int;
    var $temp_0'vec'#0'': Vec (#0);
    var $temp_0'vec'#1'': Vec (#1);
    var $temp_0'vec'$2_vec_map_Entry'#0_#1''': Vec ($2_vec_map_Entry'#0_#1');
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t19));
    assume IsEmptyVec(p#$Mutation($t20));
    assume IsEmptyVec(p#$Mutation($t21));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at ./sources/vec_map.move:95:5+1
    assume {:print "$at(5,3618,3619)"} true;
    assume $IsValid'$2_vec_map_VecMap'#0_#1''($t0);

    // trace_local[self]($t0) at ./sources/vec_map.move:95:5+1
    assume {:print "$track_local(33,10,0):", $t0} $t0 == $t0;

    // $t1 := unpack vec_map::VecMap<#0, #1>($t0) at ./sources/vec_map.move:96:13+19
    assume {:print "$at(5,3716,3735)"} true;
    $t1 := $contents#$2_vec_map_VecMap'#0_#1'($t0);

    // trace_local[contents]($t1) at ./sources/vec_map.move:96:22+8
    assume {:print "$track_local(33,10,1):", $t1} $t1 == $t1;

    // $t8 := borrow_local($t1) at ./sources/vec_map.move:98:25+13
    assume {:print "$at(5,3859,3872)"} true;
    $t8 := $Mutation($Local(1), EmptyVec(), $t1);

    // vector::reverse<vec_map::Entry<#0, #1>>($t8) on_abort goto L6 with $t9 at ./sources/vec_map.move:98:9+30
    call $t8 := $1_vector_reverse'$2_vec_map_Entry'#0_#1''($t8);
    if ($abort_flag) {
        assume {:print "$at(5,3843,3873)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // write_back[LocalRoot($t1)@]($t8) at ./sources/vec_map.move:98:9+30
    $t1 := $Dereference($t8);

    // trace_local[contents]($t1) at ./sources/vec_map.move:98:9+30
    assume {:print "$track_local(33,10,1):", $t1} $t1 == $t1;

    // $t10 := 0 at ./sources/vec_map.move:99:17+1
    assume {:print "$at(5,3891,3892)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_local[i]($t10) at ./sources/vec_map.move:99:13+1
    assume {:print "$track_local(33,10,2):", $t10} $t10 == $t10;

    // $t11 := copy($t1) at ./sources/vec_map.move:100:32+9
    assume {:print "$at(5,3925,3934)"} true;
    $t11 := $t1;

    // $t12 := vector::length<vec_map::Entry<#0, #1>>($t11) on_abort goto L6 with $t9 at ./sources/vec_map.move:100:17+25
    call $t12 := $1_vector_length'$2_vec_map_Entry'#0_#1''($t11);
    if ($abort_flag) {
        assume {:print "$at(5,3910,3935)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[n]($t12) at ./sources/vec_map.move:100:13+1
    assume {:print "$track_local(33,10,5):", $t12} $t12 == $t12;

    // $t4 := vector::empty<#0>() on_abort goto L6 with $t9 at ./sources/vec_map.move:101:20+15
    assume {:print "$at(5,3956,3971)"} true;
    call $t4 := $1_vector_empty'#0'();
    if ($abort_flag) {
        assume {:print "$at(5,3956,3971)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[keys]($t4) at ./sources/vec_map.move:101:13+4
    assume {:print "$track_local(33,10,4):", $t4} $t4 == $t4;

    // $t7 := vector::empty<#1>() on_abort goto L6 with $t9 at ./sources/vec_map.move:102:22+15
    assume {:print "$at(5,3994,4009)"} true;
    call $t7 := $1_vector_empty'#1'();
    if ($abort_flag) {
        assume {:print "$at(5,3994,4009)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[values]($t7) at ./sources/vec_map.move:102:13+6
    assume {:print "$track_local(33,10,7):", $t7} $t7 == $t7;

    // label L3 at ./sources/vec_map.move:103:16+1
    assume {:print "$at(5,4026,4027)"} true;
L3:

    // havoc[val]($t1) at ./sources/vec_map.move:103:16+1
    havoc $t1;
    assume $IsValid'vec'$2_vec_map_Entry'#0_#1'''($t1);

    // havoc[val]($t10) at ./sources/vec_map.move:103:16+1
    havoc $t10;
    assume $IsValid'u64'($t10);

    // havoc[val]($t4) at ./sources/vec_map.move:103:16+1
    havoc $t4;
    assume $IsValid'vec'#0''($t4);

    // havoc[val]($t7) at ./sources/vec_map.move:103:16+1
    havoc $t7;
    assume $IsValid'vec'#1''($t7);

    // havoc[val]($t13) at ./sources/vec_map.move:103:16+1
    havoc $t13;
    assume $IsValid'bool'($t13);

    // havoc[val]($t14) at ./sources/vec_map.move:103:16+1
    havoc $t14;
    assume $IsValid'$2_vec_map_Entry'#0_#1''($t14);

    // havoc[val]($t15) at ./sources/vec_map.move:103:16+1
    havoc $t15;
    assume $IsValid'#0'($t15);

    // havoc[val]($t16) at ./sources/vec_map.move:103:16+1
    havoc $t16;
    assume $IsValid'#1'($t16);

    // havoc[val]($t17) at ./sources/vec_map.move:103:16+1
    havoc $t17;
    assume $IsValid'u64'($t17);

    // havoc[val]($t18) at ./sources/vec_map.move:103:16+1
    havoc $t18;
    assume $IsValid'u64'($t18);

    // havoc[mut_all]($t19) at ./sources/vec_map.move:103:16+1
    havoc $t19;
    assume $IsValid'vec'$2_vec_map_Entry'#0_#1'''($Dereference($t19));

    // havoc[mut_all]($t20) at ./sources/vec_map.move:103:16+1
    havoc $t20;
    assume $IsValid'vec'#0''($Dereference($t20));

    // havoc[mut_all]($t21) at ./sources/vec_map.move:103:16+1
    havoc $t21;
    assume $IsValid'vec'#1''($Dereference($t21));

    // trace_local[contents]($t1) at ./sources/vec_map.move:103:16+1
    assume {:print "$info(): enter loop, variable(s) contents, i, keys, values havocked and reassigned"} true;
    assume {:print "$track_local(33,10,1):", $t1} $t1 == $t1;

    // trace_local[i]($t10) at ./sources/vec_map.move:103:16+1
    assume {:print "$track_local(33,10,2):", $t10} $t10 == $t10;

    // trace_local[keys]($t4) at ./sources/vec_map.move:103:16+1
    assume {:print "$track_local(33,10,4):", $t4} $t4 == $t4;

    // trace_local[values]($t7) at ./sources/vec_map.move:103:16+1
    assume {:print "$track_local(33,10,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at ./sources/vec_map.move:103:16+1
    assume !$abort_flag;

    // $t13 := <($t10, $t12) at ./sources/vec_map.move:103:18+1
    call $t13 := $Lt($t10, $t12);

    // if ($t13) goto L0 else goto L2 at ./sources/vec_map.move:103:9+218
    if ($t13) { goto L0; } else { goto L2; }

    // label L0 at ./sources/vec_map.move:104:57+13
    assume {:print "$at(5,4091,4104)"} true;
L0:

    // $t19 := borrow_local($t1) at ./sources/vec_map.move:104:57+13
    $t19 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t14 := vector::pop_back<vec_map::Entry<#0, #1>>($t19) on_abort goto L6 with $t9 at ./sources/vec_map.move:104:40+31
    call $t14,$t19 := $1_vector_pop_back'$2_vec_map_Entry'#0_#1''($t19);
    if ($abort_flag) {
        assume {:print "$at(5,4074,4105)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // write_back[LocalRoot($t1)@]($t19) at ./sources/vec_map.move:104:40+31
    $t1 := $Dereference($t19);

    // trace_local[contents]($t1) at ./sources/vec_map.move:104:40+31
    assume {:print "$track_local(33,10,1):", $t1} $t1 == $t1;

    // ($t15, $t16) := unpack vec_map::Entry<#0, #1>($t14) at ./sources/vec_map.move:104:17+20
    $t15 := $key#$2_vec_map_Entry'#0_#1'($t14);
    $t16 := $value#$2_vec_map_Entry'#0_#1'($t14);

    // trace_local[value]($t16) at ./sources/vec_map.move:104:30+5
    assume {:print "$track_local(33,10,6):", $t16} $t16 == $t16;

    // trace_local[key]($t15) at ./sources/vec_map.move:104:25+3
    assume {:print "$track_local(33,10,3):", $t15} $t15 == $t15;

    // $t20 := borrow_local($t4) at ./sources/vec_map.move:105:31+9
    assume {:print "$at(5,4137,4146)"} true;
    $t20 := $Mutation($Local(4), EmptyVec(), $t4);

    // vector::push_back<#0>($t20, $t15) on_abort goto L6 with $t9 at ./sources/vec_map.move:105:13+33
    call $t20 := $1_vector_push_back'#0'($t20, $t15);
    if ($abort_flag) {
        assume {:print "$at(5,4119,4152)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // write_back[LocalRoot($t4)@]($t20) at ./sources/vec_map.move:105:13+33
    $t4 := $Dereference($t20);

    // trace_local[keys]($t4) at ./sources/vec_map.move:105:13+33
    assume {:print "$track_local(33,10,4):", $t4} $t4 == $t4;

    // $t21 := borrow_local($t7) at ./sources/vec_map.move:106:31+11
    assume {:print "$at(5,4184,4195)"} true;
    $t21 := $Mutation($Local(7), EmptyVec(), $t7);

    // vector::push_back<#1>($t21, $t16) on_abort goto L6 with $t9 at ./sources/vec_map.move:106:13+37
    call $t21 := $1_vector_push_back'#1'($t21, $t16);
    if ($abort_flag) {
        assume {:print "$at(5,4166,4203)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // write_back[LocalRoot($t7)@]($t21) at ./sources/vec_map.move:106:13+37
    $t7 := $Dereference($t21);

    // trace_local[values]($t7) at ./sources/vec_map.move:106:13+37
    assume {:print "$track_local(33,10,7):", $t7} $t7 == $t7;

    // $t17 := 1 at ./sources/vec_map.move:107:21+1
    assume {:print "$at(5,4225,4226)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t10, $t17) on_abort goto L6 with $t9 at ./sources/vec_map.move:107:19+1
    call $t18 := $AddU64($t10, $t17);
    if ($abort_flag) {
        assume {:print "$at(5,4223,4224)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[i]($t18) at ./sources/vec_map.move:107:13+1
    assume {:print "$track_local(33,10,2):", $t18} $t18 == $t18;

    // goto L4 at ./sources/vec_map.move:107:22+1
    goto L4;

    // label L2 at ./sources/vec_map.move:109:31+8
    assume {:print "$at(5,4269,4277)"} true;
L2:

    // $t22 := move($t1) at ./sources/vec_map.move:109:31+8
    $t22 := $t1;

    // vector::destroy_empty<vec_map::Entry<#0, #1>>($t22) on_abort goto L6 with $t9 at ./sources/vec_map.move:109:9+31
    call $1_vector_destroy_empty'$2_vec_map_Entry'#0_#1''($t22);
    if ($abort_flag) {
        assume {:print "$at(5,4247,4278)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(33,10):", $t9} $t9 == $t9;
        goto L6;
    }

    // $t23 := move($t4) at ./sources/vec_map.move:110:10+4
    assume {:print "$at(5,4289,4293)"} true;
    $t23 := $t4;

    // $t24 := move($t7) at ./sources/vec_map.move:110:16+6
    $t24 := $t7;

    // trace_return[0]($t23) at ./sources/vec_map.move:110:9+14
    assume {:print "$track_return(33,10,0):", $t23} $t23 == $t23;

    // trace_return[1]($t24) at ./sources/vec_map.move:110:9+14
    assume {:print "$track_return(33,10,1):", $t24} $t24 == $t24;

    // goto L5 at ./sources/vec_map.move:110:9+14
    goto L5;

    // label L4 at ./sources/vec_map.move:109:31+8
    // Loop invariant checking block for the loop started with header: L3
    assume {:print "$at(5,4269,4277)"} true;
L4:

    // stop() at ./sources/vec_map.move:109:31+8
    assume false;
    return;

    // label L5 at ./sources/vec_map.move:111:5+1
    assume {:print "$at(5,4307,4308)"} true;
L5:

    // return ($t23, $t24) at ./sources/vec_map.move:111:5+1
    $ret0 := $t23;
    $ret1 := $t24;
    return;

    // label L6 at ./sources/vec_map.move:111:5+1
L6:

    // abort($t9) at ./sources/vec_map.move:111:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}
